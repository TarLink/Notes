JavaScript:
  - sync:
     - inline <script>
     - <script src>
  - async:
     - how:
        - <script src async>
        - dynamically added <script src> 
     - problem: when script uses DOM
     - fixes (aside from using sync):
        - <script src defer> 
        - DOMContentLoaded 
        - (deprecated) <script> at end of <body>

CSS:
  - sync:
     - <style>
     - CSS <link> 
        - parsing blocked at next <script> 
        - rendering blocked right away
        - exceptions:
           - Safari: parsing blocked right away
           - Firefox: 
              - rendering not blocked if in <body>
              - fix: adding empty <script> after CSS <link>
  - async:
     - how:
        - dynamically added CSS <link>
        - <link rel="preload" url="URL.css" as="style" onload="this.rel = 'stylesheet';">
     - problems:
        - (parsing) when script uses CSSOM
        - (rendering) FOUC (Flash Or Unstyled Content):
           - shows unstyled HTML (only if visible on viewport)
           - makes DOM jumping around
     - fixes (aside from using sync):
        - (rendering) temporarily display: none on related HTML


Others:
  - async:
     - <img|video|audio|object|iframe|svg>: 
        - can listen to load event

Performance:
  - async is best
  - shoud group HTML|CSS|JavaScript into components to defer sync
     - above the fold / critical path CSS:
        - make first displayed DOM's CSS sync (e.g. using <link> in <head>), other CSS async
        - rougher approach to components-approach when not possible


Concatenation, inlining -> bad practice with HTTP/2
