<img|video|audio|object|iframe|svg>: 
  - does not block (might take long)
  - can listen to load event

<style>, inline <style>: 
  - block parsing (is directly parsed)
  - consider using external files instead if requires async (e.g. big)

Dynamically added <script src> or CSS <link>:
  - does not block parsing nor rendering (already parsed)

<script src>:
  - if async|defer: does not block parsing (let developer chose)
  - otherwise: block parsing

CSS <link>:
  - Parsing:
     - blocked at next <script> (because <script> might use CSSOM)
  - Rendering:
     - in <head>: blocked (upfront dependency)
     - in <body>: block after (not before) (component dependency)
  - Exceptions:
     - Safari: block parsing and rendering under any condition, including dynamically adding
     - Firefox, in <body>: 
        - does not block rendering after nor before
        - can fix it by adding empty <script> just after <link> to block parsing (hence blocking rendering)

Performance problem:
  - on one side, parallel/async is best
  - on the other side, serial/sync is sometimes needed:
     - when:
        - CSS -> HTML: 
           - showing unstyled HTML is ugly and leads to FOUC (Flash of unstyled content), i.e. DOM jumping around
           - fixes:
              - block HTML parsing
              - async load CSS (e.g. dynamically adding it), temporarily putting display: none on related HTML
        - HTML -> JavaScript:
           - when script uses DOM
           - fix: use "defer" or DOMContentLoaded or (older trick) <script> at end of <body>
        - CSS -> JavaScript:
           - when script uses CSSOM
     - should group into components so that CSS/HTML only delay the HTML/JavaSript it depends on
        - above the fold / critical path CSS:
           - make first displayed DOM's CSS sync (e.g. using <link> in <head>), other CSS async
           - when components not possible (rougher approach)




Check if concatenation really does not make sense anymore with HTTP2

Check https://www.keycdn.com/blog/resource-hints/
