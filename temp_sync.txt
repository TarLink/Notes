<img|video|audio|object|iframe|svg>: 
  - does not block (might take long)
  - can listen to load event

<style>, inline <style>: 
  - block parsing (is directly parsed)
  - consider using external files instead if requires async (e.g. big)

Dynamically added <script src> or CSS <link>:
  - does not block parsing nor rendering (already parsed)

<script src>:
  - if async|defer: does not block parsing (let developer chose)
  - otherwise: block parsing

CSS <link>:
  - Parsing:
     - blocked at next <script> (because <script> might use CSSOM)
  - Rendering:
     - in <head>: blocked (upfront dependency)
     - in <body>: block after (not before) (component dependency)
  - Exceptions:
     - Safari: block parsing and rendering under any condition, including dynamically adding
     - Firefox, in <body>: 
        - does not block rendering after nor before
        - can fix it by adding empty <script> just after <link> to block parsing (hence blocking rendering)



Above the fold / critical path css:
  - when rendering blocked, add important CSS (i.e. first DOM element) with <style> (i.e. sync), put temporary diplay: none on rest, then use library to load CSS async

Problem with async:
  - if more than one CSS file, DOM will jump around

One CSS file by component:
  - possible with HTTP2

FOUC: flash of unstyled content. Should never show DOM without its CSS loaded. It is ugly and it make page jumo around.

<script> at the end of <body>: old trick before "defer" was available
