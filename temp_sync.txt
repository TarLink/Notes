<img|video|audio|object|iframe|svg>: 
  - does not block (because might take long)
  - can listen to load event

<style>, inline <script>: 
  - block parsing (because is directly parsed)
  - consider using CSS <link> or <script src> instead if requires async (e.g. big)

Dynamically added <script src> or CSS <link>:
  - does not block parsing nor rendering

<script src>:
  - if async|defer: does not block parsing
  - otherwise: block parsing

CSS <link>:
  - Parsing:
     - blocked at next <script> (because <script> might use CSSOM)
  - Rendering:
     - in <head>: blocked (upfront dependency)
     - in <body>: block after (not before) (component dependency)
  - Exceptions:
     - Safari: block parsing and rendering under any condition, including dynamically adding
     - Firefox, in <body>: 
        - does not block rendering (neither after nor before)
        - can fix it by adding empty <script> just after <link> to block parsing (hence blocking rendering)

Blocking parsing -> blocking rendering after (not after)

Async load CSS:
  - dynamically adding CSS <link>
  - <link rel="preload" url="URL.css" as="style" onload="this.rel = 'stylesheet';">

Performance problem:
  - should try parallel/async when possible, but sometimes serial/sync is needed:
     - CSS -> HTML: 
        - FOUC (Flash Or Unstyled Content):
           - showing unstyled HTML is ugly, and DOM jumping around
           - only happens when:
              - CSS <link> in <body> (Firefox): should add empty <script> after <link>
              - dynamically added CSS <link>: should use <style> instead
        - possible fixes for all that does not block parsing: async load CSS + display: none to related HTML
     - HTML -> JavaScript:
        - when script uses DOM
        - possible fixes: 
           - "defer" 
           - DOMContentLoaded
           - (older trick) <script> at end of <body>
     - CSS -> JavaScript:
        - when script uses CSSOM
        - fixes: CSS always blocks JavaScript. 
  - if no dependency should asynchronously load CSS or JavaScript
  - should group into components so that CSS/HTML only delay the HTML/JavaScript it depends on
     - above the fold / critical path CSS:
        - make first displayed DOM's CSS sync (e.g. using <link> in <head>), other CSS async
        - rougher approach to components-approach when not possible


Concatenation, inlining -> bad practice with HTTP/2
