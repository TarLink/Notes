
          
   HTTPIE  
          



VERSION ==>                       #0.9.9
                                  #CLI HTTP[S]/1.1 client

FEATURES ==>                      #HTTP:
                                  #  - headers: Host [C], User-Agent: HTTPie/* [C], Accept-Encoding [C], Accept: */* [C],
                                  #    Connection: keep-alive [C], Content-Type [C], Content-Length [C]
                                  #  - JSON, x-www-form-urlencoded, multipart/form-data request body
                                  #  - gzip|deflate in response body
                                  #  - cookies
                                  #  - Authentication: Basic, Digest
                                  #  - redirects
                                  #File downloads
                                  #Responses streaming
                                  #Proxy

http [--OPTS] [METHOD] URL
 [QUERY_VAR==VAL ...]
 [HEADER:VAL ...]
 [BODY_VAR=STR ...]
 [JSON_BODY_VAR:=VAL ...]
 [BODY_VAR=@PATH ...]
 [JSON_BODY_VAR:=@PATH ...]
 [FORM_BODY_VAR@PATH ...]
                                  #Default METHOD: GET if no BODY_VAR, POST otherwise
                                  #URL can be ":[PORT]" for "localhost[:PORT]"
                                  #Can use stdin for request body

--default-scheme=SCHEME           #Def: 'http'

--json                            #Serialize BODY to JSON and use Accept: application/json, */* [C],
                                  #Content-Type: application/json [C]
--form                            #Serialize BODY to either:
                                  #  - Content-Type: application/x-www-form-urlencoded; charset=utf-8 [C]
                                  #  - Content-Type: multipart/form-data; boundary=BOUNDARY [C]
                                  #    if any FORM_BODY_VAR@PATH was used

--output FILE                     #Like >FILE
--download                        #With --output FILE, only prints response body
--continue                        #With --download, resume interrupted download

--all                             #Print intermediary requests (redirects, authentication intermediary requests, etc.)
--print=CHAR...                   #What to print among H (request header), B (request body), h (response header), b (response body)
                                  #Def is "hb"
--history-print=CHAR...           #Same but for intermediary requests
--headers                         #Same as --print=h
--body                            #Same as --print=b
--verbose                         #Same as --all --print=HBhb

--stream                          #Stream the response instead of printing it all at once

--follow                          #Follow redirects
--max-redirects=NUM               #Def: 30

--timeout=NUM                     #Connection timeout. Def: 30 (in secs)

--check-status                    #Without it, exit code is 1 if network|fatal error
                                  #With it, also:
                                  #  - exit code 4|5 if response status code 4**|5**
                                  #  - exit code 3 if response status code 3** and no --follow

--pretty=all|colors|format|none   #Whether to format (e.g. JSON) and add colors (def: 'all')
--style=STYLE                     #Color scheme. I like 'monokai'

--session[-read-only]=FILE.json   #Saves and reuses cookies and auth credentials to file

--auth=USER[:PASSWORD]            #
--auth-type=basic|digest          #Def: 'basicbasic'

--proxy=SCHEME:URL                #

--verify=no|yes|FILE              #SSL server authentication (def: 'yes')
                                  #FILE is CA_BUNDLE file. Can also use ENVVAR REQUESTS_CA_BUNDLE
--ssl=ssl2.3|tls1|tls1.1|tls1.2   #Def: highest possible
--cert=FILE
--cert-key=FILE                   #Client authentication
