
               
   GRAPHQLJS   
               



VERSION ==>                       #0.9.1
                                  #Node.js implementation of GraphQL

GRAPHQL.*                         #Namespaces everything

buildSchema('DEFINITIONS')->SCHEMA

graphql(SCHEMA, 'QUERY'[, RESOLVERS][, CONTEXT][, VARIABLES][, 'OPERATION'])
                                  #  - RESOLVERS.ATTR(...)->VAL: resolve function
                                  #  - CONTEXT: request-wide object. Can be anything
                                  #  - VARIABLES OBJ: list of $VAR
                                  #  - 'OPERATION': operationName

new GraphQLSchema(OPTS)           #OPTS: query|mutation OBJTYPE


RESOLVE(RPARENT, ARGS, CONTEXT,   #Resolve function. Can be specified|overriden:
 RESINFO)->VAL                    #  - in schema definition
                                  #  - in query, server-side
                                  #  - in query, client-side, by some clients

RESINFO                           #OBJ:
                                  #  - schema, rootValue, variableValues, operation: from graphql() arguments
                                  #  - fieldName 'ATTR'
                                  #  - fieldASTs
                                  #  - returnType OUTPUTTYPE
                                  #  - parentType TYPE (composite???)
                                  #  - fragments.FRAGMENT FRAGMENTDEFINITION???


new Source('QUERY'[, 'FILE'])     #'FILE' is for debugging

getLocation(SOURCE, NUM)->OBJ     #Returns OBJ: line NUM, column NUM
                                  #I.e. after formatting

lex(SOURCE)->FUNC([NUM])->        #Calling FUNC repeatedly returns next AST_TOKEN, or EOF if none
 AST_TOKEN                        #NUM is position to seek (def: next one)
ASK_TOKEN.kind                    #Among Kind.* ???
ASK_TOKEN.value                   #STR
ASK_TOKEN.start|end               #Position NUM

parse(SOURCE|'QUERY'[, OPTS])
 ->DOCUMENT                       #For whole query
parseValue(SOURCE|STR[, OPTS])
 ->VAL                            #For part of query
                                  #Throws SyntaxError if problem

visit(AST???, OBJ, KEYMAP)
                                  #OBJ:
                                  #  - enter|leave(NODE, KEY, PARENT, PATH, ANCESTORS)


assertValidName('TYPE'[, BOOL])   #Used internally to check against all names, including 'TYPE', 'ATTR', 'ENUM_VAL', etc:
                                  #  - check regexp /^[_a-zA-Z][_a-zA-Z0-9]*$/
                                  #  - check does not start with __, unless BOOL true 
                                  #     - can ignore error with OPTS.isIntrospection true for OBJTYPE|ENUMTYPE
                                  #  - throws exception if error


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TYPES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPES ==>                         #  +-----------------+---------------+---------+---------------+-----------+------------+----------+--------------+
																	#  | NonNullModifier | ArrayModifier | OBJTYPE | INTERFACETYPE | UNIONTYPE | SCALARTYPE | ENUMTYPE | INPUTOBJTYPE |
																	#  +-------------------------------------------+---------------------------+-----------------------+--------------+
																	#  |-------------------------------------------| ABSTRACTYPE               | LEAFTYPE              |--------------|
																	#  +---------------------------------+---------+---------------------------+-----------------------+--------------+
																	#  | INPUTTYPE-1                     | COMPOSITETYPE                       | INPUTTYPE-2                          |
																	#  +---------------------------------+-------------------------------------+-----------------------+--------------+
																	#  |                                   OUTPUTTYPE                                                  |--------------|
																	#  +---------------------------------+-------------------------------------------------------------+--------------+
																	#  |---------------------------------| NAMEDTYPE                                                                  |
																	#  +-----------------+---------------+----------------------------------------------------------------------------+
																	#  |-----------------| NULLABLETYPE                                                                               |
																	#  +-----------------+--------------------------------------------------------------------------------------------+
																	#  | TYPE                                                                                                         |
																	#  +--------------------------------------------------------------------------------------------------------------+
is[Input|Output|Leaf|Composite|
Abstract|Named]Type(VAL)->BOOL    #
assert[Input|Output|Leaf|Composite
|Abstract|Named]Type(VAL)         #Throws exceptions if not

TYPE.name                         #'TYPE'. Provided by TYPE constructor's OPTS.name
                                  #Returned by TYPE.toString(), which also adds potential [] or ! modifiers
TYPE.description                  #STR

new GraphQLList(TYPE)             #ARR modifier
getNamedType(TYPE)->TYPE          #Removes NonNull|ARR modifiers, if present

new GraphQLNonNull(TYPE)          #NonNull (!) modifier
getNullableType(TYPE)->TYPE       #Removes NonNull modifier, if present

new GraphQLScalarType(OPTS)       #SCALARTYPE. Constructor is used for custom ones
                                  #OPTS:
                                  #  (server -> client)
                                  #  - serialize(VAL)->STR
                                  #  (client -> server)
                                  #  - parseValue(STR)->VAL
                                  #  - parseLiteral(AST_NODE)->VAL
                                  #VAL is of any type
                                  #Should throw TypeError if wrong input
GraphQLInt                        #INT TYPE
GraphQLFloat                      #FLOAT TYPE
GraphQLString                     #STR TYPE
GraphQLBoolean                    #BOOL TYPE
GraphQLID                         #ID TYPE

new GraphQLEnumType(OPTS)         #OPTS:
                                  #  - values.ENUM_VAL:
                                  #     - value VAL: underlying low-level value of ENUM_VAL, e.g. integer
                                  #     - description STR
                                  #     - deprecationReason STR
                                  #Server-side ENUM_NUM
                                  #GraphQL|client-side ENUM_VAL

new GraphQLObjectType(OPTS)       #OPTS:
                                  #  - fields[()].FIELD:
                                  #     - type OUTPUTTYPE
                                  #     - args.ARG:
                                  #        - type INPUTTYPE
                                  #        - defaultValue VAL
                                  #        - description STR
                                  #     - resolve(...)->VAL: resolve function
                                  #     - description STR
                                  #     - deprecationReason STR
                                  #  - interfaces[()] INTERFACETYPE_ARR
                                  #  - isTypeOf(VAL, RESINFO)->BOOL

new GraphQLInputObjectType(OPTS)  #OPTS:
                                  #  - fields[()].FIELD:
                                  #     - type INPUTTYPE
                                  #     - defaultValue VAL
                                  #     - description STR

new GraphQLInterfaceType(OPTS)    #OPTS:
                                  #  - fields: like OBJTYPE
                                  #  - resolveType(VAL, RESINFO)->OBJTYPE
                                  #     - used to determine which child type to pick

new GraphQLUnionType(OPTS)        #OPTS:
                                  #  - resolveType: like INTERFACETYPE
                                  #  - types OBJTYPE_ARR[()]
