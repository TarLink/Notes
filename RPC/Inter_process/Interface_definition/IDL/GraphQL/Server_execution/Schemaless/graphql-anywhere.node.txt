
                    
   GRAPHQL-ANYWHERE  
                    



VERSION ==>                       #2.2.0
                                  #Uses graphQL query format, but schemaless.
                                  #Good when schema is determined by client, not by server

GRAPHQLANYWHERE                   #Like GraphQL.js execute() except:
(RESOLVER, DOCUMENT_NODE          #  - no SCHEMA:
[, INITIALVALUE][, CONTEXT]       #     - use same SCHEMA as implied by query
[, VARIABLES][, OPTS])->OBJ       #     - can only specify single default RESOLVER
                                  #     - no validation
                                  #     - no typing: types are determined by resolver return value only
                                  #  - different resolver:
                                  #     - RESOLVER is FUNC('ATTR', RPARENT, ARGS, CONTEXT, RESINFO)
                                  #     - RESINFO is different and only has: isLeaf BOOL, resultKey 'ALIAS|ATTR'
                                  #  - no variables, but can use fragments, directives, query|mutation
                                  #OPTS:
                                  #  - resultMapper(OBJ, RPARENT)->OBJ:
                                  #     - transform applied to every output [sub-]OBJ
                                  #  - fragmentMatcher(RPARENT, 'TYPE', CONTEXT)->BOOL:
                                  #     - filter whether a fragment should be used
                                  #     - 'TYPE' is from '... on TYPE'

filter(DOCUMENT_NODE[, OBJ])      #Uses GRAPHQLANYWHERE with:
                                  #  - OBJ as INITIALVALUE
                                  #  - RESOLVER returning RPARENT.ALIAS|ATTR
                                  #I.e. uses graphQL to select subfields in OBJ
check(DOCUMENT_NODE[, OBJ])       #Same but:
                                  #  - throws error if RPARENT.ALIAS|ATTR not found
                                  #  - cannot use fragments
                                  #I.e. uses graphQL to check subfields existence in OBJ
propType(DOCUMENT_NODE)
 ->FUNC[.isRequired]              #Creates a React propType function that performs check(DOCUMENT_NODE, PROP_VAL)
