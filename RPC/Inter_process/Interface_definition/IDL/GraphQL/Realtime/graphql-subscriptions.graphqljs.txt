
                           
   GRAPHQL-SUBSCRIPTIONS   
                           



VERSION ==>                       #0.3.0
                                  #Implements graphQL subscriptions:
                                  #  - SubscriptionManager:
                                  #     - handles client "subscription" requests
                                  #     - push responses when desired
                                  #  - PubSubEngine is underlying event emitter interface


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:      SUBSCRIPTIONMANAGER      :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


new SubscriptionManager([OPTS])   #OPTS:
                                  #  - schema SCHEMA: must contain subscription definitions
                                  #  - pubsub PUBSUB: underlying event emitter
                                  #  - setupFunctions.CHANNEL(OPTS2, ARGS, 'EVENT')->{ EVENT: EVENT_OPTS }
                                  #     - fired on SUBMANAGER.subscribe(), to provide EVENT_OPTS
                                  #     - same OPTS2 as SUBMANAGER.subscribe()
                                  #     - ARGS: passed to EVENT(...)
                                  #EVENT_OPTS:
                                  #  - filter(PAYLOAD, CONTEXT)->BOOL: fired when event triggered. If false, ignores that event
                                  #  - channelOptions OBJ: passed to PUBSUBENGINE.subscribe() OPTS
SUBMANAGR.publish('EVENT',PAYLOAD)#Calls PUBSUBENGINE.publish(...)
SUBMANAGER.subscribe(OPTS)        #Does PUBSUBENGINE.subscribe('EVENT', FUNC(PAYLOAD)):
->PROMISE(SUB_ID)                 #  - FUNC fires graphql(...) like a normal query:
                                  #     - using OPTS:
                                  #        - query 'QUERY': must be subscription query
                                  #        - operationName 'OPERATION'
                                  #        - variables VARIABLE
                                  #        - context [PROMISE_]CONTEXT[()]
                                  #     - using PAYLOAD as initial value
                                  #  - query return value is passed to OPTS.callback(ERROR, OBJ)
                                  #     - can e.g. communicate it back to client using WebSocket
SUBMANAGER.unsubscribe(SUB_ID)    #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         PUBSUBENGINE          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


new PubSubEngine()                #Event emitter interface, to be implemented
PUBSUBENGINE.publish
('EVENT', PAYLOAD)                #
PUBSUBENGINE.subscribe
('EVENT', FUNC(PAYLOAD), OPTS)
->PROMISE(SUB_ID)                 #
PUBSUBENGINE.unsubscribe(SUB_ID)  #

PubSub                            #Implementation that uses a local Event emitter


SUBSCRIPTIONS-TRANSPORT-WS ==>   ##Implementation that uses WebSocket (using "ws" package, see its doc)
                                 ##Actually does not implement PubSubEngine, but passes SUBMANAGER as argument instead
                                 ##Version 0.5.3

new SubscriptionServer
(OPTS, WS_OPTS)
                                 ##OPTS:
                                 ##  - subscriptionManager SUBMANAGER
                                 ##  - onConnect(OBJ)->PROMISE
                                 ##     - OBJ is client's connectionParams
                                 ##WS_OPTS:
                                 ##  - passed to WS.Server()


new SubscriptionClient(WS[S]_URL[, OPTS])
                                 ##OPTS:
                                 ##  - connectionParams: passed to server onConnect()
                                 ##  - timeout NUM
                                 ##  - reconnect BOOL
                                 ##  - reconnectionAttemps NUM
                                 ##  - connectionCallback([ERROR]): after connection setup

addGraphQLSubscriptions(NETWORKINTERFACE, SUBCLIENT)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TOOLS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


autopublishMutationResults       ##Wraps top-level mutation resolvers, so that PUBSUB.publish('ATTR', RPARENT) is fired each time resolver is called.
(SCHEMA, PUBSUB)                 ##I.e. if subscriptions have same shape and resolvers as mutation, will return same value as mutation, each time mutation is performed.
                                 ##From GraphQL-tools package
