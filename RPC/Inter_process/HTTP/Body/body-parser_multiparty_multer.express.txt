
                                   
   BODY-PARSER_MULTIPARTY_MULTER   
                                   



BODY-PARSER.urlencoded|       #Express MIDWR (1.17.1): 
json|raw|text([OPTS])         #  - same signature FUNC(REQ, RES, NEXT)
                              #  - but actually does not depend on Express being loaded, nor use RES
                              #Sets REQ.body:
                              #  - urlencoded(): as an OBJ, for Content-Type "application/x-www-urlencoded"
                              #  - json(): as an OBJ, for a "application/json"
                              #  - text(): as a STR, for "text/plain"
                              #  - raw(): as a BUFFER, for "application/octet-stream"
                              #If problem, next(ERROR) with 400 status code. 
                              #OPTS:
                              #  - type MIME (def: depends on type): only applies to requests with that MIME 
                              #  - inflate BOOL (def: true): automatically decompress gzip|deflate encodings
                              #  - limit NUM (def: '100kb') (uses BYTES parsing, see its doc): max request size
                              #  - verify(REQ, RES, BUFFER, ENCODING): should throw error if input is not proper
                              #  (only urlencoded())
                              #  - extended BOOL (def: false): 
                              #     - supports VAR[VAR2]=VAL&... 
                              #     - by using QS instead of QUERYSTRING, with OPTS: arrayLimit OPTS.limit (max 100), parameterLimit OPTS.limit, depth Infinity
                              #  - parameterLimit NUM (def: 1000): max number of parameters
                              #  (only json())
                              #  - strict BOOL (def: true): only parses OBJ|ARR
                              #  - reviver FUNC: passed to JSON.parse(...,FUNC)
                              #  (only text())
                              #  - defaultCharset (def: "utf-8")
                              #Errors (next(ERROR)):
                              #  - 403 on wrong verify()
                              #  - 413 if above OPTS.parameterLimit
                              #  - 415 on unsupported ENCODING
                              #  - 415 if OPTS.inflate false and should decompress, or if unsupported encoding
                              #Uses DEBUG

    
new MULTIPARTY.Form([OBJ])    #Returns FORM. Version 3.3.0. OBJ:
                              #  - encoding STR (def: "utf8"): of the input
                              #  - maxFieldsSize NUM (def: 2MB): max size of FLDOBJ VAL (emits error event otherwise)
                              #  - maxFields NUM (def: 1000): max numbers of keys in FLDOBJ (emits error)
                              #  - maxFilesSize NUM (def: Infinity): max size of FILOBJ as a whole (emits error)
                              #  - uploadDir (def: OS.tmpDir())
                              #MULTER is simpler, but MULTIPARTY:
                              #  - allow multipart/form-data without filename
                              #  - don't want to pollute tmpDir 
                              #  - want to see hash
                              #  - want to write on it as OSTREAM directly (ws)
FORM.parse(REQ                #Parse REQ body as multipart/form-data and either:
[,FUNC(ERROR, FLDOBJ,FILOBJ)])#  - if FUNC():
                              #     - FILOBJ are if Content-Disposition ... filename="": { VAR: VAL_ARR }
                              #        - ARR is if there are several with same name
                              #     - FLDOBJ are otherwise: { VAR: FILE_OBJ_ARR }:
                              #        - fieldName VAR
                              #        - originalFilename STR: in request body
                              #        - path PATH: in uploadDir
                              #        - headers OBJ:
                              #           - content-disposition STR
                              #           - content-type STR
                              #        - ws OSTREAM
                              #        - size NUM
                              #        - hash STR: only if OBJ.hash "sha1|md5" (in MULTIPARTY.Form() OBJ)
                              #     - Will populate uploadDir (should clean it at some point)
                              #  - otherwise, use FORM.on(...) to read files (does not populate uploadDir)
                              #Returns undefined.
FORM.on("part", FUNC(ISTREAM))#Emitted when receiving a FLDOBJ or FILOBJ member. ISTREAM also has:
                              #  - resume(): must be eventually called
                              #  - filename STR: only if FLDOBJ
                              #  - name STR
                              #  - headers OBJ: content-disposition, content-type
                              #  - byteOffset|Count NUM
FORM.on("file",
FUNC(NAME, FILE_OBJ))         #Emitted when receiving a FILOBJ member. Will then populate uploadDir. OBJ:
FRM.on("field",FUNC(NAME,VAL))#Emitted when receiving a FLDOBJ member.
FORM.on("progress", 
FUNC(NUM, NUM2))              #Are FORM.bytesReceived|Expected, i.e. partial|total amount of bytes.
FORM.on("close", FUNC())      #
FORM.on("error", FUNC(ERROR)) #


MULTER(OBJ)                   #Express MIDWR (0.1.3) for received body "multipart/data" with filename and using POST|PUT that:
                              #  - saves them on disk
                              #  - creates REQ.files { NAME: FILE_OBJ }
                              #     - fieldname NAME
                              #     - originalname STR: filename="..."
                              #     - path: path on dest DIR
                              #     - extension STR: of path
                              #     - name STR: of path
                              #     - encoding STR
                              #     - mimetype STR: Content-Type
                              #     - size NUM
                              #     - truncated BOOL: if truncated because of limits
                              #Uses BUSBOY (not MULTIPARTY)
                              #OBJ:
                              #  - dest DIR (def: OS.tmpDir()): where to upload
                              #  - rename FUNC(NAME, FILENAME)->FILENAME2: change default filename:
                              #     - otherwise random
                              #     - will still add original filename extension
                              #     - e.g. using field NAME, FILENAME or timestamp
                              #  - limits OBJ:
                              #     - fieldNameSize NUM (def: 100)
                              #     - fieldSize NUM (def: 1MB)
                              #     - fields NUM (def: Infinity)
                              #     - fileSize NUM (def: Infinity)
                              #     - files NUM (def: Infinity)
                              #     - parts NUM: fields + files (def: Infinity)
                              #     - headerPairs NUM: number of headers (def: same as HTTP)
                              #  - defCharset (def: "utf8")
                              #  - highWaterMark|fileHwm NUM: OSTREAM|ISTREAM.highWaterMark 
                              #    (max. buffer, def: same as OSTREAM|ISTREAM (16KB))
                              #  - onFileUploadStart|Complete(FILEOBJ)
                              #  - onFileUploadData(FILEOBJ, BUFFER|STR): when getting chunks of data
                              #  - onParseStart|End()
                              #  - onError(ERROR, NEXT())
                              #  - onFiles|Fields|PartsLimit()
