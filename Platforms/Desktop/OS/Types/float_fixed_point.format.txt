
                     
   FLOAT_FIXED_POINT  
                     

FLOAT ARITHMETIC VS     #Les floating-point numbers sont :
FIXED-POINT ARITHMETIC  #  - plus précis
  ==>                   #  - plus simples à utiliser
                        #  - plus courant (implémentés dans un FPU, en général
                        #    implémenté dans le CPU)
                        #Les fixed-point numbers sont :
                        #  - plus performants
                        #  - ne requierent pas un FPU
                        #  - gèrent mieux l'arrondissement à la virgule
                        #Il faut en général préférer les floats.

IMPLEMENTATION DES      #Cela ce fait généralement via un FPU (floating-point
FLOATS ==>              #unit, ou "math coprocesser"), en général intégré au
                        #CPU. On peut aussi utiliser plutôt une bibliothèque
                        #software (cependant seulement dans les systèmes
                        #embarqués, et bien plus lent).

FIXED-POINT NUMBERS ==> #Les fixed point numbers sont des nombres entiers,
                        #auquel on associe un scaling factor, qui est fixe pour
                        #un type donnée.
                        #Par exemple, si le scaling factor est 1/1000, 0.012
                        #sera 12 ; et 10 sera 10000.
                        #La notation est :
                        #  - Q[CHIFFRE1.]CHIFFRE2 : indique que, dans la base
                        #    donnée (binaire ou décimal), CHIFFRE2 chiffres sont
                        #    attendus après la virgule, et CHIFFRE1 avant la
                        #    virgule (sinon CHIFFRE1 est deviné en fonction de
                        #    la taille d'un word)
                        #  - fxCHIFFRE1.CHIFFRE2 : indique que le nombre total
                        #    de chiffres est CHIFFRE2, et le nombre de chiffres
                        #    avant la virgule CHIFFRE1.
                        #La signedness est opérée par complément de 2 en général

FLOATING-POINT NUMBERS  #Contrairement aux fixed-point numbers, les floating
  ==>                   #point numbers enregistrent la place de la virgule, et
                        #non le nombre de chiffres après la virgule.
                        #Les opérations se font dans la base choisie (binaire
                        #ou décimal).
                        #Le standard IEEE 754 est celui utilisé généralement en
                        #informatique. Les nombres sont en général représentés
                        #sous forme binaire, avec trois champs (en général
                        #contigus dans la mémoire) :
                        #  - 1 bit pour le signe (0 pour +, 1 pour -)
                        #  - l'exponent
                        #  - le significand (improprement nommé mantisse)
SIGNIFICAND ==>         #Le significand est un nombre :
                        #  - un 1 est rajouté devant
                        #  - et la virgule décimale est placée juste après ce 1
                        #Par exemple :
                        #  - 1101 -> 1.1101 -> en décimal 1 + 0.5 + 0.25 +
                        #    0.0625 -> 0.8125
                        #Il est multiplié par RADIX puissance EXPONENT pour
                        #donner le nombre final. RADIX est la base (2 en
                        #général).
                        #Multiplier le significand par 2 puissance EXPONENT
                        #déplace donc la virgule de EXPONENT chiffres binaires
                        #vers la droite ou la gauche.
EXPONENT ==>            #EXPONENT est lui-même signed.
                        #EXPONENT = ( exponent réel - 1 ), puis 1er bit flipped
                        #Par exemple :
                        #  - 10000011 -> 00000011 -> 00000100 -> exponent réel
                        #    est 4.

PRECISION ==>           #Ainsi, comme l'exponent a en général moins de bits
                        #alloués que le significand, un floating point number
                        #a :
                        #  - une précision quasi-exacte pour tout nombre
                        #    pouvant être représenté uniquement par le nombre
                        #    de bits du significand.
                        #    "Quasi-exacte", car en base binaire, 0.3 ne pourra
                        #    par exemple pas être représenté parfaitement, mais
                        #    0.25 oui. Mais en-deça de ce nombre de chiffres
                        #    max "sans perte de précision", on aura au plus un
                        #    écart de 1/(2^n), où n est le nombre de bits du
                        #    significand.
                        #  - une précision potentiellement moins exacte au-
                        #    delà, mais peut tout de même représenter des
                        #    nombres jusqu'à "2^(nombre de bits du l'exponent -
                        #    1)" + "nombre de bits du significand" chiffres
                        #    binaires après la virgule.

DENORMALIZED NUMBERS ==>#Les denormalized numbers permettent de représenter des
                        #chiffres petits même au-delà de cette limite :
                        #  - ils ont un EXPONENT == 0, soit un exponent réel ==
                        #    -MIN
                        #  - ils ont un SIGNIFICAND != 0
                        #  - leur exponent réel est donc -MIN (par exemple -127
                        #    pour un single-precision)
                        #  - mais on ne rajoute non pas un 1 mais un 0 devant
                        #    le SIGNIFICAND.
                        #  - Cela permet, pour les chiffres très petit, de
                        #    rallonger un peu le nombre de chiffres max.

ZERO ==>                #Le float number 0 a un EXPONENT et un SIGNIFICAND == 0.
                        #En fonction du bit de signe, il y a un +0 et un -0.

INFINI ET NAN ==>       #Un exponent dont la valeur est maximale est :
                        #  - + ∞ ou - ∞ (en fonction du signe), si la
                        #    significand est 0
                        #  - NaN (NotaNumber), sinon
                        #Ils sont utiles car :
                        #  - + ∞ == -∞
                        #  - tout nombre > -∞, ce qui permet d'avoir une limite
                        #    inférieur quel que soit le nombre
                        #  - tout nombre < +∞
                        #  - tout nombre != NaN, dont lui-même. Utilisé pour
                        #    signaler des erreurs de calcul car plusieurs
                        #    significands sont possibles

FORMATS ==>             #Ainsi, trois formats sont en général choisis :
                        #  - single-precision (appelé float en C)
                        #  - double-precision (appelé double en C)
                        #  - [double] extended precision (appelé long double en
                        #    C, utilisé pour les système 64 bits), non standard,
                        #    mais adopté généralement
                        #Voici un tableau récapitulatif (en bits et chiffres
                        #décimaux) :

NOM           EXPONENT  SIGNIFICAND   TAILLE    NOMBRE DE       NOMBRE DE
                                      TOTALE    CHIFFRES MAX    CHIFFRES MAX
                                                SANS PERTE DE   (HORS DENORMAL.
                                                PRECISION        NUMBERS)

Single-prec   8         23            32        6               38
Double-prec   11        52            64        15              308
Extended-prec 15        64            80        19              4932
