
         
   YARGS  
         



ALTERNATIVES ==>                  #  - yargs (preferred): has more features related to config file, help messages (including i18n)
                                  #  - caporal.js: has more features related to logging, colors, auto-typing suggestions.
                                  #    Not maintained
                                  #  - commander: less features
                                  #  - minimist: very few features. not maintained

VERSION ==>                       #8.0.2

CLI_OPTS                          #Mean either '-O', '--OPT', '--OPT=OPT_VAL', or 'OPT_VAL'
                                  #Top file should probably have #!/usr/bin/env node

CHAINED COMMANDS ==>              #All commands, unless specified otherwise, return YARGS

YARGS.argv                        #Parsed options as OBJ:
                                  #  - OPT OPT_VAL:
                                  #     - OPT_VAL defaults to true
                                  #  - _ STR_ARR:
                                  #     - anything that is not an OPT or an OPT_VAL
                                  #     - if using COMMANDs, the first element is the COMMAND
                                  #  - $0 STR: main file
                                  #Is actually a getter function, i.e. must be accessed after everything else has been setup.
YARGS(CLI_OPTS[_ARR][,DIR])       #Parse CLI_OPTS so that YARGS.argv can be retrieved
                                  #If not fired, YARGS.argv will automatically use process.argv.slice(2) instead.
                                  #DIR is current directory (def: process.cwd())
YARGS.parse                       #Same as YARGS(...).argv, except:
(...[, OBJ2][, FUNC])->OBJ        #  - if OBJ2, is merged to YARGS.argv
                                  #  - if FUNC, FUNC(ERROR, YARGS.argv, STR) is also fired:
                                  #     - ERROR is exit error if any
                                  #     - STR is what is printed on console

YARGS.option[s]({ OPT: OPTS ... }
YARGS.option[s]('OPT'[, OPTS])    #Adds a possible OPT, or several. OPTS ???

YARGS.reset()                     #Resets YARGS state.
                                  #This is useful e.g. when needs several-staged YARGS, e.g.:
                                  #  - first parse main command
                                  #  - then build a YARGS depending on that command
                                  #Automatically called by YARGS.command()
YARGS.global('OPT'[, BOOL])       #Make OPT global (or not if BOOL false), i.e. not affected by YARGS.reset()
                                  #By def, OPTs are global.

YARGS.command                     #Add a COMMAND
('COMMAND'[_ARR], STR[[, OBJ] or  #Can specify an ARR for aliases
[FUNC(YARGS)->YARGS[, FUNC2]]])   #STR is description.
                                  #If STR false instead, will be hidden, i.e. not shown in help|completion.
                                  #Each COMMAND has its own YARGS instance, using YARGS.reset():
                                  #  - using OBJ fires YARGS.option(OBJ)
                                  #  - FUNC is fired with YARGS
                                  #  - FUNC2 is fired with YARGS.argv

YARGS.alias('OPT', 'OPT2'[_ARR])
YARGS.alias
 ({ OPT: 'OPT2'[_ARR] ... })      #Create alternative OPT names.
                                  #On parsing, both OPT and OPT2 will be set.

YARGS.nargs('OPT', NUM)           #Number of arguments after OPT.
                                  #By default:
                                  #  - max 1 argument. I.e. this allows for several arguments per OPT,
                                  #    in which case OPT_VAL will be ARR
                                  #  - can be 0 or 1 arguments. I.e. this validates strict number of arguments
                                  #  - stops at next option. I.e. this allows for arguments that
                                  #    looks like options.

YARGS.array()
YARGS.boolean()
YARGS.check()
YARGS.choices()
YARGS.count()
YARGS.number()
YARGS.string()
YARGS.skipValidation()

YARGS.strict([BOOL])              #Enables|disables that unknown arguments are forbidden
                                  #(def: true, but disabled by def)
YARGS.requiresArg()
YARGS.implies()
YARGS.conflicts()
YARGS.demandOption()
YARGS.demandCommand()
YARGS.recommendCommands()

YARGS.default()
YARGS.coerce()
YARGS.normalize()

YARGS.config()
YARGS.env()
YARGS.pkgConf()

YARGS.exitProcesses()
YARGS.fail()

YARGS.version()

YARGS.wrap()

YARGS.describe()
YARGS.epilog[ue]()
YARGS.example()
YARGS.group()
YARGS.help()
YARGS.showHelp()
YARGS.showHelpOnFail()
YARGS.updateStrings()
YARGS.usage()

YARGS.detectLocale()
YARGS.locale()
YARGS.updateLocale()

YARGS.completion()
YARGS.getCompletion()
YARGS.showCompletionScript()
