
                    
   TURING_MACHINE   
                    



Turing machine:
  - input: array of values ("symbols"):
     - of infinite size, but from a finite set
     - null ("blank"):
        - special symbol
        - originally only nulls
        - only symbol that can appear infinitely
  - current state, from a finite state, including:
     - start state 
     - end states (halt)
        - including any STATE not present in table of instructions
  - table of instructions, i.e. a finite { STATE: {INPUT: [INSTRUCTION, NEW_STATE] ... } ... }
     - INSTRUCTION is:
        - WRITE: "write some value back"
        - MOVE: "move head one index on the left, right or same position"
     - 5-tuple model: WRITE + MOVE, 4-tuple model: either WRITE or MOVE
  - current position ("head"):
     - reads current value as current INPUT
     - performs INSTRUCTION (using table of instructions)
     - changes to NEW_STATE
  - often represented as table of 5-tuples (STATE, INPUT, WRITE_VALUE, MOVE, NEW_STATE)
  - universal Turing machine:
     - turning machine which gets its table of instructions as input
     - e.g. code is data ("stored program computer")
     - architecture where code can be treated as data, and data can be treated as code:
        - Von Neumann architecture: same memory for both
        - Harvard architecture: different memory
  - alternates:
     - "turning equivalent", i.e. not more powerful than normal Turing machine, i.e.:
        - cannot express more but can:
           - have more expressive instructions
           - use less memory
           - use less instructions
        - could be refactored as a normal Turing maching
