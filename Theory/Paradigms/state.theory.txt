
           
   STATE   
           



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           PARADIGMS           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


IMPERATIVE VS FUNCTIONAL ==>      #Imperative programming emphasizes state manipulation
                                  #  - pros: more flexible
                                  #Functional programming emphasizes referential transparency
                                  #  - pros:
                                  #     - easier to reason with:
                                  #        - for programmers
                                  #        - for static analysis, e.g. easier to test
                                  #     - easier to optimize
                                  #  - usually corrolated with declarative programming

REFERENTIAL TRANSPARENCY ==>      #Also called "purity".
                                  #Function that can be replaced by its return value, i.e.:
                                  #  - does not cause side effects
                                  #  - does not depend on state outside its arguments (i.e. local scope)

IDEMPOTENCY ==>                   #Function that can be called twice without state change, i.e.:
                                  #  - side effect always result in same state (including no side effects)
                                  #  - does not depend on state outside its arguments (i.e. local scope)
                                  #Goal: duplicated calls (e.g. retries) are not a problem, i.e. no need to keep state about previous calls

SIDE EFFECT ==>                   #When state changes after a function has been fired, including:
                                  #  - changing caller state:
                                  #     - arguments passed by reference
                                  #     - global scope
                                  #  - changing closure state
                                  #  - changing control flow, e.g. jumping, including raising exception
                                  #Usually execution time is not considered side effect
                                  #Statement (causes side effects) vs expression (no side effects)
                                  #Alternative to causing side effect (when flexibility is needed, e.g. I/O): returning state|action object to caller


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          STRUCTURES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CLOSURE ==>                       #Function holding state accross executions thanks to lexical scope binding

COROUTINE ==>                     #Function that holds state accross executions, including where it left off:
                                  #  - run until explicit yield 
                                  #  - jump to any function (instead of returning to caller)
                                  #  - when called again, restart at yield point

GENERATOR|SEMICOROUTINE ==>       #Coroutine that only jumps back to caller when yielding, usually returning value
                                  #Usually meant for iterators or streams


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         SERIALIZATION         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SERIALIZATION ==>                 #Representing state as data

MEMENTO ==>                       #Serialization allows retrieving full state while remaining minimal
                                  #Does it by separating:
                                  #  - serialized object ("memento"), kept minimal, e.g. just an ID
                                  #     - object to serialize is "originator"
                                  #  - "caretaker" keeping track of full states, e.g. hash table with ID as key
                                  #Goal: serializing while keeping information hiding, i.e. abstracting serialization away

BUILDER ==>                       #Initializing serialized objects:
                                  #  - a "reader" and "writer" deserialize|serialize an object
                                  #  - a "builder" initializes the deserialized object
                                  #     - it can be an abstract factory
                                  #Can only read and build one part after another
                                  #Goal: separating object representation from initialization


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         ARCHITECTURE          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


OBSERVER PATTERN ==>              #When a module ("view|observer") must be kept in sync with another module ("model|subject") state
                                  #Separate the two by using change events

[FINISH-]STATE MACHINE/AUTOMATON  #"FSM"/"FSA"
  ==>                             #Control flow where:
                                  #  - all state lies in one object
                                  #     - e.g. Turing machines are not state machines, since:
                                  #        - the array of values contains state (that can be read|written)
                                  #        - not only the current "state" variable and head position
                                  #  - each state variation triggers different branch
                                  #     - trigger can take input
                                  #  - each state change ("transition") jumps back to initial point
                                  #I.e. abstraction of a switch statement containing different functions


            /**
             * Acceptors (also called "recognizers", "sequence detectors"): 
             *  - goal is to check whether sequence of inputs ends up in a given state ("accepting|final" states)
             *  - i.e. modelling FUNC(...)->BOOL as a state machine
             *  - e.g. RegExp
             * 
             */

State machine

Context:
  - state (polymorphic, changes)
     - doSomething()
Transition (i.e. changing state): 
  - in state: i.e. decentralized
  - in context: i.e. centralized

Alternative: using table lookup instead of polymorphism
