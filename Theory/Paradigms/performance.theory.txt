
                 
   PERFORMANCE   
                 



GOAL ==>                          #Improving UX, i.e. only perceived performance matters

HOW ==>                           #Can reduce:
                                  #  - idleness: parallelism (concurring|async, array programming)
                                  #  - computation: precalculation, lazy calculation, caching
                                  #  - memory|space: optimization, compression|minification

SPACE-TIME TRADEOFF ==>           #Also called "time-memory tradeoff":
                                  #  - efficiency can often be reduced by using memory, e.g. precalculation
                                  #  - memory can often be reduced by decreasing efficiency, e.g. compression

COMPLEXITY TRADEOFF ==>           #Optimization usually decreases maintainability
                                  #Ex: loop unrolling


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          PARALLELISM          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CONCURRING PROGRAMMING ==>        #Running several pieces of code at once
                                  #Good for performance but creates synchronization problems
                                  #Usually implies async
                                  #See concurrency doc

ARRAY PROGRAMMING ==>             #See parallelism doc


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         PRECALCULATION        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


OBJECT POOL ==>                   #Efficient initialization (when it is costly):
                                  #  - pool creates objects in advance
                                  #  - new objects:
                                  #     - are taken from the pool
                                  #     - if not created yet, creates it
                                  #        - there can be a pool size limit ("high water mark")
                                  #  - destroyed objects are returned to the pool for reuse
                                  #     - pool must reset object
                                  #     - if destroyed objects are not returned, this will create starvation

MEMORY POOL ==>                   #Like object pool but for memory allocation

PRECALCULATION ==>                #Precalculating computation-intense, e.g. graphics (alpha, shadows)

LOOKUP TABLE ==>                  #Precalculating a search algorithm, so it is constant time


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         OPTIMIZATION          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


FLYWEIGHT ==>                     #If several objects share information, sharing that information among them, instead of instantiating in each object.
                                  #Pros: more efficient. Cons: less granularity
                                  #Information can be shared as: 
                                  #  - references stored|shared in each object
                                  #  - function arguments
