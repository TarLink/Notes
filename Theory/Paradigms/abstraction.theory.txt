
                 
   ABSTRACTION   
                 



ABSTRACTION ==>                   #Moving complexity from upstream to downstream by providing interface between both.
                                  #Goal is to improve maintainability when some common logic (downstream) is used in multiple contexts (upstream):
                                  #  - i.e. harder to modify upstream than downstream
                                  #  - e.g.:
                                  #     - logic used in different places with different arguments, contexts, environments, etc.
                                  #     - upstream managed by different people that downstream (e.g. most libraries, REST APIs)
                                  #I.e. upstream more maintainable, downstream less maintainable
                                  #Usually:
                                  #  - negative impact on flexibility (not extensibility) and efficiency (i.e. UX)
                                  #  - decreases coupling
ABSTRACTION INVERSION ==>         #Antipattern: too much abstraction, i.e.:
                                  #  - not flexible enough upstream: hides information useful to consumers, leading to consumers to reimplement it using abstracted interface
                                  #  - too complex downstream: unnecessarily high-level (complex, slow)

INFORMATION HIDING ==>            #Minimizing interface size
                                  #Also called "interface-segregation" ("I" of SOLID principles) or (for OOP) "encapsulation"

DEPENDENCY INVERSION ==>          #Modules should only used other modules through those modules interfaces
                                  #"D" of SOLID principles


LANGUAGE GENERATION ==>           #Can be:
                                  #  - 1GL (first-generation programming language): machine-level
                                  #  - 2GL: assembly language
                                  #  - 3GL: low-level, e.g. C, C++, Java, BASIC, Pascal, Fortran, ALGOL, COBOL
                                  #  - 4GL: high-level, e.g. JavaScript, Python, Perl, Ruby, SQL, Bash, PHP, R
                                  #  - 5GL: logic programming, e.g. Prolog

IMPERATIVE VS DECLARATIVE ==>     #Imperative:
                                  #  - manipulate state to get results
                                  #  - *how* to get results
                                  #  - focus on side effects, control flow, algorithms
                                  #  - e.g. ARR.map(val % 2 is 0 ? val : null)
                                  #  - less abstract
                                  #Declarative:
                                  #  - define conditions that should be satisfied for the result
                                  #     - i.e. take away control flow from imperative programming
                                  #  - *what* to get 
                                  #     - *how* being abstracted to implementation
                                  #  - focus on problem domain
                                  #  - e.g. ARR.where(val % 2 is 0)
                                  #  - include: query languages (SQL, RegExp), logic programming, configuration management
                                  #  - more abstract

INTERPRETER ==>                   #Declarative approach using a formal grammar, parsed then executed by an interpreter
                                  #Usually parse will be a tree, where each leaf type:
                                  #  - gets current state as input
                                  #  - sets state
                                  #  - usually through an interface shared by all leaf types
                                  #Includes any programming language, including DSL (Domain-Specific Languages)

FUNCTIONAL PROGRAMMING ==>        #Programming that emphasizes stateless approach (see state doc), as opposed to imperative programming

DOMAIN-SPECIFIC VS GENERAL-PURPOSE#A programming language can either be:
  ==>                             #  - general-purpose, i.e. can be applied to many domains
                                  #  - domain-specific


FORWARDING VS DELEGATION ==>      #One interface ("sender") using another one ("receiver")
                                  #Can pass sender itself as argument:
                                  #  - forwarding: does not pass sender (i.e. same as wrapping), i.e. less coupled
                                  #  - delegating: pass sender, i.e. more coupled
                                  #     - e.g. binding "this" in OOP

WRAPPER ==>                       #Interface abstracting another interface:
                                  #  - can modify interface (not behavior) in order to provide:
                                  #     - compatibility (adapter):
                                  #        - i.e. abstract difference from another interface
                                  #        - the other interface can be interacted with through:
                                  #           - composition ("object adapter")
                                  #           - inheritance ("class adapter")
                                  #     - simplicity (facade):
                                  #        - i.e. abstract between heterogeneous modules
                                  #     - abstraction (bridge):
                                  #        - i.e. abstract between different modules|implementations of similar purpose
                                  #  - can modify behavior (not interface) ("proxy"):
                                  #     - decorator / smart proxy: adds functionalities
                                  #     - remote proxy: translate different address spaces
                                  #     - protective|access proxy: authorization purpose
                                  #     - lazy load proxy: lazy initialization purpose
                                  #Can be "thin" or "thick" according to how much modification is done

PRIVATE CLASS DATA ==>            #Encapsulating an object member with a thin proxy for getting|setting it

COMMAND PATTERN ==>               #Decouple:
                                  #  - input processing (i.e. actual function): "receiver"
                                  #     - "target": main object manipulated by function
                                  #     - "handler": function itself
                                  #     - "action": manages a specific handler type, i.e. enabling|disabling it
                                  #  - input binding (i.e. providing input): "command", i.e. "receiver" + input
                                  #     - usually follow common interface
                                  #     - interface can be simple (execute()) or richer (do(), undo())
                                  #  - invocation (i.e. firing function): "invoker", which triggers a "command" (with no additional input)
                                  #     - can be behind a "command manager", i.e. bookkeeping proxy (e.g. manages commands undo stack)
                                  #Goal: 
                                  #  - abstracting away from consumer: function input, function processing
                                  #  - i.e. less flexible but simpler

ITERATOR ==>                      #Providing common interface (i.e. bridge) for data iteration (i.e. sequential access)
                                  #Goal: 
                                  #  - iteration-oriented algorithms reuse accross several data structures
                                  #  - abstract away iteration from consumer
                                  #     - i.e. separate iteration-oriented algorithms from the data structures they use
