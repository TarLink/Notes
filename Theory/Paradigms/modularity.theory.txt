
                
   MODULARITY   
                



MODULARITY ==>                    #Dividing into different modules, aiming at orthogonality/separation of concern:
                                  #  - between modules: granularity, loose coupling
                                  #  - inside each module: high cohesion, single responsibility
                                  #Goal is to improve maintainability by reducing incoherence inside each part:
                                  #  - move complexity from within each part to in-between
                                  #  - i.e. more maintainable inside each part, but less maintainable as a whole
                                  #Need balance between:
                                  #  - providing isolation (i.e. simplicity to think of each module)
                                  #  - avoiding too high granularity (i.e. must think of several modules at once)
                                  #     - called "functional decomposition" (antipattern) when done with OOP, i.e. many too small classes (e.g. single-method)
                                  #Usually:
                                  #  - negative impact on flexibility (not extensibility) and efficiency (i.e. UX)
                                  #  - coupled with abstraction

MODULAR PROGRAMMING ==>           #Features of a language allowing modularity, e.g. Python packages


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          GRANULARITY          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


GRANULARITY ==>                   #Dividing code into different pieces (modules|packages|components|units)
                                  #Can be: blocks, functions, namespaces, files, directories
                                  #Opposite is monolithic design.

THE GLOB / GOD CLASS / WINNEBAGO  #Antipattern: piece of code too big, i.e. lack of granularity
  ==>                             #Often also hints at high coupling


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           COUPLING            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


LOOSE|LOW COUPLING ==>            #Also called "law of Demeter", "principle of least knowledge"
                                  #Minimizing knowledge|contract between modules
                                  #I.e. inheritance < composition < aggregation < association

CHAIN OF RESPONSABILITY PATTERN   #Decoupling modules with different purpose but same input:
  ==>                             #  - by defining shared interface to process that input, e.g. MODULE.process(INPUT)
                                  #Sequence order can be maintained by (from simplest to most flexible):
                                  #  - container (e.g. array order)
                                  #  - items, i.e. each module point to:
                                  #     - 1 next module
                                  #     - 0-1 next module, i.e. can stop sequence
                                  #     - 0|1-n next modules ("dispatcher")
                                  #Modules can be excluded from the sequence, according to input properties (e.g. its type)

MEDIATOR ==>                      #Abstracting away relations between items when they are too complex, e.g.:
                                  #  - n-n relationship with high n
                                  #  - many types of items
                                  #  - complex interaction
                                  #I.e.:
                                  #  - instead of items referencing each other
                                  #  - let a shared "mediator" reference all
                                  #Items can use mediator to either:
                                  #  - broadcast: no specific target
                                  #  - or reference target, with a key (not actual object)
                                  #Mediator can:
                                  #  - do simple retrievals
                                  #  - or more complex, e.g. book-keeping
                                  #Goal: promoting loose coupling

HELPER/UTILITY ==>                #Module that is not linked to the core business logic
                                  #Helpers are stateful (e.g. object instances), utility are stateless|pure


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           COHESION            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


COHESION ==>                      #How related are the parts of a module
                                  #Cohesion reason is: technical < time < data < purpose, i.e. (from lowest to highest):
                                  #  - coincidental: none
                                  #  - logical: same technical nature (e.g. controllers, views)
                                  #  - temporal: happen together at a given time (e.g. init)
                                  #  - procedural: happen always after another
                                  #  - communicational/informational: same data
                                  #  - sequential: procedural + communicational, i.e. pipeline of input/output
                                  #  - functional: same purpose

STRUCTURED PROGRAMMING ==>        #Which control flows are used by imperative languages
                                  #Non-structured programming:
                                  #  - use branching:
                                  #     - unconditional (goto, call, exit, etc.)
                                  #     - conditional (simple if, etc.)
                                  #  - includes:
                                  #     - early exit (return, break, continue, etc.)
                                  #     - exception|interrupt handling
                                  #     - async (coroutine, promise, etc.)
                                  #Structured programming:
                                  #  - use structures:
                                  #     - blocks (if blocks, switch, etc.)
                                  #     - loops (for, while, etc.)
                                  #     - functions
                                  #Structures are an abstraction of branching, aiming at grouping related code together, i.e.  more cohesion

OBJECT-ORIENTED PROGRAMMING ==>   #See types doc

SPAGHETTI CODE ==>                #Antipattern: code flow lacking linearity, i.e. jump from one part to another frequently
                                  #Usually because of low cohesion but high granularity


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          SIMPLICITY           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SINGLE RESPONSIBILITY ==>         #A module must have a single responsibility (i.e. "reason to change")
                                  #"S" of SOLID principles
