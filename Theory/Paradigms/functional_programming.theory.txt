
                       
   FUNCTIONAL_THEORY   
                       



ARITY ==>                         #Number of arguments.
                                  #unary, binary, ternary, etc.

OPERATORS ==>                     #Less verbose function name:
                                  #  - more convenient (syntactic sugar)
                                  #  - but harder to communicate precise purpose|contract
                                  #     - e.g. consumers might introduce different purpose|contract by overloading
                                  #Harder to parse, e.g. need to establish implicit operator priority order


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             STATE             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CLOSURE ==>                       #Function holding state accross executions thanks to lexical scope binding

COROUTINE ==>                     #Function that holds state accross executions, including where it left off:
                                  #  - run until explicit yield 
                                  #  - jump to any function (instead of returning to caller)
                                  #  - when called again, restart at yield point

GENERATOR|SEMICOROUTINE ==>       #Coroutine that only jumps back to caller when yielding, usually returning value
                                  #Usually meant for iterators or streams



IMPERATIVE VS FUNCTIONAL ==>      #Imperative programming emphasizes state manipulation
                                  #  - pros: more flexible
                                  #Functional programming emphasizes referential transparency
                                  #  - pros:
                                  #     - easier to reason with:
                                  #        - for programmers
                                  #        - for static analysis, e.g. easier to test
                                  #     - easier to optimize

REFERENTIAL TRANSPARENCY ==>      #Also called "purity".
                                  #Function that can be replaced by its return value, i.e.:
                                  #  - does not cause side effects
                                  #  - does not depend on state outside its arguments (i.e. local scope)

IDEMPOTENCY ==>                   #Function that can be called twice without state change, i.e.:
                                  #  - side effect always result in same state (including no side effects)
                                  #  - does not depend on state outside its arguments (i.e. local scope)
                                  #Goal: duplicated calls (e.g. retries) are not a problem, i.e. no need to keep state about previous calls

SIDE EFFECT ==>                   #When state changes after a function has been fired, including:
                                  #  - changing caller state:
                                  #     - arguments passed by reference
                                  #     - global scope
                                  #  - changing closure state
                                  #  - changing control flow, e.g. jumping, including raising exception
                                  #Usually execution time is not considered side effect
                                  #Statement (causes side effects) vs expression (no side effects)
                                  #Alternative to causing side effect (when flexibility is needed, e.g. I/O): returning state|action object to caller
