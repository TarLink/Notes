
         
   DOM   
         


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            GENERAL            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


VERSION ==>                                     #4

DOM ==>                                         #Document Object Model: WINDOW.document.*

BOM ==>                                         #Browser Object Model: browser elements, i.e. frames, history, location, window

WEB APIs ==>                                    #Usually on WINDOW, e.g. WebSocket, BatteryManager, SessionStorage, etc.

XML ==>                                         #This doc doesn't include objects, etc. related to XML: check XML doc.

INTEROPERABILITY ==>                            #See HTML doc for list of browsers


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             HTML              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


INCLUDING IN HTML ==>                           #Priority is from top to bottom

<script>
  src="script.js"                               #From external file.
HTMLDOCUMENT.scripts                            #SCRIPT_HTMLCOLLECTION

<script>CODE</script>                           #Inline.

<a|area>
  href="JavaScript:CODE"                        #
<any> 
  onEVENT="CODE"                                #Deprecated. EVENT lowercase.

<noscript>...</noscript>                        #When JavaScript not available.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            EVENTS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


EventTarget                                     #Parent of almost all DOM objects
EVENTTARGET.add|removeEventListener             #BOOL: false (def) is bubbling, true is capturing.
('event', FUNC(EVENT)[, BOOL])                  #addEventListener() does not add twice same FUNC
<any onEVENT="CODE">                            #Same but:
EVENTTARGET.onEVENT = FUNC(EVENT)               #  - can only register one handler 
                                                #  - dispatchEvent() does not work
                                                #  - kept by cloneNode()
EVENTTARGET.dispatchEvent(EVENT)->BOOL          #Returns true if defaultPrevented.


Event                                           #
new EVENT('TYPE'[, OBJ])                        #OBJ are assigned to EVENT.*
                                                #Def: bubbles|cancelable false

EVENT.type                                      #'click|mouseover|...'
EVENT.eventPhase                                #Event handlers are fired in that order:
                                                #  - Event.CAPTURING_PHASE: capturing handlers, from outermost to target
                                                #  - Event.AT_TARGET:       target
                                                #  - Event.BUBBLING_PHASE:  bubbling handlers (def), from target to outermost, providing EVENT.bubbles true
EVENT.bubbles                                   #True for:
                                                #  - UI events:
                                                #     - except select, resize, scroll
                                                #     - focus|blur does not bubble, but focusin|out fixes it
                                                #     - mouse|pointerover|out does bubble (should not), but mouse|pointerleave|enter fixes it
                                                #  - UI-related events:
                                                #     - fullscreen*, selectstart, SVG* (except SVG[Un]Load), visibilitychange
                                                #  - location-related events:
                                                #     - DOMContentLoaded, hashchange, popstate
                                                #  - transitionend
                                                #  - resourcetimingbufferfull
EVENT.currentTarget                             #The current EVENTTARGET (=== this in event handler)
EVENT.target                                    #The original EVENTTARGET

EVENT.cancelable                                #True for:
                                                #  - bubbling UI events, except:
                                                #     - end|abort-related: abort, dragend|leave, pointer|touchcancel, pointerlockchange|error
                                                #     - input, change
                                                #     - animation*
                                                #  - selectstart, transitionend, resourcetimingbufferfull
                                                #  - reset, beforeunload, invalid
EVENT.preventDefault()                          #Cancel browser default handler (but not user handlers)
EVENT.defaultPrevented                          #preventDefault() has been called

EVENT.stopImmediatePropagation()                #Do not call any further user handlers
EVENT.stopPropagation()                         #Same, except for currentTarget's ones

EVENT.timeStamp                                 #DATE_NUM (Epoch in ms)


CustomEvent                                     #Child of EVENT
CUSTOMEVENT.detail                              #Anything


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            UIEVENT            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


UIEvent                                         #Child of EVENT
UIEVENT.view                                    #WINDOW

FocusEvent                                     ##UIEVENT child, for focus*|blur
                                               ##Needs jQuery right now.
FOCUSEVENT.relatedTarget                       ##For blur|focusout, the ELEM that gets focused instead. 
                                               ##For focus|focusin, the ELEM that lost the focus.

ALL                                             #Is HTMLELEM|DOCUMENT|WINDOW

ALL.onfocus|blur = FUNC(UIEVENT|FOCUSEVENT)     #Gains|loses focus. Not with links. Can sometimes fire twice.
ALL.onfocusin|out = FUNC(UIEVENT|FOCUSEVENT)   ##Like focus/blur, but bubbles. (needs jQuery)
ELEM.focus|blur()                               #Emit those events
JQ.focus(UINT[, FUNC()])                       ##Same but with a delay (in ms) (jQuery UI)
HTMLDOCUMENT.activeElement                      #Currently focused ELEM. If none, BODY.
                                                #Readonly.

ALL.onselect = FUNC(UIEVENT)                    #Selection in a <textarea> or <input type="text">
ALL.oninput = FUNC(EVENT)                       #Form field value changes.
ALL.onchange = FUNC(EVENT)                      #Same but only when completed (<input> after entering Carriage return or lose 
                                                #focus e.g.)
ALL.onsubmit = FUNC(EVENT)                      #When submitting form


KeyboardEvent                                   #UIEVENT child
                                                #Not used by mobile devices.
                                                #Modifier keys launch event themselves.
KEYBOARDEVENT.ctrl|shift|alt|metaKey            #True if pressed while keyboard event
KEYBOARDEVENT.getModifierState(STR)->BOOL       #True if STR pressed while event, parmi "Ctrl", "Shift", "Alt", "AltGraph",
                                                #"CapsLock", "NumLock"
KEYBOARDEVENT.charCode                          #Character code (keypress only). 
                                                #Single keys: modifier keys don't have effect (but are themselves pressed).
                                               ##Can use jQuery instead.
KEYBOARDEVENT.keyCode                           #Code platform-dependant (all keyboad events)
                                               ##Can use jQuery instead.

ALL.onkeydown = FUNC(KEYBOARDEVENT)             #When key is down (repeats).
ALL.onkeypress = FUNC(KEYBOARDEVENT)            #Like keydown, but only for keys usually resulting in character being inserted.
ALL.onkeyup = FUNC(KEYBOARDEVENT)               #When key is not down anymore (only once).


MouseEvent                                      #UIEVENT child
MOUSEEVENT.screenX|Y                            #According to screen
MOUSEEVENT.clientX|Y                            #According to page (without scrolling)
MOUSEEVENT.pageX|Y                              #According to page (with scrolling)
MOUSEEVENT.ctrl|shift|alt|metaKey               #True if pressed while mouse event
MOUSEEVENT.getModifierState(STR)->BOOL          #See KEYBOARDEVENT
MOUSEEVENT.button                               #0|1|2 if left|middle|right click while mouse event
MOUSEEVENT.detail                               #Number of clicks.
                                                #  - only for [dbl]click, mousedown|up
MOUSEEVENT.relatedTarget                        #For:
                                                #  - mouseenter|over: left element
                                                #  - mouseleave|out: entered element
                                                #  - others: null

ALL.onclick = FUNC(MOUSEEVENT)                  #Left click down then up on same element.
ELEM.click()                                    #
ALL.oncontextmenu = FUNC(MOUSEEVENT)            #Same for right click.
ALL.ondblclick = FUNC(MOUSEEVENT)               #Same for double left click.
ALL.onmousedown|up = FUNC(MOUSEEVENT)           #Any mouse button down|up (only once).
ALL.onmousemove = FUNC(MOUSEEVENT)              #While moves (repeats).

ALL.onmouseover|out = FUNC(MOUSEEVENT)          #When enter|leaves (only once)
                                                #Bubbles, which means that anytime the mouse enters/leaves a child/inner 
                                                #element, it is fired again: prefer mouseenter|leave.
ALL.onmouseenter|leave = FUNC(MOUSEEVENT)      ##Same but doesn't bubble, so not this problem.
                                               ##Use jQuery right now.

ALL.onscroll = FUNC(UIEVENT)                    #When scrolling happens.
WINDOW.onresize = FUNC(UIEVENT)                 #When resizing window.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          LOAD EVENTS          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


WINDOW.onDOMContentLoaded = FUNC(EVENT)         #When page parsed
WINDOW.onload = FUNC(UIEVENT)                   #When resources done loading
DOCUMENT.readyState                             #Can be:
                                                #  - "loading": first
                                                #  - "interactive": after DOMContentLoaded
                                                #  - "complete": after load
DOCUMENT.onreadystatechange = FUNC(EVENT)       #When DOCUMENT.readyState changes
WINDOW.onbeforeunload = FUNC(EVENT)             #Just before unload
WINDOW.onunload = FUNC(UIEVENT)                 #On closing page

RESOURCE                                        #Any external|embedded resource: 
                                                #  - <script>, <style>, <link> 
                                                #  - <img>, <input type="image">, <video>, <audio>, <iframe>, <svg>
                                                #Also <body>
RESOURCE.onload = FUNC(UIEVENT)                 #When done loading
RESOURCE.onerror = FUNC(UIEVENT)                #
RESOURCE.onabort = FUNC(UIEVENT)                #When starts loading but stops.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           TOP-LEVEL           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Window                                          #
$.isWindow(VAL)                                ##True if WINDOW (jQuery)
Document                                        #NODE child, parent of HTML. 
                                                #Obtained e.g. with:
                                                #  - WINDOW.document
                                                #  - IFRAME.contentDocument
                                                #  - XMLHTTPREQUEST.responseXML
HTMLDocument                                    #DOCUMENT child
DocumentType                                    #See HTML doc

WINDOW.opener                                   #WINDOW2|null: if WINDOW popup
WINDOW.frameElement                             #IFRAME|OBJECT|null
WINDOW.parent                                   #If WINDOW.frameElement, its WINDOW2. Otherwise WINDOW
WINDOW.top                                      #WINDOW.parent.parent...

WINDOW.document                                 #DOCUMENT
DOCUMENT.defaultView                            #WINDOW|null. Readonly
DOCUMENT.doctype                                #
DOCUMENT.documentElement                        #
HTMLDOCUMENT.body                               #
HTMLDOCUMENT.head                               #See HTML doc

HTMLDOCUMENT.title                              #
HTMLDOCUMENT.scripts                            #
HTMLDOCUMENT.images                             #
HTMLDOCUMENT.links                              #
HTMLDOCUMENT.forms                              #See HTML doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             QUERY             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Node                                            #Child of EVENTTARGET
                                                #Parent of ELEM, DOCUMENT, CHARDATA, DOCUMENTTYPE, DOCUMENTFRAGMENT
                                                #Note: any whitespace between two ELEM is a CHARDATA
Element                                         #NODE being an HTML|SVG element
HTMLElement                                     #Cf doc HTML
NodeList                                        #Similar to HTMLCOLLECTION but for NODE

DOCUMENT.getElementsByClassName('CLASS')        #HTMLCOLLECTION
DOCUMENT.getElementsByName('NAME')              #HTMLCOLLECTION
DOCUMENT|ELEM.getElementsByTagName('tag|*')     #HTMLCOLLECTION|ELEM_ARR
DOCUMENT.getElementById('ID')                   #ELEM|null
DOCUMENT|ELEM.querySelector('CSS_SELECTOR')     #NODE|ELEM|null. Cannot use pseudo-element
DOCUMENT|ELEM.querySelectorAll('CSS_SELECTOR')  #NODELIST|ELEM_ARR

NODE|ELEM.childNodes|children                   #NODELIST|HTMLCOLLECTION. Readonly.
NODE.hasChildNodes()->BOOL                      #
NODE|ELEM.first|last[Element]Child              #NODE|ELEM|null. Readonly.
NODE|ELEM.previous|next[Element]Sibling         #NODE|ELEM|null. Readonly.
NODE|ELEM.parentNode|Element                    #NODE|ELEM|null. Readonly.
                                                #null for DOCUMENT, for HTML (parentElement only) and root NODE not attached in DOM
NODE.ownerDocument                              #DOCUMENT|null. Readonly. 
                                                #null for DOCUMENT


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TEST              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NODE.isEqualNode(NODE2)->BOOL                   #Same HTML content, i.e. same nodeType, nodeName, nodeValue, attributes, children.
NODE.contains(NODE2)->BOOL                      #Is child or same
NODE.compareDocumentPosition(NODE2)->NUM        #Returns or'd bitmask of relation of NODE2 to NODE:
                                                #  - DOCUMENT_POSITION_CONTAINS|CONTAINED_BY
                                                #  - DOCUMENT_POSITION_PRECEDING|FOLLOWING: of start tag, i.e. if contains, precedes
                                                #  - DOCUMENT_DISCONNECTED: not same DOCUMENT
                                                #None (i.e. 0) means NODE === NODE2


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         MANIPULATION          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


DOCUMENT.implementation.
createHTMLDocument(['TITLE'])->HTML             #
DOCUMENT.createElement('TAG')->ELEM             #
DOCUMENT.createTextNode(STR)->TEXT              #
DOCUMENT.createComment(STR)->COMMENT            #

NODE.insertBefore(NODE2, NODE3)->NODE2          #Insert NODE2 as NODE child, before sibling NODE3 (if null, put as last child).
NODE.appendChild(NODE2)->NODE2                  #Same as NODE.insertBefore(NODE2, null)
NODE.removeChild(NODE3)->NODE3                  #
NODE.replaceChild(NODE2, NODE3)->NODE3          #Same as NODE.insertBefore(NODE2, NODE3) + NODE.removeChild(NODE3)
NODE.cloneNode([BOOL])->NODE2                   #NODE2 is not attached to DOM.
                                                #Does not keep:
                                                #  - event listeners added with addEventListener()
                                                #  - children, unless BOOL true
                                                #NODE must be in current DOCUMENT
DOCUMENT.importNode(NODE[, BOOL])->NODE2        #Same but NODE does not have to be in current DOCUMENT
DOCUMENT.adoptNode(NODE)->NODE2                 #Same as DOCUMENT.importNode(NODE) but then remove NODE


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            CONTENT            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


DOCUMENT.compatMode                             #
DOCUMENT.characterSet                           #See HTML doc

NODE.nodeType                                   #Among DOCUMENT.DOCUMENT[_TYPE|FRAGMENT]|ELEM|TEXT|COMMENT_NODE
                                                #Readonly.
NODE.nodeName                                   #For ELEM: ELEM.tagName
                                                #For DOCUMENTTYPE: DOCUMENTTYPE.name
                                                #Others: '#comment|text|document[-fragment]'
                                                #Readonly.
ELEM.tagName                                    #'TAG|tag'

ELEM.inner|outerHTML                            #'HTML', with[out] ELEM itself
                                                #Can lead to XSS attacks, so prefer textContent if only TEXT.
ELEM.insertAdjacentHTML
('before|afterbegin|end', 'HTML')               #Inserts 'HTML' inside ELEM next to its start|end tag.

HTMLDOCUMENT.open()                             #Remove all 'HTML'
HTMLDOCUMENT.write[ln]('HTML')                  #Append 'HTML' (with newline if "ln") to BODY
                                                #Fires HTMLDOCUMENT.open() first
HTMLDOCUMENT.close()                            #To be invoked after HTMLDOCUMENT.write*()

NODE.textContent                                #Children TEXT concatenated as STR.
                                                #DOCUMENT: null
NODE.nodeValue                                  #For CHARDATA: NODE.textContent
                                                #Others: null
NODE.normalize()                                #Erase empty TEXT, and join adjacent TEXT.

HTMLELEM.getAttribute('ATTR')->'VAL'            #
HTMLELEM.setAttribute('ATTR', 'VAL')            #
HTMLELEM.hasAttribute('ATTR')->BOOL             #
HTMLELEM.removeAttribute('ATTR')                #
HTMLELEM.removeAttributeNode(ATTR)->ATTR        #See HTML doc


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         ATTR / CHARDATA       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Attr                                            #NODE child. HTML attribute
ATTR.name                                       #'ATTR'
ATTR.value                                      #'VAL'

CharacterData                                   #NODE child. TEXT|COMMENT parent
CHARDATA.data                                   #STR
CHARDATA.length                                 #NUM
CHARDATA.appendData(STR)                        #
CHARDATA.insertData(UINT, STR)                  #
CHARDATA.substringData(UINT, UINT2)->STR        #
CHARDATA.deleteData(UINT, UINT2)                #
CHARDATA.replaceData(UINT, UINT2, STR)          #

Text                                            #CHARDATA child. ELEM's text content
TEXT.wholeText                                  #STR
TEXT.splitText(UINT)                            #Split into two TEXT at position UINT

Comment                                         #CHARDATA child. HTML comment


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          DIMENSIONS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SCROLLING HEIGHT|WIDTH ==>                      #Unless specified, if scrollable, counts only visible part (including scrollbar)
                                                #'scrollable' does not include top-level scrolling
WINDOW.outer|innerHeight|Width                  #WINDOW size, including|excluding browser UI
                                                #As such, counts only visible part, including top-level scrolling
JQ.outerHeight|Width(true)                     ##Margin-box
ELEM.offsetHeight|Width                         #Border-box (readonly)
JQ.outerHeight|Width(false)                    ##Border-box
JQ.innerHeight|Width                           ##Padding-box
ELEM.clientHeight|Width                         #Padding-box (display BLOCK only) (readonly) (scrollable: exclude scrollbar)
ELEM.scrollHeight|Width                         #Padding-box (display BLOCK only) (readonly) (scrollable: exclude scrollbar, includes scrollable part)
JQ.css('height|width'[, VAL|FUNC])             ##Content-box
JQ.height|width([VAL|FUNC])                    ##Content-box
                                               ##Same as JS.css('height|width') but:
                                               ##  - return a NUM (pixels) au lieu de STR.
                                               ##  - doesn't take box-sizing into account
ELEM.clientTop|Left                             #Top|Left border-width (display BLOCK only) (readonly)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           POSITION            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


ELEM.getBoundingClientRect()->OBJ               #Returns border-box offset compared to its DOCUMENT
                                                #OBJ: top|bottom, left|right, width|height
                                                #Readonly
JQ.offset([OBJ2|FUNC])->OBJ                    ##Same but:
                                               ##  - OBJ only: left|right
                                               ##  - can be set
                                               ##  - doesn't work on hidden objects
DOCUMENT.elementFromPoint(DOUBLE,DOUBLE2)->ELEM #innermost ELEM with boundingClientRect containing DOUBLE,DOUBLE2 point
                                                #null if out-of-bound
ELEM.offsetParent                               #Is:
                                                #  - display absolute: closest Absolute parent (if none, BODY)
                                                #  - HTML|BODY or display fixed: null
                                                #  - others: BODY
                                                #Readonly
JQ.offsetParent()->JQ2                         ##Same except BODY|null -> HTML
ELEM.offsetTop|Left                             #Shift from ELEM border to ELEM.offsetParent padding.
                                                #Readonly
JQ.position([OBJ2])->OBJ                       ##Same except:
                                               ##  - OBJ only: left|top
                                               ##  - can be set
                                               ##  - doesn't work on hidden objects
                                               ##  - does not use ELEM.offsetParent but union of border boxes of JQ.offsetParent()'s children
                                               ##OBJ2 (jQuery UI):
                                               ##  - of SELECTOR|MOUSEEVENT
                                               ##  - my|at POSITION (def: center): put JQ's MY at same place as OF's AT
                                               ##  - within (def: WINDOW)
                                               ##  - collision STR: if positionned outside of WITHIN, continue progression from:
                                               ##     - "none": same side
                                               ##     - "flip" (def): opposite side once
                                               ##     - "flipfit": opposite back and forth
                                               ##     - "fit": stop
                                               ##  - using(MY.offset(), OBJ3): does not do any positioning (let this function do it):
                                               ##      - OBJ3:
                                               ##        - element|target (MY|AT): left|top, width|height, element JQ
                                               ##        - horizontal|vertical DIRECTION: according to MY
                                               ##        - important 'horizontal|vertical'
                                               ##      - this is ELEM


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SCROLLING           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JQ.scrollParent()->JQ2                         ##Parent JQ will scroll into (jQuery UI)

WINDOW.pageX|YOffset                            #Top-level scrolling
ELEM.scrollTop|Left                             #Pixels having being scrolled
                                                #scrollLeft can be negative if dir="rtl". 
                                                #Block-level only. Readonly.
JQ.scrollLeft|Top()->NUM                       ##ELEM.scrollLeft|Top or WINDOW.pageX|YOffset

WINDOW.scroll(UINT, UINT2)                      #In pixels, absolute.
WINDOW.scrollBy(UINT, UINT2)                    #In pixels, relative.
ELEM.scrollIntoView([BOOL])                     #Scroll to put ELEM's top (or bottom if BOOL false) on viewport's top


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            HEADERS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


HTMLDOCUMENT.lastModified                       #Returns Last-Modified [S] as 'DATE'
                                                #If not set, current date.
HTMLDOCUMENT.cookie                             #Get|set Set-Cookie [S]
                                                #Get all 'VAR=VAL;VAR=VAL...' but only set a single 'VAR=VAL[;SVAR=SVAL]...'
                                                #Should use en|decodeURIComponent(VAL)
                                                #Setting on Chrome when using file:/// does not work.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              RTF              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


HTMLDOCUMENT.designMode                         #If 'on' (def: 'off'), disable events and allow execCommand()
HTMLDOCUMENT.execCommand                        #Fire RTF (MIDAS) COMMAND on current selection
('COMMAND'[, false, 'ARG'])->BOOL               #Returns false if failed.
                                                #Available COMMAND ARG:
                                                #  - back|forecolor "#ffffff"
                                                #  - hilitecolor "#ffffff": only if styleWithCSS
                                                #  - bold|italic|strikethrough|underline
                                                #  - copy|cut|paste
                                                #  - createlink "URL" | unlink
                                                #  - de|increasefontsize
                                                #  - delete
                                                #  - fontname "FONT"
                                                #  - fontsize "NUM"
                                                #  - heading "H*"
                                                #  - out|indent
                                                #  - insertbronreturn BOOL : <CR> creates a new <p> or a <br>
                                                #  - inserthorizontalrule : replace by <hr>
                                                #  - inserthtml STR : replace by HTMLDOCUMENT code STR
                                                #  - insertimage STR
                                                #  - insert[un]ordererdlist
                                                #  - insertparagraph
                                                #  - justifycenter|full|left|right
                                                #  - undo|redo
                                                #  - removeformat
                                                #  - selectall
                                                #  - sub|superscript
                                                #  - styleWithCSS : change format with CSS, not HTMLDOCUMENT
                                                #  - contentReadOnly : all document becomes readonly
                                                #Browsers implement differently: use tags (e.g. <b>) or CSS (e.g. <... style="...">)
HTMLDOCUM.queryCommandEnabled('COMMAND')->BOOL  #
HTMLDOCUM.queryCommandIndeterm('COMMAND')->BOOL #
HTMLDOCUMENT.queryCommandState('COMMAND')->BOOL #
HTMLDOCUM.queryCommandSupported('COMMAND')->BOOL#
HTMLDOCUMENT.queryCommandValue('COMMAND')->'ARG'#For current selection


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:      RANGE ET SELECTION       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.createRange()                          #Crée/renvoie un RANGE vide.

Range                                           #Fragments du document. Can contain parts of NODE.
                                                #If a collapsed RANGE is after ELEM and before a TEXT, it goes before the
                                                #ELEM (Webkit bug).
                                                #Renvoyé e.g. par DOCUMENT.createRange() ou SELECTION.getRangeAt()
RANGE.start|endContainer                        #
RANGE.start|endOffset                           #Comme pour SELECTION
RANGE.setStart|End(NODE,UINT)                   #Modifie le start|endContainer NODE et start|endOffset UINT.
RANGE.setStart|EndBefore|After(NODE)            #Modifie le start|endContainer en mettant avant/après NODE.
RANGE.selectNode[Contents](NODE)                #Modifie le start|endContainer pour sélectionner NODE (ou si Contents, les
                                                #enfants de NODE)
RANGE.collapsed                                 #Comme pour SELECTION
RANGE.collapse(BOOL)                            #Comme pour SELECTION.collapseToStart|End (Start if true)
RANGE.commonAncestorContainer                   #Deepest NODE containing both startContainer et endContainer
RANGE.compareBoundaryPoints(ENUM, RANGE2)       #Compare RANGE et RANGE2 selon ENUM : Range.END|START_TO_END|START.
                                                #Renvoie -1, 0 ou 1.

RANGE.cloneContents()                           #Renvoie copie de même manière que NODE.cloneNode(), sauf que renvoie ici
                                                #les NODE de RANGE sous forme de DOCUMENTFRAGMENT
RANGE.deleteContents()                          #Remove les NODE de RANGE
RANGE.extractContents()                         #Effectue cloneContents() puis deleteContents()
RANGE.surroundContents(NODE)                    #Rajoute NODE (sans enfants) autour de RANGE. RANGE ne doit pas couper un
                                                #CHARDATA au milieu.
RANGE.insertNode(NODE)                          #Comme NODE.appendChild(), sauf que place NODE ici avant le début de RANGE.

RANGE.cloneRange()                              #Renvoie copie RANGE2
RANGE.detach()                                  #Supprime RANGE (pour augmenter performance / release resources)

DOCUMENT.createDocumentFragment()               #Crée/renvoie un DOCUMENTFRAGMENT vide.

DocumentFragment                                #Ensemble de NODE (dont DOCUMENTFRAGMENT est le parent). Inherits from NODE.
                                                #Never attached to the main DOM tree.
                                                #But est de créer en-dehors du tree NODE à append, avant de les append. Les
                                                #ajouter au-fur-et-à-mesure est moins efficient et visible pour l'user.
                                                #Créé par exemple par DOCUMENT.createDocumentFragment() ou
                                                #RANGE.cloneContents()

WINDOW.getSelection()                           #Renvoie SELECTION courante.

Selection                                       #User selection. N'est pas un RANGE mais contient un/plusieurs RANGE.
                                                #Plusieurs RANGE sélectionnable slt via scripting (pas par UI), mais 
                                                #seulement pour certains navigateurs.
                                                #Retrieved via getSelection(), ou méthodes pour INPUT ou TEXTAREA.
                                                #L'anchor est le premier point sélectionné, focus le dernier.
                                                #Si anchor == focus point, est "collapsed"
SELECTION.anchor|focusNode                      #Renvoie le NODE comprenant l'anchor|focus point. Readonly.
SELECTION.anchor|focusOffset                    #Si anchor|focusNode est un CHARDATA, offset (en UCHAR) depuis celui-ci.
                                                #Si autre NODE (dont ELEM), offset au sein de ses NODE enfants (l'enfant
                                                #devient le point, à la place de NODE).
                                                #Readonly.
SELECTION.isCollapsed                           #True si collapsed.
SELECTION.collapse(NODE, UINT)                  #Move la SELECTION vers NODE + UINT (offset in UCHAR), collapsed.
SELECTION.collapseToStart|End()                 #Collapse la SELECTION vers son début/fin.
SELECTION.selectAllChildren(NODE)               #Move la SELECTION vers NODE, enfants compris.

SELECTION.getRangeAt(UINT)                      #Renvoie le RANGE numéro UINT (0-indexed) dans SELECTION.
SELECTION.addRange(RANGE)                       #Rajoute une sélection RANGE dans SELECTION. Works only if RANGE courant
                                                #est inclus dans ce RANGE.
SELECTION.removeAllRanges()                     #Déselectionne tout (plus de RANGE dans SELECTION)

SELECTION.rangeCount                            #Renvoie le nombre de RANGE inclus (0 si aucune sélection).
SELECTION.toString()                            #Only keep the TEXT when converting to STRING.
                                                #Override OBJECT.toString()

SELECTION.deleteFromDocument()                  #Erase all the content (not the node itself) of the TEXT included in SELECTION.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           ITERATION           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.createNodeIterator(NODE                #Renvoie un NODEITERATOR dont .root est NODE, .whatToShow ENUM (def: aucun)
[, ENUM[, NODEFILTER]])                         #et .filter NODEFILTER (can be a FUNC(NODE) or an OBJ with FUNC 
                                                #.acceptNode(NODE))

NodeIterator                                    #Iterator pour NODE, créé par DOCUMENT.createNodeIterator()
                                                #Itère dans les enfants de NODEITERATOR.root via .next|previousNode(), et
                                                #renvoie NODE lors itération.
                                                #Filtre selon :
                                                #  - .whatToShow or'd flags ENUM : NodeFilter.SHOW_ALL|ELEM|ATTRIBUTE|
                                                #    TEXT|COMMENT|DOCUMENT|DOCUMENT_TYPE|DOCUMENT_FRAGMENT
                                                #  - .filter : OBJ ayant membre OBJ.acceptNode(NODE), renvoyant 
                                                #    NodeFilter.FILTER_ACCEPT|REJECT selon si le NODE est skipped.
NODEITERATOR.root                               #
NODEITERATOR.whatToShow                         #
NODEFILTER.filter                               #
NODEITERATOR.next|previousNode()                #Renvoie null si out-of-bound
NODEITERATOR.detach()                           #Comme RANGE

DOCUMENT.createTreeWalker(NODE
[, ENUM[, NODEFILTER]])                         #Comme createNodeIterator() mais pour un TREEWALKER

TreeWalker                                      #Comme NodeIterator, mais peut itérer récursivement parmi les enfants.
                                                #
TREEWALKER.filter                               #Can also return NodeFilter.FILTER_SKIP, qui ne rejette que le parent, mais pas
                                                #les enfants (contrairement à NodeFilter.FILTER_REJECT)
TREEWALKER.root                                 #
TREEWALKER.whatToShow                           #
TREEWALKER.next|previousNode()                  #
TREEWALKER.detach()                             #Comme NODEITERATOR

TREEWALKER.currentNode                          #NODE courant
TREEWALKER.parentNode()                         #Va vers le NODE parent et renvoie (si aucun, null et aucun mouvement)
TREEWALKER.first|lastChild()                    #Pareil pour first/last child
TREEWALKER.previous|nextSibling()               #Pareil pour siblings


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            WINDOW             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOMError                                        #
DOMError.name                                   #STR de l'erreur

WINDOW.alert(STR)                               #Show popup with only OK. To avoid. Warning: non-standard.
WINDOW.confirm(STR)                             #Pareil mais with OK and Cancel buttons. Return true si OK. Warning:
                                                #non-standard.
WINDOW.prompt(STR[, STR2])                      #Pareil mais demande user input STR3, et le renvoie (ou null si Cancel). 
                                                #STR2 est le placeholder. Warning: non-standard.
WINDOW.print()                                  #Print WINDOW (open dialog first). Warning: non-standard.

WINDOW.setTimeout(FUNC, DOUBLE)                 #Invoque FUNC() après DOUBLE ms, with WINDOW as this.
                                                #Renvoie Id UINT, to use with clearTimeout().
WINDOW.clearTimeout(UINT)                       #Supprime effet du setTimeout() dont l'Id est UINT
WINDOW.setInterval(FUNC, DOUBLE)                #
WINDOW.clearInterval(UINT)                      #Pareil, mais repère chaque DOUBLE ms. Warning: non-standard.

WINDOW.btoa|atob(STR)                           #Convert to|from Base64

WINDOW.console                                  #Renvoie CONSOLE. Not in IE <10. Warning: non-standard.
CONSOLE.info(STR)                               #Can use format strings "%d" (NUM), "%f" (DOUBLE), "%s" (STR), "%o" (hyperlink)
                                                #or "%c" (CSS style, e.g "color:red;font-style:italic", not supported by IE)
CONSOLE.log(STR)                                #
CONSOLE.warn(STR)                               #
CONSOLE.error(STR)                              #Display STR on console, with different stylings.
CONSOLE.dir(OBJ)                                #Renvoie membres d'OBJ de manière interactive. Not in Opera
CONSOLE.group[Collapsed]()                      #Crée un menu déroulant dans la console (si Collapsed: automatiquement fermé)
CONSOLE.groupEnd()                              #Supprime menu déroulant courant.
CONSOLE.time[End](STR)                          #Commence/supprime un timer. Temps est affiché lors de timeEnd()
CONSOLE.trace()                                 #Imprime current stack.

WINDOW.screen                                   #Renvoie SCREEN. Warning: non-standard.
WINDOW.screenX|Y                                #Distance between real screen topleft corner and browser window topleft corner.
SCREEN.width|height                             #Real screen size (except IE which can take zoom into account).
SCREEN.availWidth|Height                        #width|height - screenX|Y
SCREEN.color|pixelDepth                         #En général same (24 souvent,e.g. 8 bits sur 3 channels RGB)

WINDOW.navigator                                #Renvoie NAVIGATOR
NAVIGATOR.userAgent                             #Browser. Not always intuitive. Can be overriden.
                                                #Prefer feature detection to user agent.
NAVIGATOR.platform                              #OS et CPU, e.g. "Linux x86_64". Can be overriden.
NAVIGATOR.cookieEnabled                         #BOOL. Readonly. Warning: non-standard.
NAVIGATOR.geolocation                           #Renvoie GEOLOCATION. Demande confirmation de l'user.

GEOLOCATION.getCurrentPosition(FUNC(POSITION),  #Cherche à géolocaliser et, si succès, invoque FUNC, sinon FUNC2.
FUNC2(POSITIONERROR), POSITIONOPTIONS)
GEOLOCATION.watchPosition(FUNC(POSITION),       #Same, but is invoked each time position changes.
FUNC2(POSITIONERROR), POSITIONOPTIONS)          #Returns an Id UINT to be used by clearWatch()
GEOLOCATION.clearWatch(UINT)                    #Clear une watchPosition() dont l'Id est UINT

POSITION.coords.latitude|longitude              #Google Maps API can give name of street/city with this. 
POSITION.coords.accuracy                        #In meters (20 in current settings)
POSITION.coords.altitude[Accuracy]              #Can be impossible on some devices (renvoie null)
POSITION.timestamp                              #Seconds since Epoch

POSITIONERROR.code                              #1: permission denied, 2: position unavailable, 3: timeout
POSITIONERROR.message                           #STR

POSITIONOPTIONS.enableHighAccuracy              #If true, maybe higher accuracy, but more power consumption (def: false)
POSITIONOPTIONS.timeout                         #Time in ms before failing (def: Infinity)
POSITIONOPTIONS.maximumAge                      #Time in ms of the cache (def: Infinity). Can be 0 for no cache.

WINDOW.requestAnimationFrame(FUNC)              #Exécute FUNC(FLOAT), où FLOAT est un timestamp (cycle de quelques minutes slt,
                                                #mais précision à ms), juste avant la prochaîne fois que l'écran se rafraîchit
                                                #(souvent 60 fois/sec).
                                                #Ne le fait qu'une fois : il faut donc reffectuer un requestAnimationFrame() 
                                                #recursif à la fin de FUNC pour avoir une animation au rythme du 
                                                #rafraîchissement d'écran.
                                                #But : ne pas afficher plus d'une animation frame par rafraîchissement d'écran.
                                                #Animations plus rapides que frame rate produit bad result.
                                                #Renvoie un ID, pour qu'on puisse cancel via WINDOW.cancelAnimationFrame(ID)
                                                #Pas sur que ceci marche avec Safari.
                                               ##Ext: webkit


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       LOCATION/HISTORY        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NODE.baseURI                                    #Base of relative URL relatives. 
                                                #Document URI du document except:
                                                #  - <base> used
                                                #  - DOCUMENT dynamically created: null

HTMLDOCUMENT.URL                                #Readonly
HTMLDOCUMENT.domain                             #Renvoie le domain du site, sous forme de STR.
                                                #Peut être set, mais seulement à un superdomain (a.b.org to b.org),
                                                #et ne peut qu'accéder alors aux ressources de DOCUMENT de ce superdomain,
                                                #et ayant modifier leur HTMLDOCUMENT.domain eux-mêmes.
HTMLDOCUMENT.referrer                           #URL d'origine, sous forme de STR. Si navigue directmenet (en tapant l'URL,
                                                #via un bookmark, etc.), renvoie ""

WINDOW.location                                 #Renvoie LOCATION. All can be set.
LOCATION.href                                   #
LOCATION.protocol                               #
LOCATION.hostname                               #
LOCATION.port                                   #
LOCATION.host                                   #
LOCATION.pathname                               #
LOCATION.search                                 #
LOCATION.hash                                   #Same as A et AREA.
LOCATION.assign(STR)                            #Navigate to URL STR.
LOCATION.replace(STR)                           #Same but don't save current page in history.
LOCATION.reload(BOOL)                           #Reload current page. If true, cache can't be used.


WINDOW.history                                  #Renvoie HISTORY
HISTORY.length                                  #Nombre d'éléments dans l'historique
HISTORY.go(INT)                                 #Progresse dans historique.
HISTORY.back|forward()                          #Same as go(1) et go(-1)
HISTORY.push|replaceState(VAR, STR[, STR2])     #Rajoute une AJAX history entry, ou remplace celle courante :
                                                #  - VAR est le state. Permet d'enregistrer ce qui a changé dans la page pour
                                                #    le rétablir.
                                                #  - STR est le titre de page, mais ignored by most browsers.
                                                #  - STR2 est l'URL (def: URL courante). Can be only change the search part of
                                                #    the URL, to be added "foo" -> "URL?foo"
                                                #    Ne redirige pas vers URL, change seulement l'URL affichée. 
                                                #Revenir en arrière/avant change URL, et déclenche popstate pour que l'on 
                                                #modifie la page via l'event handler.
                                                #But : avoir AJAX, mais conserver possibilité d'historique.
                                                #Server devrait prendre en compte STR2 "?VAR=VAL" si l'user navigue dessus non 
                                                #via historique, mais directement en tapant l'addresse ou via bookmark.
HISTORY.state                                   #State VAR courant.

PopStateEvent                                   #EVENT child
POPSTATEVENT.state                              #Contient le state VAR s'il s'agit d'un AJAX history entry, null sinon.
WINDOW.onpopstate = FUNC(POPSTATEVENT)          #Triggered when history changes, via HISTORY.back|forward() ou user 
                                                #intervention, mais pas HISTORY.*State().

HashChangeEvent                                 #EVENT child
HASHCHANGEEVENT.old|newURL                      #
WINDOW.onhashchange = FUNC(HASHCHANGEEVENT)     #Change of #URL à la fin de l'URL.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             AJAX              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


AJAX ==>                                        #Using XHR to change page without reloading it (dynamic page).
XmlHttpRequest                                  #Send a HTTP request and retrieves response (often as a JSON string).
XMLHTTPREQUEST()                                #Doesn't fire on creation, as opposed to send()
                                                #Should not be defined globally (race condition)
XMLHTTPREQUEST.open(METHOD, URL[, BOOL          #Specify the request :
[, USERNAME[, PASSWORD]]])                      #  - URL has protocol (can also be ftp://). Same origin policy.
                                                #  - BOOL: if true (def), async. (continue even with request loading). 
                                                #    Only reason to use sync. is :
                                                #      - if inside a [before]unload event : usually when user closes page.
                                                #        If async., XMLHTTPREQUEST won't complete before page closes. 
                                                #        Sync. keeps it opened.
                                                #      - if inside a WORKER (so it doesn't end too early)
                                                #  - USERNAME|PASSWORD: not well supported, must set Authorization header
                                                #    manually
XMLHTTPREQUEST.setRequestHeader(VAR, VAL)       #Rajoute un HTTP header STR, de valeur STR2.
                                                #Note that many headers are forbidden using XHR by some browsers.
                                                #Chrome sets following headers by def.: host, connection: keepalive, 
                                                #content-length, cache-control: max-age=0, origin, user-agent, accept: */*,
                                                #accept-encoding, accept-language, referer
XMLHTTPREQUEST.responseType                     #To be set to tell the server which MIME type we want in response, among "text"
                                                #"arraybuffer" or "blob". Déf is "", which means "text" (STR).
                                                #It seems like it does not modify request, but only how XMLHTTPREQUEST.response
                                                #is interpreted.
XMLHTTPREQUEST.withCredentials                  #If true (def: false), send credentials (cookies and HTTP authentication data)
                                                #with the request. Used for CORS.
XMLHTTPREQUEST.send([VAL])                      #Send the request.
                                                #VAL are data sent to the server if POST :
                                                #  - STR: 
                                                #    - automatically put Content-Type: "text/plain"
                                                #    - if "VAR=VAL&...":
                                                #       - use encodeURIComponent()
                                                #       - use Content-Type: "application/x-www-form-urlencoded"
                                                #  - DOCUMENT :
                                                #    - automatically put Content-Type: "application/xml"
                                                #    - converted in STR before
                                                #  - BLOB:
                                                #    - does not set Content-Type: must set it (e.g. "application/octet-stream")
                                                #  - FORMDATA :
                                                #    - FormData([FORM]), construit avec potentiellement un FORM
                                                #    - on peut aussi ajouter des key/value pairs via FORMDATA.append(STR,VAL),
                                                #      où STR est la key, et VAL peut être STR2 ou BLOB
                                                #    - FormData creates the right Content-Disposition: ..., with 
                                                #      filename="blob" and Content-Type: application/octet-stream
                                                #    - set Content-Type: "multipart/form-data"
XMLHTTPREQUEST.abort()                          #Emet event

XMLHTTPREQUEST.readyState                       #Comme pour DOCUMENT, mais utilise autres valeurs :
                                                #  - XMLHTTPREQUEST.UNSENT : uninitialized
                                                #  - XMLHTTPREQUEST.OPENED : open()
                                                #  - XMLHTTPREQUEST.HEADER_RECEIVED : send() and header received
                                                #  - XMLHTTPREQUEST.LOADING : downloading body in process
                                                #  - XMLHTTPREQUEST.DONE : downloading body complete
                                                #Do stuff usually at either 3 or 4, in the readystatechange event handler
XHR.onreadystatechange = FUNC(EVENT)            #When readyState changes

XMLHTTPREQUEST.status                           #HTTP response status code. 200 is OK. To be checked in event handler.
XMLHTTPREQUEST.statusText                       #Same but as STR
XMLHTTPREQUEST.response                         #Once fetched, server answer as STR, ARRAYBUFFER or BLOB, depending on the
                                                #responseType. 
XMLHTTPREQUEST.responseText                     #Returns XMLHTTPREQUEST.response as STR (e.g. responseType "text")
XMLHTTPREQUEST.responseXML                      #Same for XML
XMLHTTPREQUEST.getResponseHeader(STR)           #Renvoie response header STR, sous forme de STR2
XMLHTTPREQUEST.getAllResponseHeaders()          #Renvoie ensemble des response headers.

ProgressEvent                                   #Permet de savoir degré de téléchargement.
PROGRESSEVENT.lengthComputable                  #False si following attributes sont pas disponibles.
PROGRESSEVENT.loaded                            #Nombre d'octets téléchargés
PROGRESSEVENT.total                             #Nombre d'octets total

XHR.onloadstart = FUNC(PROGRESSEVENT)           #When starts reading
XHR.onprogress = FUNC(PROGRESSEVENT)            #When is reading
XHR.onload[end] = FUNC(PROGRESSEVENT)           #When finishes. load is success, loadend is success or failure.
XHR.onabort = FUNC(PROGRESSEVENT)               #when abort()
XHR.onerror = FUNC(PROGRESSEVENT)               #when error

EXAMPLE ==>                                     # var xhr = new XMLHttpRequest();
                                                # xhr.open("POST", "http://www.a.fr" );
                                                # xhr.addEventListener("readystatechange", function() {
                                                #   if ( xhr.readyState == 4 ) { 
                                                #     console.log( xhr.response );
                                                #   } else { 
                                                #     console.log( xhr.statusText );
                                                #   }
                                                # });
                                                # xhr.send("vara=a");


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              CSS              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CSS MANIPULATION ==>                            #Préférer manipuler via ajout/retrait de ELEM.classList, afin de séparer
                                                #forme (CSS) de JavaScript.
WINDOW.getComputedStyle(ELEM[, STR])            #Renvoie CSSSTYLEDECLARATION de l'élément (used values). Readonly.
                                                #STR is a pseudo-element CSS selector, like ":after" (def: null).
                                                #A utiliser pour get les CSS properties d'un élément.
HTMLELEM.style                                  #Renvoie CSSSTYLEDECLARATION de l'élément (inline styling only). 
                                                #A utiliser pour set les CSS properties d'un élément.
DOCUMENT.styleSheets                            #Renvoie l'ensemble des STYLESHEET sous forme de STYLESHEETLIST.
                                                #A utiliser pour set/get CSS rules (property sur plusieurs éléments).
                                                #Pour set : utiliser CSSSTYLESHEET.insert|deleteRule() et méthodes de 
                                                #CSSSTYLEDECLARATION.

StyleSheetList                                  #Liste de STYLESHEET (si CSS, CSSSTYLESHEET)
STYLESHEETLIST.length
STYLESHEETLIST[UINT]

StyleSheet                                      #Stylesheet, language-independant.
                                                #Subject to same origin policy.
STYLESHEET.type                                 #Type STR, en général "text/css". Readonly
STYLESHEET.href                                 #URL STR (null si inline). Readonly
STYLESHEET.ownerNode                            #NODE spécifiant la STYLESHEET (en général STYLE ou LINK). Readonly
STYLESHEET.title                                #Title attribute STR de l'ownerNode. Readonly
STYLESHEET.media                                #Media attribute MEDIALIST de l'ownerNode
STYLESHEET.parentStyleSheet                     #Si importé via @include, renvoie cette STYLESHEET, sinon null. Readonly
STYLESHEET.disabled                             #BOOL pour disable la styleSheet. 

CSSStyleSheet                                   #Enfant de STYLESHEET, pour CSS
CSSSTYLESHEET.cssRules                          #Renvoie les rules sous forme de CSSRULELIST
CSSSTYLESHEET.insertRule(STR, UINT)             #Insert une CSSRULE (spécifié sous forme de son contenu CSS STR, dont selector)
                                                #à position UINT.
CSSSTYLESHEET.deleteRule(UINT)                  #Remove CSSRULE numéro UINT.
CSSSTYLESHEET.ownerRule                         #Si importé via @include, renvoie cette CSSIMPORTRULE, sinon null.

CSSRuleList                                     #Liste de CSSRULE. Mêmes membres que STYLESHEETLIST

CSSRule                                         #Tout CSS rule (at-rule or not)
CSSRULE.type                                    #ENUM parmi CSSRule.STYLE|CHARSET|IMPORT|MEDIA|FONT_FACE|PAGE|..._RULE.
                                                #Readonly
CSSRULE.cssText                                 #Contenu CSS STR, dont selector. Readonly.
CSSRULE.parentRule                              #CSSRULE parent (e.g. une CSSMEDIARULE), ou null si aucun.
CSSRULE.parentStyleSheet                        #Renvoie CSSSTYLESHEET la contenant

CSSStyleRule                                    #CSS rule (hors at-rule). Enfant de CSSRULE
CSSSTYLERULE.selectorText                       #Renvoie selector sous forme de STR. Readonly. IE9 has weird behavior sometimes
CSSSTYLERULE.style                              #Renvoie la CSSSTYLEDECLARATION. Readonly.

CSSImportRule                                   #CSS @import rule. Enfant de CSSRULE.
CSSIMPORTRULE.href                              #Renvoie STR de styleSheet imported
CSSIMPORTRULE.styleSheet                        #Renvoie CSSSTYLESHEET imported
CSSIMPORTRULE.media                             #Renvoie MEDIALIST

CSSMediaRule                                    #CSS @media rule. Enfant de CSSRULE.
CSSMEDIARULE.media                              #Renvoie MEDIALIST

CSSNamespaceRule                                #CSS @namespace rule. Enfant de CSSRULE
CSSNAMESPACERULE.namespaceURI                   #STR
CSSNAMESPACERULE.prefix                         #STR, ou null si aucun

CSSFontFaceRule                                 #CSS @font-face rule. Enfant de CSSRULE.
CSSFONTFACERULE.style                           #Renvoie la CSSSTYLEDECLARATION. Readonly.

CSSPageRule                                     #CSS @page rule. Enfant de CSSRULE.
CSSPAGERULE.style                               #Same as CSSFONTFACERULE

CssKeyframesRule                                #CSS @keyframes rule. Enfant de CSSRULE
CSSKEYFRAMESRULE.name                           #Nom STR
CSSKEYFRAMESRULE.cssRules                       #Ensemble des CSSKEYFRAMERULE, sous forme d'array-like.
CSSKEYFRAMESRULE.appendRule(STR)                #Rajoute une CSSKEYFRAMESRULE dont contenu CSS (dont selector) est STR
CSSKEYFRAMESRULE.find|deleteRule(STR)           #Renvoie/supprime la CSSKEYFRAMERULE dont sélector est STR

CssKeyframeRule                                 #Rule au sein d'une @keyframes rule. Enfant de CSSRULE
CSSKEYFRAMERULE.keyText                         #Selector STR
CSSKEYFRAMERULE.style                           #Renvoie la CSSSTYLEDECLARATION. Readonly.

CSSStyleDeclaration                             #Ensemble de statements d'une CSSRULE (hors selector)
CSSSTYLEDECLARATION.length                      #Nombre de statements. Readonly
CSSSTYLEDECLARATION[UINT]                       #Renvoie property numéro UINT, sous forme de STR
CSSSTYLEDECLARATION.cssText                     #Contenu CSS STR de l'ensemble des statements. Readonly
CSSSTYLEDECLARATION.getPropertyPriority(STR)    #Renvoie "important" si !important pour rule de propriété name STR, "" sinon
                                                #Ne pas utiliser shortcut properties. lowercase with dashes for names.
CSSSTYLEDECLARATION.getPropertyValue(STR)       #Pareil pour propriété value
CSSSTYLDECLARATIN.setProperty(STR, STR2[, STR3])#STR est propriété name, STR2 value, et STR3 optionnel "important".
                                                #Can use shortcut properties.
CSSSTYLEDECLARATION.STR                         #Equivaut à getPropertyValue()/setProperty(). Camelcase property names
CSSSTYLEDECLARATION.removeProperty(STR)         #Remove propriété value, et renvoie sous forme de STR
CSSSTYLEDECLARATION.parentRule                  #CSSRULE contenant ces statements.

MediaList                                       #Renvoyé par CSSMEDIARULE.media
MEDIALIST.length
MEDIALIST[UINT]                                 #Les media individuels sont des STR
MEDIALIST.mediaText                             #Ensemble des media sous forme de STR (separated by ", ")
MEDIALIST.appendMedium(STR)
MEDIALIST.deleteMedium(STR)                     #Rajoute/supprime media


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          WEB STORAGE          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WEB STORAGE ==>                                 #Like cookies, but :
                                                #  - meant to be read client-side, and not server-side.
                                                #  - Simpler to use
                                                #  - no expiration date.
                                                #  - 5MB instead of 4KB limit
Storage                                         #Classe d'objets contenant des informations.
                                                #Il s'agit d'un ensemble d'array associative pour chaque site web
                                                #(LOCATION.HOSTNAME) pour enregistrer des données.
                                                #IndexDB est plus complexe, moins supporté, mais plus rapide, permet des
                                                #objets plus gros, multithreaded, plus d'events, et plus de fonctions.
STORAGE.length                                  #UINT readonly
STORAGE.key(UINT)                               #Renvoie indice STR numéro UINT.
STORAGE.*etItem(STR[, STR2])                    #Ajoute un élément dont l'indice est STR et la valeur STR2
                                                #Valeur est une STR2: pour store un OBJET, le sérialiser en JSON
STORAGE.removeItem(STR)                         #Supprime un élément
STORAGE.clear()                                 #
WINDOW.localStorage                             #Global STORAGE avec données persistentes.
                                                #Private browsing crée new localStorage temporaire. It is cleaned when cleaning
                                                #cookies.
WINDOW.sessionStorage                           #Comme localStorage, mais available during a une page donnée (survives reload, 
                                                #but pas changement de page)

StorageEvent                                    #
STORAGEEVENT.key                                #Key STR changed
STORAGEEVENT.new|oldValue                       #STR
STORAGEEVENT.storageArea                        #STORAGE
STORAGEEVENT.url                                #STR de WINDOW2
WINDOW.onstorage = FUNC(STORAGEEVENT)           #Triggered on any Storage action, but only on other WINDOW2 that current one.



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:     DRAG&DROP ET CLIPBOARD    :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



<any>
  draggable="true|false|"                       #Changes possibility to drag : def "true" on links and images, def "false" sur
                                                #reste, "" for inherit. Needs also dragstart event handler to work.

DragEvent                                       #Enfant de MouseEvent.
                                                #Only links, images and selection can be dragged on a webpage.
                                                #However, with draggable attribute + dragstart event handler, everything can be
                                                #Drag and drop sources can also come from other applications.
                                                #En général pour TAG, les events sont :
                                                #  - actif :
                                                #    - dragstart|end : when TAG starts/stops (even unsuccessful) to be dragged
                                                #    - drag : each time TAG dragging moves
                                                #  - passif :
                                                #    - dragenter|leave : when any dragging enters/leaves TAG
                                                #    - dragover : each time any dragging moves over TAG
                                                #    - drop : when any dragging successfully ends on TAG
                                                #During a drag, mouse and keyboard events are neutralized.
                                                #Idées :
                                                #  - mandatory :
                                                #    - setData() with dragstart
                                                #    - call event.stopPropagation() puis event.preventDefault() au début de 
                                                #      dragover + dragenter + drop on target (if valid type)
                                                #    - getData() with drop
                                                #  - optional :
                                                #    - do operations on the source with dragend (check if drag was successful
                                                #      by checking dropEffect). 
                                                #    - change dragged item UI with dragstart and dragend, or dropped item UI 
                                                #      with dragenter and leave+drop
                                                #    - effects :
                                                #      - set effectAllowed on dragstart to restrict effects from drag source
                                                #        Déf. is what user set with modifier keys : nothing ("move"), shift
                                                #        ("copy"), shift+ctrl ("link").
                                                #      - set dropEffect on dragover + dragenter to restrict effect on the 
                                                #        drop zone. If incompatible, drop will not be performed.
                                                #      - dropEffect can't be read on drop, but on dragend, where it is equal
                                                #        to the actual action performed. effectAllowed can be read on drop.
DRAGEVENT.dataTransfer                          #Informations passées lors d'un drag and drop.
                                                #Can have one value by type : the first type to be accepted should be taken.
                                                #Set the most specific types first, retrieve the least specific last.

DATATRANSFER.setData(STR,STR2)                  #STR est le type de l'info, STR2 le contenu. Can be used only on dragstart.
                                                #STR est souvent le MIME type. Ex :
                                                #  - "text/plain" : texte. Always have it as a backup if other types end up
                                                #    not supported.
                                                #  - "text/uri-list" : URL. Always also put a "text/plain" with same data.
                                                #    Can have multiple URLs if separated by newline.
                                                #    Can have comments starting with #
                                                #    getData() with "text/uri-list" for all URLs, and "URL" for only first one.
                                                #    Images are usually dragged by their URL.
                                                #  - "text/html"
                                                #  - "Files" : fichiers, sous forme de FILELIST
                                                #  - "anything custom"
DATATRANSFER.getData(STR)                       #Renvoie data du type STR, sous forme de STR2, ou "" si non existant (ou si
                                                #STR2 est vide)
                                                #Subject to same origin policy.
DATATRANSFER.clearData([STR])                   #Remove data pour type STR (def: tous).
DATATRANSFER.types                              #Liste des types sous forme de STR_ARRAY
DATATRANSFER.files                              #Liste des items ayant type "Files", sous forme de FILELIST

DATATRANSFER.effectAllowed                      #STR représentant but interdits du drag&drop en indiquant allowed : 
                                                #  - copy : copie 1 dans 2
                                                #  - move : déplace 1 dans 2
                                                #  - link : link 2 vers 1
                                                #  - none : ne fait rien
                                                #  - copyLink/copyMove/linkMove/all : combinaison
                                                #Déf is "uninitialized", same as "all"
                                                #Cf plus haut.
DATATRANSFER.dropEffect                         #STR représentant but tenté par drag&drop. 
                                                #Valeurs possibles : copy, move, link ou none (def). 
                                                #Cf plus haut.

ClipboardEvent                                  #Marche comme drag and drops, but :
                                                #  - copy|cut event for start, paste for end
                                                #  - only getData(), setData() et clearData(). 
                                                #    They affect the actual OS clipboard.
                                                #  - can call stopPropagation() et preventDefault() to prevent default.
                                                #    - copy event handler should actually always call preventDefault()
                                                #  - events on DOCUMENT (other targets not supported)
CLIPBOARDEVENT.clipboardData                    #Renvoie DATATRANSFER
DOCUMENT.oncopy|cut|paste = FUNC(CLIPBOARDEVENT)#


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             FILES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Blob                                            #Raw data.
                                                #As opposed to ARRAYBUFFER (usually kept in memory), is usually saved as temp
                                                #file.
BLOB(ARRAYBUFFER_ARR|ARRAYBUFFERVIEW_ARR        #Constructor avec un ensemble STR_ARR (sera concaténé). OBJ est un plain object
|BLOB_ARR|STR_ARR[, OBJ])                       #avec OBJ.type: STR2, pour le MIME type.
BLOB.size                                       #In bytes
BLOB.type                                       #MIME type as STR
BLOB.slice(ULONG[, ULONG2[, STR]])              #Renvoie un BLOB2 from byte ULONG to byte ULONG2 (def: end), avec comme type 
                                                #STR (def: même)
WINDOW.saveAs(BLOB,STR)                         #Open save as dialog window to save BLOB under filename STR. Max 345 MiB.
                                                #Renvoie un FILESAVER (but have to use onEVENT = FUNC, not addEventListener)
                                                #pour certains browsers, pour d'autres créer un temporary
                                                #<a download href="DATA-URI"> et clique dessus (limite: 20MiB avec Chrome)
                                               ##Shim : FileSaver.js from eligrey
URL.createObjectURL(BLOB)                       #Renvoie une STR "object URL" (manipulable comme une data URI, mais étant plus 
                                                #une sorte de filename), représentant BLOB.
                                                #Seulement valide pendant la duree de vie du WINDOW courant.
                                                #Can be used by other WINDOW.
                                                #Utiliser $( '<a download="FILENAME" href="OBJECT-URL"></a>' )[0].click()
                                                #permet de telecharger sans limite de size par exemple.
                                               ##Ext: webkit
URL.revokeObjectURL(STR)                        #A invoquer apres utilisation.

FileList                                        #Liste de FILE
FILELIST[UINT]
FILELIST.length

File                                            #Enfant de BLOB
                                                #Obtained usually either by drag&drop (DATATRANSFER.files) or by user selection
                                                #(INPUT.files).
FILE.name                                       #Filename
FILE.lastModifiedDate                           #As a DATE

FileReader                                      #
FILEREADER()
FILEREADER.readAsText(BLOB[, STR])              #Doesn't return anything (async). Instead, fires events. 
                                                #Event handlers must read FILEREADER.result, which returns currently read files
                                                #as STR2. result is null if error or not read yet.
                                                #Can't use multiple times at once (i.e. when readyState is FileReader.LOADING)
                                                #STR est l'encoding (def: "UTF-8").
FILEREADER.readAsArrayBuffer(BLOB)              #Pareil mais result returns as ARRAYBUFFER
FILEREADER.readAsDataURL(BLOB)                  #Pareil mais comme Data URI scheme (cf doc HTML), so the file can be used 
                                                #elsewhere in the doc without being saved on a harddrive.
FILEREADER.result                               #Cf plus haut.
FILEREADER.readyState                           #Can be :
                                                #  - FileReader.EMPTY : constructed but no read*() called
                                                #  - FileReader.LOADING : read*() in progress
                                                #  - FileReader.NONE : read*() completed or error/abort
FILEREADER.abort()                              #Stops current reading.
FILEREADER.error                                #Current DOMERROR. DOMERROR.name can be : "NotFoundError", "SecurityError" or
                                                #"NotReadableError".

FILEREADERSYNC.read*(...)                       #Comme FILEREADER.read*(), mais pas async (bloque, et n'emet pas d'event).
                                                #Only available inside WORKER.

FILEREADER*.onprogress = FUNC(PROGRESSEVENT)    #
FILEREADER*.onloadstart = FUNC(PROGRESSEVENT)   #
FILEREADER*.onload[end] = FUNC(PROGRESSEVENT)   #
FILEREADER*.onabort = FUNC(PROGRESSEVENT)       #
FILEREADER*.onerror = FUNC(PROGRESSEVENT)       #Cf XHR

                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           WEBSOCKET           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WebSocket                                       #
WEBSOCKET(URL[, STR2[_ARRAY]])                  #Creates, opens and returns a WEBSOCKET, and request subprotocols STR2[_ARRAY]
                                                #Exception SECURITY_ERR if port blocked.
                                                #Emits open event, error event and message event.
WEBSOCKET.send(STR|BLOB|ARRAYBUFFER)            #Send data to server.
                                                #Can throw INVALID_STATE_ERR (connection not opened) or SYNTAX_ERR (invalid
                                                #data sent)
WEBSOCKET.binaryType                            #How binary data are received in MESSAGEEVENT: "blob" (def) or "arraybuffer"

WEBSOCKET.url                                   #URL
WEBSOCKET.protocol                              #Subprotocol returned by server.
WEBSOCKET.extensions                            #Extensions STR, changed by server.
WEBSOCKET.readyState                            #Any of WebSocket.CONNECTING|OPEN|CLOSING|CLOSED
WEBSOCKET.bufferedAmount                        #Number of bytes sent buffered.
WEBSOCKET.close(UINT, STR)                      #UINT est error code (1000 or 3000-4999), STR error message.
                                                #Should make sure bufferedAmount is 0 before.
                                                #Can throw INVALID_ACCESS_ERR (invalid UINT) or SYNTAX_ERR (invalid STR)

CloseEvent                                      #
CLOSEEVENT.wasClean                             #True if cleanly closed.
CLOSEEVENT.code                                 #UINT de WEBSOCKET.close()
CLOSEEVENT.reason                               #STR de WEBSOCKET.close()

WEBSOCKET.onmessage = FUNC(MESSAGEEVENT)        #
WEBSOCKET.onopen = FUNC(EVENT)                  #
WEBSOCKET.onclose = FUNC(CLOSEEVENT)            #
WEBSOCKET.onerror = FUNC(EVENT)                 #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:     MESSAGING AND WORKERS     :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WINDOW.postMessage(VAR, STR)                    #Permet d'envoyer un message VAR de WINDOW à une WINDOW2 (incluse dans IFRAME)
                                                #WINDOW2 reçoit un event message si son domain est STR (can be "*").

MessageEvent                                    #Inclus message event.
MESSAGEEVENT.data                               #VAR envoyé via postMessage()
MESSAGEEVENT.origin                             #PROTOCOL://DOMAIN:PORT. Should be checked to prevent XSS and CSRF
MESSAGEEVENT.source                             #WINDOW ayant lancé postMessage()
WINDOW|WORKER*.onmessage = FUNC(MESSAGEEVENT)   #

Worker                                          #Unique thread.
                                                #Actually parent du thread lancé.
                                                #If communications, need to make sure the thread or its parent have set up
                                                #their message event handler before being communicated.
WORKER(STR)                                     #Crée un WORKER lié au script STR, et le lance sur son propre thread.
WORKER.terminate()                              #Arrêt le thread. Thread keeps alive with its listeners until terminate().
WORKER.postMessage(VAR)                         #Communique un message VAR au thread, qui reçoit un message event.

WORKER*.onerror = FUNC(EVENT)                   #

WorkerGlobalScope                               #Un script lancé via un thread WORKER aura comme global object WORKRGLOBALSCOPE
                                                #Can also use addEventListener(),...
WORKERGLOBALSCOPE.self                          #Renvoie WORKERGLOBALSCOPE. Inutile mais plus clair de faire self.postMessage()
                                                #que postMessage() tout court. Should not use window but self.
WORKERGLOBALSCOPE.postMessage(VAR)              #Communique un message VAR au parent du thread, qui reçoit un message event.
WORKERGLOBALSCOPE.navigator                     #Renvoie WORKERNAVIGATOR, qui a comme membres .userAgent et .platform (comme
                                                #NAVIGATOR)
WORKERGLOBALSCOPE.location                      #Renvoie WORKERLOCATION, qui a mêmes propertés que LOCATION (sauf méthodes).
WORKERGLOBALSCOPE.importScripts(STR...)         #Include un script STR.
WORKERGLOBALSCOPE.close()                       #Stoppe le thread

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           APPCACHE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


MANIFEST FILE ==>                               #Forces downloading resources, even if not currently used, in order to use
                                                #browser cache, so app can be used when offline.
                                                #Must be a single file on the server, served with MIME type 
                                                #"text/cache-manifest".
                                                #Usually called "cache.manifest"
                                                #Referenced by <html manifest="MANIFESTFILE">
                                                #Syntax :
                                                #  CACHE MANIFEST       #Required in beginning
                                                #  #COMMENT             #Whitespaces/newlines are ignored
                                                #  SECTION:             #There are three possible sections (if nothing, assume 
                                                #                       #CACHE:) : CACHE: NETWORK: et FALLBACK:
                                                #  URL                  #e.g. /resource.png (relative or absol. with protocole)
                                                #                       # * can be used on NETWORK: or FALLBACK: URLs
                                                #CACHE :
                                                #  - the files that need to be cached :
                                                #     - if online, downloaded by client if new/changed
                                                #     - online or not, use cached version if available
                                                #  - files being browsed by user are automatically cached without being in the
                                                #    list.
                                                #  - the MANIFESTFILE content needs to be updated to make the new files 
                                                #    recached (can add a comment with current date)
                                                #  - MANIFESTFILE itself should not be cached !
                                                #NETWORK:
                                                #  - the files that should not be cached, and provoke an error if accessed 
                                                #    offline.
                                                #FALLBACK:
                                                #  - Use URL URL2
                                                #  - If URL is accessed offline (but usually can't be cached), URL2 is served
                                                #    instead
                                                #Ask permission to user the first time. There might be limit on max cache size.

APPLICTNCACHE.onnoupdate|checking = FUNC(EVENT) #Reading the html tag (if cache manifest previously cached and same, or not)
APPLICATIONCACHE.ondownloading = FUNC(EVENT)    #When manifest file is being downloaded 
APPLICATIONCACHE.onprogress = FUNC(PROGRESEVENT)#When manifest file is being read
APPLICTNCACHE.oncached|updateready = FUNC(EVENT)#When manifest file has been read (if was first time, or not)
APPLICATIONCACHE.onerror = FUNC(EVENT)          #
APPLICATIONCACHE.onobsolete = FUNC(EVENT)       #

WINDOW.applicationCache                         #Renvoie APPLICATIONCACHE
APPLICATIONCACHE.state                          #Can be :
                                                #  - applicationCache.UNCACHED : no caching
                                                #  - applicationCache.IDLE : cache not in the process of being updated
                                                #  - applicationCache.CHECKING : checking if needs to update cache
                                                #  - applicationCache.DOWNLOADING : downloading the cache
                                                #  - applicationCache.UPDATEREADY : cache complete
                                                #  - applicationCache.OBSOLETE : the file was referenced by another HTML file, 
                                                #    but the reference is gone.
APPLICATIONCACHE.update|swapCache()             #Useless methods to update cache manually.

WINDOW|WORKERGLOBALSCOPE.
onoffline|online = FUNC(EVENT)                  #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:     NOT SUPPORTED BY ALL      :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


ELEM.dataset.VAR                                #Not by IE10 (but by IE11)
                                                #Accede a attribut data-VAR (transformed to camelcase).
                                             
MUTATION OBSERVERS ==>                          #Not by IE10 (but by IE11)
                                               ##Ext: webkit (Safari)
MutationObserver                                #Sorte d'event handler pour tout DOM event :
                                                #  - "childList" : insertion/suppression de NODE
                                                #  - "characterData" : modification de CHARDATA (non ajout/suppression)
                                                #  - "attributes" : ajout/suppression/modification d'attributs
                                                #"Event handler-like": en fait une FUNC, à associer à des NODE via observe()
MUTATIONOBSERVER(FUNC)                          #Constructor. FUNC(MUTATIONRECORD_ARR, MUTATIONOBSERVER), where :
                                                #  - each MUTATIONRECORD is the DOM event. 
                                                #    Several MUTATIONRECORD possible only if several observe()
                                                #    Members are :
                                                #    - type STR : "childList", "attributes" or "characterData"
                                                #    - target NODE : 
                                                #      - for childList, it is the parent. 
                                                #      - for attributes, the element. 
                                                #      - for characterData, the CHARDATA.
                                                #    - only if "childList" : 
                                                #      - added|removedNodes NODELIST (null si aucun)
                                                #      - previous|nextSibling NODELIST (null si aucun)
                                                #    - only if "attributes" :
                                                #      - attributeName[space] STR
                                                #    - only if "attributes" or "characterData" : 
                                                #      - oldValue STR : value of CHARDATA or attribute before change. 
                                                #        Only if *OldValue has been set to true.
                                                #  - MUTATIONOBSERVER is the same
MUTATIONOBSERVER.observe(NODE, OBJ)             #Associate MUTATIONOBSERVER with NODE, with OBJ being options BOOL 
                                                #(def: false for all).
                                                #Au moins un true parmi childList, attributes or characterData :
                                                #  - childList
                                                #  - attributes
                                                #    - attributesFilter : STR_ARRAY des attributes à observer
                                                #    - attributeOldValue : make MUTATIONRECORD.oldValue work
                                                #  - characterData
                                                #    - characterDataOldValue : make MUTATIONRECORD.oldValue work
                                                #  - subtree : include also descendants
MUTATIONOBSERVER.disconnect()                   #Disconnect all.
MUTATIONOBSERVER.takeRecords()                  #Renvoie la pending MUTATIONRECORD_ARR :
                                                #  - à utiliser si besoin de log les DOM events à l'intérieur d'un real event
                                                #    handler, car MUTATIONOBSERVER est toujours fired après les real event
                                                #    handlers.
                                                #  - returns and empties MUTATIONRECORD_ARR

FILESYSTEM, FILEWRITER, STORAGEINFO ==>         #Only Chrome.
                                                #Implementation not finished for FileSaver|WriterSync and WINDOW.FileSaver.
                                                #If Chrome app accessed through file://, Chrome needs to be launched with 
                                                # --allow-file-access-from-files
                                               ##Ext: webkit
               
ERRORCALLBACK                                   #Un CALLBACK(FILERROR) invoqué si error au lieu du CALLBACK de success. 
                                                #FILEERROR.code can be FileError.*_ERR (see specific case below).
                                                
WINDOW|WORKERGLOBALSCOPE.requestFileSystem(ENUM,#Invoque CALLBACK(FILESYSTEM).
UINT, CALLBACK[, ERRORCALLBACK])                #ENUM can be TEMPORARY or PERSISTENT (see STORAGEQUOTA below).
                                                #UINT is the size in bytes that will be used : 
                                                #  - if ecriture est > quota or > UINT -> QUOTA_EXCEEDED_ERR
                                                #A file entry by itself (without content) takes 150+ octets.
WINDOW|WORKERGLOBLSCOP.resolveLocalFileSystemURL#Invoque CALLBACK(ENTRY) in grabbing current filesystem URL STR (filesystem: 
(STR, CALLBACK[, ERRRORCALLBACK])               #URI scheme)
WORKERGLOBALSCOPE.*Sync(...)                    #Same (for the whole API, including ENTRY, etc.) except return instead of 
                                                #using CALLBACK

FILESYSTEM                                      #A FILESYSTEM is specific to the current domain (like localStorage).
                                                #The FILESYSTEM is a virtual directory. No access to real filesystem.
                                                #Cannot store executable MIME type.
FILESYSTEM.name                                 #name STR, e.g. "www_example_org_0:Persistent"
FILESYSTEM.root                                 #DIRECTORYENTRY de "/"

ENTRY                                           #Parent de DIRECTORYENTRY et FILEENTRY.
ENTRY.isFile|Directory                          #Is directory or not.
ENTRY.filesystem                                #FILESYTEM le contenant.
ENTRY.fullPath                                  #Virtual path STR
ENTRY.name                                      #Virtual filename STR ("" for directory)
ENTRY.toURL()                                   #Returns as a filesystem: URI scheme. Can be used on URL HTML attributes.
                                                #Can only be accessed with same domain, on same machine.  
                                                #e.g. filesystem:http://domain.org/persistent|temporary/path/to/file.html
ENTRY.getMetadata(CALLBACK[, ERRORCALLBACK])    #Invoque CALLBACK({ modificationTime: DATE, size: ULONGLONG }).
ENTRY.getParent(CALLBACK[, ERRORCALLBACK])      #Invoque CALLBACK(ENTRY). ENTRY is the parent directory (root if root).
ENTRY.remove(CALLBACK[, ERRORCALLBACK])         #Removes ENTRY then invoque CALLBACK().
ENTRY.move|copyTo(DIRECTORYENTRY, STR[, CALLBACK#Moves|copies ENTRY to DIRECTORYENTRY/STR.
[, ERRORCALLBACK]])                             #Can't move file to dir, must move file to dir/file.
                                                #Then invoque CALLBACK(ENTRY) of new file.

DIRECTORYENTRY                                  #Directory file. Enfant d'ENTRY
DIRECTORYENTRY.getFile|Directory(STR[, OBJ      #Invoque CALLBACK(FILE|DIRECTORYENTRY). STR est le fullPath recherché. 
[, CALLBACK[, ERRORCALLBACK]]])                 #Can't get "/" (SECURITY_ERR) -> use FILESYSTEM.root
                                                #FILERROR possibles :
                                                #  - If parent dir doesn't exist -> NOT_FOUND_ERR
                                                #OBJ can have :
                                                #  - create BOOL (def: false) : if true and doesn't exist, create empty file.
                                                #    If true et parent dir is actually file -> INVALID_STATE_ERR
                                                #    If false and doesn't exist -> NOT_FOUND_ERR
                                                #  - exclusive BOOL (def: false) : if true and create is true, can't 
                                                #    overwrite -> INVALID_MODIFICATION_ERR.
DIRECTORYENTRY.createReader()                   #Returns DIRECTORYREADER.
DIRECTORYREADER.readEntries(CALBAK[, ERRCALBAK])#Invoque CALLBACK(ENTRY_ARR) (fichiers du repertoire).
DIRECTORYREADER.removeRecursively(CALLBACK      #
[, ERRORCALLBACK])                              #Erase directory and its content then invoque CALLBACK().
                                                
FILEENTRY                                       #Non-directory file. Enfant d'ENTRY
FILEENTRY.createWriter(CALLBACK[, ERORCALLBACK])#Invoque CALLBACK(FILEWRITER).
FILEENTRY.file(CALLBAK[, ERRORCALLBACK])        #Same for FILE, to use with FileReader.

FILESAVER                                       #
FILESAVER(BLOB)                                 #Constructor. Write BLOB and launch events.
FILESAVER.readyState                            #Can be : FileSaver.INIT -> WRITING -> DONE (even with error/abort)
FILESAVER.abort()                               #
FILESAVE.onabort|error|progress|
write[end|start]|readyState                     #Cf FILEREADER

FILEWRITER                                      #Enfant de FILESAVER.
                                                #If any method while FileSaver.WRITING, throw InvalidStateError.
                                                #write() et truncate() fire FileSaver events.
FILEWRITER.position                             #ULONGLONG (0 at beginning)
FILEWRITER.length                               #ULONGLONG
FILEWRITER.write(BLOB)
FILEWRITER.seek(LONGLONG)                       #If > length, set to length. -1 to go to end.
FILEWRITER.truncate(ULONGLONG)

NAVIGATOR.temporary|persistentStorage           #Renvoie un STORAGEQUOTA. Divise memory for a specific domain name between :
                                                #  - TEMPORARY : can be erased through localStorage cleanup (via UI e.g.) 
                                                #    but also through garbage collection by the browser, so should only be 
                                                #    used for cache.
                                                #    By def : max octets available (whole hard drive available space)
                                                #    Used by IndexDB, AppCache et FileSystem APIs
                                                #  - PERSISTENT : can be erase though web app data cleanup (via UI e.g.)
                                                #    Prompt user to request quotas. 
                                                #    By def : 0 octets available, but max if :
                                                #     - chrome launched with --unlimited-quota-for-files
                                                #     - permission "unlimitedStorage" in Chrome extensions/apps
                                                #    Used by FileSystem API
                                               ##Ext: webkit         
STORAGEQUOTA.queryUsageAndQuota(CALLBACK        #Invoque CALLBACK(ULONGLONG, ULONGLONG2), i.e. number of octets used, et 
[, CALLBACKERROR])                              #usable for given memory.
                                                #CALLBACKERROR is CALLBACK(DOMEXCEPTION)
STORAGEQUOTA.requestQuota(ULONGLONG2, CALLBACK, #Set the memory usable size to ULONGLONG octets : if <= current, diminue la 
[, CALLBACKERROR])                              #taille sans asking user ; if > current, ask user, and invoque 
                                                #CALLBACK(ULONGLONG2), where ULONGLONG2 is the number of usable bytes. 
                                                #Invoque CALLBACKERROR(DOMEXCEPTION) only if ULONGLONG2 is negative or other 
                                                #error.

NOTIFICATIONS ==>                               #Only Firefox, Chrome et Safari.
                                               ##Ext: webkit
PERMISSION ==>                                  #Website needs to be whitelisted on browser preferences.
                                                #There should be a function NOTIFICATION.requestPermission() to show a popup
                                                #asking for it, but it's not implemented.
NOTIFICATION(STR[, OBJ])                        #Creates a NOTIFICATION, and pops it up. It doesn't go away by itself.
                                                #Notifications are queued.
                                                #  - STR: titre du message.
                                                #  - OBJ.body STR : contenu (text brut) du message
                                                #  - OBJ.icon STR : chemin d'un icone
                                                #  - OBJ.tag STR : unique ID. Si constructor avec même ID, update au lieu 
                                                #    d'ajouter
                                                #  - OBJ.lang et OBJ.dir (comme global attributes)
                                                #A les EVENT suivants :
                                                #  - show : doit être mis juste après constructor. Peut par example mettre 
                                                #    un Timeout.
                                                #  - click
                                                #  - error
                                                #  - close
NOTIFICATION.permission                         #Can be "default", "granted" or "denied"
NOTIFICATION.close()                            #

NOTIFICATION.onshow = FUNC(EVENT)               #
NOTIFICATION.onclick = FUNC(EVENT)              #
NOTIFICATION.onerror = FUNC(EVENT)              #
NOTIFICATION.onclose = FUNC(EVENT)              #



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        STORAGE SUMMARY        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DIFFERENT STORAGE ==>                           #All storage : can be erased through private data erasing GUI for normal 
                                                #websites/hosted apps, but not for extensions/packaged apps.
                                                #For reading, AJAX requests can be used too (same domain origin or CORS).

                            +------------------+---------------------+--------------------+--------------------------------+
                            | Avail.           | Limit               | Model              | Other                          |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | cookies                 | Avoid them                                                                                   |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | localStorage            | All              | 5MB                 | Flat. As STR.      | Not async.                     |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | chrome.storage          | Chrome apps/exts | Unlim (permissions) | Flat. As OBJ.      | Can be used by content scripts |
  |                         |                  |                     |                    | Can Cloud sync.                |
  |                         |                  |                     |                    | Storage event.                 |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | indexedDB               | Not Safari       | Unlim (permissions) | Database           |                                |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | FileReader/SaveAs()     | All              | Unlim(only download)| Real filesystem    | Filechooser popup              |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | chrome.downloads        | Chrome exts      | Unlim(only download)| Real filesystem    | Filechooser popup or not       |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | fileSystem API          | Only Chrome      | Unlim (permissions) | Virtual filesystem | Can use filesystem: URI scheme |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+
  | chrome.[sync]filesystem | Chrome apps      | Unlim (permissions) | Real filesystem    | Use fileSystem API.            |
  |                         |                  |                     |                    | Can sync with Google Drive.    |
  +-------------------------+------------------+---------------------+--------------------+--------------------------------+

                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         NOT SUPPORTED         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SUPPORTED ONLY BY SHIM ==>                      #jQuery :
                                                #  - FocusEvent, focusin|out events (not supported by Firefox)
                                                #  - mouseenter|leave event (not supported by Chrome)

ONLY FOR IE11 ==>                               #WebGL
                                                #Fullscreen : 
                                                #  - FullScreenChange|Error event
                                                #  - ELEM.requestFullScreen(), DOCUMENT.*fullscreen*
                                                #  - ::backdrop, ::fullscreen
                                                #Mutation observers :
                                                #  - Mutation*, but not events (deprecated)
                                                #ELEM.dataset

SUPPORTED BY IE10 BUT NOT OTHERS ==>            #Safari 6 :
                                                #  - Navigation timing
                                                #  - User timing :
                                                #    - PERFORMANCE.*mark*, .*measure*
                                                #  - Resource timing :
                                                #    - *ResourceTiming*
                                                #  - PageVisibility : 
                                                #    - DOCUMENT.hidden, DOCUMENT.visibilityState
                                                #    - visibilitychange event
                                                #  - IndexedDB
                                                #    - dont WORKER[GLOBALSCOPE].indexedDB
                                                #  - Session history : 
                                                #    - PageHide|Show event
                                                #  - Canvas :
                                                #    - CONTEXT.imageSmoothingEnabled
                                                #  - XHR:
                                                #    - XMLHTTPREQUEST.timeout et timeout event
                                                #Opera 12 :
                                                #  - [WORKER]NAVIGATOR.onLine (incorrect)
                                                #  - URL object : .createObjectURL(), etc.
                                                #  - DOMParser (for HTML parsing)
                                                #  - XHR.responseType == "document"
                                                #  - After|BeforePrint (for printing) event
                                                #  - WINDOW.dialogArguments
                                                #      WINDOW.returnValue, WINDOW.showModalDialog(), WINDOW.external
                                                #  - DOCUMENT.hasFocus()
                                                #  - wheel event
                                                #  - CompositionStart|End|Update event : similar to KeyDown, etc. but for
                                                #    accessibility
                                                #  - copy|paste|cut events on targets other than DOCUMENT
                                                #Firefox 22 :
                                                #  - Ruby notations : 
                                                #    - <ruby>, <rt>, <rb>
                                                #    - ruby* CSS properties
                                                #  - Pointer events :
                                                #    - pointer* events
                                                #    - ELEM.set|releasePointerCapture()
                                                #    - NAVIGATOR.pointerEnabled, NAVIGATOR.maxTouchPoints
                                                #    - touch-action CSS property
                                                #  - Web messaging : 
                                                #    - MessageChannel, MessagePort
                                                #    - MESSAGEEVENT.ports
                                                #    - note: IE10 only supports messaging with IFRAME, not WINDOW
                                                #  - DOCUMENT.open([STR[, STR2]]), DOCUMENT.open(STR, STR2, STR3[, BOOL])
                                                #    (at least not documented)
                                                #  - KEYBOARDEVENT.key, .char, .repeat
                                                #  - MOUSEEVENT.offsetX|Y, .buttons (for multibuttons mouses)
                                                #  - Clipboard : BeforeCopy|Paste|Cut events
                                                #  - Pointer and gesture events
                                                #  - WEBSOCKET.send(ARRAYBUFFERVIEW), WORKRGLOBALSCOPE.WebSocket
                                                #Chrome 28 :
                                                #  - BLOB.close()
                                                #  - SELECTION.removeRange()
                                                #  - KEYBOARDEVENT.locale, .location
                                                #  - EVENT.isTrusted : check if EVENT has been initiated by browser or script

NOT SUPPORTED AT LEAST BY IE10 ==>              #MediaStream (part of WebRTC)
                                                #  - [Processed]MediaStream, MediaInput[Buffer], Audio(MEDIASTREAM)
                                                #  - CANVAS|MEDIA.stream, MEDIA.captureStream*(), MEDIA.src, 
                                                #      MEDIA.audioCaptured
                                                #  - processmedia, add|removestream events
                                                #Media Stream Capture (uses proprietary IE) :
                                                #  - Stream*, *Source*, *Capabilit*, NAVIGATOR.getUserMedia()
                                                #Shared workers
                                                #Screen Orientation
                                                #Web notifications
                                                #File API Writer
                                                #Filesystem API
                                                #Web Audio API
                                                #Shadow DOM
                                                #MathML
                                                #Templates : <template>
                                                #SMIL : 
                                                #  - Begin|End|RepeatEvent event
                                                #Drag and drop :
                                                #  - HTML attribute dropzone
                                                #  - DATATRANSFER.items, DataTransferItem[List], DATATRANSFER.setDragImage()
                                                #  - CSS4 selectors :*drop
                                                #XHR2 :
                                                #  - XMLHTTPREQUEST.upload, XMLHTTPREQUEST.overrideMimeType
                                                #  - XMLHTTPREQUEST.send(ARRAYBUFFERVIEW)
                                                #  - XMLHTTPREQUEST.responseType = "json"
                                                #ELEM.matches() (supported as ELEM.matchesSelector())
                                                #Battery : 
                                                #  - BatteryManager, NAVIGATOR.battery, and events
                                                #Sensors : 
                                                #  - DeviceHumidity|Noise|Pressure|Temperature events
                                                #Gamepads : 
                                                #  - Gamepad, NAVIGATOR.gamepads, and events
                                                #Messaging :
                                                #  - NAVIGATOR.messaging, Messaging*, Sms*, Mms*, Conversation, 
                                                #    ReceivedMessage, DeliveryReport, FilterOptions
                                                #Contact Manager :
                                                #  - Contact*, NAVIGATOR.contacts
                                                #Alarm :
                                                #  - Alarm*, NAVIGATOR.alarms
                                                #Ambient light :
                                                #  - [device]light* events
                                                #Proximity :
                                                #  - *Proximity* events
                                                #Push :
                                                #  - Push*, NAVIGATOR.push
                                                #NetworkInformation :
                                                #  - NetworkInformation, Connection
                                                #Web MIDI :
                                                #  - *MIDI*, and events
                                                #  - window.navigator.getMIDIAccess()
                                                #WebRTC :
                                                #  - RTC*, and events
                                                #Media Access events :
                                                #  - MediaAccessEvent, MediaStreamInfo[List]
                                                #Raw sockets :
                                                #  - TCP*, UDP*, and events
                                                #Pointer locks (FPS view) :
                                                #  - PointerLockChange|Error event, ELEM.requestPointerLock(),
                                                #    DOCUMENT.*PointerLock*, MOUSEVENT.movementX|Y
                                                #Server-sent events :
                                                #  - EventSource, and events, MESSAGEEVENT.lastEventId
                                                #Marquee :
                                                #  - CSS properties marquee* overflow-style, and events
                                                #Media capture (e.g. camera) :
                                                #  - <input> : capture
                                                #Microdata : 
                                                #  - Global attribute : item*
                                                #WebCrypto :
                                                #  - RandomSource, Algorithm, *Key*, *Crypto*, *Params
                                                #  - WINDOW.crypto
                                                #WebTelephony :
                                                #  - Telephony*, *Call*, and events
                                                #Vibration (phone) :
                                                #  - NAVIGATOR.vibrate()
                                                #JSON-LD : 
                                                #  - JsonLd*
                                                #Web applications :
                                                #  - Application*, DownloadRequest, NAVIGATOR.apps
                                                #Encrypted Media : 
                                                #  - MediaKey*, MEDIA.keys, MEDIA.setMediaKeys(), SOURCE.keySystem
                                                #Media Source :
                                                #  - MediaSource, SourceBuffer*
                                                #  - AUDIO|VIDEO|TEXTTRACK.kind, .language, .sourceBuffer
                                                #Media Resource :
                                                #  - *MediaResource*, MediaAnnotation, MetadataSource
                                                #Input Method Editor (asian keyboards) :
                                                #  - Composition, InputMethodContext, ELEM.getInputContext()
                                                #  - ime-mode CSS property
                                                #WebDriver
                                                #Storage Quota :
                                                #  - StorageQuota
                                                #System Infos :
                                                #  - SystemInfo, SystemDevice
                                                #Animations :
                                                #  - Tim*, Player, *Group, Animation*, PseudoElementReference,
                                                #    DOCUMENT.timeline, ELEM.animate(), ELEM.getCurrent*()
                                                #Canvas :
                                                #  - Path (PATH.add*())
                                                #  - PATHMETHODS.ellipse(7 DOUBLE, BOOL)
                                                #  - CONTEXT.scrollPathIntoView([PATH])
                                                #    CONTEXT.drawSystem|CustomFocusRing([PATH, ]ELEM), 
                                                #  - all TEXTMETRICS, except width
                                                #  - CONTEXT.add|removeHitRegion(HITREGIONOPTIONS), HitRegionOptions
                                                #Touch events (implement gesture and pointer events instead)
                                                #CSP (Content Security Policy)
                                                #Others :
                                                #  - WINDOW : 
                                                #    - WINDOW.location|menu|personal|status|toolbar|scrollbars
                                                #    - WINDOW.scrollX|Y, WINDOW.stop()
                                                #    - NAVIGATOR.[un]registerProtocol|ContentHandler(3 STR), 
                                                #      NAVIGATOR.isProtocol|ContentHandler(STR, STR2), 
                                                #      NAVIGATOR.yieldForStorageUpdates()
                                                #  - COORDS.heading|speed
                                                #  - DOMImplementationRegistry
                                                #  - DOCUMENT.caretPositionFromPoint()
                                                #  - DOCUMENT.documentURI
                                                #  - DOCUMENT.strictErrorChecking, DOCUMENT.renameNode(NODE, STR, STR2)
                                                #  - Alternative style sheets : DOCUMENT.selectedStyleSheetSet, 
                                                #    lastStyleSheetSet, preferredStyleSheetSet, styleSheetSet, 
                                                #    enableStyleSheetsForSet(STR)
                                                #  - HTML.cssItems, HTML.currentScript, HTML.getItems()
                                                #  - DOCUMENT.getOverrideStyle()
                                                #    CSSGroupingRule, CSSConditionRule, CSSCharsetRule 
                                                #    CSSSTYLEDECLARATION.getPropertyCSSValue()
                                                #    CSSValueList, CSSValue, CSSPrimitiveValue, Counter, Rect, RGBColor
                                                #    CSSPAGERULE.selectorText
                                                #  - RANGE.toString()
                                                #  - RANGE.isPointInRange(), RANGE.comparePoint(), RANGE.intersectsNode()
                                                #  - SELECTION.selectionLanguageChange(), SELECTION.containsNode(), 
                                                #    SELECTION.extend()
                                                #  - ATTR.isId
                                                #  - ELEM|DOCUMENT[FRAGMENT].prepend|append(), 
                                                #    CHARDATA|ELEM.before|after(), 
                                                #    CHARDATA|ELEM.replace|remove()
                                                #  - ELEM.schemaTypeInfo, ELEM.setIdAttribute[Node]()
                                                #  - search event
