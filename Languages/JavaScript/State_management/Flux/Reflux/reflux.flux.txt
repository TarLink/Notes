
            
   REFLUX   
            



VERSION ==>                       #6.0.0
                                  #Flux implementation


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            ACTION             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


RFACTION(DATA)                    #Fires action
RFACTION.listen(FUNC(DATA)[,THIS])
 ->FUNC()                         #FUNC is removeListener

REFLUX.createAction               #OPT:
([OPT|'ACTION'])->RFACTION        #  - actionName 'ACTION'
                                  #  - sync BOOL: if false (def if children), defer RFACTION(DATA) one tick
                                  #  - preEmit(DATA)[->VAL]: called before action is fired
                                  #  - shouldEmit([VAL])->BOOL: 
                                  #     - called before action is fired, to potentially prevent it
                                  #     - VAL is preEmit() return value or (if none) DATA
                                  #OPT is mixed in RFACTION.*
REFLUX.createActions
('ACTION'ARR|OPT_ARR|{ACTION:OPT})
->{ ACTION: RFACTION ... }        #
RFACTIONS                         #RFACTION_ARR or { ACTION: RFACTION ... }

RFACTION.SUBACTION                #Created by OPT:
                                  #  - children 'SUBACTION'_ARR|OPT_ARR
                                  #  - asyncResult BOOL (def: false): same as children ['completed', 'failed']

REFLUX.ActionMethods.*            #Mixed in RFACTION.*


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             STORE             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


REFLUX.Store                      #Rfstore, to extend (but not instantiate)
Rfstore.singleton                 #RFSTORE is instantiated:
                                  #  - when specified in RFVIEW.store[s]
                                  #  - only once, i.e. reuse a singleton, referenced here
                                  #  - can force instantiation with REFLUX.initStore(Rfstore)

RFSTORE.listenTo                  
(RFACTION, FUNC(DATA))            #Calls FUNC(DATA) on RFACTION(DATA)
RFSTORE.listenToMany(RFACTIONS)   #Calls RFSTORE.[on]ACTION(DATA) on RFACTION(DATA)
RFSTORE.listenables RFACTIONS     #Also listen to children actions, i.e. calls RFSTORE.[on]actionSubaction(DATA) on RFACTION.SUBACTION(DATA)
RFSTORE.stopListeningTo(RFACTION) #
RFSTORE.stopListeningToAll()      #
RFSTOR.hasListener(RFACTION)->BOOL#

RFSTORE.joinTrailing              #Fires FUNC() once each RFACTION(DATA) has been called.
(RFACTION,..., FUNC(DATA,...))    #If RFACTION() fired several times, only last DATA is kept
RFSTORE.joinLeading
(RFACTION,..., FUNC(DATA,...))    #Same but if RFACTION() fired several times, only first DATA is kept
RFSTORE.joinConcat
(RFACTION,..., FUNC(DATA_ARR,...))#Same but all DATA kept
RFSTORE.joinStrict
(RFACTION,..., FUNC(DATA,...))    #Same but if RFACTION() fired several times, throws error

RFSTORE.state                     #OBJ. Default should be set in constructor
RFSTORE.setState(OBJ)             #Set|merge??? RFSTORE.state

GLOBAL                            #OBJ where OBJ.ID === RFSTORE.state, where Rfstore.id === 'ID'
                                  #If manipulated before RFSTORE creation, when RFSTORE is created, it will use it
REFLUX.GlobalState                #Reference to GLOBAL. Should be used for read-only read
REFLUX.getGlobalState()->GLOBAL   #Deep copy to GLOBAL. Should be used for read with manipulation
REFLUX.setGlobalState(GLOBAL)     #Merges (shallow|deep???)


REFLUX.StoreMethods.*             #Mixed in RFSTORE.*


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             VIEW              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


REFLUX.Component                  #Rfview (child of REACT.Component), to extend
REFLUX.Component.extend(COMPONENT)
->Rfview                          #Make Rfview inherit from COMPONENT instead of REACT.Component
                                  #If COMPONENT.componentWill[Un]mount() defined, should call super.componentWill[Un]mount()

RFVIEW.store[s]                   #Rfstore[_ARR], to specify
RFVIEW.state                      #Deep|shallow copied|referenced merge??? from each RFSTORE.state
                                  #Re-render view every time RFSTORE.state changes.
RFVIEW.storeKeys                  #'VAR'_ARR. Whitelists RFSTORE.state.VAR to copy from any RFSTORE
                                  #Goal: only re-render on useful changes

RFVIEW.mapStoreToState            #Alternative to RFVIEW.store[s]|storeKeys
(Rfstore, FUNC(STATE)->STATE2)    #FUNC is called on RFSTORE.state changes.
                                  #STATE only contains what changed
                                  #STATE2 should not contain references to STATE


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           UTILITIES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


REFLUX.setEventEmitter
(EVENTEMITTER)                    #Use alternative EventEmitter library (def: 'eventemitter3')
REFLUX.nextTick(NEXTTICK)         #Use alternative setTimeout function (def: setTimeout(..., 0))

REFLUX.use(FUNC(REFLUX))          #Middleware
