
             
   ESCOMPLEX  
             



VERSION ==>                       #2.0.0-alpha
                                  #Must use GitHub URL to get real last version


ESCOMPLEX.analyse
('JS'|OBJ_ARR[, OPTS][, POPTS])
                                  #OBJ_ARR:
                                  #  - code 'JS'
                                  #  - path 'PATH' (used for dependency analysis)
                                  #OPTS:
                                  #  - ???
                                  #Returns:
                                  #  - reports OBJ_ARR (one per file):
                                  #     - path STR
                                  #     - functions OBJ_ARR:
                                  #        - name STR
                                  #        - line NUM
                                  #        - sloc:
                                  #           - logical NUM
                                  #           - physical NUM
                                  #        - params NUM
                                  #        - cyclomatic NUM
                                  #        - cyclomaticDensity NUM
                                  #        - halstead:
                                  #           - vocabulary NUM
                                  #           - difficulty NUM
                                  #           - volume NUM
                                  #           - effort NUM
                                  #           - bugs NUM
                                  #           - time NUM
                                  #     - aggregate OBJ:
                                  #        - like "functions" but for all functions in a file
                                  #        - no "name" nor "line"
                                  #     - dependencies ARR
                                  #     - maintainability NUM
                                  #  - adjacencyMatrix NUM_ARR_ARR
                                  #  - firstOrderDensity NUM
                                  #  - visibilityMatrix NUM_ARR_ARR
                                  #  - changeCost NUM
                                  #  - coreSize NUM
                                  #  - loc NUM
                                  #  - cyclomatic NUM
                                  #  - effort NUM
                                  #  - params NUM
                                  #  - maintainability NUM
                                  #If 'JS' is passed, only returns one reports OBJ
                                  #Uses Espree for AST parsing:
                                  #  - using espress.parse(..., OBJ), where OBJ:
                                  #     - is { ecmaVersion: 8, loc: true }
                                  #     - can be partially assigned with POPTS
                                  #Only ESTree es5 spec, not es2015, es2016, es2017, extensions nor experimental.
                                  #Also some deprecated ESTree are still there.

                                  #Reports:
                                  #  - reports:
                                  #     - functions (each NODE.newScope true creates new one):
                                  #        - name 'FUNC'
                                  #        - params NUM
                                  #        - line NUM: line position number
                                  #        - sloc:
                                  #           - logical NUM: number of "logical lines"
                                  #           - physical NUM: number of source lines
                                  #        - cyclomatic NUM:
                                  #           - number of possible branches
                                  #           - starts at 1
                                  #        - cyclomaticDensity NUM:
                                  #           - average possible branches per source line
                                  #           - (cyclomatic / sloc.physical) * 100
                                  #        - halstead:
                                  #           - operators:
                                  #              - identifiers 'TOKEN'_ARR: each unique "operator"
                                  #              - distinct NUM: number of unique "operator"
                                  #              - total NUM: number of "operator"
                                  #           - operands:
                                  #              - like halstead.operators, but for "operands"
                                  #           - length:
                                  #              - number of "operator" or "operands"
                                  #              - operators.total + operands.total
                                  #           - vocabulary:
                                  #              - number of unique "operator" or "operands"
                                  #              - operators.distinct + operands.distinct
                                  #           - volume:
                                  #              - size of the function:
                                  #                 - increased by number of "operator" or "operands"
                                  #                 - decreased by repetitiveness
                                  #                 - is linearithmic, i.e. increases more and more
                                  #              - length * log(vocabulary) * 1/log(2)
                                  #           - bugs:
                                  #              - estimation of number bugs, according to how often bugs appear per volume of code
                                  #              - volume / 3000
                                  #           - difficulty:
                                  #              - by each new unique "operator" or new non-unique "operands"
                                  #              - (operators.distinct / 2) * (operands.total / operands.distinct)
                                  #           - effort:
                                  #              - volume * difficulty
                                  #           - time:
                                  #              - estimation of how many seconds to write that function
                                  #              - effort / 18
                                  #     - aggregate:
                                  #        - sum of all the report.functions.* for: params, sloc.logical, cyclomatic,
                                  #          cyclomaticDensity, halstead.*
                                  #     - dependencies OBJ_ARR:
                                  #        - line NUM (line number)
                                  #        - type 'CommonJS' or 'AMD'
                                  #        - path 'MDL' or (if not literal value) '* dynamic dependency|ies *'
                                  #           - will use real 'MDL' if 'AMD' aliases were configured using
                                  #             require.config(CONFVAR paths)

                                  #Source of each value:
                                  #  - reports:
                                  #     - functions: each NODE.newScope true creates new one
                                  #        - name: either NODE.id, NODE.assignedName or '<anonymous>'
                                  #        - params: NODE.params.length
                                  #        - line: NODE.loc
                                  #        - sloc:
                                  #           - logical: NODE.lloc
                                  #           - physical: NODE.loc
                                  #        - cyclomatic: NODE.cyclomatic
                                  #        - cyclomaticDensity: sloc.physical, cyclomatic
                                  #        - halstead:
                                  #           - operators: NODE.operators
                                  #           - operands: NODE.operands
                                  #     - aggregate: reports.functions.*
                                  #     - dependencies: NODE.dependencies

                                  #Each ESTree node type define the following properties:
                                  #  - lloc NUM:
                                  #     - numbers of "logical lines":
                                  #        - a full statement, or could be reduced to one:
                                  #           - break|continue|return|throw
                                  #           - declaration
                                  #           - EXPR
                                  #           - FUNC()
                                  #           - OBJ.VAR, VAR: VAL (in OBJ)
                                  #        - a structure: do for forin if else switch case while with try catch
                                  #     - usually 1 or (for compound like if|else) sometimes 2
                                  #     - not for:
                                  #        - parts of an EXPR: usual operators, ?:, {}, []
                                  #        - debugger
                                  #  - cyclomatic NUM:
                                  #     - number of possible branches
                                  #     - is 1 for: catch, dowhile|while, forin|for, if|?:|switch|case, &&, ||
                                  #     - can ignore some with OPTS.trycatch|forin|switchcase|logicalor false
                                  #       (def: false|false|true|true)
                                  #  - operators 'TOKEN'[_ARR] or { filter(NODE)->BOOL, identifier 'TOKEN'[(NODE)] }[_ARR]:
                                  #     - "operator", i.e. functions (in an abstract senses)
                                  #     - including:
                                  #        - usual FUNC()
                                  #        - usual operators: = += + === ^ in instanceof && ! typeof delete ++ ...
                                  #        - also operators: ?: OBJ.VAR : (of VAR: VAL) const|let|var
                                  #        - keywords: break continue return throw
                                  #        - literal constructors: {}, [], FUNC declaration
                                  #        - structures: catch dowhile forin for if else switch case while with
                                  #     - not counted:
                                  #        - debugger
                                  #        - syntactic part of an operator: { } try ; , LABEL
                                  #        - bigger|complex nodes: ExpressionStatement
                                  #     - stored as the main representation, e.g. '=' for a declaration
                                  #     - "filter" is a test function
                                  #  - operands FUNC(NODE)->'VAL' or ARR of them
                                  #     - "operands", i.e. variables and literal values, i.e. operator's input
                                  #     - stored as the main representation, i.e.:
                                  #        - VAR: 'VAR'
                                  #        - FUNC: 'FUNC' name
                                  #        - ARR_LIT|OBJ_LIT: '<anonymous>'
                                  #        - STR_LIT: "STR"
                                  #        - BOOL|NUM|null|REGEXP_LIT: as is
                                  #  - dependencies(NODE, BOOL)->OBJ_ARR:
                                  #     - like of path required by require[.config](...)
                                  #     - only present on FUNC(...) that are require[.config](...)
                                  #     - since AMD aliases are used, using BOOL true resets them
                                  #     - OBJ_ARR is same as reports.dependencies
                                  #  - children STR[_ARR]
                                  #     - used by recursive walker
                                  #  - newScope BOOL:
                                  #     - true for FUNC declarations
                                  #     - used during recursion to indicate new function scope
                                  #  - assignedName(NODE)->'VAR':
                                  #     - name of the NODE, when NODE.id is not defined

