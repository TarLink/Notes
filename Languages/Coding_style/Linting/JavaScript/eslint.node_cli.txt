
          
   ESLINT  
          



VERSION ==>                       #4.0.0

CONFIGURATION ==>                 #Can be from:
                                  #  - ./.eslintrc: JSON, JavaScript or YAML
                                  #Is CONF:
                                  #  - rules.RULE [LEVEL, CONF_VAL]
                                  #     - LEVEL can be "off|warn|error" (or 0|1|2)

RULES ==>                         #If starts with "no-", description means what is forbidden. Otherwise what is required.
                                  #If no info about CONF_VAL, means it is BOOL


for-direction                     #Avoid for (...; VAR<VAL; VAR2--) or for (...; VAR>VAL; VAR2++)
no-await-in-loop                  #await inside loops (prefer Promise.all())
no-compare-neg-zero               #Avoid VAL === -0 (prefer Object.is(VAL, -0))
no-cond-assign STR                #Avoid assignments in TEST
                                  #STR: "always" (def) or "except-parens" (ignore if extra sets of parenthesis)
no-console OBJ                    #Avoid console
                                  #OBJ: allow 'METHOD'_ARR (ignore if console.METHOD)
no-constant-condition OBJ         #Avoid constant in TEST
                                  #OBJ: checkLoops BOOL (ignore if inside a loop)
no-control-regex                  #Avoid control characters in REGEXP
no-debugger                       #Avoid debugger
no-dupe-args                      #Avoid duplicate argument names
no-dupe-keys                      #Avoid duplicate keys in OBJ
no-duplicate-case                 #Avoid duplicate switch case VAL
no-empty OBJ                      #Avoid empty block statements, unless they contain comments
                                  #OBJ: allowEmptyCatch BOOL (ignore if catch clause)
no-empty-character-class          #Avoid empty [] in REGEXP
no-ex-assign                      #Avoid assigning to ERROR in catch clause
no-extra-boolean-cast             #Avoid BOOL typecasting in TEST
no-extra-parens STR|OBJ           #Avoid unnecessary parentheses
                                  #STR: "all" (def), "functions" (only around FUNC expressions)
                                  #OBJ:
                                  #  - conditionalAssign BOOL (ignore around assignments inside TEST)
                                  #  - returnAssign BOOL (ignore around assignments in return statement)
                                  #  - nestedBinaryExpressions BOOL (ignore around chained binary operators)
                                  #  - ignoreJSX "none", "all", "multi-line", "single-line"
                                  #    (ignore around JSX, providing it is multi-line or single-line)
no-extra-semi                     #Avoid double semicolons (empty statements)
no-func-assign                    #Avoid duplicate function declarations
no-inner-declarations OBJ         #Avoid var declarations (not let|const) and FUNC declarations (not expressions)
                                  #inside a conditional branch.
                                  #STR: "functions" (only FUNC) (def) or "both" (both var|FUNC)
no-invalid-regexp OBJ             #Avoid invalid REGEXP
                                  #OBJ: allowConstructorFlags STR_ARR (allowed flags, def is all)
no-irregular-whitespace OBJ       #Avoid any whitespace that is not \n \r \t or space.
                                  #This includes \v \f NBSP BOM ZWSP and many Unicode ones
                                  #OBJ:
                                  #  - skipComments BOOL (def: true)
                                  #  - skipStrings BOOL (def: true)
                                  #  - skipTemplates BOOL (def: true)
                                  #  - skipRegExps BOOL (def: true)
no-obj-calls                      #Avoid Math(), JSON() or Reflect() (those are not functions although capitalized)
no-prototype-builtins             #Avoid OBJ.METHOD(...) (for builtin OBJ methods)
                                  #Use {}.METHOD.call(OBJ, ...) instead
                                  #The reason: it works on OBJ created with Object.create(null)
no-regex-spaces                   #Avoid multiple spaces in REGEXP (use {NUM} instead)
no-sparse-arrays                  #Avoid sparse arrays
no-template-curly-in-string       #Avoid ${} inside "" or ''
no-unexpected-multiline           #Avoid multilines statements that would be interpreted as two statements if semicolons were
                                  #inserted.
no-unreachable                    #Avoid statements that cannot be reached because of an early return|throw|break|continue
no-unsafe-finally                 #Avoid return|throw|break|continue in finally clauses.
                                  #The reason: it overrides the try|catch clause's return|throw|break|continue
no-unsafe-negation                #Avoid !VAR in OBJ or !VAR instanceof OBJ (there should be parenthesis after !)
use-isnan                         #Must test NaN with [Number.]isNaN()
valid-jsdoc OBJ                   #Must be valid JSDoc comments.
                                  #OBJ:
                                  #  - prefer.TAG "TAG2": avoid @TAG2, prefer @TAG
                                  #  - preferType.TYPE "TYPE2", avoid TYPE2, prefer TYPE
                                  #  - requireReturn BOOL: if true (def), require @return.
                                  #    If false, ignore if no return statement
                                  #  - requireReturnType BOOL (def: true): require TYPE in @return
                                  #  - matchDescription REGEXP: tested against every COMMENT
                                  #  - requireParamDescription BOOL (def: true): @param must have a COMMENT
                                  #  - requireReturnDescription BOOL (def: true): @return must have a COMMENT
valid-typeof OBJ                  #Must use "typeof VAR === VAL" with VAL being STR (a valid one) or typeof VAR2
                                  #OBJ: requireStringLiterals BOOL (def: true): if false, allow EXPR as VAL

accessor-pairs OBJ                #Must have both get and set if one present
                                  #OBJ:
                                  #  - setWithoutGet BOOL (def: true): if set, must have get
                                  #  - getWithoutSet BOOL (def: true): if get, must have set
array-callback-return             #[TYPED_]ARR.from|every|some|filter|find[Index]|map|reduce[Right]|sort() must
                                  #have a return statement
block-scoped-var                  #var must be replaceable by let without errors
class-methods-use-this OBJ        #CLASS methods must use "this"
                                  #OBJ:
                                  #  - exceptMethods "FUNC"_ARR
complexity NUM                    #Maximum cyclomatic complexity, i.e. number of branches|paths per function
consistent-return                 #If there is one return VAL, there must be no return (with no VAL)
                                  #OBJ:
                                  #  - treatUndefinedAsUnspecified BOOL: if false (def), there must be no
                                  #    return undefined either
curly STR [STR2]                  #Using {} around statements
                                  #STR:
                                  #  - 'all': always {}
                                  #  - 'multi': {} if multiple statements, no {} if single
                                  #  - 'multi-line': {} if multiple lines
                                  #  - 'multi-or-nest': {} if multiple statements or lines, no {} otherwise
                                  #STR2:
                                  #  - 'consistent': each part of if|else chain must have same braces style
default-case OBJ                  #Must have default case in switch statement
                                  #OBJ: commentPattern REGEXP (def: /^no default$/i) for a comment that can be used instead of
                                  #default case.
dot-location STR                  #In VAR.VAR2, dot at end of line (STR "object", def) or beginning of line (STR "property")
dot-notation OBJ                  #Must use VAR.VAR2 not VAR["VAR2"]
                                  #OBJ:
                                  #  - allowKeywords BOOL (def: true): if false, reversed keywords must use VAR["VAR2"]
                                  #  - allowPattern REGEXP: VAR2 matching REGEXP can use either
eqeqeq STR [OBJ]                  #Must use === !== not == !=
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'smart': except == on null, two literal values, or typeof
                                  #OBJ:
                                  #  - null 'always' (def), 'never', 'ignore': for == null
guard-for-in                      #Must use OBJ.hasOwnProperty() inside "for in"
no-alert                          #Avoid alert|confirm|prompt()
no-caller                         #Avoid arguments.caller|callee
no-case-declarations              #Avoid let|const in switch case not wrapped in {}
no-div-regex                      #Avoid unescaped = at beginning of REGEXP
no-else-return                    #Early returns: if a "if" branch returns, no "else" branch needed
no-empty-function OBJ             #Avoid empty functions, unless contains comment
                                  #OBJ:
                                  #  - allow STR_ARR: among 'functions', 'arrowFunctions', 'methods', 'generatorFunctions|Methods',
                                  #    'constructors', 'getters', 'setters'
no-empty-pattern                  #Avoid empty destructuring, e.g. const {VAR: {}} = VAL
no-eq-null                        #=== null not == null
no-eval OBJ                       #Avoid eval()
                                  #OBJ: allowIndirect BOOL (def: false): ignore if eval() is a FUNC_VAL
no-extend-native OBJ              #Avoid extending native types
                                  #OBJ: exceptions 'TYPE'_ARR
no-extra-bind                     #Avoid FUNC.bind() if FUNC does not use this
no-extra-label                    #Avoid LABEL if the structure is not nested
no-fallthrough OBJ                #Switch cases must use break
                                  #OBJ: commentPattern REGEXP (def: /^falls through$/i) for a comment
                                  #that can be used instead of break
no-floating-decimal               #Avoid .NUM or NUM. (use 0.NUM or NUM)
no-global-assign OBJ              #Avoid assigning to builtin global variables (e.g. window, global, process)
                                  #OBJ: exceptions 'VAR'_ARR
no-implicit-coercion OBJ          #Must use Boolean|Number|String() for typecasting, not "smart tricks"
                                  #Also must use VAL !== -1, not ~
                                  #OBJ:
                                  #  - boolean|number|string BOOL (def: true)
                                  #  - allow STR_ARR (def: []): among '~', '!!', '+', '*'
no-implicit-globals               #Top-level var VAR must be GLOBAL.VAR instead
no-implied-eval                   #Avoid setTimeout|setInterval(STR)
no-invalid-this                   #Avoid this outside methods
no-iterator                       #Avoid __iterator__ (non-standard)
no-labels OBJ                     #Avoid LABEL
                                  #OBJ: allowLoop|allowSwitch BOOL (def: false)
no-lone-blocks                    #Avoid unnecessary {} blocks
no-loop-func                      #Avoid function declarations in loops
no-magic-numbers                  #Must use constant variables instead of constant values
no-multi-spaces OBJ               #Avoid multiple spaces
                                  #OBJ:
                                  #  - ignoreEOLComments BOOL (def: false): ignore at end of line if there is a //COMMENT
                                  #  - exceptions.TYPE BOOL (def: { "Property": true }): ignored for ESTree TYPEs
no-multi-str                      #Avoid multiline STR
no-new                            #Avoid new TYPE as a single statement (e.g. no assignment)
no-new-func                       #Avoid new Function()
no-new-wrappers                   #Avoid new String|Number|Boolean()
no-octal                          #Avoid 0... (prefer 0o...)
no-octal-escape                   #Avoid \NNN octal escape
no-param-reassign OBJ             #Avoid reassigning function parameters
                                  #OBJ:
                                  #  - props BOOL (def: false): applies deeply, i.e. avoid PARAM.VAR = VAL too
                                  #  - ignorePropertyModificationsFor 'VAR'_ARR (def: []): exceptions for OBJ.props
no-proto                          #Avoid __proto__ (prefer getPrototypeOf())
no-redeclare OBJ                  #Avoid declaring twice same VAR with var
                                  #OBJ:
                                  #  - builtinGlobals BOOL (def: false): also avoid redeclaring builtin global vars
no-restricted-properties OBJ...   #Avoid custom OBJ2.VAR2, defined by OBJ...:
                                  #  - object 'OBJ2' (def: any)
                                  #  - property 'VAR2' (def: any)
                                  #  - message STR (error message, optional)
no-return-assign STR              #Avoid assignments in return statements
                                  #STR: "always" (def) or "except-parens" (ignore if extra sets of parenthesis)
no-return-await                   #Avoid return await VAL (it does same as return VAL)
no-script-url                     #Avoid 'javascript:*' URLs
no-self-assign OBJ                #Avoid assignments where both sides are the same
                                  #OBJ: props BOOL (def: false): include OBJ2.VAR2 self assignments
no-self-compare                   #Avoid comparisons where both sides are the same
no-sequences                      #Avoid comma operator, except in for(...) or if EXPR wrapped in parenthesis
no-throw-literal                  #Must only throw ERROR
no-unmodified-loop-condition      #Avoid loop TEST where TEST variables are never modified inside the loop
no-unused-expressions OBJ         #Avoid statements with no side-effects
                                  #OBJ:
                                  #  - allowShortCircuit BOOL (def: false): ignore if part of && || chain
                                  #  - allowTernary BOOL (def: false): ignore if part of ? : chain
                                  #  - allowTaggedTemplates BOOL (def: false): ignore for TAG`...`
no-unused-labels                  #Avoid unused LABEL
no-useless-call                   #Avoid OBJ.FUNC.call|apply(OBJ, ...) or FUNC.call|apply(null|undefined, ...)
no-useless-concat                 #Avoid STR_LIT + STR2_LIT
no-useless-escape                 #Avoid unnecessary escape sequences in STR|REGEXP
no-useless-return                 #Avoid "return;" at end of function
no-void                           #Avoid void VAL
no-warning-comments OBJ           #Avoid comments like TODO|FIXME
                                  #OBJ:
                                  #  - terms STR_ARR (def: 'todo', 'fixme', 'xxx'): matched whole word, case-insensitive
                                  #  - location 'start' (def) or 'anywhere'
no-with                           #Avoid "with"
prefer-promise-reject-errors OBJ  #Must pass ERROR to Promise.reject()
                                  #OBJ: allowEmptyReject BOOL (def: false): also allow undefined
radix STR                         #With parseInt(..., RADIX):
                                  #  - STR 'always' (def): require RADIX
                                  #  - STR 'as-needed': forbid RADIX if 10
require-await                     #Avoid async functions with no await
vars-on-top                       #Variable declarations must be at top of scope
wrap-iife STR|OBJ                 #IIFE parenthesis wrapping.
                                  #STR:
                                  #  - 'outside' (def): (function ... {}())
                                  #  - 'inside': (function ... {})()
                                  #  - 'any': either
                                  #OBJ:
                                  #  - functionPrototypeMethods BOOL (def: false): also when FUNC is fired using call|apply()
yoda STR|OBJ                      #Handling of Yoda expressions.
                                  #STR: 'never' (def), 'always'
                                  #OBJ:
                                  #  - onlyEquality BOOL (def: false): only forbids for == === != !==
                                  #  - exceptRange BOOL (def: false): accepts in range test, e.g. VAL < VAL2 && VAL2 < VAL3

STOPPED HERE
strict                            #Require or disallow strict mode directives

init-declarations                 #Require or disallow initialization in variable declarations
no-catch-shadow                   #Catch clause parameters from shadowing variables in the outer scope
no-delete-var                     #Deleting variables
no-label-var                      #Labels that share a name with a variable
no-restricted-globals             #Specified global variables
no-shadow                         #Variable declarations from shadowing variables declared in the outer scope
no-shadow-restricted-names        #Identifiers from shadowing restricted names
no-undef                          #The use of undeclared variables unless mentioned in /*global */ comments
no-undef-init                     #Initializing variables to undefined
no-undefined                      #The use of undefined as an identifier
no-unused-vars                    #Unused variables
no-use-before-define              #The use of variables before they are defined

callback-return                   #Return statements after callbacks
global-require                    #Require() calls to be placed at top-level module scope
handle-callback-err               #Error handling in callbacks
no-buffer-constructor             #Use of the Buffer() constructor
no-mixed-requires                 #Require calls to be mixed with regular variable declarations
no-new-require                    #New operators with calls to require
no-path-concat                    #String concatenation with __dirname and __filename
no-process-env                    #The use of process.env
no-process-exit                   #The use of process.exit()
no-restricted-modules             #Specified modules when loaded by require
no-sync                           #Synchronous methods

array-bracket-newline             #Linebreaks after opening and before closing array brackets
array-bracket-spacing             #Consistent spacing inside array brackets
array-element-newline             #Line breaks after each array element
block-spacing                     #Consistent spacing inside single-line blocks
brace-style                       #Consistent brace style for blocks
camelcase                         #Camelcase naming convention
capitalized-comments              #Enforce or disallow capitalization of the first letter of a comment
comma-dangle                      #Require or disallow trailing commas
comma-spacing                     #Consistent spacing before and after commas
comma-style                       #Consistent comma style
computed-property-spacing         #Consistent spacing inside computed property brackets
consistent-this                   #Consistent naming when capturing the current execution context
eol-last                          #Require or disallow newline at the end of files
func-call-spacing                 #Require or disallow spacing between function identifiers and their invocations
func-name-matching                #Function names to match the name of the variable or property to which they are assigned
func-names                        #Require or disallow named function expressions
func-style                        #The consistent use of either function declarations or expressions
id-blacklist                      #Avoid specified identifiers
id-length                         #Minimum and maximum identifier lengths
id-match                          #Identifiers to match a specified regular expression
indent                            #Consistent indentation
jsx-quotes                        #Consistent use of either double or single quotes in JSX attributes
key-spacing                       #Consistent spacing between keys and values in object literal properties
keyword-spacing                   #Consistent spacing before and after keywords
line-comment-position             #Position of line comments
linebreak-style                   #Consistent linebreak style
lines-around-comment              #Empty lines around comments
max-depth                         #Maximum depth that blocks can be nested
max-len                           #Maximum line length
max-lines                         #Maximum number of lines per file
max-nested-callbacks              #Maximum depth that callbacks can be nested
max-params                        #Maximum number of parameters in function definitions
max-statements                    #Maximum number of statements allowed in function blocks
max-statements-per-line           #Maximum number of statements allowed per line
multiline-ternary                 #Newlines between operands of ternary expressions
new-cap                           #Constructor names to begin with a capital letter
new-parens                        #Parentheses when invoking a constructor with no arguments
newline-per-chained-call          #A newline after each call in a method chain
no-array-constructor              #Array constructors
no-bitwise                        #Bitwise operators
no-continue                       #Continue statements
no-inline-comments                #Inline comments after code
no-lonely-if                      #If statements as the only statement in else blocks
no-mixed-operators                #Mixed binary operators
no-mixed-spaces-and-tabs          #Mixed spaces and tabs for indentation
no-multi-assign                   #Use of chained assignment expressions
no-multiple-empty-lines           #Multiple empty lines
no-negated-condition              #Negated conditions
no-nested-ternary                 #Nested ternary expressions
no-new-object                     #Object constructors
no-plusplus                       #The unary operators ++ and --
no-restricted-syntax              #Specified syntax
no-tabs                           #All tabs
no-ternary                        #Ternary operators
no-trailing-spaces                #Trailing whitespace at the end of lines
no-underscore-dangle              #Dangling underscores in identifiers
no-unneeded-ternary               #Ternary operators when simpler alternatives exist
no-whitespace-before-property     #Whitespace before properties
nonblock-statement-body-position  #The location of single-line statements
object-curly-newline              #Consistent line breaks inside braces
object-curly-spacing              #Consistent spacing inside braces
object-property-newline           #Placing object properties on separate lines
one-var                           #Variables to be declared either together or separately in functions
one-var-declaration-per-line      #Require or disallow newlines around variable declarations
operator-assignment               #Require or disallow assignment operator shorthand where possible
operator-linebreak                #Consistent linebreak style for operators
padded-blocks                     #Require or disallow padding within blocks
padding-line-between-statements   #Require or disallow padding lines between statements
quote-props                       #Quotes around object literal property names
quotes                            #The consistent use of either backticks, double, or single quotes
require-jsdoc                     #JSDoc comments
semi                              #Require or disallow semicolons instead of ASI
semi-spacing                      #Consistent spacing before and after semicolons
semi-style                        #Location of semicolons
sort-keys                         #Object keys to be sorted
sort-vars                         #Variables within the same declaration block to be sorted
space-before-blocks               #Consistent spacing before blocks
space-before-function-paren       #Consistent spacing before function definition opening parenthesis
space-in-parens                   #Consistent spacing inside parentheses
space-infix-ops                   #Spacing around infix operators
space-unary-ops                   #Consistent spacing before or after unary operators
spaced-comment                    #Consistent spacing after the // or /* in a comment
switch-colon-spacing              #Spacing around colons of switch statements
template-tag-spacing              #Require or disallow spacing between template tags and their literals
unicode-bom                       #Require or disallow Unicode byte order mark (BOM)
wrap-regex                        #Parenthesis around regex literals

arrow-body-style                  #Braces around arrow function bodies
arrow-parens                      #Parentheses around arrow function arguments
arrow-spacing                     #Consistent spacing before and after the arrow in arrow functions
constructor-super                 #Super() calls in constructors
generator-star-spacing            #Consistent spacing around * operators in generator functions
no-class-assign                   #Reassigning class members
no-confusing-arrow                #Arrow functions where they could be confused with comparisons
no-const-assign                   #Reassigning const variables
no-dupe-class-members             #Duplicate class members
no-duplicate-imports              #Duplicate module imports
no-new-symbol                     #New operators with the Symbol object
no-restricted-imports             #Specified modules when loaded by import
no-this-before-super              #This/super before calling super() in constructors
no-useless-computed-key           #Unnecessary computed property keys in object literals
no-useless-constructor            #Unnecessary constructors
no-useless-rename                 #Renaming import, export, and destructured assignments to the same name
no-var                            #Let or const instead of var
object-shorthand                  #Require or disallow method and property shorthand syntax for object literals
prefer-arrow-callback             #Arrow functions as callbacks
prefer-const                      #Const declarations for variables that are never reassigned after declared
prefer-destructuring              #Destructuring from arrays and/or objects
prefer-numeric-literals           #Avoid parseInt() in favor of binary, octal, and hexadecimal literals
prefer-rest-params                #Rest parameters instead of arguments
prefer-spread                     #Spread operators instead of .apply()
prefer-template                   #Template literals instead of string concatenation
require-yield                     #Generator functions to contain yield
rest-spread-spacing               #Spacing between rest and spread operators and their expressions
sort-imports                      #Sorted import declarations within modules
symbol-description                #Symbol descriptions
template-curly-spacing            #Require or disallow spacing around embedded expressions of template strings
yield-star-spacing                #Require or disallow spacing around the * in yield* expressions
