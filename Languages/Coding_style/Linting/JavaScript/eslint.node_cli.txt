
          
   ESLINT  
          


TODO:
  - check whole website, conf, etc.
  - check ESLint ecosystem in npm/GitHub
  - check each property with my project, creating the perfect conf



ALTERNATIVES ==>                  #  - eslint (prefered): more rules, more configurable, more maintained
                                  #  - jshint

VERSION ==>                       #4.0.0
                                  #JavaScript linter, using Espree parser.

TYPE                              #ESTree type
SELECTOR                          #CSS-like but for ESTree:
                                  #  - TAG: ESTree TYPE
                                  #  - :statement|expression|declaration|function|pattern: abstract TYPE
                                  #  - ATTR[.ATTR2]: TYPE property
                                  #  - TAG * [ATTR] [ATTR=] [ATTR=/REGEXP/] [ATTR!=] [ATTR>] [ATTR<] [ATTR>=] [ATTR<=]
                                  #    > " " ~ + :first-child :last-child :nth-[last-]child() :not() :matches() !


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONFIGURATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONFIGURATION ==>                 #Can be from:
                                  #  - eslint --config|-c FILE
                                  #  - ./[../.../].eslintrc.js|y[a]ml|json: JavaScript, YAML or JSON
                                  #  - PACKAGE.JSON.eslintConfig OBJ
                                  #  - ~/.eslintrc
                                  #If there are several (e.g. ./.eslintrc.js and ../.eslintrc.js), merges them.

CONF.root                         #BOOL. If true, do not look in parent directories for other CONF files

CONF.extends 'PACKAGE|FILE'[_ARR] #Merges a base CONF2
                                  #Uses FILE or package eslint-config-PACKAGE which:
                                  #  - exports CONF_OBJ
                                  #  - has eslint as deepDependencies
                                  #  - can have several configs, by creating PACKAGE/FILE.js,
                                  #    and specifying extends 'PACKAGE/FILE'
                                  #Can be:
                                  #  - "eslint:recommended": default set of rules (see online doc)
                                  #  - "eslint:all": all rules

eslint --init                     #Create ./.eslintrc using interactive prompt


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FILES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint FILE|DIR...                #
eslint --stdin                    #
eslint --stdin-filename FILE      #

./.eslintignore                   #Similar to .gitignore (same syntax)
eslint --ignore-pattern PATTERN   #Files in /node_modules and /bower_components are always ignored

eslint --ignore-path FILE         #Alternative name for .eslintignore (e.g. reusing .gitignore)
eslint --no-ignore                #Do not use .eslintignore

eslint --ext EXT,...              #File extensions (def: .js)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RULES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.parserOptions
eslint --parser-options=VAR:VAL,..#Options to ESPREE.parse() (see its doc)


CONF.rules.RULE RULE_CONF         #RULE_CONF is either LEVEL or [LEVEL, CONF_VAL]
/* eslint RULE: RULE_CONF, ... */ #LEVEL can be "off|warn|error" (or 0|1|2)
eslint --rule 'RULE: RULECONF'    #Exit code will be 1 on "error"

/* eslint-disable [RULE,...] */
/* eslint-enable [RULE,...] */    #
// eslint-disable-line RULE,...   #End-of-line comment
// eslint-disable-next-line RULE  #

eslint --no-inline-config         #Prevent comments from changing config

CONF.settings OBJ                 #Custom OBJ passed to every RULE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GLOBALS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.globals.VAR BOOL             #Declare global variables
eslint --global GLOBAL[:BOOL]     #BOOL must be true if not readonly
/* global VAR[:BOOL] */           #E.g. used by RULE no-undef

CONF.env.ENV BOOL                 #Preset of global variables + parserOptions, among:
eslint --env ENV                  #  - browser, node, shared-node-browser
/* eslint-env ENV,... */          #  - es6, es5 (always included)
                                  #  - commonjs, amd
                                  #  - worker, serviceworker, webextensions
                                  #  - mocha, jasmine, jest, qunit, atomtest, embertest
                                  #  - phantomjs, protractor
                                  #  - jquery, prototypejs, shelljs, meteor, mongo
                                  #  - applescript, nashorn, greasemonkey
                                  #Also define some parserOptions:
                                  #  - ecmaVersion 6 if "es6"
                                  #  - globalReturn true if "node|commonjs"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint --output-file|-o FILE      #

eslint --format|-f REPORTER       #Output style
REPORTER                          #Package eslint-reporter-REPORTER:
                                  #  - is a FUNC(OBJ_ARR), with OBJ_ARR:
                                  #     - filePath STR
                                  #     - source STR
                                  #     - [fixable]errorCount NUM, [fixable]warningCount NUM
                                  #     - messages OBJ_ARR:
                                  #        - ruleId 'RULE'
                                  #        - severity LEVEL_NUM
                                  #        - message STR
                                  #        - source STR
                                  #        - line|column NUM, [endLine|endColumn NUM]
                                  #        - nodeType TYPE
                                  #        - fix: range [NUM, NUM2], text STR (to apply --fix, optional)
                                  #  - usually use console or create output files
                                  #Builtin:
                                  #  - 'compact', 'unix': minimal
                                  #  - 'stylish' (def)
                                  #  - 'table': similar to stylish, but as table
                                  #  - 'codeframe': show code sample
                                  #  - 'html'
                                  #  - 'json'
                                  #  - 'jslint-xml', 'junit', 'checkstyle', 'tap', 'visualstudio': specific tools
eslint --color|--no-color         #

eslint --quiet                    #Only report errors
eslint --max-warnings NUM         #Error if more than NUM warnings (def: -1)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint
--cache                           #Caches checked files, and only check changed ones on next run
--cache-location FILE|DIR         #Def: .eslintcache


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            FIXING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint --fix                      #Automatically changes files to fix some of the rules
                                  #See online doc for which rules use --fix


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CUSTOM RULE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


eslint --rulesdir DIR             #DIR contains RULE files

lib/rules/RULE.js                 #Main RULE file
                                  #Name:
                                  #  - deduced from filename
                                  #  - should be lowercase dasherized, use no-* if forbids, no prefix if requires
                                  #Exports an OBJ:
                                  #  - meta:
                                  #     - docs:
                                  #        - description STR: short description
                                  #        - category STR: categories among "Possible Errors", "Best Practices", "Strict Mode",
                                  #          "Variables", "Node.js and CommonJS", "Stylistic Issues", "ECMAScript 6"
                                  #        - recommended BOOL: whether it should be included in eslint:recommended
                                  #     - fixable 'code' or 'whitespace': for --fix
                                  #     - schema JSON_SCHEMA_ARR: matched against RULE_CONF (each ARR is one argument item)
                                  #     - deprecated BOOL (def: false)
                                  #  - create(CONTEXT)->OBJ:
                                  #     - SELECTOR[:exit](NODE):
                                  #        - called when traversing NODE top-down (or bottom-up if "exit")
                                  #     - onCodePathStart|End(CODEPATH, NODE)
                                  #     - onCodePathSegmentStart|End(CODEPATHSEGMENT, NODE)
                                  #     - onCodePathSegmentLoop(CODEPATHSEGMENT, CODEPATHSEGMENT2, NODE): when starting
                                  #       a CODEPATHSEGMENT that was already entered

CONTEXT.parserOptions             #
CONTEXT.parserPath                #
CONTEXT.id                        #'RULE'
CONTEXT.options                   #RULE_CONF, as ARR
CONTEXT.settings                  #CONF.settings
CONTEXT.report(PROBLEM)           #Report warning|error, where PROBLEM is:
                                  #  - message STR
                                  #  - data OBJ: placeholder data, which can used in message as {{VAR}}
                                  #  - node NODE
                                  #  - loc: start|end.line|column NUM (def: use NODE)
                                  #  - fix(FIXER)->FIXER_RET: applied with --fix, with FIXER:
                                  #     - insertTextAfter|Before[Range](NODE|TOKEN|RANGE, STR)->FIXER_RET
                                  #     - remove[Range](NODE|TOKEN|RANGE)->FIXER_RET
                                  #     - replaceText[Range](NODE|TOKEN|RANGE)->FIXER_RET
CONTEXT.getScope()->OBJ           #
CONTEXT.getAncestors()->NODE_ARR  #
CONTEXT.getFilename()->'FILE'     #
CONTEXT.getDeclaredVariables(NODE)#
CONTEXT.markVariableAsUsed('VAR') #For no-unused-vars RULE

CONTEXT.getSourceCode()->SOURCECOD#
SOURCECODE.text                   #'JS'
SOURCECODE.lines                  #'JS'_ARR
SOURCECODE.ast                    #PROGRAM_NODE
SOURCECODE.hasBOM                 #BOOL
SOURCECODE.getText
 (NODE[, NUM][, NUM2])->'JS'      #NUM is extra chars before NODE (def: 0), NUM is extra chars after (def: 0)

SOURCECODE.getNodeByRangeIndex
 (OFFSET)->NODE                   #
SOURCECODE.getTokenByRangeStart
 (OFFSET, OPTS)->TOKEN            #OPTS: includeComments BOOL (def: false)
SOURCECODE.getLocFromIndex(OFFSET)
 ->LOC                            #
SOURCECODE.getIndexFromLoc(LOC)
 ->OFFSET                         #

SOURCECODE.getTokens(NODE)
 ->TOKEN_ARR                      #
SOURCECODE.getFirst|LastToken[s]  #FILTER_OPTS:
 (NODE[, OPTS])->TOKEN[_ARR]      #  - filter(TOKEN)->BOOL
                                  #  - includeComments BOOL (def: false)
                                  #  (if no "s")
                                  #  - skip NUM (def: 0)
                                  #  (if "s")
                                  #  - count NUM (def: 0): max number
SOURCECODE.getToken[s]After|Before
 (NODE|TOKEN[, OPTS])->TOKEN[_ARR]#
SOURCECODE.getTokensBetween
 (NODE|TOKEN, NODE|TOKEN2)
 ->TOKEN_ARR                      #
SOURCECODE.
 getFirst|LastToken[s]Between
 (NODE|TOKEN, NODE|TOKEN2[, OPTS])
 ->TOKEN[_ARR]                    #
SOURCECODE.isSpaceBetweenTokens
 (TOKEN, TOKEN2)->BOOL            #

SOURCECODE.getAllComments()
  ->STR_ARR                       #
SOURCECODE.getCommentsBefore|
 After|Inside(NODE|TOKEN)->STR_ARR#
SOURCECODE.getJSDocComment(NODE)
 ->STR|null                       #


CODEPATH                          #Blocks, including functions. Includes several CODEPATHSEGMENT
CODEPATH.id                       #Unique id
CODEPATH.upper                    #Parent CODEPATH
CODEPATH.childCodePaths           #CODEPATH_ARR
CODEPATH.currentSegments          #CODEPATHSEGMENT_ARR
CODEPATH.initialSegment           #First CODEPATHSEGMENT
CODEPATH.finalSegments            #Possible last CODEPATHSEGMENT_ARR, e.g. return|throw statements
CODEPATH.returned|thrownSegments  #Same for only return|thrown

CODEPATHSEGMENT                   #Statements or part of statements
CODEPATHSEGMENT.id                #Unique id
CODEPATHSEGMENT.prev|nextSegments #CODEPATHSEGMENT_ARR
CODEPATHSEGMENT.reachable         #BOOL


tests/lib/rules/RULE.js           #Each rule must have tests
RULETESTER                        #Helper, available under /lib/testers/rule-tester
RULETESTER.run('RULE', RULE, OPTS)#Unit tests a RULE. OPTS:
                                  #  - valid OBJ_ARR (or STR_ARR shorthand):
                                  #     - code 'JS'
                                  #     - [globals 'VAR'_ARR]
                                  #     - [options RULE_CONF] (i.e. ARR)
                                  #     - [settings OBJ]
                                  #     - [filename STR]
                                  #     - [parserOptions OBJ]
                                  #  - invalid OBJ_ARR: same as valid, with also:
                                  #     - errors OBJ_ARR (or STR_ARR shorthand):
                                  #        - message STR
                                  #        - [type TYPE]
                                  #        - [line|column NUM]

TIMING=1 eslint --no-eslintrc
--rule "RULE: RULE_CONF"          #Rules performance testing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGINS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



CONF.plugins 'PACKAGE'_ARR        #Plugins to use
eslint --plugin PACKAGE           #Uses packages eslint-plugin-PACKAGE
                                  #All new properties added by plugins are accessible under names prefixed with "PLUGIN/"
                                  #Must have peerDependencies eslint

PLUGIN                            #Main object exported by plugins
PLUGIN.configs.CONF_NAME CONF     #Add new CONF (like eslint-config-* does)
PLUGIN.rules.RULE RULE            #Add new rules
PLUGIN.environments.ENV
 .globals|parserOptions           #Add new ENV
PLUGIN.processors.".EXT" OBJ      #OBJ:
                                  #  - preprocess(STR, 'FILE')->STR_ARR
                                  #  - postprocess(STR_ARR_ARR, 'FILE')->STR_ARR
                                  #E.g. to lint JavaScript inside HTML




         
   RULES  
         



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           COMMENTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-inline-comments                #Avoid non-full-line comments
line-comment-position [OBJ]       #Position of line comments
                                  #OBJ:
                                  #  - position 'above' (def) or 'beside' (i.e. end of line)
                                  #  - ignorePattern 'REGEXP'
                                  #  - applyDefaultIgnorePatterns BOOL: if tre (def), ignores words starting with
                                  #    eslint|jshint|jslint|istanbul|global|exported|jscs|fallsthrough
lines-around-comment [OBJ]        #Where comments can be put
                                  #OBJ:
                                  #  - before|afterBlockComments BOOL (def: true, false): requires empty line before|after /* */
                                  #  - before|afterLineComments BOOL (def: false): requires empty line before|after //
                                  #  - allowBlockStart|End BOOL (def: false): allow comment at beginning|end of { } block
                                  #  - allowObjectStart|End BOOL (def: false): allow comment at beginning|end of { } OBJ
                                  #  - allowArrayStart|End BOOL (def: false): allow comment at beginning|end of [] ARR
                                  #  - ignorePattern 'REGEXP'
                                  #  - applyDefaultIgnorePatterns BOOL: if tre (def), ignores words starting with
                                  #    eslint|jshint|jslint|istanbul|global|exported|jscs|fallsthrough
spaced-comment [STR] [OBJ]        #Space after // or /*
                                  #STR: 'always' (def) or 'never'
                                  #OBJ:
                                  #  - exceptions STR_ARR: check for non-REGEXP pattern anywhere in comment
                                  #  - markers STR_ARR: check for non-REGEXP pattern at start of comment
                                  #  - block|line OBJ: same options, but only for // or only /* */
                                  #  - balanced BOOL:
                                  #     - whether this applies also to space before */
                                  #     - must be inside OBJ.block
capitalized-comments [STR] [OBJ]  #Whether comments should start with uppercase or lowercase
                                  #STR: 'always' (def) or 'never'
                                  #OBJ:
                                  #  - ignorePattern 'REGEXP': ignores if first words matches
                                  #    By def., ignores if starts with jscs|jshint|eslint|istanbul|global[s]|exported
                                  #  - ignoreInlineComments BOOL (def: false): if true, only for full-line comments
                                  #  - ignoreConsecutiveComments BOOL (def: false): only check first line of comment blocks
no-warning-comments [OBJ]         #Avoid comments like TODO|FIXME
                                  #OBJ:
                                  #  - terms STR_ARR (def: 'todo', 'fixme', 'xxx'): matched whole word, case-insensitive
                                  #  - location 'start' (def) or 'anywhere'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             JSDOC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


valid-jsdoc [OBJ]                 #Must be valid JSDoc comments.
                                  #OBJ:
                                  #  - prefer.TAG "TAG2": avoid @TAG2, prefer @TAG
                                  #  - preferType.TYPE "TYPE2", avoid TYPE2, prefer TYPE
                                  #  - requireReturn BOOL: if true (def), require @return.
                                  #    If false, ignore if no return statement
                                  #  - requireReturnType BOOL (def: true): require TYPE in @return
                                  #  - matchDescription REGEXP: tested against every COMMENT
                                  #  - requireParamDescription BOOL (def: true): @param must have a COMMENT
                                  #  - requireReturnDescription BOOL (def: true): @return must have a COMMENT
require-jsdoc [OBJ]               #Requires JSDoc comments
                                  #OBJ: require.TYPE BOOL, with allowed TYPEs: FunctionDeclaration, MethodDefinition,
                                  #ClassDeclaration, ArrowFunctionExpression
                                  #Def: true for FunctionDeclaration only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRICT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


strict [STR]                      #For 'use strict':
                                  #  - 'global' (def is CommonJS module): must add one on top of file
                                  #  - 'function' (def otherwise): must add one on top of each function
                                  #  - 'never' (def if ES module)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        LONG STATEMENTS        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


operator-linebreak [STR] [OBJ]    #When using newlines-separated chained operations, e.g. ... && ... && ...,
                                  #where to put the operators.
                                  #STR: 'after' (def, end of line), 'start' (start of line), 'none' (inside line)
                                  #OBJ: overrides.OPERATOR STR (def: ? and : 'before')
newline-per-chained-call [OBJ]    #Forces newlines before dots in dot-delimited chains
                                  #OBJ: ignoreChainWithDepth NUM (def: 2): ignore if chain has <= NUM items
dot-location [STR]                #In multiline dot-delimited chains, dot at end of line (STR "object", def) or beginning of line (STR "property")
no-whitespace-before-property     #Avoid VAR .VAR2, i.e. dot-delimited chain with whitespaces before dot


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          BLANK LINES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-multiple-empty-lines [OBJ]     #Max consecutive empty lines
                                  #OBJ:
                                  #  - max NUM (def: 2)
                                  #  - maxEOF|maxBOF NUM: same for end|beginning of file
padding-line-between-statements   #Empty lines between statements, according to their type.
 OBJ...                           #OBJ:
                                  #  - blankLine: 'always' (requires), 'never' (forbids), 'any' (ignores)
                                  #  - prev|next STR[_ARR]:
                                  #     - type of statement before|after the blank lines
                                  #     - can be:
                                  #        - '*': any statement
                                  #        - 'block': {} (not associated with a structure)
                                  #        - 'block-like': any {} block
                                  #        - 'multiline-block-like': any {} block, if multiple lines
                                  #        - const|var|let
                                  #        - function|class: declarations
                                  #        - import|export|cjs-export|cjs-import|
                                  #        - switch|case|default
                                  #        - for|if|while|do
                                  #        - break|continue
                                  #        - debugger|return
                                  #        - try|throw
                                  #        - with
                                  #        - directive: 'use strict'
                                  #        - empty: single ;
                                  #        - expression: EXPR
                                  #If several OBJ..., last one has priority.
padded-blocks [STR] [OBJ]         #Empty lines at start and of end of {} blocks
                                  #STR: 'always' (def), 'never'
                                  #OBJ: blocks|classes|switches STR:
                                  #  - same for specific type of block
                                  #  - note that STR is shorthand for OBJ.blocks only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          INDENTATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


indent [VAL] [OBJ]                #Indentation
                                  #VAL: NUM (def: 4) or 'tab'
                                  #OBJ, for number of indents in (multi-line):
                                  #  - SwitchCase NUM (def: 0): switch cases
                                  #  - VariableDeclarator[.var|let|const] NUM (def: 1): declarations
                                  #  - outerIIFEBody NUM (def: 1): IIFE
                                  #  - MemberExpression NUMM (def: 1): VAR.VAR2...
                                  #  - FunctionDeclaration|FunctionExpression:
                                  #     - parameters NUMM (def: 1)
                                  #     - body NUM (def: 1)
                                  #  - CallExpression.arguments NUMM (def: 1)
                                  #  - ArrayExpression NUMM (def: 1): ARR
                                  #  - ObjectExpression NUMM (def: 1): OBJ
                                  #  - flatTernaryExpressions BOOL: if false (def), nested ?: must be indented
                                  #NUMM means either:
                                  #  - NUM
                                  #  - 'first': must be aligned with first one
                                  #  - 'off': disables check
no-tabs                           #Avoid tabs
no-mixed-spaces-and-tabs [OBJ]    #Avoid mixed spaces and tabs for indentation
                                  #OBJ: smartTabs BOOL (def: false): allow tabs when used for alignment


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          WHITESPACES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-trailing-spaces [OBJ]          #No trailing spaces
                                  #OBJ: skipBlankLines BOOL (def: false)
no-multi-spaces [OBJ]             #Avoid multiple spaces
                                  #OBJ:
                                  #  - ignoreEOLComments BOOL (def: false): ignore at end of line if there is a //COMMENT
                                  #  - exceptions.TYPE BOOL (def: { "Property": true }): ignored for TYPEs
no-irregular-whitespace [OBJ]     #Avoid any whitespace that is not \n \r \t or space.
                                  #This includes \v \f NBSP BOM ZWSP and many Unicode ones
                                  #OBJ:
                                  #  - skipComments BOOL (def: true)
                                  #  - skipStrings BOOL (def: true)
                                  #  - skipTemplates BOOL (def: true)
                                  #  - skipRegExps BOOL (def: true)
linebreak-style [STR]             #Whether linebreak should be 'unix' (def, LF) or 'windows' (CRLF)
eol-last [STR]                    #Files must end with LF
                                  #STR: 'always' (def), 'never'
unicode-bom [STR]                 #Unicode BOM
                                  #STR: 'always' or 'never' (def)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BRACES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


curly [STR] [STR2]                #Using {} around statements
                                  #STR:
                                  #  - 'all' (def): always {}
                                  #  - 'multi': {} if multiple statements, no {} if single
                                  #  - 'multi-line': {} if multiple lines
                                  #  - 'multi-or-nest': {} if multiple statements or lines, no {} otherwise
                                  #STR2:
                                  #  - 'consistent': each part of if|else chain must have same braces style
brace-style [STR] [OBJ]           #{} style
                                  #STR:
                                  #  - '1tbs' (def)
                                  #      if ... {
                                  #      } else {
                                  #      }
                                  #  - 'stroustrup'
                                  #      if ... {
                                  #      }
                                  #      else {
                                  #      }
                                  #  - 'allman'
                                  #      if ...
                                  #      {
                                  #      }
                                  #      else
                                  #      {
                                  #      }
                                  #OBJ: allowSingleLine BOOL (def: true): allow { ... }
nonblock-statement-body-position  #Where to put single statement blocks that do not use {}
 [STR] [OBJ]                      #STR: 'besides' (def, same line), 'below' (next line), 'any' (no requirement)
                                  #OBJ: overrides.KEYWORD STR (same for a specific keyword)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SPACES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


block-spacing [STR]               #Spaces inside single-line {}
                                  #STR: 'always' (def), 'never'
object-curly-spacing [STR] [OBJ]  #Spaces between {}
                                  #STR: 'always', 'never' (def)
                                  #OBJ:
                                  #  - objectInObjects BOOL (def: depends on 'always|never'): space if OBJ item
                                  #  - arraysInObjects BOOL (def: depends on 'always|never'): space if ARR item
                                  #'always' does not require spaces inside empty OBJ
space-before-blocks [STR|OBJ]     #Spaces before {} block
                                  #STR: 'always' (def) or 'never'
                                  #OBJ: functions|keywords|classes STR: same for a specific block type

array-bracket-spacing [STR] [OBJ] #Spaces inside []
                                  #STR: 'always', 'never' (def)
                                  #OBJ:
                                  #  - singleValue BOOL (def: depends on 'always|never'): space if single item
                                  #  - objectInArrays BOOL (def: depends on 'always|never'): space if OBJ item
                                  #  - arraysInArrays BOOL (def: depends on 'always|never'): space if ARR item
                                  #'always' does not require spaces inside empty ARR
computed-property-spacing [STR]   #Space around [] in OBJ[VAR] or { [VAR] }
                                  #STR: 'never' (def), 'always'

space-in-parens [STR] [OBJ]       #Space inside ()
                                  #STR: 'always' or 'never' (def)
                                  #OBJ: exceptions STR_ARR, among '{}', '[]', '()', 'empty'

template-tag-spacing [STR]        #Space between TAG and `...`
                                  #STR: 'always' or 'never' (def)
template-curly-spacing [STR]      #Space inside ${}
                                  #STR: 'always' or 'never' (def)

comma-spacing [OBJ]               #Space around comma
                                  #Not checked for sparsed ARR elements
                                  #OBJ: before|after BOOL (def: false, true)
semi-spacing [OBJ]                #Spaces around ;
                                  #OBJ: before|after BOOL (def: false, true)
key-spacing [OBJ]                 #Space around : in OBJ: VAR
                                  #OBJ:
                                  #  - beforeColon|afterColon BOOL (def: false, true)
                                  #  - mode 'strict' (def) or 'minimum': whether to allow multiple spaces
                                  #  - align 'colon' (colons must align), 'value' (values must align)
                                  #  - align OBJ: with OBJ.on 'colon|value', and OBJ same as above
                                  #  - singleLine|multiLine OBJ: same OBJ as above, but restrict to single-line or
                                  #    multiline OBJs

space-unary-ops [OBJ]             #Space around operators
                                  #OBJ:
                                  #  - words BOOL: space around new|delete|typeof|void|yield
                                  #  - nonwords BOOL: space around - ++ -- + !
                                  #  - overrides.KEYWORD BOOL
keyword-spacing [OBJ]             #Space around keywords
                                  #OBJ:
                                  #  - before|after BOOL (def: true): for all keywords
                                  #  - overrides.KEYWORD.before|after BOOL: for specific keywords
space-infix-ops [OBJ]             #Space around ++ --
                                  #OBJ:
                                  #  - int32Hint BOOL (def: true): allow no space around |0 (used sometimes for typecasting)
rest-spread-spacing [STR]         #Space between ... and VAL in ...VAL
                                  #STR: 'always' or 'never' (def)

func-call-spacing [STR] [OBJ]     #Space in-between FUNC and (...) in "FUNC(...)"
                                  #STR: 'always', 'never' (def)
                                  #OBJ: allowNewlines BOOL (def: false)
space-before-function-paren       #Space before (...) in function [NAME](...)
  [STR|OBJ]                       #STR: 'always' (def) or 'never'
                                  #OBJ: anonymous|named|asyncArrow STR:
                                  #  - same for a specific function type
                                  #  - not using OBJ will only target anonymous|named
arrow-spacing [OBJ]               #Space around =>
                                  #OBJ: before|after BOOL (def: true, true)
generator-star-spacing [OBJ]      #Space around * in generator FUNC
                                  #OBJ: before|after BOOL (def: true, false)
yield-star-spacing [STR|OBJ]      #Space around * in yield* VAL
                                  #OBJ: before|after BOOL (def: false, true)
                                  #STR: 'after', 'before', 'both', 'neither' (shorthands)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SEMICOLONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


semi [STR] [OBJ]                  #Semicolons at end of statements.
                                  #STR: 'always' (def), 'never' (unless required for ambiguity)
                                  #OBJ: omitLastInOneLineBlock BOOL (def: false): ignored if last statement of a one-line {} block
semi-style [STR]                  #Whether to put ; at start or end of line
                                  #STR: 'last' (def), 'first'
no-unexpected-multiline           #Avoid multilines statements that would be interpreted as two statements if semicolons were
                                  #inserted.
no-extra-semi                     #Avoid double semicolons (empty statements)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STATEMENTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-empty [OBJ]                    #Avoid empty block statements, unless they contain comments
                                  #OBJ: allowEmptyCatch BOOL (ignore if catch clause)
no-unused-expressions [OBJ]       #Avoid statements with no side-effects
                                  #OBJ:
                                  #  - allowShortCircuit BOOL (def: false): ignore if part of && || chain
                                  #  - allowTernary BOOL (def: false): ignore if part of ? : chain
                                  #  - allowTaggedTemplates BOOL (def: false): ignore for TAG`...`
no-new                            #Avoid new TYPE as a single statement (e.g. no assignment)
no-unreachable                    #Avoid statements that cannot be reached because of an early return|throw|break|continue


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARENTHESIS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-extra-parens [STR] [OBJ]       #Avoid unnecessary parentheses
                                  #STR: "all" (def), "functions" (only around FUNC expressions)
                                  #OBJ:
                                  #  - conditionalAssign BOOL (ignore around assignments inside TEST)
                                  #  - returnAssign BOOL (ignore around assignments in return statement)
                                  #  - nestedBinaryExpressions BOOL (ignore around chained binary operators)
                                  #  - ignoreJSX "none", "all", "multi-line", "single-line"
                                  #    (ignore around JSX, providing it is multi-line or single-line)
no-mixed-operators [OBJ]          #Must add extra (even useless) parenthesis around operators to clarity order,
                                  #when using several operators.
                                  #OBJ:
                                  #  - groups 'OP'_ARR_ARR:
                                  #     - will force parenthesis inside each group (not between groups)
                                  #     - def:
                                  #        + - * / % **
                                  #        & | ^ ~ << >> >>>
                                  #        == != === !== > >= < <=
                                  #        && ||
                                  #        in instanceof
                                  #  - allowSamePrecedence BOOL: if true (def), ignore if two operators have same precedence

wrap-iife [STR] [OBJ]             #IIFE parenthesis wrapping.
                                  #STR:
                                  #  - 'outside' (def): (function ... {}())
                                  #  - 'inside': (function ... {})()
                                  #  - 'any': either
                                  #OBJ:
                                  #  - functionPrototypeMethods BOOL (def: false): also when FUNC is fired using call|apply()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          COMPLEXITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


max-len [NUM|OBJ]                 #Maximum line length (Unicode chars)
                                  #NUM, or OBJ:
                                  #  - code NUM (def: 80): for generic lines
                                  #  - tabWidth (def: 4)
                                  #  - comments NUM (def: same as code): for comments
                                  #  - ignorePattern 'REGEXP'
                                  #  - ignore[Trailing]Comments BOOL (def: false): ignore non-full-line|trailing comments
                                  #  - ignoreUrls|Strings|TemplateLiterals|RegExpLiterals BOOL (def: false)
max-lines [NUM|OBJ]               #Max number of lines per file
                                  #NUM, or OBJ:
                                  #  - max NUM (def: 300)
                                  #  - skipBlankLines BOOL (def: false)
                                  #  - skipComments BOOL (def: false)

max-statements [NUM|OBJ]          #Max number of statements per function
                                  #NUM, or OBJ:
                                  #  - max NUM (def: 10)
                                  #  - ignoreTopLevelFunctions BOOL (def: false)
max-statements-per-line [NUM]     #Max number of statements per line (def: 1)

complexity [NUM]                  #Maximum cyclomatic complexity (def: 20), i.e. number of branches|paths per function
max-depth [NUM]                   #Max block nesting (def: 4)
max-nested-callbacks [NUM]        #Max nested callback depth (def: 10)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          REFERENCING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-undef [OBJ]                    #Avoid referencing undeclared variables
                                  #Exceptions: global variables (see above on how to declare them)
                                  #OBJ: typeof BOOL: if false (def), ignore typeof VAR
no-undef-init                     #Avoid explicitely assigning undefined at initialization

no-unused-vars [OBJ]              #Avoid unused variables
                                  #Exceptions:
                                  #  - mentioned in /* exported VAR */ comment
                                  #  - providing it is not CommonJS module or ES module
                                  #OBJ:
                                  #  - vars STR: 'all' (def, check all) or 'local' (does not check global variables)
                                  #  - varsIgnorePattern 'REGEXP': ignore if name matches
                                  #  - args STR: 'all' (check all), 'none' or 'after-used' (def, only last positional argument)
                                  #  - argsIgnorePattern 'REGEXP': ignore if name matches
                                  #  - ignoreRestSiblings BOOL (def: false): do not check ...ARG
                                  #  - caughtErrors 'all|none', caughtErrorsPattern 'REGEXP': same but for catch clause arg

no-redeclare [OBJ]                #Avoid declaring twice same VAR with var
                                  #OBJ:
                                  #  - builtinGlobals BOOL (def: false): also avoid redeclaring builtin global vars

no-shadow [OBJ]                   #Disallow inner scopes declaring variables with same name as outer scope
                                  #OBJ:
                                  #  - builtinGlobals BOOL (def: false): including builtin global variables (e.g. Number)
                                  #  - hoist STR: check through hoisting of 'functions' (def), 'all' (functions + variables)
                                  #    or 'never'
                                  #  - allow 'VAR'_ARR: whitelists
no-shadow-restricted-names        #Avoid variables named NaN, Infinity, undefined, eval or arguments
no-use-before-define [OBJ]        #Avoid hoisting
                                  #OBJ: functions|classes|variables BOOL (def: true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DECLARATIONS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


block-scoped-var                  #var must be replaceable by let without errors
no-const-assign                   #Avoid reassigning const variables
no-var                            #Avoid var (prefer let|const)
prefer-const [OBJ]                #Avoid const declarations of variables that are never reassigned.
                                  #OBJ:
                                  #  - destructuring STR: if some variables in destructuring should be const, but others let,
                                  #    warns if 'any' (def), or not if 'all'
                                  #  - ignoreReadBeforeAssign BOOL: if false (def), takes hoisting into account

no-global-assign [OBJ]            #Avoid assigning to builtin global variables (e.g. window, global, process)
                                  #OBJ: exceptions 'VAR'_ARR
no-implicit-globals               #Top-level var VAR must be GLOBAL.VAR instead

one-var [STR] [OBJ]               #Chained declarations, e.g. var VAR, VAR2;
                                  #STR: 'always' (def), 'never'
                                  #OBJ:
                                  #  - var|let|const STR: same for only this type
                                  #  - [un]initialized STR: same for only this type
one-var-declaration-per-line [STR]#When using chained declarations, e.g. var VAR, VAR2;, whether to separate with newlines
                                  #STR:
                                  #  - 'always' (required for each VAR)
                                  #  - 'initializations' (def, required for each initialized VAR)

vars-on-top                       #Variable declarations must be at top of scope
no-inner-declarations [STR]       #Avoid var declarations (not let|const) and FUNC declarations (not expressions)
                                  #inside a conditional branch.
                                  #STR: "functions" (only FUNC) (def) or "both" (both var|FUNC)

sort-vars [OBJ]                   #Requires sorting VAR declarations
                                  #OBJ: ignoreCase BOOL (def: false)

no-magic-numbers                  #Must use constant variables instead of constant values


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSIGNMENTS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


init-declarations [STR] [OBJ]     #Whether var|let declarations must also assign: 'always' (def) or 'never'
                                  #OBJ: ignoreForLoopInit BOOL (def: false): if 'never', ignore in for (...)
no-plusplus [OBJ]                 #Avoid ++ --
                                  #OBJ: allowForLoopAfterthoughts BOOL (def: false): allow in for (...; VAR++)
operator-assignment [STR]         #Whether to use += -= etc.
                                  #STR: 'always' (def) or 'never'

no-multi-assign                   #Avoid VAR = VAR2 = VAL

no-cond-assign [STR]              #Avoid assignments in TEST
                                  #STR: "always" (def) or "except-parens" (ignore if extra sets of parenthesis)
no-return-assign [STR]            #Avoid assignments in return statements
                                  #STR: "always" (def) or "except-parens" (ignore if extra sets of parenthesis)
no-self-assign [OBJ]              #Avoid assignments where both sides are the same
                                  #OBJ: props BOOL (def: false): include OBJ2.VAR2 self assignments

no-param-reassign [OBJ]           #Avoid reassigning function parameters
                                  #OBJ:
                                  #  - props BOOL (def: false): applies deeply, i.e. avoid PARAM.VAR = VAL too
                                  #  - ignorePropertyModificationsFor 'VAR'_ARR (def: []): exceptions for OBJ.props


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NAMING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


id-length [OBJ]                   #VAR names length
                                  #OBJ:
                                  #  - min NUM (def: 2)
                                  #  - max NUM (def: Infinity)
                                  #  - exceptions 'VAR'_ARR
                                  #  - properties 'always' (def) or 'never': whether to check OBJ.VAR
camelcase [OBJ]                   #VAR must be camelCase or CONSTANT_CASE
                                  #OBJ: properties 'always' (def) or 'never'
id-match 'REGEXP' [OBJ]           #VAR names matching
                                  #Example: '^[a-z]+([A-Z][a-z]+)*$' for camelCase with only letters
                                  #OBJ:
                                  #  - properties BOOL: if true, also check OBJ.VAR
                                  #  - onlyDeclarations BOOL: if true, only variables, functions and classes
no-underscore-dangle [OBJ]        #Avoid naming _VAR
                                  #OBJ:
                                  #  - allow '_VAR'_ARR
                                  #  - allowAfterThis BOOL (def: false): ignore for this._VAR
                                  #  - allowAfterSuper BOOL (def: false): ignore for super._VAR
id-blacklist STR...               #Forbidden VAR names

new-cap [OBJ]                     #TYPE capitalization
                                  #OBJ:
                                  #  - newIsCap BOOL: if true (def), requires uppercase in new Type()
                                  #  - capIsNew BOOL: if true (def), forbids Type() without new
                                  #  - newIsCap|capIsNewExceptions 'VAR'_ARR
                                  #  - newIsCap|capIsNewExceptionPattern 'REGEXP'
                                  #  - properties BOOL: if true (def), also check OBJ.VAR

no-undefined                      #Avoid variables named undefined


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TYPECASTING          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-extra-boolean-cast             #Avoid BOOL typecasting in TEST
no-implicit-coercion [OBJ]        #Must use Boolean|Number|String() for typecasting, not "smart tricks"
                                  #Also must use VAL !== -1, not ~
                                  #OBJ:
                                  #  - boolean|number|string BOOL (def: true)
                                  #  - allow STR_ARR (def: []): among '~', '!!', '+', '*'

no-new-wrappers                   #Avoid new String|Number|Boolean()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-unsafe-negation                #Avoid !VAR in OBJ or !VAR instanceof OBJ (there should be parenthesis after !)
eqeqeq [STR] [OBJ]                #Must use === !== not == !=
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'smart': except == on null, two literal values, or typeof
                                  #OBJ:
                                  #  - null 'always' (def), 'never', 'ignore': for == null
no-eq-null                        #=== null not == null

valid-typeof [OBJ]                #Must use "typeof VAR === VAL" with VAL being STR (a valid one) or typeof VAR2
                                  #OBJ: requireStringLiterals BOOL (def: true): if false, allow EXPR as VAL

no-negated-condition              #Avoid !TEST if there is an else branch
no-constant-condition [OBJ]       #Avoid constant in TEST
                                  #OBJ: checkLoops BOOL (ignore if inside a loop)
no-self-compare                   #Avoid comparisons where both sides are the same

yoda [STR] [OBJ]                  #Handling of Yoda expressions.
                                  #STR: 'never' (def), 'always'
                                  #OBJ:
                                  #  - onlyEquality BOOL (def: false): only forbids for == === != !==
                                  #  - exceptRange BOOL (def: false): accepts in range test, e.g. VAL < VAL2 && VAL2 < VAL3

no-ternary                        #Avoid ?:
no-nested-ternary                 #Avoid nested ternary expressions
no-unneeded-ternary [OBJ]         #Avoid TEST ? true : false (prefer Boolean(TEST))
                                  #OBJ: defaultAssignment BOOL (def: true): if false, also avoid
                                  #VAR ? VAR : VAL (prefer VAR || VAL)
multiline-ternary [STR]           #Newlines in ?:
                                  #STR: 'always' (def) or 'never'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          STRUCTURES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-lone-blocks                    #Avoid unnecessary {} blocks

no-lonely-if                      #Use "else if" instead of "else" then "if"
no-else-return                    #Early returns: if a "if" branch returns, no "else" branch needed

no-unmodified-loop-condition      #Avoid loop TEST where TEST variables are never modified inside the loop
for-direction                     #Avoid for (...; VAR<VAL; VAR2--) or for (...; VAR>VAL; VAR2++)

guard-for-in                      #Must use OBJ.hasOwnProperty() inside "for in"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SWITCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-duplicate-case                 #Avoid duplicate switch case VAL
default-case [OBJ]                #Must have default case in switch statement
                                  #OBJ: commentPattern REGEXP (def: /^no default$/i) for a comment that can be used instead of
                                  #default case.
no-fallthrough [OBJ]              #Switch cases must use break
                                  #OBJ: commentPattern REGEXP (def: /^falls through$/i) for a comment
                                  #that can be used instead of break
no-case-declarations              #Avoid let|const in switch case not wrapped in {}

switch-colon-spacing [OBJ]        #Space around : in switch case|default
                                  #OBJ: before|after BOOL (def: false, true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LABELS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-labels [OBJ]                   #Avoid LABEL
                                  #OBJ: allowLoop|allowSwitch BOOL (def: false)
no-unused-labels                  #Avoid unused LABEL
no-extra-label                    #Avoid LABEL if the structure is not nested
no-label-var                      #Avoid LABEL that have same name as a variable


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXCEPTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-throw-literal                  #Must only throw ERROR

no-ex-assign                      #Avoid assigning to ERROR in catch clause
no-catch-shadow                   #Avoid variable shadowing in catch clause, due to IE8 not creating a scope in catch clauses.
no-unsafe-finally                 #Avoid return|throw|break|continue in finally clauses.
                                  #The reason: it overrides the try|catch clause's return|throw|break|continue

no-debugger                       #Avoid debugger


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


func-style [STR] [OBJ]            #Whether FUNC should be STR 'expression' (def) or 'declaration'
                                  #OBJ: allowArrowFunctions BOOL (def: false)

no-func-assign                    #Avoid duplicate function declarations
no-loop-func                      #Avoid function declarations in loops

func-names [STR]                  #Specify FUNC name
                                  #STR: 'always' (def), 'as-needed' (if cannot be guessed), 'never'
func-name-matching [STR] [OBJ]    #FUNC must be assigned to variables with same name as FUNC.name
                                  #STR: 'always' (def), 'never'
                                  #OBJ: includeCommonJSModuleExports BOOL: if false (def), ignore module.exports

prefer-arrow-callback [OBJ]       #Must use arrow functions when used as argument, unless any of:
                                  #  - generator FUNC
                                  #  - recursion
                                  #  - this is used, and no bind(this) was used, if OBJ.allowUnboundThis true (def)
                                  #  - named FUNC, if OBJ.allowNamedFunctions true (def: false)

arrow-body-style [STR] [OBJ]      #() => { return VAL; } vs () => VAL
                                  #STR: 'always', 'never', 'as-needed' (requires no {} if single VAL)
                                  #OBJ (only with STR 'as-needed'):
                                  #  - requireReturnForObjectLiteral BOOL (def: false): requires { return OBJ }
arrow-parens [STR] [OBJ]          #VAL => ... vs (VAL) => ...
                                  #STR: 'always' (never omit parenthesis), 'as-needed' (always omit parenthesis if possible)
                                  #OBJ (only with STR 'as-needed'):
                                  #  - requireForBlockBody BOOL (def: false): requires parenthesis
                                  #    if => {...} (instead of => ...)

no-confusing-arrow [OBJ]          #Avoid ... => VAL, where VAL makes it confusing, e.g. a ternary expression
                                  #OBJ: allowParens BOOL (def: false): ignores if VAL is wrapped with ()

max-params [NUM]                  #Max number of positional parameters (def: 3)

no-dupe-args                      #Avoid duplicate argument names

prefer-spread                     #Avoid FUNC.apply(), prefer ...ARR
prefer-rest-params                #Avoid "arguments", prefer ...ARG

require-yield                     #Avoid generator FUNC with no yield statement

accessor-pairs [OBJ]              #Must have both get and set if one present
                                  #OBJ:
                                  #  - setWithoutGet BOOL (def: true): if set, must have get
                                  #  - getWithoutSet BOOL (def: true): if get, must have set

no-empty-function [OBJ]           #Avoid empty functions, unless contains comment
                                  #OBJ:
                                  #  - allow STR_ARR: among 'functions', 'arrowFunctions', 'methods', 'generatorFunctions|Methods',
                                  #    'constructors', 'getters', 'setters'

no-useless-return                 #Avoid "return;" at end of function
consistent-return                 #If there is one return VAL, there must be no return (with no VAL)
                                  #OBJ:
                                  #  - treatUndefinedAsUnspecified BOOL: if false (def), there must be no
                                  #    return undefined either


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OBJECTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


object-curly-newline [STR] [OBJ]  #Newlines between OBJ items
                                  #STR: 'always' or 'never'
                                  #OBJ:
                                  #  - multiline BOOL (def: true): requires newlines if items are separated by newlines or contain some
                                  #  - minProperties NUM: requires newlines if >= NUM items
                                  #  - consistent BOOL: requires either all newlines or no newlines
                                  #  - ObjectExpression|ObjectPattern OBJ: same options, but only for OBJ_VAL or
                                  #    destructuring OBJ
object-property-newline [OBJ]     #Force linebreaks between OBJ items.
                                  #OBJ: allowMultiplePropertiesPerLine BOOL (def: false): allows no linebreak providing all
                                  #items are on same line
comma-style [STR] [OBJ]           #Newlines around comma
                                  #STR: 'last' (def), 'first'
                                  #OBJ: exceptions.TYPE BOOL: ignore for those types

no-dupe-keys                      #Avoid duplicate keys in OBJ
sort-keys [STR] [OBJ]             #Requires sorting OBJ keys
                                  #STR: 'asc' (def), 'desc'
                                  #OBJ:
                                  #  - caseSensitive BOOL (def: true)
                                  #  - natural BOOL (def: false): NUM sorting order

dot-notation [OBJ]                #Must use VAR.VAR2 not VAR["VAR2"]
                                  #OBJ:
                                  #  - allowKeywords BOOL (def: true): if false, reversed keywords must use VAR["VAR2"]
                                  #  - allowPattern REGEXP: VAR2 matching REGEXP can use either
no-useless-computed-key           #Avoid { [VAL_LIT]: VAL }
quote-props [STR] [OBJ]           #Quotes around { "VAR": VAL }
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'as-needed': required if must, e.g. non valid identifier
                                  #  - 'consistent': either all properties in OBJ use quotes, or none
                                  #  - 'consistent-as-needed': 'as-needed' + 'consistent'
                                  #OBJ (only if STR 'as-needed'):
                                  #  - keywords BOOL (def: false): must quote keywords
                                  #  - numbers BOOL (def: false): must quote numbers properties
                                  #  - unnecessary BOOL (def: true): if false, allows quotes even if not needed

object-shorthand [STR] [OBJ]      #Prefer { VAR } over { VAR: VAR } in OBJ, and { FUNC(...) } over { FUNC: function (...) }
                                  #STR:
                                  #  - 'always' (def)
                                  #  - 'never'
                                  #  - 'properties', 'methods': only one of them
                                  #  - 'consistent': either 'always' or 'never', but consistent per OBJ
                                  #  - 'consistent-as-needed': 'always' if should be used. Otherwise, 'consistent'
                                  #OBJ:
                                  #  - avoidQuotes BOOL (def: false): avoid shorthand if VAR is quoted
                                  #  - ignoreConstructors BOOL (def: false): avoid capitalized functions
                                  #  - avoidExplicitReturnArrows BOOL (def: false): also avoid { FUNC: (...) => ... }
no-useless-rename [OBJ]           #Prefer { VAR } over { VAR: VAR }, in destructuring
                                  #OBJ:
                                  #  - ignoreDestructuring|Import|Export BOOL (def: false):
                                  #    ignore for a specific type of destructuring
prefer-destructuring [OBJ] [OBJ2] #Use OBJ|ARR destructuring when possible
                                  #OBJ: array|object BOOL (def: true)
                                  #OBJ2: enforceForRenamedProperties BOOL (def: false): must use destructuring when property
                                  #is renamed by the declaration, e.g. const { VAR: VAR2 } = OBJ;
no-empty-pattern                  #Avoid empty destructuring, e.g. const {VAR: {}} = VAL

no-new-object                     #Avoid new Object()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          INHERITANCE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-useless-constructor            #Avoid empty constructors
constructor-super                 #Avoid super() in constructor if not child TYPE. Requires it otherwise.
no-this-before-super              #Avoid this before super(), in child TYPE constructor

new-parens                        #Forces new TYPE(), instead of new TYPE

no-useless-call                   #Avoid OBJ.FUNC.call|apply(OBJ, ...) or FUNC.call|apply(null|undefined, ...)
no-extra-bind                     #Avoid FUNC.bind() if FUNC does not use this
no-invalid-this                   #Avoid this outside methods
class-methods-use-this [OBJ]      #CLASS methods must use "this"
                                  #OBJ:
                                  #  - exceptMethods "FUNC"_ARR
consistent-this [STR]             #Variables assigned with "this" must be named 'VAR' (def: 'that')

no-class-assign                   #Avoid reassigning variables created by ClassDeclaration

no-dupe-class-members             #Avoid duplicate class members

no-proto                          #Avoid __proto__ (prefer getPrototypeOf())
no-prototype-builtins             #Avoid OBJ.METHOD(...) (for builtin OBJ methods)
                                  #Use {}.METHOD.call(OBJ, ...) instead
                                  #The reason: it works on OBJ created with Object.create(null)

no-extend-native [OBJ]            #Avoid extending native types
                                  #OBJ: exceptions 'TYPE'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ARRAYS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


array-bracket-newline [STR] [OBJ] #Linebreaks inside []:
                                  #  - 'always' (def), 'never'
                                  #  - { multiline: true } (def): required if some items are separated by newline
                                  #  - { minItems: NUM } (def: null): required if >= NUM items
array-element-newline [STR] [OBJ] #Linebreaks between ARR items. Same conf|defaults as array-bracket-newline
comma-dangle [STR] [OBJ]          #Trailing commas
                                  #STR:
                                  #  - 'never' (def)
                                  #  - 'always'
                                  #  - 'only-multiline': allows if not single-line
                                  #  - 'always-multiline': requires if not single-line
                                  #  - 'ignore'
                                  #OBJ: arrays|objects|imports|exports|functions STR: same but only for ARR, OBJ, import,
                                  #export, arguments|parameters

no-sparse-arrays                  #Avoid sparse arrays

array-callback-return             #[TYPED_]ARR.from|every|some|filter|find[Index]|map|reduce[Right]|sort() must
                                  #have a return statement

no-array-constructor              #Avoids [new] Array(VAL,...)
                                  #[new] Array(NUM) is still allowed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


quotes [STR] [OBJ]                #Prefer quoting style
                                  #STR: 'double' (def), 'single', 'backtick'
                                  #OBJ:
                                  #  - avoidEscape BOOL (def: false): allow different quote if STR contains the preferred quote
                                  #  - allowTemplateLiterals BOOL: if false (def), allow `STR` only if contains ${VAR}

no-multi-str                      #Avoid multiline STR
no-useless-concat                 #Avoid STR_LIT + STR2_LIT
prefer-template                   #Avoid STR + STR2, prefer `...`
no-template-curly-in-string       #Avoid ${} inside "" or ''


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REGEXP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-useless-escape                 #Avoid unnecessary escape sequences in STR|REGEXP
no-control-regex                  #Avoid control characters in REGEXP
no-div-regex                      #Avoid unescaped = at beginning of REGEXP
no-empty-character-class          #Avoid empty [] in REGEXP
no-regex-spaces                   #Avoid multiple spaces in REGEXP (use {NUM} instead)
no-invalid-regexp [OBJ]           #Avoid invalid REGEXP
                                  #OBJ: allowConstructorFlags STR_ARR (allowed flags, def is all)

wrap-regex                        #Must write (/REGEXP/) not /REGEXP/


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NUMBER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-floating-decimal               #Avoid .NUM or NUM. (use 0.NUM or NUM)

no-octal                          #Avoid 0... (prefer 0o...)
no-octal-escape                   #Avoid \NNN octal escape
prefer-numeric-literals           #Avoid parseInt(STR, 2|8|16) when 0b... 0o... or 0x... can be used instead
radix [STR]                       #With parseInt(..., RADIX):
                                  #  - STR 'always' (def): require RADIX
                                  #  - STR 'as-needed': forbid RADIX if 10

use-isnan                         #Must test NaN with [Number.]isNaN()
no-compare-neg-zero               #Avoid VAL === -0 (prefer Object.is(VAL, -0))

no-bitwise [OBJ]                  #Avoids ^ ~ << >> >>> <<< & | (possible typo for && ||)
                                  #OBJ:
                                  #  - allow 'OP'_ARR: exceptions
                                  #  - int32Hint BOOL: allow |0 (used sometimes for typecasting)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SYMBOLS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-new-symbol                     #Avoid new Symbol() (prefer Symbol())
symbol-description                #Avoid Symbol(), prefer Symbol(STR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ASYNC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


handle-callback-err [STR]         #Must handle ERROR in Node.js callbacks FUNC(ERROR[, VAL])
                                  #STR is ERROR name (def: 'err'), which can be 'NAME' or '^REGEXP' (must start with ^)
callback-return [STR_ARR]         #In Node.js callbacks FUNC(ERROR[, VAL]), must call return after firing FUNC()
                                  #'VARR'_ARR are possible FUNC names (def: 'callback', 'cb', 'next')

prefer-promise-reject-errors [OBJ]#Must pass ERROR to Promise.reject()
                                  #OBJ: allowEmptyReject BOOL (def: false): also allow undefined
require-await                     #Avoid async functions with no await
no-await-in-loop                  #await inside loops (prefer Promise.all())
no-return-await                   #Avoid return await VAL (it does same as return VAL)

no-sync                           #Avoid sync methods from Node.js core modules


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-duplicate-imports [OBJ]        #Avoid duplicate module imports, e.g. import ... from 'MDL'; import ... from 'MDL';
                                  #OBJ: includeExports BOOL (def: false): also forbids
                                  #import ... from 'MDL'; export ... from 'MDL';
sort-imports [OBJ]                #Sort import declarations according to their types.
                                  #OBJ:
                                  #  - ignoreCase BOOL (def: false)
                                  #  - memberSyntaxSortOrder STR_ARR (def: none, all, multiple, single), among:
                                  #     - 'none': import 'MDL'
                                  #     - 'all': import * from 'MDL'
                                  #     - 'multiple': import {...} from 'MDL'
                                  #     - 'single': import VAL from 'MDL'
                                  #  - ignoreMemberSort BOOL: if false (def), must also alphabetically sort VARs in
                                  #    import { VAR, ... } from 'MDL'

no-new-require                    #Avoid new require()
global-require                    #require() must be at top-level scope
no-mixed-requires [OBJ]           #Must group top-level declarations into groups:
                                  #  - core modules
                                  #  - local module
                                  #  - node_modules
                                  #  - VAR = EXPR
                                  #  - uninitialized VAR
                                  #  - others
                                  #OBJ:
                                  #  - grouping BOOL (def: true)
                                  #  - allowCall BOOL (def: true): cannot do require(...).FUNC(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BLACKLIST           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-restricted-imports             #Avoid import ... from 'MDL' using blacklisted STR_ARR
 STR_ARR|OBJ_ARR                  #Can also be OBJ:
                                  #  - paths STR_ARR: full path
                                  #  - patterns STR_ARR: globbing patterns (including globstar)
no-restricted-modules STR_ARR     #Avoid require('CORE_MODULE') from blacklisted 'CORE_MODULE'_ARR

no-restricted-properties OBJ...   #Avoid custom OBJ2.VAR2, defined by OBJ...:
                                  #  - object 'OBJ2' (def: any)
                                  #  - property 'VAR2' (def: any)
                                  #  - message STR (error message, optional)
no-restricted-globals STR_ARR     #Avoid specified global variables 'VAR'_ARR

no-restricted-syntax ARR...       #Avoid specified JavaScript features
                                  #ARR:
                                  #  - SELECTOR: like { selector SELECTOR }
                                  #  - OBJ:
                                  #     - selector SELECTOR
                                  #     - message STR: error message, optional


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TO AVOID            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


no-delete-var                     #Avoid delete
no-void                           #Avoid void VAL
no-with                           #Avoid "with"
no-caller                         #Avoid arguments.caller|callee
no-sequences                      #Avoid comma operator, except in for(...) or if EXPR wrapped in parenthesis
no-continue                       #Avoid continue statements
no-iterator                       #Avoid __iterator__ (non-standard)
no-console [OBJ]                  #Avoid console
                                  #OBJ: allow 'METHOD'_ARR (ignore if console.METHOD)

no-eval [OBJ]                     #Avoid eval()
                                  #OBJ: allowIndirect BOOL (def: false): ignore if eval() is a FUNC_VAL
no-implied-eval                   #Avoid setTimeout|setInterval(STR)
no-new-func                       #Avoid new Function(STR)

no-buffer-constructor             #Avoid Buffer() or new Buffer()
no-path-concat                    #Avoid __dirname|__filename + STR, use PATH.join|resolve()
no-process-env                    #Avoid process.env
no-process-exit                   #Avoid process.exit()

no-script-url                     #Avoid 'javascript:*' URLs
no-alert                          #Avoid alert|confirm|prompt()

no-obj-calls                      #Avoid Math(), JSON() or Reflect() (those are not functions although capitalized)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              JSX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


jsx-quotes [STR]                  #Whether using ATTR="" or ATTR='' in JSX
                                  #STR: 'prefer-double' (def), 'prefer-single'
