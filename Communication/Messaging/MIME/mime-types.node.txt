
              
   MIME-TYPES  
              


ALTERNATIVE ==>               #  - mime
                              #  - mime-types (preferred): very similar, but slightly simpler

VERSION ==>                   #2.1.17
                              #Uses MIME-DB (see its doc)
                              #Maps between file extension, MIME types and charset.

MIMETYPES.lookup
 (PATH|"[.]EXT")->"MIME"|false#Case-insensitive
MIMETYPES.extension("MIME")
 ->"EXT"                      #Inverse
MIMETYPES.extensions["MIME"]  #Same but returns "EXT"[_ARR], i.e. not only most likely extension.

MIMETYPES.charset("MIME")
 ->"CHARSET"                  #Returns likely charset of this kind of file (or undefined)
MIMETYPES.contentType
 (PATH|"[.]EXT")
 ->"MIME[; charset=CHARSET]"  #Combines lookup() and charset()


TYPEIS.is('MIME',STR[_ARR]...)#Returns first STR that matches 'MIME'
 ->STR|false                  #STR can be:
                              #  - "MIME/SUBTYPE", including using *
                              #  - "PATH" or "[.]EXT": using MIMETYPES.lookup() (see its doc)
                              #  - 'urlencoded' -> 'application/x-www-form-urlencoded'
                              #  - 'multipart' -> 'multipart/*'
                              #  - '+...' -> '*/*+...'
                              #Returns false is no match
                              #'MIME' is normalized by using MEDIATYPER.parse() then MEDIATYPER.format() (see its doc)

TYPEIS(REQ, STR[_ARR]...)     #Like TYPEIS.is(...), except:
                              #  - uses REQ.headers['content-type']
                              #  - returns false if TYPEIS.hasBody(REQ) false

TYPEIS.hasBody(REQ)->BOOL     #Check Transfer-Encoding [C] and Content-Length [C]
