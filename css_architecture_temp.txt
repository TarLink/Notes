
                           
   CSS_ARCHITECTURE_TEMP   
                           



TODO:
  - summary of CSS
  - put in CSS doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CSS ARCHITECTURE        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


ABBREVIATIONS ==>                 #  - BEM: BEM
																	#  - CG:  cssguidelin.es
																	#  - GC:  grvcoelho CSS style guide
																	#  - GS:  Google HTML/CSS style guide
																	#  - IC:  Idiomatic CSS
																	#  - IS:  Idiomatic Sass
																	#  - MCG: mdo code guide
																	#  - MCS: MCSS
																	#  - MN:  Montage naming convention
																	#  - OC:  OOCSS
																	#  - PG:  primercss.io guidelines
																	#  - RS:  RSCSS
																	#  - SG:  Sass guidelines
																	#  - SM:  SMACSS
																	#  - TC:  Trello CSS style guide
																	#  - WC:  Wordpress CSS coding standards

ALTERNATIVES ==>                  #When there are competing recommandations, we use / instead of -, with the preferred choice
                                  #on top

MAIN ARCHITECTURE CHOICE ==>      #Summary:
                                  #  - stylesheets: most standard/simple, but needs to use strong naming scheme
                                  #  - JavaScript -> stylesheets: can use runtime JavaScript
                                  #  - JavaScript -> HTML: can use runtime JavaScript but limitations (@rules, :pseudo, performance, debugging)
                                  #  - HTML only: limited flexibility, custom/complex syntax, duplicated code
                                  #Details:
                                  #  - flexibility: 
                                  #     - JavaScript -> stylesheets: run-time JavaScript
                                  #     - JavaScript -> HTML: run-time JavaScript. Hard to work with @rules and :pseudo
                                  #     - stylesheets: compile-time Less/Sass
                                  #     - HTML only: compile-time HTML. Hard to work with @rules and :pseudo
                                  #  - standard:
                                  #     - stylesheets: standard
                                  #     - JavaScript -> HTML/stylesheets: relies on tools, but can follow similar syntax as CSS
                                  #     - HTML only: custom notation
                                  #  - simplicity:
                                  #     - syntax:
                                  #        - stylesheets: simplest syntax
                                  #        - JavaScript -> HTML: simple syntax
                                  #        - JavaScript -> stylesheets: simple syntax
                                  #        - HTML only: complicated syntax
                                  #     - selectors:
                                  #        - JavaScript -> HTML, HTML only: simplest (inline)
                                  #        - JavaScript -> stylesheets: simple naming scheme
                                  #        - stylesheets: strong naming scheme
                                  #  - DRY:
                                  #     - stylesheets, JavaScript -> stylesheets: low
                                  #     - JavaScript -> HTML: low in source code, but duplicated code in production
                                  #     - HTML only: duplicated code

 +=============================+=============================+=============================+=============================+=============================+
 | FEATURE                     | STYLESHEETS                 | HTML ONLY                   | JAVASCRIPT -> HTML          | JAVASCRIPT -> STYLESHEETS   |
 +=============================+=============================+=============================+=============================+=============================+
 |                             |                             |                             |                             |                             |
 | Declaration                 | Component-oriented CSS      | Only inline style or classes| JavaScript translated into  | JavaScript translated into  |
 |                             | stylesheets                 |                             | runtime HTML inline style   | runtime <style>/stylesheets |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Example                     |                             | Atomic CSS                  | Radium, JSS                 | JSS, Radium                 |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+------------------------------
 | Source organization         | Inside CSS files            | Inside HTML files           | Inside JS files                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Compile step                | Yes with LESS/SASS          | Yes with atomizer           | No                                                        |
 +-----------------------------+-----------------------------+-----------------------------+------------------------------------------------------------
 | Properties/values           | Compile-time                | Compile-time                | Run-time (JavaScript)                                     |
 |                             | (LESS/SASS expressions)     |                             |                                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Reuse code                  | LESS/SASS variables,        | Limited                     | JavaScript logic                                          |
 |                             | mixins, functions, @extend, |                             |                                                           |
 |                             | structures                  |                             |                                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Selectors                   | Component-oriented.         | Inline: simpler.                                          | Can be component-oriented.  |
 |                             | Usually using naming scheme | Problem: cannot edit all instances at once when debugging | JSS: favor .CLASS--BLOCK    |
 |                             | like BEM                    | Can still reuse some ideas of component-oriented.         |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | @rules, :pseudo             | Normal                      | No                          | Must either:                | Normal                      |
 |                             |                             |                             |  - use JS -> stylesheets    |                             |
 |                             |                             |                             |  - use JS logic,            |                             |
 |                             |                             |                             |    e.g. window.matchMedia() |                             |
 |                             |                             |                             |    for @media               |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Re-using LESS/SASS libraries| Ok                          | Cannot reuse                                                                            |
 +-----------------------------+-----------------------------+------------------------------------------------------------------------------------------
 | Automatic vendor prefix     | Through plugins or builtin                                                                                            |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+-----------------------------+
 | Performance                 | Fastest                     | Slower:                                                   | Fast                        |
 |                             |                             | - duplicate inline styles, so more bytes and more         |                             |
 |                             |                             |   calculation                                             |                             |
 |                             |                             | - React diff of style prop                                |                             |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+-----------------------------+
 | Stability                   | Standard                    | Relies on external tools                                                                |
 +=============================+=============================+=========================================================================================+


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      COMPONENT-ORIENTED       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CLASSNAMES ==>                    #Naming scheme:
                                  #  - main elements:
																	#     - BLOCK/COMPONENT: [sub]component (unique across app)
																	#        - often at least two words
																	#        - CamelCase for blocks, camelCase for rest (MN)
																	#        - can be namespaced: c- (component), o- (object), u- (utility)
																	#     - ELEMENT: [sub]component's part (unique across BLOCK)
																	#        - when too many subelements, should be extracted as a BLOCK instead
																	#     - MODIFIER/VARIANT: styling state
																	#        - always local to a specific BLOCK|ELEMENT (no global MODIFIER)
																	#        - HTML need to have both selectors: with and without MODIFIER
																	#     - STATE: interaction state
																	#        - always local to a specific BLOCK|ELEMENT (no global STATE)
																	#        - :PSEUDO can be used instead or in addition to STATE
																	#        - dynamically changed by JavaScript (as opposed to BLOCK, ELEMENT and MODIFIER)
																	#  - a given DOM element can be several BLOCK|ELEMENT ('mixin')
                                  #  - syntax:
																	#     / .BLOCK[__ELEMENT][--MODIFIER[--MODIFIERVALUE]][.is|has-STATE] (BEM MN GC CG IS): 
																	#        - can sometimes use _ or - instead of __ or --
																	#        - no BLOCK__ELEMENT__SUBELEMENT
                                  #        - @MODIFIER instead of --MODIFIER: responsive suffix, used for media queries breakpoints, browser or theming
																	#     / .BLOCK-ELEMENT[-SUBELEMENT...][.mod|is-MODIFIER] (TC)
																	#     / .BLOCK[.-MODIFIER] [>] .ELEMENT[-MODIFIER] (RS)
																	#        - >: otherwise might target .BLOCK .ANOTHERBLOCK .ELEMENT
																	#     / .BLOCK .ELEMENT [.SUBELEMENT...] [.MODIFIER|STATE] (OC)
                                  #Others:
                                  #  - namespace any selector with PROJECT- (MN)

COMPONENTS DEFINITION ==>         #Focus on using UI component (RS TC SM OC CG IS SG):
																	#  - 1 UI component === 1 BLOCK
																	#     - single responsibility: should break down big UI components
																	#     - make components as abstract as possible, including in classnames chosen
                                  #  - define components types: layout/positioning, typography, other styling (IS)
																	#  - BLOCK declaration should not use positioning:
                                  #     - so can be reused in different contexts
																	#     - but BLOCK2 using BLOCK might position BLOCK, and BLOCK might position ELEMENT, as long as it does not assume things
																	#       about how that other element work internally
																	#Separate structure and skin (OC CG):
																	#  - structure: UI component, with only invariant structure, behavior and styling
																	#  - skin: 
																	#     - variant styling: 1 UI component can have many skins (like using BEM MODIFIER|STATE)
																	#     - cross-UI-component: 1 skin can be applied to many UI components (like using global BEM MODIFIER|STATE)

COMPONENTS INTERACTION ==>        #Use composition over inheritance for components (MCS CG)
																	#Avoid .CLASS .CLASS2 (TC GC CG MCG PG):
																	#  - only use it when a UI component override another component:
																	#     - override can be e.g. positioning
																	#     - but must not overriding the inside of that other component. The other component should define MODIFIER instead.
																	#  - not when specifying a subelement: use naming scheme instead
																	#  - as such, rarely need to use Less/Sass nesting
																	#  - with BEM syntax: .BLOCK--MODIFIER .BLOCK__ELEMENT (because .BLOCK--MODIFIER__ELEMENT is not correct syntax)



BEM-CONSTRUCTOR ==>               #Sass mixin (1.0.0) to write BEM notation
                                  #Each mixin can take extra argument, which is same as making several calls

@include object('BLOCK'
[, 'object|component|utility']) { # .o|c|u-BLOCK
  @include element('ELEMENT'){...}# .o-BLOCK__ELEMENT {...}
  @include modifies-ELEMENT
  ('ELEMENT') {...}               # > .o-BLOCK__ELEMENT {...}
  @include modifier('MODIFIER') 
  {...}                           # .o-BLOCK[__ELEMENT]--MODIFIER{...}
  @include state('STATE') {...}   # .o-BLOCK[__ELEMENT].is-MODIFIER{...}
  @include suffix('MODIFIER'){...}# .o-BLOCK[__ELEMENT]@MODIFIER{...}
  @include theme('THEME') {...}   # .t-THEME .o-BLOCK {...}
}  

$bem-block-namespaces.TYPE STR    #Def: 'object|component|utility' 'o|c|u'
$bem-use-namespaces BOOL          #Def: true (for .o|c|u-)
$bem-element-separator            #Def: '__'
$bem-modifier-separator           #Def: '--'
$bem-state-namespace              #Def: 'is'
$bem-suffix-namespace             #Def: '@'
$bem-theme-namespace              #Def: 't'

@bem-debug()                      #Show some color borders to distinguish components, elements, modifiers, etc.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CSS IN HTML          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



CSS IN HTML ==>                   #Use only inline styles.
                                  #As such, do not use CSS classes as abstraction layer between HTML and CSS

ATOMIC CSS ==>                    #Similar idea but more concise by using CSS classes shorthands for CSS props/vals:
																	#  - [ANCESTORCLASS[:PSEUDO]_]FUNC[(VAL|VAR...)][!][:[:]PSEUDO][--MEDIA_QUERY]
																	#     - ! is !important
																	#     - FUNC: CSS props being styled, based on Emmet abbreviation, with some extensions
																	#  - a tool (atomizer) exists to create CSS stylesheets based on atomic class name that are used


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CSS IN JAVASCRIPT       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SUMMARY ==>                       #Translated into stylesheets/<style>: see JSS
                                  #Translated into HTML inline style: see React-CSS


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTORS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SELECTORS ==>                     #  - only use .CLASS selectors (BEM RS):
																	#     - with possibly :PSEUDO
																	#     - but not tag selectors, attribute selectors, combinations nor *
                                  #  - use namespaced js-CLASS for JavaScript selection (BEM RS PG MCG)
																	#  - no !important (BEM RS)

CLASS NAMING ==>                  #  - use abstract, meaningful, structural (not presentational) classnames/variables (MCG WC GS)
																	#  - case: dasherized or camelcased (BEM GS RS)
																	#  - can use abbreviation list to keep CSS classnames short (MCS)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      LAYERS/ORGANIZATION      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


FILE ORGANIZATION ==>             #Root dirs:
                                  #  / per layer (see below)
                                  #  / Idiomatic Sass (IS):
																	#     - assets/: static assets
																	#     - local/: private
																	#     - lib/: public
																	#     - components/: dependencies
                                  #Main file:
																	#  - name: index.css (IS SG)
																	#  - order: each layer from most generic to most specific (TC)
																	#  - with only @import grouped by category (SG)
																	#  - use globbing where possible (SG)
																	#File division:
																	#  / BLOCK.css, 1 component === 1 file (RS MCG IS)
																	#  / FULL_SELECTOR.EXT (BEM):
																	#     - 1 component [subelement] + MODIFIER|STATE === 1 file
																	#     - directory: BLOCK/[__ELEMENT/][--MODIFIER/][.is-STATE/]
																	#     - group with other assets: .js|png|etc.

LAYERS ==>                        #What layers are, in order:
                                  #  (external)
																	#  - vendors: external libraries (SG)
                                  #  (base)
																	#  - base: CSS reset (MCS SM SG)
																	#  - context: media queries breakpoints, browser or theming (MCS SM SG)
                                  #  (helpers)
																	#  / cosmetic styling: common generic styling (e.g. clearfix, padding, etc.) (MCS)
																	#  / abstracts: variables/functions/mixins (SG)
                                  #  (components layers)
																	#  / base components: as abtract as possible (MCS)
																	#  / layout: layout-related UI components BLOCK (SM SG)
																	#  / module: other UI components BLOCK (SM SG)
																	#  / project components: specific to a given page/region/use-case (MCS SG)
																	#  / state: UI components MODIFIER/STATE (SM)
																	#What layers do:
																	#  - has its own file or directory (MCS SM SG PG IS)
																	#  - has its own classname prefix (SM)
																	#  - can be defined as (MCS SM SG):
																	#     - CSS classes: components, cosmetic styling, context (e.g. on body)
																	#     - variable or simple mixins/functions/inheritance: cosmetic styling, context
																	#  - can only use same or upper layer CSS classes/variables (MCS):
																	#     - exception: cosmetic styling can be used but not overriden


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        CSS FORMATTING         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NEWLINES ==>                      #  - newline around { }:
                                  #     / always (CG GS SG)
																	#     / except if only one prop/val (MCG IC)
																	#  - newline after ; (GC CG MCG WC PG IC IS SG)
                                  #  - newlines between rulesets:
																	#     / one between related, two between unrelated but same section, five between sections (CG WC)
																	#     / two (GC PG GS IC IS)
                                  #  - newline after , in selectors:
																	#     / except related selector (CG SG)
																	#     / always (GC MCG WC GS IC IS)

INDENT/WIDTH ==>                  #  - indent size:
																	#     / 2 spaces (MCG PG GS IS SG)
																	#     / 4 spaces (CG IC)
                                  #     / tab (WC)
                                  #  - indent according to depth level (e.g. .BLOCK__ELEMENT more than .BLOCK) (BEM RS CG)
																	#  - indent to vertically align related values (e.g. top:   0; bottom: 0;) (CG MCG)
																	#  - 80 chars columns (CG WC IC SG)
																	#  - use .editorconfig (MCG IC)

SPACE ==>                         #  - space after : but not before (GC CG MCG WC PG GS IC SG)
																	#  - space before { (CG MCG PG IC IS)
																	#  - space after , in values:
																	#     / except in longer values (like box-shadow):
                                  #        / put every part on a new line except first one (WC)
                                  #        / put every part on a new line (IC)
                                  #     / always (IS SG)
																	#     / except inside FUNC() (MCG)

COMMENTS ==>                      #  - // not /* */ (PG)
																	#  - separate sections in a file with comments, using consistent amount of newlines (CG GS MCG)
																	#  - when selector from another file is being overriden (CG)

RULESETS ORDER ==>                #  - .BLOCK, .BLOCK-ELEMENT, .BLOCK[-ELEMENT].mod-MODIFIER, .BLOCK[-ELEMENT].is-MODIFIER, @media queries (TC)

PROPS ==>                         #  - order:
                                  #     / logical:
																	#        / display, positioning, box model, colors/typography, misc (WC)
																	#        / positioning, box model, typography, visual, misc (MCG)
																	#        / positioning, display & box model, misc (IC)
																	#     / alphabetical (GS)
																	#     - when not using shorthand properties, follow values order, e.g. top, right, bottom, left (WC)
                                  #  - shorthand properties:
																	#     / never (MCG PG)
																	#     / always (WC GS)

VALUES ==>                        #  - floats:
																	#     / .5 (MCG GS)
																	#     / 0.5 (WC SG)
																	#  - unitless 0, for LEN (MCG WC PG GS IC IS SG)
                                  #  - colors:
																	#     / hex colors, lowercase, with 3 letters instead of 6 if possible (MCG WC PG GS IC IS)
																	#     / hsl() (SG)
                                  #  - em/percentage vs px:
																	#     / em/percentage (WC)
																	#     / px (PG)

QUOTES ==>                        #  / "" (MCG WC IC IS)
																	#  / '' (SG)
																	#  / '', except for URL: do not use anything (GS)

@MEDIA ==>                        #  - place:
                                  #     / put @media-queries close to related code without the @media-queries (MCG TC)
																	#     / grouped together in beginning of each file (WC)
																	#  - rules have two tabs indent (WC)

OTHERS ==>                        #  - @charset 'utf-8'; (SG)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:     SASS/LESS FORMATTING      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EXPRESSIONS ==>                   #  - (EXPR * VAL) or #{EXPR * VAL} (MCG SG)
                                  #  - manipulate units with arithmetic, not string manipulation, 
                                  #    e.g. NUM * 1px or NUM / 1px, but not NUM + px (SG)

ARR|OBJ ==>                       #  - ARR: (VAL, ...) on one line if short, with newlines after ( or , otherwise (SG)
																	#  - OBJ: ('VAR:' VAL, ...) with trailing comma, space after :, newline after ( or , (SG)

PROPS ==>                         #  - order:
																	#     / variables, inheritance, mixins with no content, others, mixins with content, nested selectors with &, nested selectors without & (IS)
																	#     / variables, mixins with no content, others, nested selectors, mixins with content (SG)
																	#     / inheritance, mixins, others (IC)
																	#  - two newlines between each group (SG)

NESTING ==>                       #  - use &:
                                  #     - only with :PSEUDO or .is-STATE (SG)

MIXINS/FUNC/VARIABLES NAMING ==>  #  - dasherized (SG)
																	#  - constants: all-caps (SG)
																	#  - namespaced:
                                  #     / [-][PROJECT]- (IS):
                                  #        - first dash: if functions (as opposed to mixin)
                                  #        - PROJECT: unless private
                                  #        - PROJECt is CamelCase if output selectors, camelCase if output props
																	#     / PROJECT- (SG IC)
																	#     / m|u- (TC)

VARIABLES ==>                     #  - use:
                                  #     - instead of constants (SG WC TC)
																	#     - for media queries, according to size ('medium', etc.) not devices ('tablet', etc.) (SG WC TC)
																	#     - not as temporary variables (SG)
																	#  - can group them as OBJ (SG)

@EXTEND|:EXTEND ==>               #  - use:
																	#     / only where there is semantic inheritance (SG)
																	#     / prefer over mixin (IS)
																	#  - use %placeholder, and no complex one (SG)

MIXINS ==>                        #  - use:
                                  #     - only to group together often used props (SG TC)
                                  #     - keep them simple (SG TC)
																	#  - MIXIN, not MIXIN() (SG)
																	#  - use variadic/splat, or named arguments (SG)

FUNCTIONS ==>                     #  - use:
                                  #     - only simple helpers (SG TC)

LOGIC/LOOP ==>                    #  - use:
                                  #     - conditions to check mixin arguments, together with @debug|warn|error() (SG)
                                  #     - avoid otherwise (SG)

IMPORT ==>                        #  - modules to import should not define rulesets (IS)
