
                           
   CSS_ARCHITECTURE_TEMP   
                           



TODO:
  - merge CSS in JavaScript
  - summary of CSS
  - summary of HTML
  - put in HTML and CSS doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CSS ARCHITECTURE        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


ABBREVIATIONS ==>                 #  - BEM: BEM
																	#  - CG:  cssguidelin.es
																	#  - GC:  grvcoelho CSS style guide
																	#  - GS:  Google HTML/CSS style guide
																	#  - IC:  Idiomatic CSS
																	#  - IS:  Idiomatic Sass
																	#  - MCG: mdo code guide
																	#  - MCS: MCSS
																	#  - MN:  Montage naming convention
																	#  - OC:  OOCSS
																	#  - PG:  primercss.io guidelines
																	#  - RS:  RSCSS
																	#  - SG:  Sass guidelines
																	#  - SM:  SMACSS
																	#  - TC:  Trello CSS style guide
																	#  - WC:  Wordpress CSS coding standards

ALTERNATIVES ==>                  #When there are competing recommandations, we use / instead of -

ARCHITECTURE ==>                  #Can be:
                                  #  - Component-oriented CSS stylesheets.
                                  #    Usually accompanied to naming scheme like BEM
                                  #  - CSS in HTML only, e.g. Atomic CSS
                                  #  - CSS in JavaScript only, e.g. JSS or Radium


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      COMPONENT-ORIENTED       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CLASSNAMES ==>                    #Naming scheme:
                                  #  - main elements:
																	#     - BLOCK/COMPONENT: [sub]component (unique across app)
																	#        - often at least two words
																	#        - CamelCase for blocks, camelCase for rest (MN)
																	#        - can be namespaced: c- (component), o- (object), u- (utility)
																	#     - ELEMENT: [sub]component's part (unique across BLOCK)
																	#        - when too many subelements, should be extracted as a BLOCK instead
																	#     - MODIFIER/VARIANT: styling state
																	#        - always local to a specific BLOCK|ELEMENT (no global MODIFIER)
																	#        - HTML need to have both selectors: with and without MODIFIER
																	#     - STATE: interaction state
																	#        - always local to a specific BLOCK|ELEMENT (no global STATE)
																	#        - :PSEUDO can be used instead or in addition to STATE
																	#        - dynamically changed by JavaScript (as opposed to BLOCK, ELEMENT and MODIFIER)
																	#  - a given DOM element can be several BLOCK|ELEMENT ('mixin')
                                  #  - syntax:
																	#     / .BLOCK[__ELEMENT][--MODIFIER[--MODIFIERVALUE]][.is|has-STATE] (BEM MN GC CG IS): 
																	#        - can sometimes use _ or - instead of __ or --
																	#        - no BLOCK__ELEMENT__SUBELEMENT
                                  #        - @MODIFIER instead of --MODIFIER: responsive suffix, used for media queries breakpoints, browser or theming
																	#     / .BLOCK-ELEMENT[-SUBELEMENT...][.mod|is-MODIFIER] (TC)
																	#     / .BLOCK[.-MODIFIER] [>] .ELEMENT[-MODIFIER] (RS)
																	#        - >: otherwise might target .BLOCK .ANOTHERBLOCK .ELEMENT
																	#     / .BLOCK .ELEMENT [.SUBELEMENT...] [.MODIFIER|STATE] (OC)
                                  #Others:
                                  #  - namespace any selector with PROJECT- (MN)

COMPONENTS DEFINITION ==>         #Focus on using UI component (RS TC SM OC CG IS SG):
																	#  - 1 UI component === 1 BLOCK
																	#     - single responsibility: should break down big UI components
																	#     - make components as abstract as possible, including in classnames chosen
                                  #  - define components types: layout/positioning, typography, other styling (IS)
																	#  - BLOCK declaration should not use positioning:
                                  #     - so can be reused in different contexts
																	#     - but BLOCK2 using BLOCK might position BLOCK, and BLOCK might position ELEMENT, as long as it does not assume things
																	#       about how that other element work internally
																	#Separate structure and skin (OC CG):
																	#  - structure: UI component, with only invariant structure, behavior and styling
																	#  - skin: 
																	#     - variant styling: 1 UI component can have many skins (like using BEM MODIFIER|STATE)
																	#     - cross-UI-component: 1 skin can be applied to many UI components (like using global BEM MODIFIER|STATE)

COMPONENTS INTERACTION ==>        #Use composition over inheritance for components (MCS CG)
																	#Avoid .CLASS .CLASS2 (TC GC CG MCG PG):
																	#  - only use it when a UI component override another component:
																	#     - override can be e.g. positioning
																	#     - but must not overriding the inside of that other component. The other component should define MODIFIER instead.
																	#  - not when specifying a subelement: use naming scheme instead
																	#  - as such, rarely need to use Less/Sass nesting
																	#  - with BEM syntax: .BLOCK--MODIFIER .BLOCK__ELEMENT (because .BLOCK--MODIFIER__ELEMENT is not correct syntax)



BEM-CONSTRUCTOR ==>               #Sass mixin (1.0.0) to write BEM notation
                                  #Each mixin can take extra argument, which is same as making several calls

@include object('BLOCK'
[, 'object|component|utility']) { # .o|c|u-BLOCK
  @include element('ELEMENT'){...}# .o-BLOCK__ELEMENT {...}
  @include modifies-ELEMENT
  ('ELEMENT') {...}               # > .o-BLOCK__ELEMENT {...}
  @include modifier('MODIFIER') 
  {...}                           # .o-BLOCK[__ELEMENT]--MODIFIER{...}
  @include state('STATE') {...}   # .o-BLOCK[__ELEMENT].is-MODIFIER{...}
  @include suffix('MODIFIER'){...}# .o-BLOCK[__ELEMENT]@MODIFIER{...}
  @include theme('THEME') {...}   # .t-THEME .o-BLOCK {...}
}  

$bem-block-namespaces.TYPE STR    #Def: 'object|component|utility' 'o|c|u'
$bem-use-namespaces BOOL          #Def: true (for .o|c|u-)
$bem-element-separator            #Def: '__'
$bem-modifier-separator           #Def: '--'
$bem-state-namespace              #Def: 'is'
$bem-suffix-namespace             #Def: '@'
$bem-theme-namespace              #Def: 't'

@bem-debug()                      #Show some color borders to distinguish components, elements, modifiers, etc.



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CSS IN HTML          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



CSS IN HTML ==>                   #Use only inline styles.
                                  #As such, do not use CSS classes as abstraction layer between HTML and CSS

ATOMIC CSS ==>                    #Similar idea but more concise by using CSS classes shorthands for CSS props/vals:
																	#  - [ANCESTORCLASS[:PSEUDO]_]FUNC[(VAL|VAR...)][!][:[:]PSEUDO][--MEDIA_QUERY]
																	#     - ! is !important
																	#     - FUNC: CSS props being styled, based on Emmet abbreviation, with some extensions
																	#  - a tool (atomizer) exists to create CSS stylesheets based on atomic class name that are used



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CSS IN JAVASCRIPT       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/





																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTORS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



SELECTORS ==>                     #  - only use .CLASS selectors (BEM RS):
																	#     - with possibly :PSEUDO
																	#     - but not tag selectors, attribute selectors, combinations nor *
                                  #  - use namespaced js-CLASS for JavaScript selection (BEM RS PG MCG)
																	#  - no !important (BEM RS)

CLASS NAMING ==>                  #  - use abstract, meaningful, structural (not presentational) classnames/variables (MCG WC GS)
																	#  - case: dasherized or camelcased (BEM GS RS)
																	#  - can use abbreviation list to keep CSS classnames short (MCS)



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      LAYERS/ORGANIZATION      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



FILE ORGANIZATION ==>             #Root dirs:
                                  #  / per layer (see below)
                                  #  / Idiomatic Sass (IS):
																	#     - assets/: static assets
																	#     - local/: private
																	#     - lib/: public
																	#     - components/: dependencies
                                  #Main file:
																	#  - name: index.css (IS SG)
																	#  - order: each layer from most generic to most specific (TC)
																	#  - with only @import grouped by category (SG)
																	#  - use globbing where possible (SG)
																	#File division:
																	#  / BLOCK.css, 1 component === 1 file (RS MCG IS)
																	#  / FULL_SELECTOR.EXT (BEM):
																	#     - 1 component [subelement] + MODIFIER|STATE === 1 file
																	#     - directory: BLOCK/[__ELEMENT/][--MODIFIER/][.is-STATE/]
																	#     - group with other assets: .js|png|etc.

LAYERS ==>                        #What layers are, in order:
                                  #  (external)
																	#  - vendors: external libraries (SG)
                                  #  (base)
																	#  - base: CSS reset (MCS SM SG)
																	#  - context: media queries breakpoints, browser or theming (MCS SM SG)
                                  #  (helpers)
																	#  / abstracts: variables/functions/mixins (SG)
																	#  / cosmetic styling: common generic styling (e.g. clearfix, padding, etc.) (MCS)
                                  #  (components layers)
																	#  / base components: as abtract as possible (MCS)
																	#  / layout: layout-related UI components BLOCK (SM SG)
																	#  / module: other UI components BLOCK (SM SG)
																	#  / project components: specific to a given page/region/use-case (MCS SG)
																	#  / state: UI components MODIFIER/STATE (SM)
																	#What layers do:
																	#  - has its own file or directory (MCS SM SG PG IS)
																	#  - has its own classname prefix (SM)
																	#  - can be defined as (MCS SM SG):
																	#     - CSS classes: components, cosmetic styling, context (e.g. on body)
																	#     - variable or simple mixins/functions/inheritance: cosmetic styling, context
																	#  - can only use same or upper layer CSS classes/variables (MCS):
																	#     - exception: cosmetic styling can be used but not overriden


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        CSS FORMATTING         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NEWLINES ==>                      #  - newline around { }:
                                  #     / always (CG GS SG)
																	#     / except if only one prop/val (MCG IC)
																	#  - newline after ; (GC CG MCG WC PG IC IS SG)
                                  #  - newlines between rulesets:
																	#     / two (GC PG GS IC IS)
																	#     / one between related, two between unrelated but same section, five between sections (CG WC)
                                  #  - newline after , in selectors:
																	#     / always (GC MCG WC GS IC IS)
																	#     / except related selector (CG SG)

INDENT/WIDTH ==>                  #  - indent size:
                                  #     / tab (WC)
																	#     / 2 spaces (MCG PG GS IS SG)
																	#     / 4 spaces (CG IC)
                                  #  - indent according to depth level (e.g. .BLOCK__ELEMENT more than .BLOCK) (BEM RS CG)
																	#  - indent to vertically align related values (e.g. top:   0; bottom: 0;) (CG MCG)
																	#  - 80 chars columns (CG WC IC SG)
																	#  - use .editorconfig (MCG IC)

SPACE ==>                         #  - space after : but not before (GC CG MCG WC PG GS IC SG)
																	#  - space before { (CG MCG PG IC IS)
																	#  - space after , in values:
                                  #     / always (IS SG)
																	#     / except inside FUNC() (MCG)
																	#     / except in longer values (like box-shadow):
                                  #        / put every part on a new line (IC)
                                  #        / put every part on a new line except first one (WC)

COMMENTS ==>                      #  - // not /* */ (PG)
																	#  - separate sections in a file with comments, using consistent amount of newlines (CG GS MCG)
																	#  - when selector from another file is being overriden (CG)

RULESETS ORDER ==>                #  - .BLOCK, .BLOCK-ELEMENT, .BLOCK[-ELEMENT].mod-MODIFIER, .BLOCK[-ELEMENT].is-MODIFIER, @media queries (TC)

PROPS ==>                         #  - order:
																	#     / alphabetical (GS)
                                  #     - logical:
																	#        / positioning, display & box model, misc (IC)
																	#        / positioning, box model, typography, visual, misc (MCG)
																	#        / display, positioning, box model, colors/typography, misc (WC)
																	#     - when not using shorthand properties, follow values order, e.g. top, right, bottom, left (WC)
                                  #  - shorthand properties:
																	#     / never (MCG PG)
																	#     / always (WC GS)

VALUES ==>                        #  - floats:
																	#     / .5 (MCG GS)
																	#     / 0.5 (WC SG)
																	#  - unitless 0, for LEN (MCG WC PG GS IC IS SG)
                                  #  - colors:
																	#     / hex colors, lowercase, with 3 letters instead of 6 if possible (MCG WC PG GS IC IS)
																	#     / hsl() (SG)
                                  #  - em/percentage vs px:
																	#     / em/percentage (WC)
																	#     / px (PG)

QUOTES ==>                        #  / "" (MCG WC IC IS)
																	#  / '' (SG)
																	#  / '', except for URL: do not use anything (GS)

@MEDIA ==>                        #  - place:
                                  #     / put @media-queries close to related code without the @media-queries (MCG TC)
																	#     / grouped together in beginning of each file (WC)
																	#  - rules have two tabs indent (WC)

OTHERS ==>                        #  - @charset 'utf-8'; (SG)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:     SASS/LESS FORMATTING      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EXPRESSIONS ==>                   #  - (EXPR * VAL) or #{EXPR * VAL} (MCG SG)
                                  #  - manipulate units with arithmetic, not string manipulation, 
                                  #    e.g. NUM * 1px or NUM / 1px, but not NUM + px (SG)

ARR|OBJ ==>                       #  - ARR: (VAL, ...) on one line if short, with newlines after ( or , otherwise (SG)
																	#  - OBJ: ('VAR:' VAL, ...) with trailing comma, space after :, newline after ( or , (SG)

PROPS ==>                         #  - order:
																	#     / inheritance, mixins, others (IC)
																	#     / variables, inheritance, mixins with no content, others, mixins with content, nested selectors with &, nested selectors without & (IS)
																	#     / variables, mixins with no content, others, nested selectors, mixins with content (SG)
																	#  - two newlines between each group (SG)

NESTING ==>                       #  - use &:
                                  #     - only with :PSEUDO or .is-STATE (SG)

MIXINS/FUNC/VARIABLES NAMING ==>  #  - dasherized (SG)
																	#  - constants: all-caps (SG)
																	#  - namespaced:
																	#     / functions: -PROJECT-, variables and public mixins: PROJECT-, private mixins: - (IS)
																	#       Mixins output selectors: CamelCase vs output props: camelCase (IS)
																	#     / PROJECT- (SG IC)
																	#     / m|u- (TC)

VARIABLES ==>                     #  - use:
                                  #     - instead of constants (SG WC TC)
																	#     - for media queries, according to size ('medium', etc.) not devices ('tablet', etc.) (SG WC TC)
																	#     - not as temporary variables (SG)
																	#  - can group them as OBJ (SG)

@EXTEND|:EXTEND ==>               #  - use:
																	#     / only where there is semantic inheritance (SG)
																	#     / prefer over mixin (IS)
																	#  - use %placeholder, and no complex one (SG)

MIXINS ==>                        #  - use:
                                  #     - only to group together often used props (SG TC)
                                  #     - keep them simple (SG TC)
																	#  - MIXIN, not MIXIN() (SG)
																	#  - use variadic/splat, or named arguments (SG)

FUNCTIONS ==>                     #  - use:
                                  #     - only simple helpers (SG TC)

LOGIC/LOOP ==>                    #  - use:
                                  #     - conditions to check mixin arguments, together with @debug|warn|error() (SG)
                                  #     - avoid otherwise (SG)

IMPORT ==>                        #  - modules to import should not define rulesets (IS)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       HTML ARCHITECTURE       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


ABBREVIATIONS ==>                 #  - CG:  cssguidelin.es
																	#  - GC:  grvcoelho CSS style guide
																	#  - MCG: mdo code guide
																	#  - PG:  primercss.io guidelines

ALTERNATIVES ==>                  #When there are competing recommandations, we use / instead of -


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        HTML FORMATTING        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



NEWLINES ==>                      #  - newlines between <TAG>:
                                  #     - none between sibling inline elements (GS)
                                  #     - one between related (GS CG)
                                  #     - two between loosely related (GS CG)
                                  #     - five between sections (CG)

INDENT ==>                        #  - width:
                                  #     - 2 spaces (PG GS)

SPACES ==>                        #  - no trailing whitespace (GS)

STRUCTURE ==>                     #  - should follow visual order (PG)
                                  #  - lean markup (MCG PG): 
                                  #     - avoid wrapping a tag to only add a class 
                                  #     - i.e. <TAG class="CLASS" ...> instead of <TAG2 class="CLASS"><TAG ...></TAG2
                                  #  - avoid HTML in JavaScript (MCG)

TAGS ==>                          #  - <tag> lowercase (GS)
                                  #  - <TAG>, not <TAG/> (MCG PG GS)
                                  #  - omit (GS):
                                  #     - optional tags (e.g. <html|head|body|tbody>)
                                  #     - optional end tags (e.g. <p|li|option>)

ATTRIBUTES ==>                    #  - order: class, id|name, data-*, src|for|type|href|value, title|alt, role|aria-* (MCG)
                                  #  - boolean attribute: checked, not checked="checked" (MCG PG)
                                  #  - use "" (PG GS)
                                  #  - classes: one space between related classes, two spaces otherwise (CG)

COMMENTS ==>                      #  - use // TODO: ... (GS)

OTHERS ==>                        #  - do not use entity references (GS)
