
                           
   CSS_ARCHITECTURE_TEMP   
                           



ABBREVIATIONS ==>                 #  - AC:  Atomic CSS
																	#  - BEM: BEM
																	#  - CG:  cssguidelin.es
																	#  - GC:  grvcoelho CSS style guide
																	#  - GS:  Google HTML/CSS style guide
																	#  - IC:  Idiomatic CSS
																	#  - IS:  Idiomatic Sass
																	#  - MCG: mdo code guide
																	#  - MCS: MCSS
																	#  - MN:  Montage naming convention
																	#  - OC:  OOCSS
																	#  - PG:  primercss.io guidelines
																	#  - RS:  RSCSS
																	#  - SG:  Sass guidelines
																	#  - SM:  SMACSS
																	#  - TC:  Trello CSS style guide
																	#  - WC:  Wordpress CSS coding standards

ALTERNATIVES ==>                  #When there are competing recommandations, we use / and \ instead of -


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         ARCHITECTURE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SUMMARY ==>                       #Can be:
                                  #  - Component-oriented CSS stylesheets.
                                  #    Usually accompanied to naming scheme like BEM
                                  #  - CSS in HTML only, e.g. Atomic CSS
                                  #  - CSS in JavaScript only, e.g. JSS or Radium





Atomic CSS (AC):
  - like using only inline styles, with a more concise syntax
  - use CSS classes that reflect CSS props/vals, instead of being an abtraction layer between HTML and CSS:
     - use syntax [ANCESTORCLASS[:PSEUDO]_]FUNC[(VAL|VAR...)][!][:[:]PSEUDO][--MEDIA_QUERY]
        - ! is !important
        - FUNC: CSS props being styled, based on Emmet abbreviation, with some extensions
     - a tool (atomizer) exists to create CSS stylesheets based on atomic class name that are used



Selectors:
  - BEM RS:
     - only use .CLASS selectors:
        - with possibly :PSEUDO
        - but not tag selectors, attribute selectors, combinations nor *
     - no !important



Class naming:
  - BEM:
     - parts are dasherized, or camelcased
  - MCS:
     - can use abbreviation list to keep CSS classnames short
  - BEM:
     - use namespaced js-CLASS for JavaScript selection
  - RS:
     - parts are dasherized, or camelcased
     - use namespaced js-CLASS for JavaScript selection
     - selector is .BLOCK[.-MODIFIER] [>] .ELEMENT[-MODIFIER]
        - BLOCK (called "component"): like BEM, but must be at least two different words
        - ELEMENT: like BEM
        - MODIFIER (called "variant")
        - >: otherwise might target .BLOCK .ANOTHERBLOCK .ELEMENT
  - PG:
     - use namespaced js-CLASS for JavaScript selection
  - MCG:
     - use namespaced js-CLASS for JavaScript selection
     - use abstract, meaningful, structural (not presentational) classnames/variables
  - WC:
     - use abstract, meaningful, structural (not presentational) classnames/variables




UI components:
  - MCS:
     - use composition over inheritance for components
  - MN:
     - like BEM syntax but:
        - namespaces whole project with PROJECT-
        - - -- instead of __ --
        - CamelCase for blocks, camelCase for rest
  - BEM:
     - selector is .BLOCK[__ELEMENT][--MODIFIER[--MODIFIERVALUE]][.is|has-STATE]:
        - BLOCK: [sub]component (unique across app)
           - often at least two words
           - sometimes namespaced: c- (component), o- (object), u- (utility)
        - ELEMENT: [sub]component's part (unique across BLOCK)
           - only one level of depth, no BLOCK__ELEMENT__SUBELEMENT
           - when too many subelements, should be extracted as a BLOCK instead
        - MODIFIER: styling state
           - always local to a specific BLOCK[__ELEMENT] (no global MODIFIER)
           - HTML need to have both selectors: with and without MODIFIER
           - responsive suffix:
              - @MODIFIER instead of --MODIFIER
              - used for media queries breakpoints, browser or theming
        - STATE: interaction state
           - :PSEUDO can be used instead or in addition to STATE
           - always local to a specific BLOCK[__ELEMENT] (no global STATE)
           - dynamically changed by JavaScript (as opposed to BLOCK, ELEMENT and MODIFIER)
     - can sometimes use _ or - instead of __ or --
     - a given DOM element can be several BLOCK|ELEMENT ('BEM' mixin)
  - RS:
     - focus on using UI component:
        - 1 UI component === 1 BLOCK
        - BLOCK declaration should not use positioning (so can be reused in different contexts)
           - but BLOCK2 using BLOCK might position BLOCK, and BLOCK might position ELEMENT, as long as it does not assume things
             about how that other element work internally
        - single responsibility: should break down big UI components
  - TC:
     - reuse most of BEM ideas but use .BLOCK-ELEMENT[-...][.mod|is-MODIFIER]
     - reuse RSCSS focus on UI components
     - avoid .CLASS .CLASS2:
        - only: 
           - when a UI component override another component:
              - override can be e.g. positioning
              - but must not overriding the inside of that other component. The other component should define MODIFIER instead.
           - .BLOCK--MODIFIER .BLOCK__ELEMENT (because .BLOCK--MODIFIER__ELEMENT is not correct syntax)
        - not:
           - specify a subelement: use naming syntax instead
        - as such, rarely need to use Less/Sass nesting
           - should still use it for &:PSEUDO
  - GC:
     - reuse "avoid .CLASS .CLASS2" from Trello CSS style guide
     - reuse BEM: .BLOCK[__ELEMENT][--MODIFIER][.is-MODIFIER]
  - SM:
     - reuse RSCSS focus on UI components
     - reuse OOCSS naming scheme
  - OC:
     - reuse RSCSS focus on UI components
     - naming scheme: add extra CSS class to define skin or extend component
     - separate:
        - structure: UI component, with only invariant structure, behavior and styling
        - skin: 
           - variant styling: 1 UI component can have many skins (similar to BEM MODIFIER|STATE)
           - cross-UI-component: 1 skin can be applied to many UI components (similar to global BEM MODIFIER|STATE)
  - CG:
     - reuse MCSS "composition over inheritance"
     - reuse BEM
     - reuse "avoid .CLASS .CLASS2" from Trello CSS style guide
     - reuse RSCSS focus on UI components:
        - make components as abstract as possible, including in classnames chosen
     - reuse OOCSS separation of structure and skin
  - IS:
     - use BEM syntax
     - reuse RSCSS focus on UI components
        - 1 UI component should only focus on one purpose: layout/positioning, typography, other styling
  - SG: 
     - reuse RSCSS focus on UI components
  - MCG:
     - reuse "avoid .CLASS .CLASS2" from Trello CSS style guide
  - PG:
     - reuse "avoid .CLASS .CLASS2" from Trello CSS style guide


bem-constructor:
  - Sass mixin (1.0.0) to write BEM notation
  - Each mixin can take extra argument, which is same as making several calls

@include object('BLOCK'[, 'object|component|utility']) {      .o|c|u-BLOCK
  @include element('ELEMENT') {...}                           .o-BLOCK__ELEMENT {...}
  @include modifies-element('ELEMENT') {...}                  > .o-BLOCK__ELEMENT {...}
  @include modifier('MODIFIER') {...}                         .o-BLOCK[__ELEMENT]--MODIFIER{...}
  @include state('STATE') {...}                               .o-BLOCK[__ELEMENT].is-MODIFIER{...}
  @include suffix('MODIFIER') {...}                           .o-BLOCK[__ELEMENT]@MODIFIER{...}
  @include theme('THEME') {...}                               .t-THEME .o-BLOCK {...}
}  

Variables:
  - $bem-block-namespaces.TYPE STR (def: 'object|component|utility' 'o|c|u') 
  - $bem-use-namespaces BOOL (def: true): for .o|c|u-
  - $bem-element-separator (def: '__')
  - $bem-modifier-separator (def: '--')
  - $bem-state-namespace (def: 'is')
  - $bem-suffix-namespace (def: '@')
  - $bem-theme-namespace (def: 't')

@bem-debug(): show some color borders to distinguish components, elements, modifiers, etc.



File organization:
  - RS:
     - file organization: BLOCK.css
  - BEM:
     - file organization: BLOCK/[__ELEMENT/][--MODIFIER/][.is-STATE/]FULL_SELECTOR.css|js|png|etc.
  - TC:
     - main file: CSS reset, variables, mixins/functions, components
     - component: .BLOCK, .BLOCK-ELEMENT, .BLOCK[-ELEMENT].mod-MODIFIER, .BLOCK[-ELEMENT].is-MODIFIER, @media queries
  - MCG:
     - 1 component === 1 file
     - separate sections and subsections in a file with comments and consistent amount of newlines
  - PG:
     - separate directories for theming and media queries
  - IS:
     - 1 UI component === 1 file
     - put mixins/functions in separate files
     - filename: UI_COMPONENT.css
     - main file: index.css
     - root dirs:
        - assets/: static assets
        - local/: private
        - lib/: public
        - components/: dependencies

  - SG:
     - main file: index.css:
        - with only @import grouped by category
        - use globbing where possible



Layers:
  - MCS:
     - divide into layers, in order:
        - CSS reset
        - context: media queries breakpoints, browser or theming
        - cosmetic styling: common generic styling (e.g. clearfix, padding, etc.)
        - base components: as abtract as possible
        - project components: specific to a given page/region/use-case
     - each layer:
        - can only use same or upper layer CSS classes/variables:
           - exception: cosmetic styling can be used but not overriden
        - can be defined as:
           - CSS classes: components, cosmetic styling, context (e.g. on body)
           - variable or simple mixins/functions/inheritance: cosmetic styling, context
        - has its own file or directory
  - SM:
     - divide into layers:
        - base: CSS reset + common generic styling
        - theme
        - layout: layout-related UI components BLOCK
        - module: other UI components BLOCK
        - state: UI components MODIFIER/STATE
     - each layer:
        - has its own file or directory
        - has its own prefix
  - SG:
     - are:
        - base: CSS reset
        - vendors: external libraries
        - abstracts: variables/functions/mixins
        - layout: layout-related UI components
        - components: other UI components
        - pages: UI route-specific styling
        - themes: theming
     - each:
        - in one folder


HTML formatting:
  - CG:
     - classes: one space between related classes, two spaces otherwise
     - one newline between interdependant <TAG>, two between closely related <TAG>, fiven between less related <TAG>
  - MCG:
     - <TAG>, not <TAG/>
     - use <!DOCTYPE html>
     - <html lang="en-us">
     - <meta charset="UTF-8">
     - <link rel="stylesheet" href="URL">
     - <script src="URL">
     - attributes order: class, id|name, data-*, src|for|type|href|value, title|alt, role|aria-*
     - boolean attribute: checked, not checked="checked"
     - avoid HTML in JavaScript
     - lean markup: avoid wrapping a tag to only add a class, i.e. <TAG class="CLASS" ...> instead of <TAG2 class="CLASS"><TAG ...></TAG2>
  - PG:
     - 2 spaces indent
     - use ""
     - <TAG> not <TAG/>
     - boolean attribute: checked, not checked="checked"
     - lean markup (see above)
     - always use type in <button>
     - DOM should follow visual order
  - GS:
     - //URL, not HTTP[S]://URL (unless only available under HTTP or HTTPS)
     - <tag> not <TAG>
     - 2 spaces indent
     - no trailing whitespace
     - <meta charset="UTF-8">
     - use <!DOCTYPE html>
     - use // TODO: ...
     - <TAG> not <TAG/>
     - use w3c validation
     - do not use entity references
     - omit optional tags (e.g. <html|head|body|tbody>) and optional end tags (e.g. <p|li|option>)
     - <link rel="stylesheet" href="URL">
     - <script src="URL">
     - sibling inline elements on same line (no newline)
     - two newlines between loosely coupled elements
     - use ""


CSS formatting:
  - indent:
     - indent according to the depth level (BEM RS CG)
     / tab indent (WC)
     / 2 spaces indent (MCG)
     / 4 spaces indent (CG)
     - indent to vertically align related rules values (e.g. top:   0; bottom: 0;) (CG MCG)
  - newlines:
     / newline after selector-, (GC MCG WC)
     / newline after selector-, if unrelated selector (CG)
     - newline after ; (GC CG MCG WC)
     / two newlines after } (GC)
     / one newline after related rulesets, two after unrelated inside same section, five between sections (CG WC)
     \ newline after { (CG)
     \ no newline around { } if only one prop/val (MCG)
  - space:
     - space after : (not before) (GC CG MCG WC)
     - space before { (CG MCG)
     - space after property-, except if inside FUNC() (MCG)
  - comments:
     - use comment header before each section (CG)
     - when selector from another file is being overriden (CG)
  - 80 chars columns (CG)
  - use .editorconfig (MCG)
  - quotes:
     - use "" (MCG WC)
  - values:
     / .5 not 0.5 (MCG)
     / 0.5 not .5 (WC)
     - unitless 0 (MCG WC)
     - use hex colors, lowercase, with 3 letters instead of 6 if possible (MCG WC)
     - prefer em or percentage over px (WC)
  - props:
     - order:
        / positioning, box model, typography, visual, misc (MCG)
        / display, positioning, box model, colors/typography, misc (WC)
        - when not using shorthand properties, follow values order, e.g. top, right, bottom, left (WC)
     / no shorthand properties (MCG)
     / use shorthand properties (WC)
  - @media:
     - put @media-queries close to related code without the @media-queries (MCG)
  - WC:
     - space after VAL, including inside FUNC(), except longer ones (like box-shadow), which should use linefeed
     - @media-queries:
        - grouped together in beginning of each file
        - rules have two tabs indent
     - 80 columns width
  - PG:
     - prefer px over em
     - 2 spaces indent
     - space after : (not before)
     - space before {
     - two newlines between rulesets
     - newline after ;
     - use hex colors
     - // comments, not /* */
     - unitless 0
     - do not use shorthand properties
  - GS:
     - 2 spaces indent
     - use hex colors, lowercase, with 3 letters instead of 6 if possible
     - use w3c validation
     - meaningful class names
     - dasherized class names
     - use shorthand properties
     - unitless 0
     - .8 not 0.8
     - props order: alphabetical
     - space after : (not before)
     - newline after {
     - newline after selector-,
     - two newlines after }
     - use '', except for URL: do not use anything
     - delimiting sections by comments
  - IC:
     - use .editorconfig
     - 4 spaces indent
     - column width 80
     - newline after selector-,
     - space after properties-,
     - space before {
     - newline after ;
     - two newlines after }
     - ruleset with only one property can omit newlines around { }
     - long property values (e.g. multiple background-image): newline, then each value on a new line
     - space after : (not before)
     - use hex colors, lowercase, with 3 letters instead of 6 if possible
     - use ""
     - unitless 0
     - props order: positioning, display & box model, misc
  - IS:
     - newline after selector-,
     - space after properties-,
     - use ""
     - two newlines after }
     - space before {
     - newline after ;
     - use hex colors, lowercase, with 3 letters instead of 6 if possible
     - use ""
     - unitless 0
     - 2 spaces indent
  - SG:
     - 2 spaces indent
     - 80 chars columns
     - newline after ;
     - newline after selector-, if unrelated selector
     - space after :
     - newline after {
     - @charset 'utf-8';
     - use ''
     - 0.5 not .5
     - unitless 0
     - hsl() for colors
     - space after properties-,


Sass/Less formatting:
  - props order:
     - order:
        - inheritance, mixins, others (IC)
        - variables, inheritance, mixins with no content, others, mixins with content, nested selectors with &, nested selectors without & (IS)
        - variables, mixins with no content, others, nested selectors, mixins with content (SG)
     - two newlines between each group (SG)
  - variables:
     - use instead of constants (SG WC TC)
     - use for media queries, according to size ('medium', etc.) not devices ('tablet', etc.) (SG WC TC)
     - do not use as temporary variables (SG)
     - can group them as OBJ (SG)
  - nesting:
     - only use & with :PSEUDO or .is-STATE (SG)
  - expressions:
     - (EXPR * VAL) or #{EXPR * VAL} (MCG SG)
     - NUM * 1px, not NUM + px. NUM / 1px, not removing 'px' using string manipulation (SG)
  - ARR|OBJ:
     - ARR: (VAL, ...) on one line if short, with newlines after ( or , otherwise (SG)
     - OBJ: ('VAR:' VAL, ...) with trailing comma, space after :, newline after ( or , (SG)
  - mixins/functions/variables naming: 
     - dasherized (SG)
     - constant all-caps (SG)
     - namespaced:
        / functions: -PROJECT-, variables and public mixins: PROJECT-, private mixins: - (IS)
          Mixins output selectors: CamelCase vs output props: camelCase (IS)
        / PROJECT- (SG IC)
        / m|u- (TC)
  - @extend|:extend:
     / only where there is semantic inheritance (SG)
     / prefer over mixin (IS)
     - use %placeholder, and no complex one (SG)
  - mixins:
     - keep them simple, only to group together often used props (SG TC)
     - MIXIN, not MIXIN() (SG)
     - use variadic/splat, or named arguments (SG)
  - functions:
     - keep them simple (SG TC)
  - logic/loop:
     - avoid, except conditions to check mixin arguments, together with @debug|warn|error() (SG)
  - import:
     - modules to import should not define rulesets (IS)
