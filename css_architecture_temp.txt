
                           
   CSS_ARCHITECTURE_TEMP   
                           


BEM or RSCSS:
  - parts are dasherized, or camelcased
  - only use .CLASS selectors, with possibly :PSEUDO, but not tag selectors, attribute selectors, combinations nor *
  - no !important
  - use namespaced js-CLASS for JavaScript selection

BEM:
  - selector is .BLOCK[__ELEMENT][--MODIFIER[--MODIFIERVALUE]][.is|has-STATE]:
     - BLOCK: [sub]component (unique across app)
        - often at least two words
        - sometimes namespaced: c- (component), o- (object), u- (utility)
     - ELEMENT: [sub]component's part (unique across BLOCK)
        - lower parts and upper parts have same level, except if they are extracted as a BLOCK
     - MODIFIER: styling state
        - always local to a specific BLOCK[__ELEMENT] (no global MODIFIER)
        - HTML need to have both selectors: with and without MODIFIER
        - responsive suffix:
           - @MODIFIER instead of --MODIFIER
           - used for media queries breakpoints, browser or theming
     - STATE: interaction state
        - :PSEUDO can be used instead or in addition to STATE
        - always local to a specific BLOCK[__ELEMENT] (no global STATE)
        - dynamically changed by JavaScript (as opposed to BLOCK, ELEMENT and MODIFIER)
  - indent according to the depth level
  - can sometimes use _ or - instead of __ or --
  - a given DOM element can be several BLOCK|ELEMENT ('BEM' mixin)
  - file organization: BLOCK/[__ELEMENT/][--MODIFIER/][.is-STATE/]FULL_SELECTOR.css|js|png|etc.


bem-constructor:
  - Sass mixin (1.0.0) to write BEM notation
  - Each mixin can take extra argument, which is same as making several calls

@include object('BLOCK'[, 'object|component|utility']) {      .o|c|u-BLOCK
  @include element('ELEMENT') {...}                           .o-BLOCK__ELEMENT {...}
  @include modifies-element('ELEMENT') {...}                  > .o-BLOCK__ELEMENT {...}
  @include modifier('MODIFIER') {...}                         .o-BLOCK[__ELEMENT]--MODIFIER{...}
  @include state('STATE') {...}                               .o-BLOCK[__ELEMENT].is-MODIFIER{...}
  @include suffix('MODIFIER') {...}                           .o-BLOCK[__ELEMENT]@MODIFIER{...}
  @include theme('THEME') {...}                               .t-THEME .o-BLOCK {...}
}  

Variables:
  - $bem-block-namespaces.TYPE STR (def: 'object|component|utility' 'o|c|u') 
  - $bem-use-namespaces BOOL (def: true): for .o|c|u-
  - $bem-element-separator (def: '__')
  - $bem-modifier-separator (def: '--')
  - $bem-state-namespace (def: 'is')
  - $bem-suffix-namespace (def: '@')
  - $bem-theme-namespace (def: 't')

@bem-debug(): show some color borders to distinguish components, elements, modifiers, etc.



RSCSS:
  - selector is .BLOCK[.-MODIFIER] [>] .ELEMENT[-MODIFIER]
     - BLOCK (called "component"): like BEM, but must be at least two different words
     - ELEMENT: like BEM
     - MODIFIER (called "variant")
     - >: otherwise might target .BLOCK .ANOTHERBLOCK .ELEMENT
  - file organization: BLOCK.css
  - focus on using UI component:
     - 1 UI component === 1 BLOCK
     - BLOCK declaration should not use positioning (so can be reused in different contexts)
        - but BLOCK2 using BLOCK might position BLOCK, and BLOCK might position ELEMENT, as long as it does not assume things
          about how that other element work internally



Trello CSS style guide:
  - reuse most of BEM ideas but use .BLOCK-ELEMENT[-...][.mod|is-MODIFIER]
  - reuse RSCSS focus on UI components
  - files order:
     - main file: CSS reset, variables, mixins/functions, components
     - component: .BLOCK, .BLOCK-ELEMENT, .BLOCK[-ELEMENT].mod-MODIFIER, .BLOCK[-ELEMENT].is-MODIFIER, @media queries
  - Less/Sass:
     - do not use nesting:
        - using BEM avoid needing it
        - except &:PSEUDO, or .BLOCK--MODIFIER .BLOCK__ELEMENT
     - only use very simple mixins/functions/inheritance:
        - prefix with m|u-
     - use variables, including for media queries


grvcoelho CSS style guide:
  - reuse BEM: .BLOCK[__ELEMENT][--MODIFIER][.is-MODIFIER]
  - formatting:
     - newline after , or ;
     - two newlines after }
     - space after : (not before)
  - reuse "do not use nesting" from Trello CSS style guide


MCSS:
  - divide into layers, in order:
     - CSS reset
     - context: media queries breakpoints, browser or theming
     - cosmetic styling: common generic styling (e.g. clearfix, padding, etc.)
     - base components: as abtract as possible
     - project components: specific to a given page/region/use-case
  - each layer:
     - can only use same or upper layer CSS classes/variables:
        - exception: cosmetic styling can be used but not overriden
     - can be defined as:
        - CSS classes: components, cosmetic styling, context (e.g. on body)
        - variable or simple mixins/functions/inheritance: cosmetic styling, context
     - has its own file or directory
  - can use abbreviation list to keep CSS classnames short
