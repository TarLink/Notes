
         
   PM2   
         


VERSION ==>                   #Node module (0.10.8)
                              #Helps managing multiprocess of same script (e.g. Node in cluster mode)

JSON                          #Can alternatively declare options in a JSON file (will not use command line options then
                              #except --env):
                              #  - apps OBJ_ARR:
                              #     - name, script, args STR_ARR_STR, log_date_format, ignoreWatch PATH_ARR, node_args, cwd, 
                              #       env[_VAR] OBJ, instances NUM_STR, error|out_file, pid_file, 
                              #       exec_mode "cluster|fork_mode", port NUM, min_uptime, run_as_user|group, max_restarts, 
                              #       cron_restart, watch PATH_ARR, merge_logs BOOL_STR, exec_interpreter STR
                              #Extra options available only via JSON:
                              #  - cwd DIR: used to resolve any relative path
                              #  - env_VAR: env OBJ used if --env VAR is used

~/.pm2/custom_options.sh      #Or ENVVAR: several variables to change pm2 (not jobs): PM2_GRACEFUL_TIMEOUT, 
                              #PM2_RPC|PUB|API_PORT, PM2_BIND_ADDR, PM2_MODIFY_REQUIRE

PM2.COMMAND([ARGS, ]
[OBJ, ]FUNC(ERROR, VAL))      #Programmatic use (Node.js). Must first use PM2.connect()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DAEMON             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


STARTING PM2 DAEMON ==>       #Automatically done when launching jobs. Listen to port 6666 and 6667
                              #Only pm2 process can be seen through OS
pm2 ping                      #Pings pm2 daemon. If not up, starts it.
pm2 kill                      #Stops daemon
pm2 updatePM2                 #Updates pm2 after a npm update (does pm2 kill first)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             JOBS              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


pm2 start [SCRIPT|JSON]       #Start in the background (unless --no-daemon)
[-- ARGS]                     #SCRIPT def. is stdin
                              #PID:
                              #  - jobs at PID_FILE (def: ~/.pm2/pids/NAME-ID.pid) (can specify with -p PID_FILE)
                              #  - pm2 at ~/.pm2/pm2.pid
                              #When job exits, restart it according to JSON members:
                              #  - max_restarts NUM (def: 15)
                              #  - min_uptime (def: 200, in ms)
--instances NUM               #Number of identical jobs to launch (can be "max" for number of CPU cores) (def: 1)
                              #Can be in mode:
                              #  - fork (if -x): uses Node CHILD_PROCESS.fork()
                              #     - does load balancing
                              #     - must listen to different ports
                              #  - cluster (if no -x): uses Node CLUSTER.fork():
                              #     - allows pm2 [graceful]reload (as opposed to restart)
                              #     - can listen to same port
                              #     - Problem: with Node.js 0.10 or less, pm2 stop doesn't free ports (but pm2 kill does)
--name STR                    #Process name (def: NODE_SCRIPT without extension)
--node-args NODE_ARGS         #To pass arguments to the interpreter not to the SCRIPT
--interpreter STR             #Def: "node" (.js), "bash" (.sh), "python" (.py), "ruby" (.rb), "coffee" (.coffee), "php" (.php),
                              #"perl" (.pl)
--watch                       #Do pm2 restart if folder changes:  
                              #  - Def: SCRIPT
                              #  - JSON watch DIR_ARR and ignoreWatch DIR_ARR
                              #To stop watching, use --watch with pm2 stop
                              #Restart keeps --watch
                              #Prefer using only in dev mode, and then prefer nodemon
--run-as-user|group USER|GROUP#
--max-memory-restart NUM      #Restart jobs when it uses more than NUM MB of RAM
-c STR                        #According to cron pattern STR, will pm2 restart 
-w                            #Write configuration JSON at ./NAME-pm2.json
--no-color                    #
-s                            #Silent
-v                            #Verbose

pm2 stop [ID|NAME|all|JSON]   #Stops jobs but do not remove from jobs list
                              #Def: stdin (for JSON)

pm2 delete                    #Stops jobs and removes from jobs list
[ID|NAME|all|JSON|SCRIPT]     #Def: stdin (for JSON)

pm2 restart [ID|NAME|all|JSON]#Restart running|stopped jobs at same time
                              #Def: stdin (for JSON)
pm2 startOrRestart JSON       #

pm2 reload NAME|all           #Restart jobs at sequential time to avoid downtime. Only if cluster_mode

pm2 gracefulReload NAME|all   #Same as pm2 reload but:
                              #  - first sends message (using CHILD_PROCESS|CLUSTER.send())
                              #  - after ENVVAR PM2_GRACEFUL_TIMEOUT secs (def: 4), terminates
                              #  - sequential time too: wait for each job to be online. If job doesn't listen to a port,
                              #    can manually process.send("online")
pm2 startOrGracefulReload JSON#

pm2 sendSignal SIGNAL ID|NAME #e.g. SIGTERM


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             INFO              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


pm2 list                      #List jobs with nice formatting: 
                              #  - name 
                              #  - id
                              #  - mode "fork|cluster"
                              #  - PID
                              #  - status "online|stopped"
                              #  - restarted NUM
                              #  - uptime
                              #  - memory
                              #  - watching
-m                            #No formatting

pm2 jlist|prettylist          #List jobs as JSON OBJ_ARR (pretified or not): 
                              #  - name
                              #  - pid
                              #  - pm_id
                              #  - monit:
                              #     - memory NUM
                              #     - cpu NUM
                              #  - pm2_env:
                              #     - monit: memory, cpu
                              #     - name
                              #     - node_args
                              #     - instances NUM
                              #     - exec_mode "cluster_mode|fork"
                              #     - env OBJ (ENVVARs)
                              #     - pm_cwd
                              #     - exec_interpreter
                              #     - pm_exec_path
                              #     - pm_out|err_log_path
                              #     - pm_pid_path
                              #     - pm_id
                              #     - restart_time NUM
                              #     - unstable_restarts NUM
                              #     - created_at DATE_NUM
                              #     - pm_uptime DATE_NUM
                              #     - status "online|stopped"

pm2 desc ID                   #Same as pm2 list (including options) with also:
                              #  - path NODE_SCRIPT
                              #  - args NODE_ARGS
                              #  - exec cwd DIR
                              #  - out|error log path STDOUT|ERRFILE
                              #  - pid path PID_FILE
                              #  - node v8 arguments
                              #  - watch & reload
                              #  - interpreter node
                              #  - [unstable] restarts NUM
                              #  - created at DATE

pm2 monit                     #List pm2 list but "live" (like top)

pm2 reset NAME|ID|all         #Resets stats

pm2 web                       #Launch server on port 9615, which respond with JSON taken from Node.js OS.*() + pm2 jlist:
                              #  - system_info: hostname STR, uptime NUM
                              #  - monit:
                              #     - loadavg NUM_ARR (3 NUMs)
                              #     - total|free_mem
                              #     - cpu OBJ_ARR
                              #     - interfaces OBJ_ARR
                              #  - processes OBJ (like pm2 jlist, without top-level monit)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             LOGS              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


pm2 logs [ID|NAME]            #Show logs (streaming output).
                              #Logs locations:
                              #  - Redirects stdout|err to STDOUT|ERRFILE (def: ~/.pm2/logs/a-out|err-0.log)
                              #     - can specify with pm2 start -o|e STDOUT|ERRFILE
                              #     - use a-out-err.log (so merge different jobs) if pm2 start --merge-logs
                              #  - pm2 log at ~/.pm2/pm2.log
                              #Can specify date format with pm2 start --log-date-format MOMENTJS_FORMAT
pm2 ilogs                     #Show logs (only ~/.pm2/logs/* ones) with a top-like interface
pm2 flush                     #Delete logs
pm2 reloadLogs                #Or send SIGUSR2 to pm2 proces


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SNAPSHOTS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


pm2 save                      #Snapshots all processes to ~/.pm2/dump.pm2

pm2 resurrect                 #Restore snapshot

pm2 startup PLATFORM          #Sets init scripts to restore snapshots at boot time:
                              #  - ubuntu: updaterc.d and lib/scripts/pm2-init.sh
                              #  - centos: chkconfig and lib/scripts/pm2-init-centos.sh
                              #  - gentoo: rc-update and lib/scripts/pm2
                              #  - systemd: systemctl and lib/scripts/pm2.service
-u USER                       #User to use


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DEPLOY             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


pm2 ecosystem                 #Creates sample ecosystem.json file ESYS:
                              #  - deploy: VAR (e.g "dev" or "production"):
                              #     - user STR
                              #     - host IP
                              #     - repo GIT_SSH_URL
                              #     - ref LBRANCH
                              #     - path DIR: where to copy
                              #     - pre-deploy: COMMAND_STR
                              #     - post-deploy COMMAND_STR (def: "pm2 startOrRestart ecosystem.json")
                              #Usually include also JSON members, so can use ecosystem.json for both purposes.
                              #Everything below is executed on remote server at IP (connect using SSH)
pm2 deploy ESYS VAR setup     #Creates local DIR
pm2 deploy ESYS VAR [COMMIT]  #Copy remote repo to local DIR from COMMIT (def: HEAD)
pm2 deploy ESYS VAR update    #Removes local repo and copy remote repo to local DIR
pm2 deploy ESYS VAR revert 
[NUM]                         #Uses NUMth last commit
pm2 deploy ESYS VAR curr|prev #Show current|previous commit
pm2 deploy ESYS VAR list      #List previously deployed commits
pm2 deploy ESYS VAR exec STR  #Execute shell command on remote server
