
               
   MODERNIZR   
               


PRINCIPE ==>                                    #  - Shim : code permettant d'ajoute une fonctionnalité non-supporté par 
                                                #    une API
                                                #  - Polyfill : Javascript shim. e.g. rajouter property non supporté par IE
                                                #  - Fallback : Plutôt de rajouter un polyfill, donner une version 
                                                #    simplifiée de l'élements.
                                                #    Fallback souvent possible : plusieurs CSS properties se suivant pour
                                                #    plusieurs browsers (CSS non comprise est non lue mais ne crash pas).
                                                #    Considérer tradeoffs entre polyfill (permet une meilleure expérience
                                                #    pour vieux browsers) et fallback (plus rapide).
                                                #Modernizr permet de tester FEATURES, afin de choisir des polyfills, ou
                                                #versions fallbacks. Le fait en testant les FEATURES plutôt que de tester 
                                                #l'User agent (non fiable)

MODERNIZR ==>                                   #Choose the features. Don't use development version, miss load().
                                                #It tests the FEATURE and adds :
                                                #  - for CSS selectors : class to <html>, called either FEATURE or no-FEATURE.
                                                #    - for FEATURE "js", it needs to be added in <html> : <html class="no-js">
                                                #  - for Javascript : a Modernizr object, with Modernize.FEATURE (BOOL)
                                                #    - sometimes more detailed than CSS SELECTOR : Modernize.FEATURE.SUBFEATURE
 
Modernizr.load(OBJ[_ARRAY])                     #OBJ est :
                                                #  { test: MODERNIZR.FEATURE
                                                #  [, yep: FILE_STR[_ARRAY]]
                                                #  [, nope: FILE2_STR[_ARRAY]]
                                                #  [, both: FILE3_STR[_ARRAY]]
                                                #  [, load: FILE4_STR[_ARRAY]]
                                                #  [, callback: FUNC(STR, BOOL)]
                                                #  [, complete: FUNC] }
                                                #Import FILE (.js ou .css, polyfills ou fallback) ou FILE2 selon la présence 
                                                #de FEATURE.
                                                #Import toujours FILE3 et FILE4 (pareil)
                                                #Exécute FUNC à la fin, toujours. 
                                                #Pareil pour callback, mais avec résultat du test dans BOOL et URL dans STR.
                                                #OBJ peut aussi être seulement FILE, équivaut à both: FILE
                                                #It is loaded async., so need to use callback/complete to make sure it's 
                                                #loaded before executing.

Modernizr.addTest(STR, FUNC)                    #Create own FEATURE, named STR (all lowercase)
                                                #FUNC renvoie BOOL.
                                                #Exemple de FUNC : 
                                                #  - return !!MEMBRE (Pour Javascript object)
                                                #  - return MEMBRE && ( VAR in MEMBRE ) && etc. (Pour Javascript membre)
                                                #  - return testProp(VAR_STR) (Pour CSS)
                                                #  - return testAllProps(VAR_STR) (Permet de tester préfixes aussi)
                                                #  - return hasEvent(STR, VAR) (Pour les events)
Modernizr.testProp(STR)                         #Renvoie true si property (camel case, Javascript-style) est supportée. Pour
                                                #addTest().
Modernizr.testAllProps(STR)                     #Pareil, mais aussi si version prefixée existe.
Modernizr.hasEvent(STR, VAR)                    #Renvoie true si VAR a un event STR
                  
Modernizr.prefixed(STR[, VAR[, BOOL]])          #Renvoie MozSTR, WebkitSTR, etc. ou juste STR selon le cas, pour le browser
                                                #courant. Si STR non supportée, renvoie false.
                                                #STR doit être une property name, Javascript-style and camel case, e.g.
                                                #boxSizing
                                                #Si VAR, ne renvoie que si prefixed property existe dans VAR. Sinon renvoie 
                                                #false.
                                                #Si true ou VAL (déf: false), renvoie non le nom de la property mais la 
                                                #property. Si VAL, bind VAL comme premier argument si property est une 
                                                #fonction (comme requestAnimationFrame())
