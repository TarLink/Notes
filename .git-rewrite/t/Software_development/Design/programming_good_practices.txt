
                                
   PROGRAMMING_GOOD_PRACTICES   
                                


Lignes de 80 caractères.
Pas noms de fichiers et variables trop longs.

Variables de grande taille allouées sur le heap.
Pas de fuite mémoire.
Si problème d'allocation mémoire :
  - non-interactif: abort le programme
  - interactif: abort la commande uniquement.

Initialiser les variables.

Pas imprimer de caractères non imprimables (pour ASCII : [[:print:]]), dont multibyte.
Respecter locale et multibyte handling, dont UTF8

Checker error return et exceptions, avec message d'erreur.


Création de fichiers temporaires :
  - sous Unix, checker $TMPDIR

Library :
  - fonctions réentrantes
  - en C, mettre en préfixe (comme namespace), et _ devant fonctions n'étant pas de l'API publique

Error message :
  - program:[sourcefile:lineno:] message si non-interactif
  - Message (pas de point à la fin) si interactif command line

Ne pas dépendre du nom de l'exécutable
Ne pas changer comportement en fonction du type d'output (terminal ou file), sauf via un switch

Provide GUI + CLI + command line
Provide a D-bus interface
Provide library

Command-line options :
  - Utiliser commandes prévues pour pour parser les options.
  - utiliser options usuelles, dont :
    --version (stdout) :
      PROGRAM [(PROGRAM_GROUP)] VERSION.MINOR_VERSION[.REVISION]
      [SHORT COPYRIGHT

      Written by AUTHOR]
      PROGRAM est une string, pas le file name (argv[0])
    --help (stdout) :
      Usage: PROGRAM_FILE_NAME [OPTION]... FILE...
      Description

      Categorie 1 Options:
        -h, --help         description

      Categorie 2 Options:
        ...

      Eventuellement d'autres infos, comme signification d'human-based size, etc.

      Report bugs to: at@at.com
      PROGRAM home page: <http://www....>
      PROGRAM documentation page: <...>

C :
  - séparer TYPE et FONCTION par une newline
  - si ligne trop courte, continuer arguments d'une fonction sur même colonne :
    TYPE
    FONCTION(TYPE VAR, TYPE VAR,
             TYPE VAR)
  - newline avant && et ||

PAS TOUJOURS RESPECTE
Pas de tab, mais 2 espaces.
