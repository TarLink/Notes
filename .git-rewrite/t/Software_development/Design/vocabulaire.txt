
                 
   VOCABULAIRE   
                 

word                    #suite de caractères considérée comme une unité
metacharacter           #Pour Bash, caractère séparant des words : | & ; ( ) < >
control operator        #un ou plusieurs metacharacters exécutant une fonction
                        #de controle : || && & ; ;; | |& ( )
redirection operator    #un ou plusieurs metacharacters exécutant une 
                        #redirection, comme > ou >>
operator                #control ou redirection operator
token                   #word ou operator

expansion               #action de l'interpréteur (exemple : bash) qui change
susbtitution            #un word par un autre équivalent. Voir doc

déclarer               #Créer une variable (affectée ou non)
affecter                #Assigner une valeur à une variable
définir                    #Assigner une valeur pour la première fois à une 
                        #variable
initialiser             #Déclarer et définir une variable
lvalue                  #nom d'une variable, pouvant stocker une valeur, 
                        #équivalent à VAR.
rvalue                  #valeur d'une variable, ne pouvant pas stocker de valeur
                        #équivalent à VAL (temporaire, par opposition à VAR)

scope                   #portee d'une variable

blanks                  #espace ou horizontale tabulation   
whitespace              #espace, tabulation horizontale ou newline (tabulation
                        #verticale et formfeed non compris)
newline                 #fin d'une ligne. LF (\x0A) sous Unix et CR + LF (\x0D
line break              #+ \x0A) sous Windows. Dans les deux cas, est désignée
end-of-line (EOL)       #par \n

dotfile                 #fichier commencant par un point

arguments positionnels  #arguments passés à un script (que l'on renvoie avec
                        #$1, $2, ...)
option                  #argument positionnels permettant d'activer une option,
                        #commençant souvent par -, et suivi potentiellement par
                        #un autre argument de manière obligatoire.
flag                    #option ne devant pas être obligatoirement suivie d'un
switch                  #autre argument
opérande               #argument n'étant pas une option
mass-arguments          #opérandes dont le nombre peut être illimité
GNU-style long options  #option commençant par -- suivi par un mot
XF86-style long options #option commençant par - suivi d'un mot. A éviter, car
                        #empêche de rassembler ensemble plusieurs short 
                        #options, si mixed avec elles, car sinon ambiguité
short option            #option commençant par - suivi d'une lettre

job                     #process, ainsi que tous ses enfants, faisant partie du
                        #même process group:word

file descriptor         #Lien pointant un fichier, associé à tout fichier 
                        #ouvert pour chaque subshell.

batch mode              #Le batch mode est un mode où une commande ou une option
                        #prend ses arguments dans un fichier, ligne par ligne
                        #(la newline peut être \n ou null selon le cas)

pipeline                #simple commande et ses arguments ou suite de commandes
                        #reliées entre elles par des pipes

compound construct      #Structure conditionnelle, boucle

factory                 #Fonction, ou classe ayant une CLASSFK, renvoyant un 
                        #objet, en fonction des arguments passés.
callback                
signal_handler          #FUNCTOR ou FUNC_ADR, émis par un signal.
closure                 #functor qui, via des templates, bind, etc., n'a jamais
                        #besoin d'arguments lors de son invocation.
slot                    #exception-safe callback
handle                  #Classe imitant un pointeur, sans les problèmes de
smart pointer           #segfaults, etc. possibles
signature               #Type de la return value et des arguments d'un callback.
adaptor                 #Fonction modifiant la signature d'un callback (par 
                        #exemple boost::bind, etc.)

monadique               #Fonction ayant un seul argument
dyadique                #Fonction ayant deux arguments
arité                    #Nombre d'arguments d'une fonction

forward declaration     #Déclaration sans définition. Ex : pour les recursions ou les mutual references.
incomplete type         #Type déclaré mais pas encore défini. Par exemple : la définition d'une classe récursive utilisera
                        #une forward declaration d'elle même : il s'agira alors d'un incomplete type.
