
                  
   ANTIPATTERNS   
                  

ABSTRACTION_INVERSION   #Une INTERFACE implémente une FONCTION, mais la rend
==>                     #disponible que via une FONCTION_ENGLOBANTE qui rajoute
                        #des choses.
                        #Une SUBCLASSE désire utiliser la FONCTION seule et non
                        #la FONCTION_ENGLOBANTE, et donc la réimplémente dans
                        #sa propre interface. Cette nouvelle fonction appelle
                        #donc la FONCTION_ENGLOBANTE qui rappelle la FONCTION
                        #première, entraînant un gâchis de ressources et de 
                        #code.
                        #Exemple : fonctor en C++, nécessite création d'une
                        #          classe, pour réimplémenter le comportement
                        #          d'une fonction.

THE BLOB / THE GOD      #Une controller classe énorme qui fait tout, entourée de
CLASS / WINNEBAGO ==>   #quelques petites classe qui encapculent des data :
                        #  - manque de POO, plus procedural design que POO
                        #  - pas de modularité / extensibilité / problème de
                        #    maintenance
                        #  - les classes doivent être à la fois des data et des
                        #    méthodes
                        #La God Classe contient : 
                        #  - la plupart des méthodes utilisées par les autres
                        #    classes, et/ou :
                        #  - la plupart des data partagées
                        #Solution : enlever des modules cohérents du Blob, un à
                        #un.

LAVA FLOW / DEAD CODE   #Bouts de code gardés "au cas où", mais plus utilisés,
==>                     #qui encombrent le code (et surcharge la mémoire)

FUNCTIONAL DECOMPOSITION#L'ensemble des routines sont décomposées en une 
==>                     #multitude de mini-classes qui ont pour principale 
                        #fonction chacune d'effectuer une routine, ce qui 
                        #revient à ne pas faire de la POO, mais du langage
                        #procédural déguisé en classes.

SPAGHETTI CODE ==>      #Self-explanatory
