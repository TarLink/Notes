
                
   GRAPH_THEORY  
                



EDGE ==>                          #Link connecting 2 "nodes"/"vertices"/"points" (unique values) together.
                                  #Also called "arc"/"line"
                                  #"Loop": when both nodes are the same

PATH ==>                          #List of distinct connected edges
                                  #If the graph is directed, it must follow orientation

DISTANCE ==>                      #Can be:
                                  #  - number of edges of shortest path
                                  #  - sum of edges weights of shortest path

ORIENTATION ==>                   #Edge direction:
                                  #  - i.e. nodes are ordered or not
                                  #  - i.e. there is a start node ("parent") and an end node ("child")
                                  #  - called "arrow" then
                                  #"Directed path"/"dipath":
                                  #  - path where all edges have same orientation
                                  #"Directed" vs "undirected" graph:
                                  #  - when all|none edges are oriented
                                  #  - "oriented graph":
                                  #     - directed graph where, if multiple edges are allowed,
                                  #       they have the same orientation for a given pair of nodes

GRAPH ==>                         #Array of nodes and edges.

GRAPH ORDER ==>                   #Number of nodes
                                  #Can be "finite" or "infinite"
                                  #"Order-zero" graph:
                                  #  - when order is 0
                                  #  - can be allowed or not

GRAPH SIZE ==>                    #Number of edges
                                  #"Null"/"edgeless" graph:
                                  #  - when size is 0, i.e. no node is connected
                                  #"Complete" graph:
                                  #  - when size is maximum, i.e. all nodes are connected
                                  #  - "tournament": complete oriented graph

GRAPH DENSITY ==>                 #Number of edges / max possible number of edges
                                  #Is 0 for a null graph, 1 for a complete graph
                                  #Does not make sense if multiple edges are allowed
                                  #Max possible number of edges is:
                                  #  - size * (size - 1) / 2, for undirected graphs
                                  #  - size * (size - 1), for directed graphs
                                  #Called "upper density" when graph is infinite

DEGREE ==>                        #Number of edges of a given node
                                  #Also called "valency"
                                  #Can be 0, i.e. not be connected to any other nodes.
                                  #"indegree" vs "outdegree": same but depending on the edge orientation

MULTIPLE EDGES ==>                #When there can be multiple edges for the same set of nodes
                                  #Also called "parallel" edges
                                  #Types:
                                  #  - multiple edges and loops: "pseudographs"
                                  #  - multiple edges and no loops: "multigraphs"
                                  #  - single edges and no loops: "simple graph"

CYCLE ==>                         #Path where first node is also the last node.
                                  #Also called "closed walk"
                                  #Repetition:
                                  #  - "circuit":
                                  #     - when no edge is traversed twice
                                  #  - "simple cycle":
                                  #     - when no node nor edge is traversed twice
                                  #     - "directed cycle": if graph is directed
                                  #"Directed acyclic graph" (DAG):
                                  #  - directed graph with no directed cycle
                                  #  - its orientation is called "acyclic"
                                  #     - every graph can have an acyclic orientation

LABELING ==>                      #Assigning values to edges ("edge value") or nodes
                                  #"Weighted graph":
                                  #  - when all edges have a numerical value
                                  #"Coloring":
                                  #  - when adjacent nodes|edges have different labels

GRAPH COMBINATIONS ==>            #"Subgraph":
                                  #  - subset of a graph that is itself a graph
                                  #"Complement"/"inverse":
                                  #  - graph with same nodes, but invert edges (i.e. edges where there were none and vice-versa)
                                  #  - only for graphs with single edges
                                  #  - graphs with loops can invert them too

HYPEREDGE ==>                     #Link connecting 1-n "nodes"/"vertices"/"points" (unique values) together.
                                  #Is conceptually similar to a mathematical set.
                                  #Since it is a generalization of edges, most concepts of graphs/edges apply:
                                  #  - graph is called "hypergraph"
                                  #"Edge size":
                                  #  - number of nodes per edge
                                  #  - "k-uniform": when all edges have same size
                                  #"clutter"/"sperner family":
                                  #  - when max node degree is 0|1
                                  #  - i.e. no edge is a subset of another edge

PATH GRAPH ==>                    #Graph where nodes form a single sequence, i.e. all nodes (except ends) have degree 2.
                                  #Also called "linear graph"

[FLOW] NETWORK ==>                #Directed graph where edges have a flow:
                                  #  - it is a number
                                  #  - it can vary with time
                                  #  - "capacity": maximum flow per edge
                                  #Flow represents entropy that:
                                  #  - originates from a "source" node
                                  #  - goes through edges
                                  #     - edges must preserve the amount of flow
                                  #  - ends in a "sink" node
                                  #Also called "transportation network"

DISTANCE MATRIX ==>               #Matrix representing a graph's nodes distances from each other
                                  #Columns represent end node, rows start node
                                  #  - for undirected graphs:
                                  #     - each node is both end and start
                                  #     - i.e. matrix is symmetric

TOPOLOGICAL SORTING ==>           #Putting all the nodes of a directed acyclic graph in a list, where each parent node
                                  #comes before its child.
                                  #If a directed graph:
                                  #  - has no cycle, then it has at least one topological sorting
                                  #  - has at least one topological sorting, then it has no cycle
                                  #Algorithms:
                                  #  - kahn's algorithm
                                  #     - steps:
                                  #        - for each node with indegree 0:
                                  #           - push node to final list
                                  #           - remove any edge where this node is the start node
                                  #        - repeat
                                  #     - time complexity: O(n + e), where n is graph order and e is graph size
                                  #  -

SEARCH ALGORITHMS ==>             #For an unordered graph:
                                  #  - "search key": arbitraty starting node of search
                                  #  - breadth-first search (BFS):
                                  #     - search one level at a time, i.e.:
                                  #        - start at search key
                                  #        - visit each node with distance 1, then 2, etc.
                                  #  - depth-first search (DFS):
                                  #     - search one path at a time (until cycle or dead-end), i.e.:
                                  #        - start at search key
                                  #        - visit node
                                  #        - if:
                                  #           - it has a leftmost non-visited child, repeat with that child
                                  #           - it is not the search key, repeat with parent ("backtrack")
                                  #           - it is the search key, stop
                                  #     - time complexity: O(n + e), where n is graph order and e is graph size
