
                
   GRAPH_THEORY  
                



EDGE ==>                          #Link connecting 2 "nodes"/"vertices"/"points" (unique values) together.
                                  #Also called "arc"/"line"
                                  #"Loop": when both vertices are the same

PATH ==>                          #List of distinct connected edges
                                  #If the graph is directed:
                                  #  - it must follow orientation
                                  #  - parent/child relationship is recursively "ancestors" and "descendants"

DISTANCE ==>                      #Can be:
                                  #  - number of edges of shortest path
                                  #  - sum of edges weights of shortest path

ORIENTATION ==>                   #Edge direction:
                                  #  - i.e. vertices are ordered or not
                                  #  - i.e. there is a start vertex ("parent") and an end vertex ("child")
                                  #  - called "arrow" then
                                  #"Directed path"/"dipath":
                                  #  - path where all edges have same orientation
                                  #"Directed" vs "undirected" graph:
                                  #  - when all|none edges are oriented
                                  #  - "oriented graph":
                                  #     - directed graph where, if multiple edges are allowed,
                                  #       they have the same orientation for a given pair of vertices

GRAPH ==>                         #Array of vertices and edges.

GRAPH ORDER ==>                   #Number of vertices
                                  #Can be "finite" or "infinite"
                                  #"Order-zero" graph:
                                  #  - when order is 0
                                  #  - can be allowed or not

GRAPH SIZE ==>                    #Number of edges
                                  #"Null"/"edgeless" graph:
                                  #  - when size is 0, i.e. no vertex is connected
                                  #"Complete" graph:
                                  #  - when size is maximum, i.e. all vertices are connected
                                  #  - "tournament": complete oriented graph

GRAPH DENSITY ==>                 #Number of edges / max possible number of edges
                                  #Is 0 for a null graph, 1 for a complete graph
                                  #Does not make sense if multiple edges are allowed
                                  #Max possible number of edges is:
                                  #  - size * (size - 1) / 2, for undirected graphs
                                  #  - size * (size - 1), for directed graphs
                                  #Called "upper density" when graph is infinite

DEGREE ==>                        #Number of edges of a given vertex
                                  #Also called "valency"
                                  #Can be 0, i.e. not be connected to any other vertices.
                                  #"indegree" vs "outdegree":
                                  #  - same but depending on the edge orientation
                                  #  - "source": when indegree is 0
                                  #  - "sink": when outdegree is 0
                                  #Called "branching factor" in trees

MULTIPLE EDGES ==>                #When there can be multiple edges for the same set of vertices
                                  #Also called "parallel" edges
                                  #Types:
                                  #  - multiple edges and loops: "pseudographs"
                                  #  - multiple edges and no loops: "multigraphs"
                                  #  - single edges and no loops: "simple graph"

CONNECTIVITY ==>                  #A vertex is:
                                  #  - "reachable" from another vertex if there is a path to it.
                                  #  - "adjacent" to another vertex if it shares an edge
                                  #A path is:
                                  #  - "incident" to another edge if it shares a vertex
                                  #  - "incident" to a vertex if it is one its vertices
                                  #"Connected" graph|component:
                                  #  - when no vertex is unreachable
                                  #  - graph with order 1 is connected, but with order 0 is not
                                  #  - for directed graphs:
                                  #     - is "strongly" connected / "diconnected" when orientation
                                  #       is taking into account, "weakly" connected otherwise
                                  #"Cut":
                                  #  - removing 1-n vertices|edges to split a connected graphs into several ones
                                  #  - can be:
                                  #     - "edge cut"
                                  #     - "vertex cut|separator"
                                  #  - "cut size":
                                  #     - number of vertices|edges cut
                                  #     - can be weighted if vertices|edges have weight
                                  #  - "minimum|maximum k-cut":
                                  #     - cut using the least|most number of vertices|edges possible, to split into
                                  #       k connected graphs
                                  #     - "minimum|maximum cut": when k is 2
                                  #"[Vertex|edge] connectivity":
                                  #  - size of the minimum cut
                                  #  - "k-[vertex|edge-]connected":
                                  #     - when connectivity is k
                                  #     - can also be called "biconnected", "triconnected", etc.
                                  #  - "maximum connectivity":
                                  #     - when connectivity is same as minimum degree
                                  #  - "semi-hyper connectivity":
                                  #     - when doing any minimum cut results in only one more disconnected graph
                                  #  - "super connectivity":
                                  #     - when doing any minimum cut results in only one more disconnected graph of order 1
                                  #  - "hyper connectivity":
                                  #     - when doing all minimum cuts results in only one more disconnected graph of order 1
                                  #"Bridge":
                                  #  - cut edges of a 1-connected graph
                                  #  - opposite is "bridgeless"
                                  #"Partition":
                                  #  - finding subgraphs with minimal connectivity between them
                                  #  - "uniform partition": minimizing size difference between subgraphs

CYCLE ==>                         #Path where first vertex is also the last vertex.
                                  #Also called "closed walk"
                                  #Repetition:
                                  #  - "circuit":
                                  #     - when no edge is traversed twice
                                  #  - "simple cycle":
                                  #     - when no vertex nor edge is traversed twice
                                  #     - "directed cycle": if graph is directed
                                  #"Directed acyclic graph" (DAG):
                                  #  - directed graph with no directed cycle
                                  #  - its orientation is called "acyclic"
                                  #     - every graph can have an acyclic orientation

TREE ==>                          #Directed acyclic graph that is connected.
                                  #As a consequence:
                                  #  - every pair of vertices is connected by exactly one path.
                                  #  - connectivity is 1

ROOT ==>                          #In a directed acyclic graph, vertex which has no parent.
                                  #

ARBORESCENCE ==>                  #Directed acyclic graph with a "root":
                                  #  - i.e. a vertex where

LABELING ==>                      #Assigning values to edges ("edge value") or vertices
                                  #"Weighted graph":
                                  #  - when all edges have a numerical value
                                  #"Coloring":
                                  #  - when adjacent vertices|edges have different labels

GRAPH COMPARISONS ==>             #"Isomorphism":
                                  #  - two graphs having the same edges:
                                  #     - including edge values ("edge-preserving")
                                  #     - i.e. shape of the graph is conceptually the same
                                  #     - can include vertex values or not ("label-preserving")
                                  #  - "homeomorphism":
                                  #     - when two graphs have a common (i.e. isomorphic) subdivision
                                  #  - "homomorphism":
                                  #     - function (G)->G2 where G and G2 are isomorphic
                                  #  - "canonalization":
                                  #     - function (G)->G2 where any isomorphic G returns the same G2

GRAPH COMBINATIONS ==>            #"Subgraph":
                                  #  - subset of a graph that is itself a graph
                                  #  - "supergraph" is opposite
                                  #"Complement"/"inverse":
                                  #  - graph with same vertices, but invert edges (i.e. edges where there were none and vice-versa)
                                  #  - only for graphs with single edges
                                  #  - graphs with loops can invert them too
                                  #"Forest":
                                  #  - several disconnected trees

GRAPH OPERATIONS ==>              #"Transpose|converse|reverse graph":
                                  #  - inverting directions of a directed graph
                                  #"Vertex contraction|identification":
                                  #  - merging two vertices, i.e. into one vertex that has edges of both
                                  #  - when both vertices have an edge to a common third vertex, this can either
                                  #    produce multiple edges, or be reduced to a single edge
                                  #  - "edge contraction":
                                  #     - when the two vertices are adjacent
                                  #  - "smoothing":
                                  #     - doing several vertex contraction on a graph
                                  #     - "path contraction":
                                  #        - smoothing a path until it becomes single edge
                                  #        - the edges of the contracted vertices can either be eliminated or added to
                                  #          one of the end vertices
                                  #"Vertex cleaving|splitting":
                                  #  - inverse of vertex contraction
                                  #  - split vertices can share same edges or not
                                  #  - "subdivision"/"expansion":
                                  #     - doing several vertex splitting on a graph

HYPEREDGE ==>                     #Link connecting 1-n vertices together.
                                  #Is conceptually similar to a mathematical set.
                                  #Since it is a generalization of edges, most concepts of graphs/edges apply:
                                  #  - graph is called "hypergraph"
                                  #"Edge size":
                                  #  - number of vertices per edge
                                  #  - "k-uniform": when all edges have same size
                                  #"clutter"/"sperner family":
                                  #  - when max vertex degree is 0|1
                                  #  - i.e. no edge is a subset of another edge

PATH GRAPH ==>                    #Graph where vertices form a single sequence, i.e. all vertices (except ends) have degree 2.
                                  #Also called "linear graph"

[FLOW] NETWORK ==>                #Directed graph where edges have a flow:
                                  #  - it is a number
                                  #  - it can vary with time
                                  #  - "capacity": maximum flow per edge
                                  #Flow represents entropy that:
                                  #  - originates from a "source" vertex
                                  #  - goes through edges
                                  #     - edges must preserve the amount of flow
                                  #  - ends in a "sink" vertex
                                  #Also called "transportation network"

DISTANCE MATRIX ==>               #Matrix representing a graph's vertices distances from each other
                                  #Columns represent end vertex, rows start vertex
                                  #  - for undirected graphs:
                                  #     - each vertex is both end and start
                                  #     - i.e. matrix is symmetric

TOPOLOGICAL SORTING ==>           #Putting all the vertices of a directed acyclic graph in a list, where each parent vertex
                                  #comes before its child.
                                  #If a directed graph:
                                  #  - has no cycle, then it has at least one topological sorting
                                  #  - has at least one topological sorting, then it has no cycle
                                  #Algorithms:
                                  #  - kahn's algorithm
                                  #     - steps:
                                  #        - for each vertex with indegree 0:
                                  #           - push vertex to final list
                                  #           - remove any edge where this vertex is the start vertex
                                  #        - repeat
                                  #     - time complexity: O(order + size)
                                  #        - because each vertex and each edge is visited once
                                  #     - space complexity: O(order)
                                  #        - because must store which vertex have been visited

SEARCH ALGORITHMS ==>             #For an unordered graph:
                                  #  - "search key": arbitraty starting vertex of search
                                  #  - breadth-first search (BFS):
                                  #     - search one level at a time, i.e.:
                                  #        - start at search key
                                  #        - visit each vertex with distance 1, then 2, etc.
                                  #  - depth-first search (DFS):
                                  #     - search one path at a time (until cycle or dead-end), i.e.:
                                  #        - start at search key
                                  #        - visit vertex
                                  #        - if:
                                  #           - it has a leftmost non-visited child, repeat with that child
                                  #           - it is not the search key, repeat with parent ("backtrack")
                                  #           - it is the search key, stop
                                  #     - time complexity: O(order + size)
