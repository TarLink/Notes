
            
   JSON-PTR  
            



ALTERNATIVES ==>                  #  - flitbit json-ptr (preferred): good features, faster, supports URI fragment
                                  #  - manuelstofer json-pointer: node.js only, good features
                                  #  - janl node-jsonpointer: node.js only, only few features
                                  #  - alexeykuzmin jsonpointer.js: very few features

VERSION ==>                       #1.0.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PARSING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JSON POINTER FORMAT ==>           #For:
                                  #  - get|set|has(): either JSON string or URI fragment (if starts with #)
                                  #  - list|flatten|map(): JSON string if last argument false (def), URI fragment if true
                                  #  - visit(): JSON string
                                  #  - decode|encode[TYPE](): either one without TYPE or specific one
                                  #    if TYPE Pointer or UriFragmentIdentifier
                                  #Every method throws if format|syntax is wrong
PTR                               #JSON pointer

ESCAPING|UNESCAPING ==>           #I.e. ~1 <-> / and ~0 <-> ~
                                  #For URI fragment, also decode|encodeURIComponent()
                                  #Done by all methods, including decode|encode[TYPE]()

JSONPTR.decode[TYPE](PTR)->STR_ARR#Returns JSON pointer individual parts without slash delimiters.
                                  #Empty ARR for root JSON pointer "".
JSONPTR.encodeTYPE(STR_ARR)->PTR  #Inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GET/SET            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JSNPTR.get(OBJ,PTR)->VAL|undefined#undefined means either that key does not exist, or that value === undefined
JSONPTR.has(OBJ, PTR)->BOOL       #Checks that key exists and value !== undefined
JSONPTR.set(OBJ, PTR, VAL[, BOOL])#VAL2 is previous value.
 ->VAL2                           #If key does not exist or its value is undefined:
                                  #  - do nothing if false (def)
                                  #  - or create paths and set VAL if true.
                                  #Throws if PTR is ""

JSONPTR.create(PTR)->JPTR         #Similar to JSONPTR but faster, and no set()
JPTR.get(OBJ)->VAL                #Like JSONPTR.get()
JPTR.has(OBJ)->BOOL               #Like JSONPTR.has()
JPTR.path STR_ARR                 #Like JSONPTR.decode()
JPTR.pointer PTR
JPTR.uriFragmentIdentifier PTR    #Like JSONPTR.encodeTYPE()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          FLATTENING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JSONPTR.list(OBJ[,BOOL])->ARR_OBJ2#Returns each OBJ member (recursively) as OBJ2: value VAL, pointer PTR
JSONPTR.flatten|map
 (OBJ[, BOOL])->OBJ2|MAP          #Returns each OBJ member (recursively) as OBJ2|MAP.PTR VAL
JSONPTR.visit(OBJ, FUNC(PTR, VAL))#Fires FUNC for each OBJ member (recursively)
