
        
   JSON  
        



ALTERNATIVES ==>                                #JSON (prefered): universal, simple, fast
                                                #Based on JSON:
                                                #  - JSON5: adds ES5 syntax, i.e. comments, unquoted VAR, trailing commas,
                                                #    multiline string, NaN|Inf
                                                #  - HJSON: adds comments, unquoted VAR|STR, no|trailing commas,
                                                #    multiline string, NaN|Inf, DATE
                                                #  - CSON: adds CoffeeScript syntax, i.e. indentation, comments, unquoted VAR,
                                                #    no commas, multiline string
                                                #  - ESON: interesting concept of pluggable special types for human-friendly
                                                #    types (time, dimensions, includes, ENVVAR|args), but not maintained
                                                #See also YAML and its alternatives, TOML and its alternatives
                                                #see also table-like formats (e.g. CSV)

small: 1000000, big: 20000

JSON: smallParse 950, bigParse 850, smallSerialize 950, bigSerialize 650
JSON5: smallParse 3900, bigParse 11000, smallSerialize 3400, bigSerialize 3700
HJSON:


STANDARDS ==>                                   #ECMA-404
                                                #RFC 7159: more detailed

I-JSON ==>                                      #RFC 7493
                                                #I-JSON ("Internet JSON"), restrictive version of JSON for maximum
                                                #interoperability between parsers.

NOTATION ==>                                   !#Means recommended but implementation-specific
                                              !!#Means recommended but implementation-specific, and required by I-JSON

GOAL ==>                                        #Serialization format based on JavaScript
                                                #Extension: .json
                                                #MIME type: application/json


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SYNTAX             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CASE ==>                                        #Case-sensitive

WHITESPACES ==>                                 #Is space, tab, CR or LF
                                                #Whitespaces between tokens are ignored
                                                
ENCODING ==>                                  !!#UTF-8
                                               !#Can also be UTF-16 or UTF-32.
                                                #No byte-order mark
                                                
LIMITS ==>                                     !#Implementation-specific
                                               !#On depth level, input size, STR sixe, ARR|OBJ length, key length


{"VAR": VAL}                                    #OBJ
                                                #Must double-quote "VAR"
                                                #No trailing commas
                                                #VAR: same restrictions as STR
                                              !!#No duplicate keys
                                              !!#Is unordered

[VAL,...]                                       #ARR
                                                #No trailing commas

"..."                                           #STR.
                                                #No single quotes
                                                #Any Unicode supported unescaped except " \ and U+0000-U+001F (\-escaped)
                                                #(includes newline)
                                                #  - U+2028|2029 (line separators) allowed unquoted in JSON and ES5, but not in ES3
                                              !!#  - when used in VAR, must be normalized for duplication check
                                                #Can use backslash sequences (less than JavaScript):
                                                #  \", \\, \b, \f, \n, \r, \t, \uXXXX, \/
                                              !!#  \uXXXX must be valid codepoint

[-]NUM[.NUM][e|E+|-NUM]                         #FLOAT.
                                              !!#Double floats.
                                                #No leading comma (e.g. ".7")
                                                #No +NUM
                                                #No Infinity|NaN
                                                #No leading zero (e.g. "07")
                                                #Only base 10
                                                #Not specified:
                                                #  - overflow, underflow, rounding
                                                #  - whether can normalize NUM <-> NUM.0 (INT vs FLOAT)
                                                #  - whether can normalize 0 <-> -0

true|false                                      #BOOL

null                                            #


TOP-LEVEL ==>                                 !!#OBJ|ARR

RECURSION ==>                                   #Not handled. Throw exceptions.


COMPARISON WITH JAVASCRIPT ==>                  #No undefined, FUNC or native objects (besides OBJ|ARR)
                                                #Can however support others:
                                                #  - if toJSON() defined:
                                                #     - DATE.toJSON()->DATE.toISOString()
                                              !!#       DATE must follow ISO8601/RFC3339, which DATE.toISOString() does
                                              !!#  - binary should be base64 STR (base64url variant)
                                                #  - by calling toString() prior
                                                #  - via JSON.stringify|parse FUNC
                                                #Does not handle any ES6-specific syntax, like { [STR]: VAL }, { VAR }, SYM, etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        IMPLEMENTATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JSON.*                                          #Native in JavaScript

JSON.parse('JSON'[, FUNC(KEY, 'VAL')[->VAL]])   #From 'JSON' to JavaScript.
                                                #FUNC():
                                                #  - postprocessing
                                                #  - from children to parent
                                                #     - ends with root object: key '', this {'': OBJ}
                                                #  - this is current [sub-]object
                                                #  - returning undefined omits property
                                                #Can throw SyntaxError.
JSON.stringify(VAL[, VAL2[, STR|NUM]])          #From JavaScript to 'JSON'
                                                #Non-supported vals are omitted.
                                                #If VAL.toJSON() exist, will use VAL.toJSON() instead of VAL.
                                                #VAL2 can be:
                                                #  - FUNC(KEY, VAL)[->'VAL']: same as JSON.parse() but:
                                                #      - preprocessing
                                                #      - goes from parent to children
                                                #  - KEY_ARR:
                                                #      - same as FUNC(KEY, VAL) { if (KEY_ARR.includes(KEY)) { return VAL; }}
                                                #      - is independant of property depth
                                                #STR|NUM adds newlines and indents with STR or NUM spaces.
