
                       
   JSON_CANONICAL_FORM  
                       



ALTERNATIVES ==>                  #  - JSON canonical form

STANDARD ==>                      #RFC draft-staykov-hu-json-canonical-form-00

CANONICAL ==>                     #Reducing possible different variants of same data
                                  #Goal is better comparison, e.g. for diff, or need to use as key (e.g. caching key)

--- JSON canonical form ---

ENCODING ==>                      #UTF-8

WHITESPACES|NEWLINES ==>          #Must not be used between tokens

OBJ                               #Must be lexicographically sorted, i.e. based on Unicode codepoint value

[-]DIGIT.NUME[-]NUM               #For all non-integer NUMs


--- son ---

ENCODING ==>                      #UTF-8

WHITESPACES|NEWLINES ==>          #Must not be used between tokens

OBJ                               #Must be lexicographically sorted
                                  #No duplicated keys

[-]NUM[.NUM]                      #No exponent
                                  #No trailing zeros
                                  #No -0

STR                               #No \/
                                  #\uXXXX: only for U+0000-U+001F, and if not one of \b \t \n \f \r


--- json-stable-stringify ---

STRINGIFY(VAL[, OPTS])
OPTS:
  - cycle BOOL (def: false): handle circular refs
  - replacer|space: like JSON.stringify() arguments

WHITESPACES|NEWLINES ==>          #Must not be used between tokens

OBJ                               #Must be lexicographically sorted

CIRCULAR REFS ==>                 #Replaced by '__cycle__'

toJSON(): handled
