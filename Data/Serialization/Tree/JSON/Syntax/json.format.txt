
        
   JSON  
        



ALTERNATIVES ==>                                #  - JSON: universal, simple, fast
                                                #  - CSON: like JSON, but with indentation instead, and comments
                                                #  - JSON5: like JSON, but with ES5 syntax, including comments, unquoted VAR,
                                                #    trailing commas
                                                #  - ESON: interesting concept of pluggable special types for human-friendly
                                                #    types (time, dimensions, includes, ENVVAR|args), but not maintained
                                                #  - YAML: featureful, slower, more human-friendly, many types, references
                                                #  - TOML: simple and human-friendly, not fit for complex data
                                                #  - INI: simplistic, but very few features and not standardized
                                                #  - XML: very featureful for query|transformation, strongly typed, very complex

STANDARDS ==>                                   #RFC 7159 and ECMA-404
                                               !#This notation means recommended but implementation-specific

GOAL ==>                                        #Serialization format based on JavaScript
                                                #Extension: .json
                                                #MIME type: application/json


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SYNTAX             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CASE ==>                                        #Case-sensitive

WHITESPACES ==>                                 #Is space, tab, CR or LF
                                                #Whitespaces between tokens are ignored
                                                
ENCODING ==>                                   !#UTF-8 (def), UTF-16 or UTF-32.
                                                #No byte-order mark
                                                
LIMITS ==>                                     !#Implementation-specific
                                               !#On depth level, input size, STR sixe, ARR|OBJ length, key length
                                               

{"VAR": VAL}                                    #OBJ
                                                #Must double-quote "VAR"
                                                #No trailing commas
                                                #VAR: same restrictions as STR
                                               !#No duplicate keys
                                               !#Is unordered 

[VAL,...]                                       #ARR
                                                #No trailing commas

"..."                                           #STR.
                                                #No single quotes
                                                #Any Unicode supported unescaped except " \ and U+0000-U+001F (\-escaped) 
                                                #(includes newline)
                                                #  - U+2028|2029 (line separators) allowed in JSON and ES5 but not in ES3
                                               !#  - when used in VAR, must be normalized for duplication
                                                #Can use backslash sequences (less than JavaScript):
                                                #  \", \\, \b, \f, \n, \r, \t, \uXXXX, \/
                                               !#  \uXXXX must be valid codepoint

[-]NUM[.NUM][e|E+|-NUM]                         #FLOAT.
                                               !#Double floats.
                                                #No leading comma (e.g. ".7")
                                                #No +NUM
                                                #No Infinity|NaN
                                                #No leading zero (e.g. "07")
                                                #Only base 10

true|false                                      #BOOL

null                                            #

RECURSION ==>                                   #Not handled. Throw exceptions.


COMPARISON WITH JAVASCRIPT ==>                  #No undefined, FUNC or native objects (besides OBJ|ARR)
                                                #Can however support others:
                                                #  - if toJSON() defined:
                                                #     - DATE.toJSON()->DATE.toISOString()
                                                #  - by calling toString() prior
                                                #  - via JSON.stringify|parse FUNC
                                                #Does not handle any ES6-specific syntax, like { [STR]: VAL }, { VAR }, SYM, etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        IMPLEMENTATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JSON.*                                          #Native in JavaScript

JSON.parse('JSON'[, FUNC(KEY, 'VAL')[->VAL]])   #From 'JSON' to JavaScript.
                                                #FUNC():
                                                #  - postprocessing
                                                #  - from children to parent
                                                #     - ends with root object: key '', this {'': OBJ}
                                                #  - this is current [sub-]object
                                                #  - returning undefined omits property
                                                #Can throw SyntaxError.
JSON.stringify(VAL[, VAL2[, STR|NUM]])          #From JavaScript to 'JSON'
                                                #Non-supported vals are omitted.
                                                #If VAL.toJSON() exist, will use VAL.toJSON() instead of VAL.
                                                #VAL2 can be:
                                                #  - FUNC(KEY, VAL)[->'VAL']: same as JSON.parse() but:
                                                #      - preprocessing
                                                #      - goes from parent to children
                                                #  - KEY_ARR:
                                                #      - same as FUNC(KEY, VAL) { if (KEY_ARR.includes(KEY)) { return VAL; }}
                                                #      - is independant of property depth
                                                #STR|NUM adds newlines and indents with STR or NUM spaces.
