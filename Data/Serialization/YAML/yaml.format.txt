
          
   YAML   
          



Version: 1.2
Extension: .yml, .yaml
Serialization format, concurrent to JSON:
  - JSON superset
  - more human-friendly, indentation-based, comments
  - more featureful, i.e. also more complex and much slower (around 4 times)
  - can encode many arbitrary|native types (including as object keys): string, boolean, int, float, null, object, array, pairs, sets, unordered maps, date, binary, (with js-yaml) undefined, function, regex, custom types
  - can use references, including circular
  - document-streaming-friendly
  - conceptually close to Python, not to JavaScript

Unicode, any encoding
Newline is CR or LF or CRLF
Whitespace is space or tab

Case sensitive

Nested levels:
  - i.e. newline + indentation
  - no tabs, only space
  - any number of spaces, even if not consistent
  - must be done on new ARR|OBJ
     - exception: newline optional on new OBJ inside ARR
        - VAR: VAL or ? VAR
           ...
        same as
        - 
          VAR: VAL or ? VAR
          ...
      - other exception: indentation optional on new ARR inside OBJ
         VAR: or ? VAR
         - VAL
         ...
         same as 
         VAR: or ? VAR 
           - VAL

VAR: VAL
...
Is OBJ
TYPE !!map
Mandatory space after colon, unless VAR " quoted or ' quoted
VAR, when behaves like any STR value:
  - can be " quoted, ' quoted or unquoted
  - but has to use ? VAR alternate syntax for multiline 

? VAR
: VAL
...
Is alternate syntax for OBJ
     - ? must be followed by space
     - : VAL must be on next line, same indentation
     - : VAL is optional (def: null)
Allows VAR to be any VAL, any type

- VAL
...
Is ARR
TYPE !!seq

{VAR: VAL,...} and [VAL,...]
Is OBJ and ARR alternate syntax ("flow style") as opposed to normal ARR|OBJ syntax ("block style"):
  - can embed flow style inside block style, but not inverse.
  - the indentation/whitespaces rules for OBJ|ARR follow JSON not YAML, with exceptions:
     - can omit {} inside flow style if only one VAR
     - can use trailing commas

? VAR
...
Is a set, i.e. like OBJ (including unordered and no duplicate keys) with no values
TYPE !!set
Must use explicit typecast, otherwise interpreted as !!map

- VAR: VAL
...
Is an ordered map or is pairs. I.e is ordered like an ARR but has key-value mapping like an OBJ. Ordered maps do not allow dullicate keys, pairs do.
TYPE !!omap and !!pairs
Must use explicit typecast, otherwise interpreted as !!map

INT
Can use octal 0... or hex 0x... 0X... or binary 0b...
Can be base 60 ...:... (: is base delimiter, can be used several times)
Precision is implementation-specific, but at least four bytes and signed
TYPE !!int

FLOAT
Can use exponent
Can be [-].inf or nan (case-insensitive)
Can use base 60 like INT
Precision is implementation-specific, but at least single floats
TYPE !!float 

INT or FLOAT
_ (with no space after) are ignored (e.g. used for thousands separator)

BOOL
case-insensitive
true|false on|off yes|no y|n
TYPE !!bool

NULL
Is null (case-insensitive) or ~ or nothing
TYPE !!null 

!!js/undefined VAL
Is undefined. Can be any scalar VAL

function [FUNC](...) {...}
Must be transtyped with !!js/function from a STR

REGEXP or /REGEXP/FLAGS
Must be transtyoed with !!js/regexp from a STR

STR:
  - TYPE !!str
  - syntax:
     - " quoted: until next unescaped "
     - ' quoted: until next unescaped '
     - unquoted:
         - until next non-indented line
         - has lowest transtyping priority, i.e. can be interpreted as non-STR if ambiguity with other type, e.g. NUM|BOOL or OBJ (colon) or ARR (brackets) or NULL or DATETIME, so sometimes need to explicitly transtype
         - can use | or |+ or |- ("literal styles") or > or >+ or >- ("folded styles") (ignored)
            - must be the only chars in first line of STR value, except whitespaces
                 - error if followed by any non-whitespace in first line
    - escaping:
         - for " quoted, need to escape " or \ with \ and can also use backslash sequences: \0 \a \b \t \n \v \f \r \e \xNN \uNNNN \UNNNNNNNN and also more exotic \/ (same as /) \N (U-0085 NEXT_LINE) \_ (U-00a0 NO_BREAK_SPACE) \L (U-2028 LINE_SEPARATOR) \P (U-2029 PARAGRAPH_SEPARATOR)
         - for ' quoted, need to escape ' with another '
         - for unquoted, no need to escape
         - Unicode chars that are non-printable must be in " quoted and backslash-escaped, i.e. control chars (except \t \n \r), DEL and surrogate block (U-D800 to U-DFFF, U-FFFE, U-FFFF)
    - newlines:
         - if | or |- or |+ kept, otherwise (including > or >+ or >-) replaced with single space
            - if escaped and " quoted or ' quoted, ignored instead (also escapes following blank lines)
            - for lines with indentation additional, if > or >+ or >-, leading and trailing newlines kept instead 
         - blank lines (with or without whitespaces) replaced by newline 
             - except last ones if unquoted, unless |+ or >+
             - if escaped and " quoted or ' quoted, ignores current and following blank lines instead
         - appends one newline to STR if |+ or | or >+ or >
    - whitespaces:
         - leading ones on first line ignored for unquoted
         - leading ones on non-first line ignored for all
              - except for | or |+ or |- or > or >+ or >- where indentation additional (i.e. more than initial line) is kept
                  - initial line indentation is guessed, but can be specified with |NUM or |NUM+ or |NUM- or >NUM or >NUM+ or >NUM- (if initial line also has some additional indentation)
              - unless escaped for " quoted or ' quoted (escape all the following indentation)
         - trailing ones ignored for unquoted
              - except for | or |+ or |- or > or >+ or >-

DATE[TIME]
YYYY-MM-DD[THH:MM:SS[TZ]] (can add space instead of T, or before timezone)
TYPE !!timestamp

BASE64_STR
Binary type. Uses standard base64 (RFC 4648)
TYPE !!binary
Must explicitely transtype, otherwise recognized as !!str

&REF VAL
Like VAL, but also assigns it to REF ("alias")
If VAL OBJ|ARR, must be on line before
If multiline STR, must be first on the first line
Can be circular
Has to be used by a *REF
Can be defined several times (last one wins)

*REF
Reuse REF ("anchor"), by reference (when language permits it)
Must be after &REF 

<<: OBJ[_ARR]
Merge OBJ with siblings. Has less priority than siblings
If OBJ_ARR, applied in turns, i.e. first ones have priority 
Often used with *REF
<< actually has special type !!merge

=: VAL
Same as VAL
= actually has type !!value

'!': '!...'
'&': VAL
'*': VAL
Standardized way to serialize !... or &VAL or *VAL
Is just serialization, i.e. as is is just like an OBJ
Must explicitely transtype, otherwise transtyped as !!map
TYPE !!yaml

@...
`...
Both are reserved, so must be escaped|quoted

Blank lines are ignored (except inside STR)

#comment
On its own line, or at end of line

---
First line of a document, optional if only one document in the file.
Also allows to separate several documents in one file, e.g. for streaming

...
Last line of a document, optional.
There can be directives or comments until next ---

%DIRECTIVE: VAL
Directices to parser
Must be before --- on previous line, or after --- on same line
Can be:
  - %YAML: VERSION
  - %TAG: see below

!!TYPE
Same as !<tag:yaml.org,2002:TYPE>

%TAG !VAL! VAL2
Make !VAL![...] being same as !<VAL2[...]>

!<URI>
Transtype what follows
URI:
  - uses tag: URI scheme, usually tag:DOMAIN,YEAR:TYPE
  - core is tag:yaml.org,2002
Spec divides types into three "kinds": scalar, sequences (ARR-like), mappings (OBJ-like)
TYPE must be [[:alnum:]-]

!
Same as !!map or !!seq or !!str

!TYPE
Same as !<tag: local:TYPE>

Schemas:
  - set of supported TYPEs
  - can be:
      - failsafe (minimalist): !!map !!seq !!str
      - JSON: also !!null !!bool !!int !!float, but only in their JSON form
      - core: also allows alternative forms of null|BOOL|INT|FLOAT

In JavaScript, with js-yaml:
  - OBJ's VAR always transtyped to STR
  - !!set transtyped to OBJ with null values
  - !!omap transtyped to ARR containing single-keyed OBJ
  - !!pairs transtyped to ARR containing [KEY, VAL] children
  - !!binary transtyed to INT_ARR (0-255)
  - !!timestamp transtyped to DATE
  - only supported by js-yaml:
      - !!js/regexp transtyped to REGEXP (only supports g|m|i flags)
      - !!js/undefined transtyped to undefined
      - !!js/function transtyped to FUNC (does not support ES6 syntax)
  - not supported:
      - using &REF or *REF on OBJ's VAR
      - BOOL on|off yes|no y|n
      - !!merge, but << is supported
      - !!value and = key
      - !!yaml
  - not an error:
      - &REF can be defined without being referenced

In JSON: like JavaScript but also:
  - not allowed: infinity, nan
  - no recursion
  - no undefined, FUNC, REGEXP, DATE





js-yaml

Version 3.8.2. Supports YAML 1.2
CLI, browser or Node.js

YAML.load|safeLoad("YAML"[, OPTS])->OBJ
Multi-documents files will throw error
OPTS:
  - filename "FILE": for exception stack trace
  - onWarning(???): called on error. Def: throw YAMLException
  - schema VAL: YAML schema among FAILSAFE_SCHEMA, JSON_SCHEMA (less restrictive than spec, i.e. allows some non-JSON forms of null|INT|FLOAT|BOOL), CORE_SCHEMA, DEFAULT_SAFE_SCHEMA (def with safeLoad(), includes all standard YAML), DEFAULT_FULL_SCHEMA (def with load(), also includes !!js/undefined|regexp|function)
  - json BOOL (def: false): ignore duplicate keys instead of throwing error
