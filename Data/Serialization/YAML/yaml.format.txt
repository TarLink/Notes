
        
   YAML  
        



VERSION ==>                       #1.2
                                  #Extension: .yml, .yaml

SUMMARY ==>                       #Serialization format, concurrent to JSON:
                                  #  - JSON superset
                                  #  - more human-friendly, indentation-based, comments
                                  #  - more featureful, i.e. also more complex and much slower (around 4 times)
                                  #  - can encode many arbitrary|native types (including as object keys):
                                  #     - string, boolean, int, float, null, object, array
                                  #     - date, binary
                                  #     - pairs, sets, unordered maps
                                  #     - (with js-yaml) undefined, function, regex, custom types
                                  #  - can use references, including circular
                                  #  - document-streaming-friendly
                                  #  - conceptually close to Python, not to JavaScript

NOTATION ==>                    +##js-yaml-specific
                                -##Not supported by js-yaml
                                |##Not allowed in JSON:
                                |##  - for all, could write custom JSON.stringify() to serialize to STR though


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         BASIC SYNTAX          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ENCODING ==>                      #Unicode, any encoding

WHITESPACES ==>                   #Newline: CR or LF or CRLF
                                  #Whitespace: space or tab
                                  #Blank lines are ignored (except inside STR)

CASE ==>                          #Case sensitive

NESTED LEVELS ==>                 #Is newline + indentation:
                                  #  - no tabs, only spaces
                                  #  - any number of spaces, even if not consistent
                                  #Must be done before any new ARR|OBJ (just like [ or { in JSON), with exceptions:
                                  #  - newline optional on new OBJ inside ARR:
                                  #     - VAR: VAL      same as    -
                                  #       ...                        VAR: VAL
                                  #                                  ...
                                  #  - indentation optional on new ARR inside OBJ:
                                  #      VAR:           same as    VAR:
                                  #      - VAL                       - VAL
                                  #      - ...                       - ...
                                  #  - in precedent exceptions, VAR: VAL can be ? VAR : VAL too

#COMMENT                          #On its own line, or at end of line


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TYPES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPES ==>                         #Spec divides types into three "kinds":
                                  #  - mappings (OBJ-like): !!map !!set
                                  #  - sequences (ARR-like): !!omap !!pairs !!seq
                                  #  - scalar: all others
                                  #Can create custom TYPEs (how to is implementation-specific):
                                  #  - TYPE must be [[:alnum:]-]

SCHEMAS ==>                       #Set of supported TYPEs, among:
                                  #  - failsafe (minimalist): !!map !!seq !!str
                                  #  - JSON: also !!null !!bool !!int !!float, but only in their JSON form
                                  #  - core: also allows alternative forms of null|BOOL|INT|FLOAT
                                  #  - implementation-specific new ones, e.g. with language-specific types


!<URI> VAR|VAL                    #Transtypes VAR|VAL
                                  #URI uses tag: URI scheme, usually tag:DOMAIN,YEAR:TYPE

!!TYPE                            #Same as !<tag:yaml.org,2002:TYPE>, i.e. for core types, described in this doc

!TYPE                             #Same as !<tag: local:TYPE>, i.e. for custom types

!                                 #Same as !!map or !!seq or !!str

%TAG !VAL! VAL2                   #Make !VAL![...] being same as !<VAL2[...]>


TRANSTYPING RULES???

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OBJECT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VAR: VAL                          #Is OBJ
...                               #TYPE !!map
                                  #Mandatory space after colon, unless VAR quoted
                                  #VAR behaves like any STR value:
                                  #  - can be quoted or unquoted
                                  #  - but has to use ? VAR alternate syntax for multiline

? VAR                             #Is alternate syntax for OBJ
: VAL                             #  - ? must be followed by space
...                               #  - : VAL must be on next line, same indentation
                                  #  - : VAL is optional (def: null)
                                  #Allows VAR to be any VAL, any type
                                +##(js-yaml) VAR is always parsed as STR

{VAR: VAL,...}                    #OBJ alternative syntax ("flow style") as opposed to normal syntax ("block style"):
                                  #  - difference: the indentation|whitespaces rules for follow JSON not YAML
                                  #  - exceptions:
                                  #     - can omit {} if only one VAR
                                  #     - can use trailing commas
                                  #  - can embed flow style inside block style, but not inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             ARRAY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


- VAL                             #Is ARR
...                               #TYPE !!seq

[VAL, ...]                        #Same as {VAR: VAL,...} (see above)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              SET              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


? VAR                             #Is a set, i.e. like OBJ (unordered, no duplicate keys) with no values
...                               #TYPE !!set
                                  #Must use explicit typecast, otherwise interpreted as !!map
                                +##(js-yaml) parsed as OBJ with null values


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ORDERED MAP          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


- VAR: VAL                        #Is an ordered map, i.e. ordered like ARR but has key-value mapping like OBJ.
...                               #No duplicate keys
                                  #TYPE !!omap
                                  #Must use explicit typecast, otherwise interpreted as !!map
                                +##(js-yaml) parsed as ARR containing single-keyed OBJ


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PAIRS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PAIRS ==>                         #Same as ordered map, except:
                                  #  - allow duplicate keys
                                  #  - TYPE !!pairs
                                +##(js-yaml) parsed as ARR containing [KEY, VAL] children


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             NULL              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


null
~                                 #Is null (case-insensitive)
(nothing)                         #TYPE !!null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           UNDEFINED           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


(any scalar VAL)               +|##Is undefined
                               +|##TYPE !!js/undefined, must transtype


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BOOLEAN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


true|false                        #Is BOOL (case-insensitive)
                                  #TYPE !!BOOL
on|off                          -##
yes|no                          -##
y|n                             -##Other syntaxes, case-insensitive


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INTEGER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


INT                               #Integer
                                  #TYPE !!int
                                  #Can contain _ (with no space after), which are ignored (e.g. used for thousands separator)
                                  #Precision is implementation-specific, but at least four bytes and signed
0b...                             #Binary
0...                              #Octal
0x...
0X...                             #Hex
...:...                           #Base 60
                                  #Base delimiter can be used several times



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             FLOAT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FLOAT                             #Float
                                  #TYPE !!float
                                  #Can use exponent
                                  #Can use base 60 and _ like INT
                                  #Precision is implementation-specific, but at least single floats
.inf
-.inf                           |##
nan                             |##Case-insensitive


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STR:
  - TYPE !!str
  - syntax:
     - quoted:
        - "-quoted: until next unescaped "
        - '-quoted: until next unescaped '
     - unquoted:
         - until next non-indented line
         - has lowest transtyping priority, i.e. can be interpreted as non-STR if ambiguity with other type, e.g. NUM|BOOL or OBJ (colon) or ARR (brackets) or NULL or DATETIME, so sometimes need to explicitly transtype
         - can use | or |+ or |- ("literal styles") or > or >+ or >- ("folded styles") (ignored)
            - must be the only chars in first line of STR value, except whitespaces
                 - error if followed by any non-whitespace in first line
    - escaping:
         - for "-quoted, need to escape " or \ with \ and can also use backslash sequences: \0 \a \b \t \n \v \f \r \e \xNN \uNNNN \UNNNNNNNN and also more exotic \/ (same as /) \N (U-0085 NEXT_LINE) \_ (U-00a0 NO_BREAK_SPACE) \L (U-2028 LINE_SEPARATOR) \P (U-2029 PARAGRAPH_SEPARATOR)
         - for '-quoted, need to escape ' with another '
         - for unquoted, no need to escape
         - Unicode chars that are non-printable must be "-quoted and backslash-escaped, i.e. control chars (except \t \n \r), DEL and surrogate block (U-D800 to U-DFFF, U-FFFE, U-FFFF)
    - newlines:
         - if | or |- or |+ kept, otherwise (including > or >+ or >-) replaced with single space
            - if escaped and quoted, ignored instead (also escapes following blank lines)
            - for lines with indentation additional, if > or >+ or >-, leading and trailing newlines kept instead
         - blank lines (with or without whitespaces) replaced by newline
             - except last ones if unquoted, unless |+ or >+
             - if escaped and quoted, ignores current and following blank lines instead
         - appends one newline to STR if |+ or | or >+ or >
    - whitespaces:
         - leading ones on first line ignored for unquoted
         - leading ones on non-first line ignored for all
              - except for | or |+ or |- or > or >+ or >- where indentation additional (i.e. more than initial line) is kept
                  - initial line indentation is guessed, but can be specified with |NUM or |NUM+ or |NUM- or >NUM or >NUM+ or >NUM- (if initial line also has some additional indentation)
              - unless escaped for quoted (escape all the following indentation)
         - trailing ones ignored for unquoted
              - except for | or |+ or |- or > or >+ or >-


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DATE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


YYYY-MM-DD[THH:MM:SS[TZ]]       |##DATE[TIME]
                                |##TYPE !!timestamp
                                |##Can add space instead of T, or before timezone
                               +|##(js-yaml) parsed as DATE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BINARY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BASE64_STR                        #Binary string
                                  #TYPE !!binary
                                  #Uses standard base64 (RFC 4648)
                                  #Must explicitely transtype, otherwise recognized as !!str
                                +##(js-yaml) parsed as INT_ARR (0-255)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            REGEXP             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REGEXP                         +|##Is regexp
/REGEXP/FLAGS                  +|##TYPE !!js/regexp
                               +|##Must be transtyped from a STR, otherwise recognized as !!str
                               +|##Does not support ES6 flags


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


function [FUNC](...) {...}     +|##Is function
                               +|##TYPE js/function
                               +|##Must be transtyped from a STR, otherwise recognized as !!str
                               +|##Does not support ES6 syntax


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            EXOTIC             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


'!': '!...'                     -##Standardized way to serialize !... or &VAL or *VAL
'&': VAL                        -##Is just serialization i.e., as is, just like an OBJ
'*': VAL                        -##TYPE !!yaml
                                -##Must explicitely transtype, otherwise transtyped as !!map

@...
`...                              #Both are reserved, so must be escaped|quoted


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ALIASES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


&REF VAL                          #Like VAL, but also assigns it to REF ("alias")
                                  #If VAL:
                                  #  - OBJ|ARR: must be on line before
                                  #  - multiline STR: must be first on the first line
                                  #Can be:
                                |##  - circular
                                  #  - defined several times (last one wins)
                                -##Has to be used by a *REF
&REF VAR                        -##Same for VAR

*REF                              #Reuse REF ("anchor"), by reference (when language permits it)
                                  #Must be after &REF
                                -##Can be used on VAR too


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MERGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


<<: OBJ[_ARR]                     #Merge OBJ with siblings
                                  #Has less priority than (either previous|next) siblings
                                  #If OBJ_ARR, applied in turns, i.e. first ones have priority
                                  #Often used with *REF
                                -##<< actually has special TYPE !!merge

=: VAL                          -##Same as VAL
                                -##= actually has TYPE !!value


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STREAMS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


---                               #First line of a document, optional if only one document in the file.
                                  #Also allows to separate several documents in one file, e.g. for streaming
...                               #Last line of a document, always optional

BETWEEN STREAMS ==>               #There can be directives or comments between ... (or start of file) and --- (or end of file)
                                  #There can be directives after --- on same line


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DIRECTIVES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


%DIRECTIVE: VAL                   #Directices to parser
                                  #See above about where to put them
                                  #Can be:
                                  #  - %YAML: VERSION
                                  #  - %TAG: see above
                                  #Cannot be custom directives
