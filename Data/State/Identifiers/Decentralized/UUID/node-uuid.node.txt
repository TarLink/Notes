
               
   NODE-UUID   
               



UUID                          #Web script or Node module
                              #Version 3.0.1
                              #Should use BUFFER in Node.js, NUM_ARR in Webkit.
                              #Can require sub-modules, e.g. require('uuid/v1')
UUID.v1                       #Generates UUID v1 (time-based)
([OBJ[,BUFER|NUM_ARR[,NUM2]]])#OBJ:
                              #  - node 6_NUM_ARR: fifth part "Node" (def: random)
                              #  - clockseq NUM (0-0x3fff): fourth part "ClockSeq" (def: internal)
                              #  - msecs NUM|DATE (def: now)
                              #  - nsecs NUM (0-9999) (def: internal counter, not now)
                              #Returns either:
                              #  - STR
                              #  - if specified, BUFFER|NUM_ARR, written on it starting at position NUM2

UUID[.v4]                     #Similar for UUIDv4 (hardware randomness, 122 bits of randomness)
([OBJ[,BUFER|NUM_ARR[,NUM2]]])#OBJ:
                              #  - random 16_NUM_ARR (def: auto)
                              #  - or rng FUNC()->16_NUM_ARR. Def depends on platform:
                              #     - node.js: uses UUID.nodeRNG, i.e. CRYPTO.randomBytes()
                              #     - Webkit: uses UUID.whatwgRNG, i.e. crypto.getRandomValues()
                              #     - others: uses UUID.mathRNG, i.e. Math.random()

UUID.parse(STR)->BUFFER
UUID.unparse(BUFFER)->STR     #Conversion STR <-> BUFFER

UUID.noConflict()             #Erases global variable UUID
