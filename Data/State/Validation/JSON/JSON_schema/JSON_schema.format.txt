
                 
   JSON_SCHEMA   
                 



STANDARD ==>                      #Draft RFCs:
                                  #  - "draft-wright-json-schema-[validation-]00", with also some v5 proposals (was WIP)

application/schema+json           #MIME
Link: <URI>; rel="describedby" [S]#Tells client that HTTP response payload is validate by JSON schema available at URI
Content-Type: application/json
 ;profile="URI ..." [C|S]         #Same for client|server


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          SUBSCHEMAS           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


RSCHEMA: root level of schema

SCHEMA.id 'URI': 
  - schema identifier, used e.g. by SREF
  - can be:
     - 'ABS_URI[#HASH]': required for RSCHEMA (with no HASH)
     - 'REL_URI[#HASH]': relative to RSCHEMA URI
     - '#HASH': relative to closest parent schema with an URI
  - can be any URI scheme
SREF: 
  - JSON reference to SCHEMA (targetting SCHEMA.id), including sub-schema
  - #HASH is not JSON_POINTER though, just normal hash
SOBJ: SCHEMA|SREF

STR|NUM|BOOL|OBJ|ARR_SCHEMA       #SCHEMA targetting a STR|NUM|BOOL|OBJ|ARR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            TO_SORT            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Schema (validation rules, as JSON) vs instance (object to validate, as JSON)

Can add new possible SCHEMA rules, but:
  - should write own meta-schema
  - should extend current one using allOf, and $schema.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          METASCHEMA           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Meta-schema: schema that validates another schema
RSCHEMA.$schema 'META_SCHEMA_URI'


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          VALIDATION           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Equality: deep

REGEXP: read warning again??? at 3.3

NUM_SCHEMA.multipleOf NUM2        #NUM % NUM2 === 0
NUM_SCHEMA.maximum|minimum NUM2           
NUM_SCHEMA.
 exclusiveMaximum|Minimum BOOL    #NUM <= >= NUM2 or (if exclusiveMaximum|Minimum true, def: false) NUM < > NUM2

(string)
STR_SCHEMA.min|maxLength UINT     #STR.length <= >= UINT (in Unicode chars)
pattern

(array)
additionalItems and items
maxItems
minItems
uniqueItems

(object)
maxProperties
minProperties
required

(???)
properties
patternProperties
additionalProperties

(object)
dependencies

(any)
enum
type
allOf
anyOf
oneOf
not

(other)
definitions
title
description
default
