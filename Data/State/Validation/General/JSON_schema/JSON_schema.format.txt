
               
   JSON_SCHEMA  
               



STANDARD ==>                      #Draft RFCs:
                                  #  - "draft-wright-json-schema-[validation-]00" (is "v4")
                                 -#  - v5 and v6 are WIP. but ajv library supports some of it. It is then documented here
                                 -#    The following are not standardized or not implemented, and not documented by me so far:
                                !!#     - SCHEMA.messages
                                !!#     - contentLang
                                !!#     - $comment
                                 -#     - SCHEMA.format "uritemplate"
                                 -#     - SCHEMA.format "json-pointer" -> "jsonpointer"
                                  #Validates an instance (JSON) against a schema (set of validation rules, also JSON)
                                  #How to check for updates:
                                  #  - https://github.com/json-schema-org/json-schema-spec/issues (issues + pull requests)
                                  #     - contains the spec discussion
                                  #     - last time I checked everything was 24/03/2017
                                  #  - ajv contains versions of WIP next versions in /lib/refs
                                  #  - implementations: ajv, ajv-keywords, others

NOTATION ==>                     !#v5 or v6, supported by a library (ajv unless specified otherwise)
                                 -#v5 or v6, but not not supported by any library
                                !!#Might become v5 or v6, but not completely sure
                                 ##Non-standard


application/schema+json           #MIME
Link: <URI>; rel="describedby" [S]#Tells client that HTTP response payload is validate by JSON schema available at URI
Content-Type: application/json
 ;profile="URI ..." [C|S]         #Same for client|server


EXAMPLES ==>                      #Many examples available at https://github.com/SchemaStore/schemastore  
                                  #Mostly conf files (package.json, etc.), JSON-based formats (geoJSON, etc.)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          METASCHEMA           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RSCHEMA.$schema 'META_SCHEMA_URI' #Metaschema:
                                  #  - schema validating another schema
                                  #  - default: "http://json-schema.org/schema#" (latest stable, i.e. v4) or
                                  #    "http://json-schema.org/draft-04|05|06/schema#" (v4|v5|v6)
                                  #Is an identifier not a location, i.e. library might use a cached spec without
                                  #fetching URL.

CUSTOM ==>                        #Can add:
                                  #  - new possible schema rules
                                  #  - new possible SCHEMA.format
                                  #Then:
                                  #  - should write own meta-schema
                                  #  - consumers should extend $schema (using allOf) with it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SUBSCHEMAS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCHEMA                            #Is either an OBJ
                                 !#or BOOL (means always succeeds|fails)
RSCHEMA                           #Root level of schema

SCHEMA.$id 'URI'                  #Schema identifier, used e.g. by SREF
                                  #  - can be in sub-schemas
                                  #  - can be:
                                  #     - 'ABS_URI[#HASH]': required for RSCHEMA (with no HASH)
                                  #     - 'REL_URI[#HASH]': relative to RSCHEMA URI
                                  #     - '#HASH': relative to closest parent schema with an URI
                                  #  - can be any URI scheme

SREF                              #JSON reference to SCHEMA (targetting SCHEMA.$id), including sub-schema
                                  #Can replace any sub-SCHEMA
                                  #HASH can be SCHEMA.$id #HASH, or absolute JSON_POINTER
SCHEMA.definitions.DEF SCHEMA2    #Does not add any semantics, but used to be pointed by SREF,
                                  #and put all pointed values together.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        REFERENCED DATA        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


{ "$data": "[REL_]JSON_POINTER" }!#Can be used instead of any VAL
                                 !#Replaced by a value coming from the instance being validated, according to JSON pointer
                                 !#JSON pointer can be absolute (root of the instance) or relative (to current { "$data" })
                                 !#(see its doc)
                                 !#If pointed value does not exist, no error nor validation
                                 !#Not supported by ajv for:
                                 !#  - any rule where VAL can be SCHEMA
                                 !#  - title, description, type, default
                                 !#ajv requires AOPTS.$data true for support


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VALIDATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STR|NUM|BOOL|OBJ|ARR_SCHEMA       #SCHEMA targetting a STR|NUM|BOOL|OBJ|ARR


EQUALITY ==>                      #Is always deep
DEFINED ==>                       #Means object key is present, i.e. not undefined, but null is fine

REGEXP                            #Is JavaScript REGEXP but recommends avoiding (due to implementations differences)
                                  #\b \B \w \W \s \S \d \D (?:) (?=) (?!)
                                  #Matches against part of STR, i.e. must manually add ^ or $ to anchor


SCHEMA.title STR                  #Metadata
SCHEMA.description STR            #Metadata
SCHEMA.examples VAL_ARR          !#Metadata


SCHEMA.type 'TYPE'[_ARR]          #VAL of 'TYPE' among 'string', 'number', 'integer', 'object', 'array', 'boolean', 'null'
                                  #If ARR, several possible choices
                                  #Can be not defined, whatever the TYPE. However can only be null if TYPE 'null'
SCHEMA.typeof 'TYPE'[_ARR]       ##Same but using JavaScript typeof, i.e.:
                                 ##  - there is no 'integer' (is merged in 'number'), 'array', 'null' (both merged in 'object')
                                 ##  - there is 'undefined', 'symbol', 'function'
                                 ##(uses ajv-keywords)
SCHEMA.instanceof 'TYPE'[_ARR]   ##Same but using JavaScript instanceof
                                 ##TYPE must either:
                                 ##  - be native, i.e. 'Object', 'Array', 'Function', 'Number', 'String', 'Date', 'RegExp',
                                 ##    'Buffer'
                                 ##  - have constructor assigned to AJVKEYWORDS.get('instanceof').definition.CONSTRUCTORS.TYPE
                                 ##(uses ajv-keywords)
SCHEMA.format 'FORMAT'            #VAL matches FORMAT among:
                                  #  (string)
                                 !#  - "regex": JavaScript REGEX
                                  #  - "date-time": RFC 3339, i.e. YYYY-MM-DDTHH:MM:SS[.SSSS...]Z|TIMEZONE
                                 !#  - "date": RFC 3339 YYYY-MM-DD
                                 !#  - "time": RFC 3339 HH:MM:SS
                                  #  - "email"
                                  #  - "hostname"
                                  #  - "ipv4|ipv6"
                                  #  - "uri": absolute
                                 !#  - "uri-reference": absolute|relative
                                 !#  - "json-pointer": absolute
                                 !#  - "relative-json-pointer": relative
                                  #  (any type)
                                  #  - any custom
SCHEMA.enum VAL_ARR               #Only possible values
SCHEMA.const VAL                 !#Only one possible value
SCHEMA.default VAL                #Default value, if not defined
OBJ_SCHMA.dynamicDefaults.VAR VAL##Same, but using a function.
                                 ##VAL can be:
                                 ##  - { func 'FUNC', ... }: fires FUNC(ARGS) with ... in ARGS
                                 ##  - 'FUNC': same as { func 'FUNC', ... }
                                 ##'FUNC' can be:
                                 ##  - "timestamp|datetime|date|time": now as DATE_NUM, or [DATE][TIME] (see format above)
                                 ##  - "randomint", with ARGS.max NUM (def: 2): integer between 0 and NUM (excluded),
                                 ##     using Math.random()
                                 ##  - "random": float between 0 and 1, using Math.random()
                                 ##  - "seq", with ARGS.name STR (def: ""): incremental sequence of integers, starting from 0
                                 ##  - custom, by assigning AJVKEYWORDS.get('dynamicDefaults').definition.DEFAULTS.FUNC(ARGS)
                                 ##Cannot apply to required properties, because applied after validation
                                 ##(as opposed to SCHEMA.default)


NUM_SCHEMA.multipleOf NUM2        #NUM % NUM2 === 0
NUM_SCHEMA.maximum|minimum NUM2   #NUM <= >= NUM2
NUM_SCHEMA.
 exclusiveMaximum|Minimum NUM2   !#NUM < > NUM2
NUM_SCHEMA.[exclusive]range      ##Same as [exclusive]minimum NUM + [exclusive]maximum NUM2
 [NUM, NUM2]                     ##(uses ajv-keywords)

VAL_SCHEMA.
 formatMaximum|minimum STR       !#Like NUM_SCHEMA, but for any VAL according to its SCHEMA.format, if the format has
VAL_SCHEMA.                      !#implicit ordering
 formatExclusiveMaximum|Minimum  !#E.g. defined for: "date", "time", "date-time"
 BOOL                            !#(uses ajv-keywords)


STR_SCHEMA.min|maxLength UINT     #STR.length <= >= UINT (in Unicode chars)
STR_SCHEMA.pattern REGEXP         #STR matches REGEXP
STR_SCHEMA.regexp '/REGEXP/FLAGS'
STR_SCHEMA.regexp                ##Same but can specify flags
 {pattern:'REGEXP',flags:'FLAGS'}##(uses ajv-keywords)


ARR_SCHEMA.items SCHEMA           #SCHEMA is applied against each ARR element

ARR_SCHEMA.items SCHEMA_ARR       #Each SCHEMA is applied against each ARR element with same index
ARR_SCHEMA.additionalItems SCHEMA2#Missing ARR items are allowed (i.e. SCHEMA_ARR.length can be >= ARR.length)
                                  #Additional ARR items (i.e. when SCHEMA_ARR.length < ARR.length) are all matched against SCHEMA2
ARR_SCHEMA.contains SCHEMA[_ARR] !#Each SCHEMA must be match by at least one ARR element

ARR_SCHEMA.max|minItems NUM       #ARR.length <= >= NUM
ARR_SCHEMA.uniqueItems BOOL       #If true, no duplicate ARR elements


OBJ_SCHEMA.max|minProperties NUM  #OBJ.length <= >= NUM
OBJ_SCHEMA.required 'VAR'_ARR     #Each OBJ.VAR is defined
OBJ_SCHEMA.deepRequired          !#Same but using absolute JSON pointers
 'JSONPOINTER'_ARR               !#(uses ajv-keywords)
OBJ_SCHEMA.prohibited 'VAR'_ARR  ##Inverse, i.e. same as { not: { anyOf: [ { required 'VAR' }, ... ] } }
                                 ##(uses ajv-keywords)

OBJ_SCHEMA.properties.VAR SCHEMA  #SCHEMA is applied against OBJ.VAR
OBJ_SCHEMA.deepProperties.       !#Same but with absolute JSON pointers
 JSONPOINTER SCHEMA              !#(uses ajv-keywords)
OBJ_SCHEMA.                       #Missing OBJ.VAR are allowed (i.e. present in schema but not in OBJ)
 additionalProperties SCHEMA2     #Additional OBJ.VAR (i.e. present in OBJ but not in schema) are all matched against SCHEMA2
OBJ_SCHEMA.                       #Like OBJ_SCHEMA.properties but matches against any OBJ.VAR whose VAR matches REGEXP
 patternProperties.REGEXP SCHEMA  #If both OBJ_SCHEMA.properties and one or several patternProperties match, all apply
                                  #Has same behavior when it comes to missing|additional properties
OBJ_SCHEMA.                      ##Same as patternProperties, except at least one property must match each REGEXP
 patternRequired.REGEXP SCHEMA   ##(uses ajv-keywords)
OBJ_SCHEMA.propertyNames
 STR_SCHEMA                      !#Propery names must match STR_SCHEMA

OBJ_SCHEMA.dependencies.VAR       #Applies OBJ_SCHEMA2 to OBJ, providing OBJ.VAR is defined
 OBJ_SCHEMA2|'VAR'_ARR            #'VAR'_ARR is like { required: 'VAR'_ARR }


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          COMBINATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SCHEMA.not SCHEMA2                #! combination
SCHEMA.allOf SCHEMA2_ARR          #&& combination
SCHEMA.anyOf SCHEMA2_ARR          #|| combination
SCHEMA.oneOf SCHEMA2_ARR          #|| combination, but must match only one

SCHEMA.if|then|else SCHEMA       !#Branching of schemas
                                 !#(uses ajv-keywords)
SCHEMA.switch OBJ_ARR            ##Logic combination of schemas, with OBJ_ARR:
                                 ##  - then SCHEMA|BOOL:
                                 ##     - main validation to apply
                                 ##     - BOOL means automatic success|failure
                                 ##  - if SCHEMA2 (optional): only apply SCHEMA if SCHEMA2 applies
                                 ##After each OBJ, goes to next OBJ providing either:
                                 ##  - SCHEMA2 fails
                                 ##  - SCHEMA2 succeeds, and OBJ.continue true
                                 ##Otherwise, stops switch with success
                                 ##(uses "ajv-keywords")
SCHEMA.select.$data              ##Applies SCHEMA if $data value is STR (including through transtyping)
 "[REL_]JSON_POINTER" }          ##STR can be "default" for default case
SCHEMA.selectCases.STR SCHEMA    ##Is ignored if no STR matches
                                 ##If $data does not resolve to a scalar type, fails
                                 ##(uses "ajv-keywords")

SCHEMA.$merge OBJ                ##Merge OBJ.source SCHEMA2 with OBJ.with OBJ2 (JSON merge patch, RFC 7386)
SCHEMA.$patch OBJ                ##Merge OBJ.source SCHEMA2 with OBJ.with OBJ2_ARR (JSON patch, RFC 6902)
                                 ##Both use package "ajv-merge-patch" (3.0.0-beta.0)
