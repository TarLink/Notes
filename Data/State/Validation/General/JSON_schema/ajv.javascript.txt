
         
   AJV   
         



ALTERNATIVES ==>                  #JSON schema validators:
                                  #  - tdegrunt jsonschema, z-schema: too slow
                                  #  - jsen, is-my-json-valid: quite ok
                                  #  - ajv: best speed, best spec support, most features

VERSION ==>                       #5.0.4-beta.1
                                  #Browser, Node.js or CLI

SUMMARY ==>                       #Validates JSON schema
                                  #Features:
                                  #  - all JSON schema v4, some v5|v6
                                  #  - good JSON references support
                                  #  - meta-schema validation
                                  #  - can modify input: default values, transtyping, removing extra properties
                                  #  - flexible custom formats|rules, including async validation
                                  #  - detailed, human-friendly, i18n'd errors
                                  #  - great speed, caching

NOTATION ==>                      #The following notation takes as example:
                                  #  - schema: { properties: { world: { properties: { hello: { minimum: 1 } } } } }
                                  #  - data: { world: { hello: 2 } }
SCHEMA_ID                         #SCHEMA.$id
                                  #Only available if direct call to AJV.add[Meta]Schema()
SCHEMA_VAL                        #1
PARENT_SCHEMA                     #{ minimum: 1 }
DATA_VAL                          #2
PARENT_DATA                       #{ hello: 2 }
ROOT_DATA                         #{ world: { hellow: 2 } }
DATA_PATH                         #'.world.hello'
DATA_VAR                          #'hello'
SCHEMA_PATH                       #'#/properties/world/properties/hello/minimum'


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             BASIC             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


PHASES ==>                        #Schema validation: SCHEMA validated against its meta-schema
                                  #Compilation: SCHEMA transformed in a fast function (VALIDATE)
                                  #Data validation: data validated against VALIDATE

new Ajv([AOPTS])                  #

AJV.add[Meta]Schema               #Validate a schema, but does not compile it
(SCHEMA[_ARR][,'SCHEMA_ID'])      #Can overwrite SCHEMA.$id with SCHEMA_ID
AOPTS.schemas|meta SCHEMA[_ARR]   #Difference with "Meta": 
                                  #  - mostly semantics, but there are few differences of behavior
                                  #  - metaschemas are global, so should do AJV.validateSchema(OBJ) instead of 
                                  #    AJV.validate(SCHEMA, OBJ)
AOPTS.validateSchema              #Validate schema against its meta-schema
                                  #Throws exception if invalid if true (def), logs only if "log", do nothing if false.
                                  #Meta-schema is defined by either:
                                  #  - SCHEMA.schema
                                  #  - KOPTS.metaSchema SCHEMA (not for validate())
AJV.getSchema('SCHEMA_ID')
 ->VALIDATE                       #
AJX.removeSchema
 (SCHEMA|'SCHEMA_ID'|REGEXP)      #REGEXP matches schema.$id or SCHEMA_ID

AJV.compile(SCHEMA)->VALIDATE     #Validate a schema + compile
VALIDATE.schema                   #SCHEMA
 
VALIDATE(OBJ)->BOOL               #
AJV.validate                      #Same as AJV.compile(SCHEMA)(OBJ)->BOOL
 (SCHEMA|'SCHEMA_ID', OBJ)->BOOL  #Will use AJV.errors instead of VALIDATE.errors


AJV-PACK(AJV, VALIDATE)->'CODE'  ##Returns module CODE that exports VALIDATE, but can be used without AJV library
                                 ##AJV must use AOPTS.sourceCode true
                                 ##Has less features that full-blow library:
                                 ##  - no validate|compile custom keyword (only macro|inline), no custom formats
                                 ##  - no recursive JSON reference
                                 ##  - AOPTS.allErrors always true
                                 ##  - no AOPTS.verbose
                                 ##  - lots of others
                                 ##Version 0.2.7


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              CLI              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


ajv ...                          ##Module "ajv-cli" (2.0.0-beta.0)
--all-errors
--json-pointers
--format=STR
--missing-refs=STR
--inline-refs=STR 
--remove-additional=STR
--use-defaults
--coerce-types
--multiple-of-precision=NUM
--error-data-path=STR
--messages=BOOL                  ##See AOPTS
-s SCHEMA
-m SCHEMA                        ##Like AOPTS.schema|meta. SCHEMA can contain globbing (escaped)
-c MODULE|'MODULE_PATH'          ##Is FUNC(AJV)->AJV, which can e.g. call AJV.addKeyword|addFormat()
                                 ##MODULE_PATH must be relative
-r SCHEMA                        ##Files that can be used for JSON reference resolving

ajv compile                      ##Does meta-schema validation, using exit code
-o FILE                          ##Creates file using AJV-PACK

ajv [validate]                   ##Does data validation, using exit code and output
-d FILE                          ##Data file
--errors=FORMAT                  ##How to report errors, among:
                                 ##  - js (def): JavaScript
                                 ##  - json: beautified JSON
                                 ##  - line: non-beaufied JSON
                                 ##  - text: using AJV.errorText()
                                 ##  - no
--changes=FORMAT                 ##Same FORMAT as --errors
                                 ##Logs modifications (e.g. from AOPTS.useDefaults)

ajv test                         ##Same as ajv validate, but must specify is output is supposed to be --[in]valid
-d FILE                          ##
--[in]valid                      ##
--errors=FORMAT                  ##Like ajv validate


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            ERRORS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


VALIDATE.errors                   #Of the last VALIDATE()
                                  #ERROR_OBJ_ARR:
                                  #  - null if no errors
                                  #  - only the first error, unless AOPTS.allErrors true
                                  #Validation functions (in AJV.addKeyword()):
                                  #  - can assign FUNC.errors ERROR_OBJ_ARR, where FUNC is the function itself (not "this")
                                  #     - otherwise, will use default:
                                  #        - keyword 'RULE'
                                  #        - message 'should pass "RULE" keyword validation'
                                  #        - params: keyword 'RULE'
                                  #     - if no custom errors, should use KOPTS.errors false for better efficiency
                                  #  - must define ERROR_OBJ.message|keyword|params
                                  #     - other ERROR_OBJ.* are filled in by AJV
                                  #Async rules work differently, see below
AJV.errorsText(ERR_OBJ_ARR[,OPTS])#Returns "data.DATA_PATH MESSAGE,...", e.g. "data.examplevar should be >= 10"
 ->STR                            #OPTS: separator (def: ","), dataVar (def: "data")
                                  #Can be used as human-friendly error message
ERROR_OBJ.message                 #'ERROR': if AOPTS.messages true (def)
                                  #Does not include paths, e.g. 'should be >= 10'
                                 ##Can be translated into LANG by AJV-I18N.LANG(ERROR_OBJ_ARR)->ERROR_OBJ_ARR (version 2.0.0-beta.3)
                                 ##Supports around 11 languages, plural messages
ERROR_OBJ.keyword                 #'RULE'
ERROR_OBJ.dataPath                #DATA_PATH, as 'VARR' or (if AOPTS.jsonPointers true) JSON_POINTER (e.g. '/VAR/...')
                                  #For rules that are one level upper than the object validated 
                                  #(e.g. required, additionalProperties, dependencies), is the object validated if 
                                  #AOPTS.errorDataPath 'object' (def), or upper level if 'property'
ERROR_OBJ.schemaPath              #SCHEMA_PATH, as JSON_POINTER (e.g. '#/VAR/...')
ERROR_OBJ.params                  #Schema information. OBJ:
                                  #  (type)
                                  #  - type 'TYPE[,...]'
                                  #  (format)
                                  #  - format 'FORMAT' 
                                  #  (enum)
                                  #  - allowedValues VAL_ARR 
                                  #  (multipleOf)
                                  #  - multipleOf 
                                  #  ([exclusive]maximum|minimum)
                                  #  - limit NUM, exclusive BOOL, comparison '<|<=|>|>=' 
                                  #  (max|minLength)
                                  #  - limit NUM 
                                  #  (pattern)
                                  #  - pattern 
                                  #  (additionalItems|maxItems|minItems)
                                  #  - limit NUM 
                                  #  (uniqueItems)
                                  #  - i|j NUM 
                                  #  (max|minProperties)
                                  #  - limit NUM 
                                  #  (required)
                                  #  - missingProperty 
                                  #  (additionalProperties)
                                  #  - additionalProperties 'VAR'
                                  #  (patternRequired)
                                  #  - missingPattern 
                                  #  (patternGroups)
                                  #  - pattern REGEXP, reason 'minimum|maximum', limit NUM 
                                  #  (dependencies)
                                  #  - property 'VAR', missingProperty 'VAR', deps 'STR,...', depsCount NUM 
                                  #  ($ref)
                                  #  - ref STR 
                                  #  (custom keyword with no custom error)
                                  #  - keyword 'RULE' 
(if AOPTS.verbose true)
ERROR_OBJ.schema                  #SCHEMA_VAL
ERROR_OBJ.parentSchema            #PARENT_SCHEMA
ERROR_OBJ.data                    #DATA_VAL


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:      VALIDATION OPTIONS       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


AOPTS.full                        #BOOL (def: false). Make format validation slower, but more correct:
                                  #  - date|time|date-time: check that date is correct, not just matching regexp pattern
                                  #  - uri[-reference]|email: more throughout regexp
AOPTS.unknownFormats              #If unknown format, throws exception: true (def) or "ignore" (as per spec) (still logs)
AOPTS.multipleOfPrecision         #Max number of decimals for multipleOf RULE argument

AOPTS.cache                       #Object used for caching. By def, done in memory
                                  #Is done as memoization, performed by add[Meta]Schema() and compile(), 
                                  #i.e. caches any [meta-]SCHEMA (not validation itself)
                                  #Should have methods: put('KEY', 'VAL'), get('KEY')->'VAL', del('KEY'), clear()
AOPTS.serialize(SCHEMA)->VAL      #Used to calculate cache keys
                                  #Def: JSON.stringify() that sorts keys and resolves circular dependencies
                                  #If false, is identity function


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        JSON REFERENCES        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


JSON POINTERS ==>                 #Against the spec: trailing slash is ignored
                                  #Relative JSON pointers are only possible when using { $data }

AJV.compileAsync                  #Same as AJV.compile() but async, waiting for remote JSON references to be resolved.
 (SCHEMA[, FUNC(ERROR, VALIDATE)])#Is required when using remote JSON references (i.e. with URI, not just #HASH)
 ->PROMISE(VALIDATE)              #AOPTS.missingRefs must be true
                                  #Possible ERRORs: loadSchema() ERROR, AOPTS.missingRefs true, invalid schema
AOPTS.loadSchema                  
 ('URI'[, FUNC(ERROR, SCHEMA)])   #Function to fetch remote JSON references
 ->PROMISE(SCHEMA)                #Required when using compileAsync()

AOPTS.missingRefs VAL             #What to do with JSON references (local or remote) that are not resolved or cannot be:
                                  #  - true (def): throw exception with ERROR: missingRef 'URI#HASH', missingSchema 'URI'
                                  #  - 'ignore|fail': log error, then create rule that always succeeds|fails
AOPTS.extendRefs                  #What to do when JSON references (local or remote) has other members than just "$ref":
                                  #  - "fail" (def): throw exception
                                  #  - true: merge those members as additional rules, with log message
                                  #  - "ignore": ignore members (as per JSON reference standard), with log message


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         MODIFICATION          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


MODIFICATION ==>                  #The following directly modify data OBJ

AOPTS.removeAdditional            #Remove extra properties (e.g. the ones specified by SCHEMA.additionalProperties)
                                  #Can be:
                                  #  - false (def)
                                  #  - "all": whatever SCHEMA.additionalProperties is
                                  #  - true: only if SCHEMA.additionalProperties false
                                  #  - "failing": only if SCHEMA.additionalProperties false, 
                                  #     or if SCHEMA.additionalProperties and properties do not validate to it
AOPTS.useDefaults                 #Apply SCHEMA.default. Can be:
                                  #  - false (def)
                                  #  - true: by deep copy
                                  #  - "shared": by reference
                                  #Cannot be used inside switch|anyOf|oneOf|not
AOPTS.coerceTypes                 #Try to transtype to SCHEMA.type. Can be:
                                  #  - false (def)
                                  #  - true: only for scalar types
                                  #  - "array": for array type too, i.e. VAL <-> [VAL]
                                  #Some difference from JavaScript:
                                  #  - String(null) -> ""
                                  #  - Boolean("true|false")->true|false, others errors
                                  #  - Boolean(NUM): if NUM not 1|0, errors
                                  #  - null(""|0|false), others errors


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          EXTENSIONS           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


AJV.addFormat('FORMAT', VVAL)     #Add custom SCHEMA.format according to VVAL:
AOPTS.formats.FORMAT VVAL         #  - OBJ:
                                  #     - validate: like AJV.addKeyword() but can also be REGEXP (partial match)
                                  #     - async: like AJV.addKeyword()
                                  #     - compare(STR, STR2)->-1|0|1: to make SCHEMA.format[Exlusive]Maximum|Minimum work
                                  #  - VAL: shortcut for OBJ.validate VAL

AJV.addKeyword('RULE', KOPTS)     #Add custom SCHEMA.RULE
                                  #'RULE' must be [:alnum:]-_$ and should be namespaced
                                  #Can be performed in four different ways according to KOPTS:
                                  #  - validate(SCHEMA_VAL, DATA_VAL, PARENT_SCHEMA, DATA_PATH, PARENT_DATA, DATA_VAR, ROOT_DATA)
                                  #    ->[VALIDATION_PROMISE_]BOOL
                                  #     - fired during VALIDATE()
                                  #     - is the most flexible, but slowest
                                  #  - compile(SCHEMA_VAL, PARENT_SCHEMA, CONTEXT)->(DATA_VAL, DATA_PATH, PARENT_DATA, 
                                  #    DATA_VAR, ROOT_DATA)->[VALIDATION_PROMISE_]BOOL
                                  #     - first function is fired during AJV.compile(), second during VALIDATE()
                                  #  - macro(SCHEMA_VAL, PARENT_SCHEMA, CONTEXT)->EXTRA_SCHEMA
                                  #     - fired during AJV.compile()
                                  #     - can be the most efficient
                                  #  - inline(CONTEXT, 'RULE', SCHEMA_VAL, PARENT_SCHEMA)->STR
                                  #     - fired during AJV.compile()
                                  #     - the fastest, but way too complicated to use
                                  #See above about how to set custom error messages
                                  #KOPTS:
                                  #  - type 'TYPE'[_ARR] (def: all): only trigger on those types
                                  #  - valid true: if FUNC is performed but its result can be ignored, i.e. only used for 
                                  #    side-effects
                                  #  - modifying true: so FUNC can modify object (through PARENT|ROOT_DATA)
                                  #  (validate() only)
                                  #  - schema false: SCHEMA_VAL, PARENT_SCHEMA are not passed as argument
                                  #  - $data true: allow using $data
                                  #  - async VAL:
                                  #     - if returning validate() returns VALIDATION_PROMISE
                                  #     - AJV.validate() will return RESULT_PROMISE:
                                  #        - resolved with DATA_VAL if VALIDATION_PROMISE resolved with true
                                  #        - rejected with ERROR if VALIDATION_PROMISE resolved with false,
                                  #          or if new Ajv.ValidationError(ERROR_OBJ_ARR) thrown
                                  #           - with ERROR.errors ERROR_OBJ_ARR
                                  #        - (should avoid) rejected with VAL if VALIDATION_PROMISE rejected with VAL
                                  #     - RSCHEMA.$async true should be true as well
                                  #     - will use, according to VAL: 
                                  #        - "*"|"co*" (generator) (def), "es7" (async function), 
                                  #        - autodetects with package ajv-async (version 0.1.0), doing AJVASYNC(AJV)
                                  #     - will transpile using KOPTS.transpile "nodent|regenerator" 
                                  #       (must be installed separately)
                                  #AOPTS:
                                  #  - passContext BOOL: if false (def), bind validate function context with AJV
                                  #CONTEXT:
                                  #  - level NUM: depth level of SCHEMA_VAL
                                  #  - dataLevel NUM: depth level of DATA_VAL
                                  #  - schema SCHEMA
                                  #  - schemaPath SCHEMA_PATH
                                  #  - self AJV
                                  #  - opts AOPTS
                                  #  - async BOOL
                                  #  - formats 'FORMAT'_ARR: all available in AJV
                                  #  - baseId: base URI for $ref resolving
                                  #  - compositeRule BOOL: is inside anyOf|oneOf|not|if|switch
AJV.getKeyword('RULE')->VAL       #Returns KOPTS, true (if builtin) or false (undefined)
AJV.removeKeyword('RULE')         #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         AJV-KEYWORDS          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


VERSION ==>                       #2.0.1-beta2

AJVKEYWORDS(AJV[, 'RULE'[_ARR]])  #Add some custom rules (documented in JSON schema doc)
require
('ajv-keywords/keywords/RUL')(AJV)#Same, but add less code if used in browser
