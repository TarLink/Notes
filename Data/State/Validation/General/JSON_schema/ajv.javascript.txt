
         
   AJV   
         


TO FINISH:
https://github.com/epoberezkin/ajv#defining-custom-keywords
https://github.com/epoberezkin/ajv/blob/master/COERCION.md
https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md
https://github.com/epoberezkin/ajv/blob/master/FAQ.md
https://github.com/epoberezkin/ajv-keywords
https://github.com/epoberezkin/ajv-merge-patch
https://github.com/epoberezkin/ajv-pack
https://github.com/jessedc/ajv-cli


ALTERNATIVES ==>                  #JSON schema validators:
                                  #  - tdegrunt jsonschema, z-schema: too slow
                                  #  - jsen, is-my-json-valid: quite ok
                                  #  - ajv: best speed, and most features. Only one supporting some of v5

VERSION ==>                       #4.11.4
                                  #Validates JSON schema v4
                                  #Also some of v5, providing AOPTS.v5 true (see JSON schema to see list supported by ajv)
                                  #Browser or Node.js

MEMOIZATION ==>                   #Perform after compilation step, and also after validation step


new AJV([AOPTS])                  #
AJV.compile(SCHEMA)->VALIDATE     #Unless AOPTS.validateSchema false, validate schema against its meta-schema
AJV.compileAsync                  #Same but async, waiting for remote references to be resolved.
 (SCHEMA, FUNC(ERROR, VALIDATE))  #AOPTS.missingRefs must be true
 
VALIDATE(OBJ)->BOOL               #
AJV.validate(SCHEMA,OBJ)->BOOL#Same as AJV.compile(SCHEMA)(OBJ)->BOOL
VALIDATE.errors                   #Of the last VALIDATE()
                                  #null if no errors

AOPTS.loadSchema                  #JSON references are automatically resolved
('URI', FUNC(ERROR, SCHEMA))      #Function to fetch JSON references
AOPTS.missingRefs VAL             #What to do with JSON references that are not resolved or cannot be:
                                  #  - true (def): throw exception with ERROR: missingRef 'URI#HASH', missingSchema 'URI'
                                  #  - 'ignore|fail': log error, then create rule that always succeeds|fails
AOPTS.extendRefs                  #What to do when JSON references has other members than just "$ref":
                                  #  - true (def): merge those members as additional rules
                                  #  - "ignore": ignore members (as per JSON reference standard)
                                  #  - "fail": throw exception

AJV.addFormat('FORMAT', VVAL)     #Add custom SCHEMA.format according to VVAL:
AOPTS.formats.FORMAT VVAL         #  - OBJ:
                                  #     - validate, async: see AJV.addKeyword()
                                  #     - compare(STR, STR2)->-1|0|1: to make SCHEMA.format[Exlusive]Maximum|Minimum work
                                  #  - VAL: shortcut for OBJ.validate VAL
AJV.addKeyword('RULE', OPTS)      #Add custom SCHEMA.RULE
                                  #'RULE' must be [:alnum:]-_$ and should be namespaced
                                  #Can be performed in four different ways according to OPTS:
                                  #  - validate REGEXP|'REGEXP' or FUNC(SCHEMA_VAL, DATA_VAL, PARENT_SCHEMA, PATH, PARENT_VAL, 'VAR', ROOT_VAL)->[PROMISE_]BOOL
                                  #     - fired during VALIDATE()
                                  #     - is the most flexible, but slowest
                                  #  - compile(SCHEMA_VAL, PARENT_SCHEMA, CONTEXT)->(DATA_VAL, PATH, PARENT_VAL, 'VAR', ROOT_VAL)->[PROMISE_]BOOL
                                  #     - first function is fired during AJV.compile(), second during VALIDATE()
                                  #  - macro(SCHEMA_VAL, PARENT_SCHEMA, CONTEXT)->EXTRA_SCHEMA
                                  #     - fired during AJV.compile()
                                  #     - can be the most efficient
                                  #  - inline(CONTEXT, 'RULE', SCHEMA_VAL, PARENT_SCHEMA)->STR
                                  #     - fired during AJV.compile()
                                  #     - the fastest, but way too complicated to use
                                  #Validation functions:
                                  #  - can assign this.errors OBJ_ARR (def: standard errors)
                                  #     - if not, should use OPTS.errors false for better efficiency
                                  #OPTS:
                                  #  - type 'TYPE'[_ARR] (def: all): only trigger on those types
                                  #  - valid true: if FUNC is performed but its result can be ignored, i.e. only used for side-effects
                                  #  - modifying true: so FUNC can modify object (through PARENT|ROOT_VAL)
                                  #  (validate() only)
                                  #  - schema false: [PARENT|ROOT_]VAL are not passed as argument
                                  #  - async true: if returning PROMISE
                                  #  - $data true: allow using $data
                                  #  (not validate())
                                  #  - metaSchema SCHEMA:
                                  #     - validate SCHEMA_VAL against SCHEMA, during AJV.compile()
                                  #     - unless AOPTS.validateSchema false
