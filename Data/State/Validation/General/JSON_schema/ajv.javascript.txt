
         
   AJV   
         


TO FINISH:
https://github.com/epoberezkin/ajv#defining-custom-keywords
https://github.com/epoberezkin/ajv/blob/master/COERCION.md
https://github.com/epoberezkin/ajv/blob/master/CUSTOM.md
https://github.com/epoberezkin/ajv/blob/master/FAQ.md
https://github.com/epoberezkin/ajv-keywords
https://github.com/epoberezkin/ajv-merge-patch
https://github.com/epoberezkin/ajv-pack
https://github.com/jessedc/ajv-cli


ALTERNATIVES ==>                  #JSON schema validators:
                                  #  - tdegrunt jsonschema, z-schema: too slow
                                  #  - jsen, is-my-json-valid: quite ok
                                  #  - ajv: best speed, and most features. Only one supporting some of v5

VERSION ==>                       #4.11.4
                                  #Validates JSON schema v4
                                  #Also some of v5, providing OPTS.v5 true (see JSON schema to see list supported by ajv)
                                  #Browser or Node.js

MEMOIZATION ==>                   #Perform after compilation step, and also after validation step


new AJV([OPTS])                   #
AJV.compile(SCHEMA_OBJ)->VALIDATE #Unless OPTS.validateSchema false, validate schema against its meta-schema
AJV.compileAsync                  #Same but async, waiting for remote references to be resolved.
 (SCHEMA, FUNC(ERROR, VALIDATE))  #OPTS.missingRefs must be true
 
VALIDATE(OBJ)->BOOL               #
AJV.validate(SCHEMA_OBJ,OBJ)->BOOL#Same as AJV.compile(SCHEMA_OBJ)(OBJ)->BOOL
VALIDATE.errors                   #Of the last VALIDATE()
                                  #null if no errors

OPTS.loadSchema                   #JSON references are automatically resolved
('URI', FUNC(ERROR, SCHEMA))      #Function to fetch JSON references
OPTS.missingRefs VAL              #What to do with JSON references that are not resolved or cannot be:
                                  #  - true (def): throw exception with ERROR: missingRef 'URI#HASH', missingSchema 'URI'
                                  #  - 'ignore|fail': log error, then create rule that always succeeds|fails
OPTS.extendRefs                   #What to do when JSON references has other members than just "$ref":
                                  #  - true (def): merge those members as additional rules
                                  #  - "ignore": ignore members (as per JSON reference standard)
                                  #  - "fail": throw exception

AJV.addFormat('FORMAT', VVAL)     #Add custom SCHEMA.format according to VVAL:
OPTS.formats.FORMAT VVAL          #  - OBJ:
                                  #     - validate, async: see AJV.addKeyword()
                                  #     - compare(STR, STR2)->-1|0|1: to make SCHEMA.format[Exlusive]Maximum|Minimum work
                                  #  - VAL: shortcut for OBJ.validate VAL
AJV.addKeyword('RULE', OBJ)       #Add custom SCHEMA.RULE
                                  #'RULE' must be [:alnum:]-_$ and should be namespaced
                                  #OBJ:
                                  #  - type 'TYPE'[_ARR] (def: all): only trigger on those types
                                  #  - validate REGEXP|'REGEXP' or FUNC(STR)->[PROMISE_]BOOL
                                  #  - async true: if using FUNC(STR)->PROMISE_BOOL
                                  #  - compile|macro|inline???
