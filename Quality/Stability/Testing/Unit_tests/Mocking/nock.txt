
          
   NOCK   
          


nock                          #Node module 0.42.1 mocking HTTP.request() and CLIENTREQUEST (server-side testing)
                              #Can be turned off with ENVVAR NOCK_OFF BOOL
                              #Chaining: 
                              #  - NOCK() returns SCOPE
                              #  - SCOPE.* returns SCOPE, except SCOPE.get|... that returns PATHSCOPE
                              #    All methods apply only to the next PATHSCOPE
                              #  - PATHSCOPE.* returns PATHSCOPE, except PATHSCOPE.reply() that returns SCOPE
NOCK(DOMAIN_URL_STR[, OBJ])   #Mocks calls to DOMAIN_URL (must contain protocol). OBJ:
                              #  - filteringScope FUNC(URL)->BOOL: use as a filter function instead of URL_STR
                              #  - reqheaders OBJ: like SCOPE.matchHeader(), but apply to all PATHSCOPE
NOCK.cleanAll|restore()       #cleanAll() removes all past SCOPE.*
                              #restore() also restore original HTTP.request() and CLIENTREQUEST functions.
NOCK.enable|disableNetConnect
([DOMAIN_URL_STR|REGEXP])     #If no SCOPE matches, do the real request (déf) or throw except (disableNetConnect).

SCOPE.get|post|put|delete|head#Returns PATHSCOPE, i.e. a fake reply for request to URL/PATH using this HTTP method
|patch|merge(PATH[, OBJ|STR]) #and OBJ|STR data
SCOPE.matchHeader(VAR_STR, 
STR|REGEXP|FUNC(VAL)->BOOL)   #Only mocks calls with that request header
SCOPE.filteringPath
(FUNC(PATH)->PATH2)           #Transform calls to PATH to PATH2
SCOPE.filteringPath(REGEXP, 
PATH)                         #Transform calls matching REGEXP to PATH
SCOPE.filtertingRequestBody
(...)                         #Same for request body STR

PATHSCOPE.reply[WithFile]     #NUM is error code, VAL response, OBJ response headers. 
(NUM[, VAL[, OBJ]])           #VAL can be STR, OBJ, FUNC(URL, REQUESTBODY)->VAL|ISTREAM or (if "WithFile") a FILE content.
                              #OBJ default response headers can be specified with SCOPE.defaultReplyHeaders(OBJ) (returns 
                              #SCOPE)
                              #Then destroys PATHSCOPE (must set up one for each request) unless PATHSCOPE.times(UINT) was 
                              #used before (or SCOPE.persist() for infinity), in which case it will respond UINT times 
                              #before desctruction.
PATHSCP.delay[Connection](NUM)#Delay connection|response time.

SCOPE.done()                  #Asserts (otherwise throw exception) that all PATHSCOPE have been fired
SCOPE.isDone()                #Same but returns BOOL instead of asserting
SCOPE.pendingMocks()          #PATHSCOPE not fired yet as STR_ARR, where STR is "METHOD DOMAIN_URL:PORT/PATH"

SCOPE.log(FUNC(STR))          #Fires FUNC(STR) everytime a mock call is performed, where STR is a log message showing the
                              #original URL and the mocked one.
NOCK.recorder.rec([OBJ])      #Prints to console current HTTP calls unless using OBJ.dont_print true. 
                              #Can also get them with NOCK.recorder.play().
                              #Output format is log STR, or if OBJ.output_objects true, OBJ_ARR: scope, method, path, body, 
                              #status, response, headers, reqheader
NOCK.recorder.clear()         #Clears previous recording requests.
