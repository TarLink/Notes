
             
   SWAGGER   
             


                              #Is a JSON file describing REST API, in order to automate API creation, client creation, 
                              #testing, documentation, etc.
															#Version 2.0

SPEC ==>                      #At APP_ROOT_URL/swagger.json
															#OBJ:
															#  - swagger: 2.0
															#  - info:
															#     - title STR: name of the app
															#     - description STR: can use Markdown, GFM syntax
															#     - version STR
															#     - termsOfService URL
															#     - contact:
															#        - name STR
															#        - url URL
															#        - email STR
															#     - license: name STR, url URL
															#     - "x-..." VAR: anything (vendor extensions)
															#  - host STR: no protocol, only hostname
															#  - basePath STR: must start with "/", e.g. "/api/v1"
															#  - schemes STR_ARR among "http[s]" and "ws[s]"
															#  - consumes|produces MIME_STR_ARR
															#  - paths:
															#     - "/PATH": can replace part of PATH with {PARAM_VAR}
															#        - get|put|post|delete|options|head|patch:
															#           - tags, description, externalDocs, consumes, produces, parameters, schemes
															#             same as above but only for this method
                              #              - for tags, it is STR refering to above name field
                              #           - security: SEC_VAR: SCOPE_ARR
															#           - summary STR: max 120 chars
															#           - operationId FUNC_STR: used by client APIs
															#           - deprecated BOOL
															#           - responses:
															#              - default $ref STR or RESP_OBJ:
															#                 - description STR
															#                 - schema SCHEMA_OBJ
															#                 - headers: HEADER_NAME: 
															#                    - any member of ITEM_OBJ
															#                    - items ITEM_OBJ
															#                 - example: MIME_TYPE: VAL
															#              - HTTP_STATUS_CODE: $ref STR or RESP_OBJ
															#              - "x-..." VAR: anything (vendor extensions)
															#           - "x-..." VAR: anything (vendor extensions)
															#        - parameters OBJ_ARR, i.e. either REF_OBJ_ARR: $ref "#/parameters/STR" or PARAM_OBJ_ARR:
															#           - name VAR_STR
															#           - in STR: can be "query", "header", "formData" (URL-encoded MIME), 
															#             "body" (json MIME, name must be "body" too), "path" (part of path)
															#           - description STR
															#           - required BOOL
															#           (if in "body")
															#           - schema SCHEMA_OBJ: like ITEM_OBJ but also:
                              #              - can be $ref
                              #              - type can be "object"
                              #              - properties SCHEMA_OBJ_OBJ: for nested objects
                              #              - min|maxProperties NUM
                              #              - required BOOL
                              #              - items
                              #              - allOf
                              #              - readOnly BOOL
                              #              - discriminator STR: for inheritance. To define on parent class, STR being one of
                              #                this parent members inherited by chidren, and differentiating them as
                              #                subclasses.
                              #              - xml OBJ
                              #              - title STR
                              #              - description STR
                              #              - externalDocs
                              #              - example OBJ: free-form
															#           (if not in "body")
															#           - directly ITEM_OBJ members and/or items ITEM_OBJ (if type "array"):
															#              - type "string|number|integer|boolean|array|file" 
															#                (if "file", must consume "multipart/form-data" and use in "formData")
															#              - format STR: "integer" can be "int32|int64", "number" can be "float|double",
															#                string can be nothing or "byte|date|date-time", others don't use 
															#              - collectionFormat STR: if type "array", either: "csv" VAR,VAR2 (def), 
															#                "ssv" VAR VAR2, "tsv" VAR\tVAR2, "pipes" VAR|VAR2, "multi" VAR=VAL&VAR2=VAL2 
															#                (only for in "query|formData")
															#              - default VAL
															#              - maximum|minimum NUM
															#              - exclusiveMaximum|Minimum BOOL
															#              - min|maxLength NUM
															#              - pattern REGEXP_STR
															#              - min|maxItems NUM
															#              - uniqueItems BOOL
															#              - enum VAL_ARR
															#              - multipleOf NUM
															#        - $ref "#/PATH2" (e.g. "#/definitions/NAME"): to reference another path without rewriting same members
															#        - "x-..." VAR: anything (vendor extensions)
															#     - "x-..." VAR: anything (vendor extensions)
															#  - definitions: NAME: SCHEMA_OBJ
                              #     - don't do anything but often used by other members through "$ref"
															#  - parameters: NAME: same with PARAM_OBJ
															#  - responses: NAME: same with RESP_OBJ
                              #  - securityDefinitions: NAME: same with SEC_OBJ
                              #  - security SEC_OBJ_ARR:
                              #     - type "basic|apiKey|oauth2"
                              #     - description STR
                              #     (for apiKey)
                              #     - name SEC_VAR_STR
                              #     - in "query|header"
                              #     (for oauth2)
                              #     - flow "implicit|password|application|accessCode"
                              #     - scopes: VAR: STR (STR is description)
                              #     (for oauth2, implicit|accessCode)
                              #     - authorizationUrl URL
                              #     (for oauth2, accessCode|password|application)
                              #     - tokenUrl URL
															#     - "x-..." VAR: anything (vendor extensions)
															#  - tags OBJ_ARR:
															#     - name STR
															#     - description STR: can use Markdown, GFM syntax
															#     - externalDocs
															#     - "x-..." VAR: anything (vendor extensions)
															#  - externalDocs: description STR, url URL
															
SWAGGER-CLIENT ==>            #Creates JavaScript server-side and client-side from Swagger .json spec (1.2 only), returned as
                              #API_OBJ.
                              #Version 2.1.10-M1
                              #API_OBJ can be wrapped/augmented, e.g.:
                              #  - promises instead of callbacks (Bluebird)
                              #  - caching system
                              #  - easier authentication
GLOBAL                        #Either SWAGGER-CLIENT (server-side) or WINDOW (client-side)
GLOBAL.authorizations.add     #Adds Authentication for discovery calls and following API calls, where AUTH can be:
(VAR, AUTH)                   #  - query|header: new GLOBAL.ApiKeyAuthorization(VAR2, VAL2, "query|header")
GLOBAL.authorizations.remove  #  - cookie: new GLOBAL.CookieAuthorization(COOKIE_OBJ)
(VAR)                         #  - Basic HTTP Authentication: new GLOBAL.PasswordAuthorization(NAME_NOT_USED, USER, PASSWORD)
                              #VAR is "apiKey|oauth2|basicAuth"
new GLOBAL.SwaggerApi(OBJ)		#OBJ:
															#  - url URL: to the .json spec
															#  - success FUNC(): 
                              #     - must then check API_OBJ.ready true
                              #Returns API_OBJ:
                              #  - basePath, url, info, swaggerVersion, apiVersion, consumes, produces, schemes, host
                              #  - authSchemes MAIN_AUTH_OBJ
                              #  - RESOURCE.NICKNAME(OBJ, FUNC(OBJ2), FUNC2(OBJ3)):
                              #     - use OBJ.body STR for request body (must stringify) and OBJ for headers
                              #     - OBJ2:
                              #        - headers.input|normalized OBJ (normalized put in capital-first dashed)
                              #        - url STR
                              #        - method STR
                              #        - status NUM
                              #        - data BUFFER
                              #        - obj OBJ5
                              #     - OBJ3: for errors. If response from server, like OBJ2. Otherwise:
                              #        - status NUM
                              #        - data BUFFER
                              #        - obj OBJ4:
                              #           - code STR
                              #           - errno STR
                              #           - syscall STR
                              #  - api.RESOURCE.NICKNAME.help(BOOL): returns parameters as print help.
                              #    If BOOL false (def), prints them too.
                              #  - api.RESOURCE.NICKNAME.asCurl(...): same as RESOURCE.NICKNAME(...) but prints Curl shell 
                              #    command
                              #Uses:
                              #  - User-Agent: Shred [C]
                              #  - Right Content-Type, Accept, Content-Length [C]

SWAGGER-CODEGEN								#Like SWAGGER-JS but for Flash, Java, Objc, PHP, Python, Python3 or Ruby.

SWAGGER-CLI-CLIENT(JSON_OBJ)	#Like SWAGGER-JS but for CLI. Version 0.1.11
                              #Should be pretty much the only line in the CLI module.
                              #JSON_OBJ is generated from:
                              #  - FETCH-SWAGGER-SCHEMA(URL, FUNC(ERROR, JSON_OBJ)) (version 0.1.2)
                              #  - or via command line fetch-swagger-schema URL (prints to stdout)
                              #To use Node as command line use Node shabang #!/usr/bin/env node
--PARAM VAL                   #
--basePathOverride PATH				#Override base path of API. Can also use envvar APPNAME_BASE_PATH or ./.APPNAME json file with
															#basePath PATH

SWAGGER-NODE-EXPRESS					#Node.js module that generates Express server based on models .js files and also serves Swagger 
															#spec .json file.
															
SWAGGER-UI										#HTML/CSS/JavaScript templates that show documentation based on .json spec (hardcoded URL in
															#main HTML file (must be api-docs file for spec 1.2)).
                              #To customize: 
                              #  - sources are in src/
                              #  - compile with npm install, npm run-script build
                              #To add API key header, add JavaScript event handler with:
                              #  window.authorizations.add("key", new ApiKeyAuthorization(HEADER_VAR, HEADER_VAL, "header"))
                              #Version 2.1.0
