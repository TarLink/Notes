
                
   CLOUDWATCH   
                


GOAL ==>                      #  - CloudWatch: check stats/metrics (e.g. performance), and send alarms
                              #  - CloudWatchLogs: aggregates logs to single place, with rotation, and possibility to
                              #    create CloudWatch alarms when log line match pattern

VERSION ==>										#2013/02/22

PRICING ==>                   #CloudWatch:
                              #  - AWS included metrics: free
                              #  - 0.5$/month per custom metric (first 10 free)
                              #     - metric = combination MetricData + Namespace + Dimensions
                              #  - 0.1$/month per alarm (first 10 free)
                              #     - first 1000 SNS notifications free
                              #  - 1$/month per 100000 GetMetricStatistics(), ListMetrics() or PutMetricData() 
                              #    (first 1000000 free)
                              #CloudWatchLogs:
                              #  - 0.5$/GB/month read
                              #  - 0.03$/GB/month stored
                              #  - GetLogEvents(): same price as out traffic on EC2


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              API              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


API ==>							     	    #  - ARR is actually VAR.member.NUM instead of VAR.NUM in REST API
                              #  - Domains:
                              #     - CloudWatch: monitoring.REGION.amazonaws.com
                              #     - CloudWatchLogs: logs.REGION.amazonaws.com
                              #  - CLI:
															#     - CloudWatch: cloudwatch 
                              #     - CloudWatchLogs: logs
															#JSON not XML

PAGINATION ==>								#  - CloudWatch: 
															#     - Use NextToken STR as request variable and in response body
															#     - Use MaxRecords as request variable.
															#  - CloudWatchLogs:
															#     - GetLogEvents:
															#        - Use Limit NUM (def: 10000 log events or 1MB), NextToken STR as request variable
															#        - Use NextBackward|ForwardToken STR in response body
															#     - DescribeLogGroups|LogStreams|MetricFilters:
															#        - Use Limit NUM (def: 10000 log events or 1MB), NextToken STR as request variable
															#        - Use NextToken STR in response body
															#     - PutLogEvents:
															#        - Use SequenceToken STR as request variable 
															#        - Use NextToken STR in response body

LIMIT ==>                     #  - 40KB PutMetricData() request
                              #  - 10 dimensions per metric
                              #  - 5000 alarms
                              #  - metric data kept for two weeks


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            METRICS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PutMetricData()								#Adds a datapoint to a metric (timeserie), usually over a AWS resource performance 
                              #(e.g. CPU usage) but can be custom.
                              #If metric does not exist, creates it.
                              #AWS SERVICE automatically send metrics, with Namespace "AWS/SERVICE"
                              #  - to enable Billing metrics, go to AWS Console parameters
                              #Request variables:
															#  - Namespace STR: put in front of METRIC_STR
															#  - MetricData OBJ_ARR (max 20):
															#     - MetricName METRIC_STR
															#     - Dimensions OBJ_ARR: like Namespace and METRIC_STR, part of the identifier.
                              #       Example: Name=EC2_Instance,Value=IP
                              #        - Name STR 
                              #        - Value STR
															#     - Timestamp DATE (def: now): if more than one day backward, might take time to become 
                              #       available
															#     - Value DOUBLE
															#     - Unit UNIT_STR
															#        - "[Micro|Milli]Seconds"
															#        - "Percent"
															#        - "Count[/Second]"
															#        - "[Kilo|Mega|Giga|Tera]bits|bytes[/Second]"
															#        - "None"
															#     - StatisticValues:
                              #        - idea is to put aggregates for periods instead of datapoints (so less requests/cheaper)
                              #        - must then use regular frequency
                              #        - Minimum|Maximum|SampleCount|Sum DOUBLE
GetMetricStatistics()					#Request variables: 
                              #  - MetricName, Namespace, Unit
															#  - Dimensions (optional)
                              #  - Statistics STR_ARR: required
                              #  - Period NUM (in sec., must be multiple of 60, def 60): on which periods the Statistics 
                              #    in applied (e.g. averages of every 10 mins)
															#  - StartTime|EndTime DATE (def: last hour)
															#Response body:
															#  - Label STR
															#  - Datapoints OBJ_ARR:
															#     - Minimum|Maximum|SampleCount|Sum|Average DOUBLE
															#     - Timestamp DATE
															#     - Unit UNIT_STR
ListMetrics()									#Request variables METRICS_OBJ_ARR:
															#  - Dimensions OBJ_ARR: Name STR, Value STR
															#  - MetricName STR
															#  - Namespace STR
															#Response body: Metrics METRICS_OBJ_ARR
															#Paginates


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            ALARMS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PutMetricAlarm()							#Request variables METRIC_ALARM:
															#  - MetricName STR
															#  - Namespace STR
															#  - Statistic "SampleCount|Average|Sum|Minimum|Maximum"
															#  - Dimensions OBJ_ARR: Name STR, Value STR
															#  - Unit UNIT_STR: all previous members select which metric to check
															#  - Period NUM: the alarm chooses which period to apply the Statistic on
															#  - ComparisonOperator "Greater|LessThan[OrEqualTo]Threshold": together with Threshold,
                              #    triggers "ALARM" state
															#  - Threshold DOUBLE
															#  - EvaluationPeriods NUM: number of periods before ComparisonOperator+Threshold can change 
                              #    state
															#  - AlarmDescription STR
															#  - AlarmName STR
															#  - ActionsEnabled BOOL: can disable an alarm
															#  - OKAlarm|InsufficientDataActions STR_ARR: 
                              #     - what to do when state changes
                              #     - STR is ARN of the action, either:
                              #        - SNS_TOPIC_ARN: send SNS notification
                              #        - "arn:aws:automate:REGION:ec2:stop|terminate": stop|terminate the EC2 instance
DeleteAlarms()								#Request variables: AlarmNames STR_ARR
DescribeAlarmsForMetric()			#Request variables:
															#  - Dimensions, MetricName, Namespace, Period, Unit, Statistics STR_ARR
															#Response body: MetricAlarms METRIC_ALARM_ARR
DescribeAlarms()							#Request variables:
															#  - ActionPrefix STR
															#  - AlarmNamePrefix STR
															#  - AlarmNames STR_ARR
															#  - StateValue:
                              #     - "OK"
                              #     - "ALARM": problem
                              #     - "INSUFFICIENT_DATA": pending feedback
															#Response body: MetricAlarms OBJ_ARR:
															#  - Same members as METRIC_ALARM and ALARM_STATE
															#  - AlarmConfigurationUpdatedTimestamp DATE
															#  - StateUpdatedTimestamp DATE
															#Paginates.
Enable|DisableAlarmActions()	#Request variables: AlarmNames STR_ARR
SetAlarmState()								#Manually triggers an alarm (for testing).
                              #Request variables ALARM_STATE:
															#  - AlarmName STR
															#  - StateReason[Data] [JSON_]STR
															#  - StateValue "OK|ALARM|INSUFFICIENT_DATA"
DescribeAlarmHistory()				#Request variables:
															#  - AlarmName STR
															#  - StartDate|EndDate DATE (only preserves two weeks)
															#  - HistoryItemType "ConfigurationUpdate|StateUpdate|Action"
															#Response body: AlarmHistoryItems OBJ_ARR:
															#  - AlarmName STR
															#  - Timestamp DATE
															#  - HistoryItemType "ConfigurationUpdate|StateUpdate|Action"
															#  - HistorySummary|Date [JSON_]STR
															#Paginates.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             LOGS              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CLOUDWATCH LOGS ==>						#Only in US-East for the moment

PutLogEvents()								#A log event is a log message.
                              #Can setup CloudWatchLogs agent to automatically send log events from an EC2 instance log files
                              #(e.g. in /var/log/) (see online doc)
                              #Request variables:
															#  - LogEvents OBJ_ARR:
															#     - Message STR
															#     - Timestamp DATE_NUM
															#  - LogGroupName STR
															#  - LogStreamName STR
															#Paginates
GetLogEvents()								#Request variables:
															#  - StartTime|EndTime DATE_NUM
															#  - LogGroupName STR
															#  - LogStreamName STR
															#  - StartFromHead BOOL
															#Response body: Events OBJ_ARR:
															#  - IngestionTime DATE_NUM
															#  - Message STR
															#  - Timestamp DATE_NUM
		
Create|DeleteLogStream()			#A log stream is a serie of log events.
                              #If empty more than two months, automatically deleted.
                              #Request variables:
															#  - LogGroupName STR
															#  - LogStreamName STR
DescribeLogStreams()					#Request variables:
															#  - LogGroupName STR
															#  - LogStreamName STR
															#Response body: LogStreams OBJ_ARR
															#  - Arn
															#  - CreationTime DATE_NUM
															#  - First|LastEventTimestamp DATE_NUM
															#  - LastIngestionTime DATE_NUM
															#  - LogStreamName STR
															#  - StoredBytes NUM
															#  - UploadSequenceToken STR

Create|DeleteLogGroup()				#Groups of log streams with same ACL, RetentionInDays and monitoring.
                              #Request variables: LogGroupName STR
PutRetentionPolicy()					#Request variables:
															#  - LogGroupName STR
															#  - RetentionInDays 1|3|5|7|14|30|60|90|120|150|180|365|400|545|731|1827|3653
                              #     - log events older than this are erasd
DeleteRetentionPolicy()				#Request variables: LogGroupName STR
DescribeLogGroups()						#Request variables: LogGroupNamePrefix STR
															#Response body: LogGroups OBJ_ARR
															#  - Arn 
															#  - CreationTime DATE_NUM
															#  - LogGroupName STR
															#  - MetricFilterCount NUM
															#  - RetentionInDays 1|3|5|7|14|30|60|90|120|150|180|365|400|545|731|1827|3653
															#  - StoredBytes NUM

PutMetricFilter()							#Transform log events into CloudWatch metrics.
                              #Request variables METRIC_FILTER:
															#  - FilterName STR
															#  - FilterPattern (STR and VAL can use globbing):
                              #     - STR: pattern triggering metric (can be "" for any log event)
                              #     - [VAR[=|>|<|>=|<=|!=VAL],...]: for tab-delimited log lines, when a field equals VAL
                              #        - VAR can be "..." at beginning, middle or end
															#  - LogGroupName STR
															#  - MetricTransformations OBJ_ARR:
															#     - MetricName STR
															#     - MetricNamespace STR
															#     - MetricValue STR (e.g. "1")
DeleteMetricFilter()					#Request variables:
															#  - FilterName STR
															#  - LogGroupName STR
TestMetricFilter()						#Request variables:
															#  - FilterPattern STR
															#  - LogEventMessages STR_ARR
															#Response body: Matches OBJ_ARR:
															#  - EventMessage STR
															#  - EventNumber NUM
															#  - ExtractedValues:
															#     - VAR: STR
DescribeMetricFilters()				#Request variables:
															#  - FilterNamePrefix STR
															#  - LogGroupName STR
															#Response body: MetricFilters METRIC_FILTER_ARR
