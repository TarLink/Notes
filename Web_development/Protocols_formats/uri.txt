
         
   URI   
         


RFCs:
  - i18n: 3987
  - namespaces: 3406, 3553
  - resolution: 2169, 2276, 2483
  - Same origin policy: 6454
  - templates: 6570
  - well known URI: 5785
  - examples: 6963
  - data URI: 2397 (including max size)
  - IPv6: 6874
  - OID: 3061
  - tel://: 3966
  - FPI: 3151
  - UUID: 4122
  - tag://: 4151
  - about://: 6694
  - CSV: 7111
  - format this doc
  - go back to HTTP doc

URI (Uniform Resource Identifier):
  - syntax:
     - [SCHEME:][//[USERINFO@]HOSTNAME[:[PORT]]][PATH][?[QUERY]][#[HASH]]
     - syntax restrictions:
        - can be defined by specific SCHEME
        - should not be defined by specific AUTHORITY
           - except for PORT
           - otherwise it can:
              - conflict with other technologies also restricting URI syntax
              - make URI more dependant on implementation
              - make it less flexible
        - HASH syntax|semantics are defined by MIME type, not SCHEME nor AUTHORITY
     - parts:
        - SCHEME
        - AUTHORITY: USERINFOUSERINFO+HOSTNAME+PORT
        - USERINFO:
           - should avoid plaintext like USER:PASSWORD
        - HOSTNAME: 
           - can be other things too, e.g. IP address (for IP protocols)
           - max length 255 bytes
        - PORT:
           - socket number
        - PATH:
           - / imply hierarchy
           - when AUTHORITY and PATH both present, must be separated by /
           - can use . or .. (must be resolved as fast as possible)
        - QUERY: 
           - can be any syntax, but usually ?VAR=VAL&...
        - HASH:
           - can be:
              - part of RESOURCE
              - RESOURCE2 referenced by RESOURCE
              - RESOURCE variant
           - semantics depends on MIME type
           - processed by client not server
     - charset: 
        - not permitted characters: percent-encoding (also known as "URL encoding") UTF-8 byte value (case-insensitive, prefer uppercase)
        - permitted characters (beyond delimiters defined above):
            SCHEME USERINFO HOSTNAME PORT PATH QUERY HASH    [:alnum:] - .
                   USERINFO HOSTNAME PORT PATH QUERY HASH    _ ~
            SCHEME USERINFO HOSTNAME      PATH QUERY HASH    +
                   USERINFO HOSTNAME      PATH QUERY HASH    ! $ & ' ( ) * , ; =
                   USERINFO                    PATH QUERY HASH.   :
                                               PATH QUERY HASH    @
                                                    QUERY HASH    / ?
     - case:
        - SCHEME, HOSTNAME: case-insensitive, lowercase recommended
        - rest: depends on SCHEME and AUTHORITY
     - max length: depends on URI scheme, but recommmends 255 bytes
     - relative reference:
        - when SCHEME: is ommitted
        - relative to another URI2 ("base URI"):
           - can be (in priority order):
              - defined in RESOURCE (e.g. <base> in HTML)
              - defined in parent RESOURCE2
              - top-level resource's URI2
              - application-specific default URI2
        - if URI:
           - empty or only QUERY|HASH: 
              - same as URI2 ("same document reference")
              - including QUERY2 unless QUERY specified
              - excluding HASH2. HASH is also used.
           - URI: 
              - relative to SCHEME2://AUTHORITY2/PATH2/ ("relative path reference")
              - /PATH2/ excludes filename
           - /URI: relative to SCHEME2://AUTHORITY2/ ("absolute path reference")
           - //URI: relative to SCHEME2: ("network path reference")
        - "URI reference": URI or relative reference
  - resource identity:
     - whether RESOURCE == RESOURCE2
        - changes (formats, encoding, etc.)
        - versions
     - depends on URI scheme
  - cardinality:
     - sameness (required): 
        - different requests to same URI cannot return different resources 
        - at different places (global namespace) or times
        - global namespace:
           - points to same resource in any network, but resource might be available or not depending on network
           - sometimes the context is part of the resource itself, e.g.:
              - file:
              - http://localhost
              - time-based protocols
           - implies central authorities:
              - URN NAMESPACE are registered to IANA
              - URL:
                 - HOST IP and domain names are delegated to providers registered to IANA
                 - PATH is responsibility of server
     - no ambiguity (required): 
        - one request to 1 URI cannot return many resources at once
     - uniqueness (optional): 
        - cannot bind duplicate URIs to 1 resource
        - depends on URI identity:
           - whether URI == URI2
           - normalization:
              - safe:
                 - lowercase SCHEME, HOST
                 - uppercase %-encoded chars
                 - %-decode chars that do not need to be
                 - resolving . and ..
                 - resolving relative references
              - SCHEME-specific (unsafe):
                 - removing parts that equal default value (e.g. PORT, PATH, filename)
                 - replace with equivalent SCHEME (e.g. http -> https)
                 - remove empty parts, e.g. ? or # alone
                 - lowercase|uppercase of case-insensitive parts (other than SCHEME, HOST)
                 - remove duplicate /
                 - IP:
                    - IP -> hostname
                 - HTTP:
                    - prepend www. to HOST
              - AUTHORITY-specific (unsafe):
                 - add trailing /
                 - sorting QUERY
                 - removing unused parts (e.g. undefined query variables)
                 - remove #HASH
        - usign several URIs for 1 resource:
           - canonical URI: 
              - the one which has priority
              - with URLs, others might redirect to canonical URL
           - short URI: smaller size than others
  - can describe:
     - can be opaque/unreflective or transparent/reflective: 
        - whether URL describes content|metadata
     - not exclusive to each other:
        - identity:
           - resource ID, regardless of location:
           - long-term persistent
           - resolution:
              - translating into location/metadata
              - example: Handle System
           - example: URN, DOI
        - location:
           - address where a resource might be located
           - called URL (Uniform Resource Locator)
           - must use one|several network protocols|algorithm:
              - URI scheme does not always equate protocol, e.g. data: or file:
           - transient
              - if persistent: permalink or PURL (permanent URL)
                 - redirect to transient URL
              - rotten|dead|broken link:
                 - when location does not reference to the resource anymore
        - content:
           - including hash
           - example: data URI
        - metadata:
           - e.g.: URLs, owner, access restrictions, encoding
           - transient
           - example: URC, RDF
  - semantic/clean/RESTful URI:
     - resource name should be abstract and not infer implementation:
        - resource names instead of file|script name
           - using slugs, i.e. short [[:alpha:][:lower:]-]
        - instead of query variables:
           - PATH parts
           - file extension (for resource format)
        - often only use several /RESOURCE and /ID
     - goals:
        - accessibility
        - separation of concerns, e.g. does not need to change URL when implementation changes
     - technologies that can help keep URI clean:
        - HTTP headers
        - URI templates
        - Link [S]
        - well known URIs
  - specific URI schemes:
     - urn (Uniform Resource Name):
        - urn:NAMESPACE:NSS (i.e. SCHEME:PATH)
        - NAMESPACE:
           - case-insensitive
           - [[:alnum:]-]
           - max length 31 bytes
        - NSS:
           - case-sensitivity depends on NAMESPACE
           - any char permitted in URI HASH except ~ & / ? (otherwise percent-encoding)
        - example of NAMESPACE: isbn, nbn, isan (movies), issn (journal), ietf:rtc, mpeg (MPEG subformats), oid, uuid, lex (law)
     - DOI:
        - doi:NAMESPACE/ID
        - used for publishing, journals
        - resolved by http://dx.doi.org/NAMESPACE/ID (using Handle System) to location/metadata
     - urc (Uniform Resource Characteristics): 
        - never implemented
     - file:
        - local files
        - HOST is file://[localhost]/PATH
     - data URI:
        - "data:[MIMETYPE];base64,CODE":
           - CODE: data encoded in base64 (e.g. using WINDOW.btoa|atob())
              - base64 discard whitespaces
           - def MIMETYPE: text/plain
        - "data:[MIMETYPE];charset=utf-8,CODE":
           - CODE: data URI encoded (e.g. with encode|decodeURIComponent())
  - security: see web security doc
