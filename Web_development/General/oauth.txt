
           
   OAUTH   
           


OAUTH ==>				#Version 2.0

DISCOVERY DOC ==>
	- Main URLs used by a provider, as a JSON file. 
	- Fields:
		 - "issuer" ISSUER
		 - "authorization_endpoint" AUTH_URL
		 - "token_endpoint" TOKEN_URL
		 - "revocation_endpoint" REVOKE_URL
		 - "jwks_uri" PUBLICKEYS_URL
	- For Google: https://accounts.google.com/.well-known/openid-configuration:
		 - ISSUER: accounts.google.com
		 - AUTH_URL: https://accounts.google.com/o/oauth2/auth
		 - TOKEN_URL: https://accounts.google.com/o/oauth2/token
		 - REVOKE_URL: https://accounts.google.com/o/oauth2/revoke
		 - PUBLICKEYS_URL: https://www.googleapis.com/oauth2/v2/certs, updated every day
		 - TOKEN_INFO_URL: https://www.googleapi.com/oauth2/v1/tokeninfo
		 - "response_types_supported": [  "code",  "token",  "id_token",  "code token",  "code id_token",  "token id_token",  
		   "code token id_token",  "none" ]
		 - "subject_types_supported": [  "public" ]
		 - "id_token_alg_values_supported": [  "RS256" ]
		 - "token_endpoint_auth_methods_supported": [  "client_secret_post" ]

Main:
	- A given user ("Resource Owner") allows an application "B" ("Resource Server") to allow any Application "A" ("client") to do
	  something on its behalf
  -	Scenarios (this doc only shows [C] and [S]:
		 - [C]: client-side
		 - [S]: server-side. Use a CLIENT_SECRET so only specific app can do requests.
     - [A]: desktop/mobile apps. Similar to [S] except for APP_URL. CLIENT_SECRET is in the app, so can't be treated as secret.
     - [D]: other devices (game console, printer, etc.). Since user consent cannot happen on the device, user gets a key that
		        needs to be entered in a web browser using another device.
  - Initial data:
		 - Elements:
				- CLIENT_ID
				- [S] CLIENT_SECRET (shared secret between "A" and "B")
				- APP_URL_ARR (only https://)
	   - With Google: 
		    - registration with Google App Console.
				- also contains:
  				 - some content shown on user consent window (name, logo, main page URL)
				   - API_KEY (same function as CLIENT_ID)
	
Scenario ( __ means POST variables):
  - Getting TOKEN [S]:
     - "A". GET  - AUTH_URL?       TOKEN_REQUEST
     - "B". GET  - APP_URL?        AUTHORIZATION_CODE
     - "A". POST - AUTH_URL__      INTERMEDIARY_TOKEN_REQUEST  -> ACCESS_TOKEN
  - Getting TOKEN [C]:
	   - "A". GET  - AUTH_URL?       TOKEN_REQUEST
	   - "B". GET  - APP_URL#        ACCESS_TOKEN
	- Using TOKEN (authorized access):
     - "A". *    - *               Authorization: Bearer TOKEN
	                 *__|?           access_token=TOKEN
  - Checking TOKEN is valid and not expired:
			- use PUBLICKEY of ISSUER on TOKEN 
			- for Google, with authorized access can (but is slow), prefer checking (see GOOGLEAPIS verifyToken())
	       - "A". GET  - TOKEN_INFO_URL                         -> TOKENINFO (400 if not valid)
  - Getting new TOKEN [S]:
	   - "A". POST - TOKEN_URL__     REFRESH_REQUEST            -> ACCESS_TOKEN (without user consent or refresh_token field)
  - Revoking a TOKEN [S]:
     - "A". GET  - REVOKE_URL?     token=REFRESH_TOKEN        -> response code 200 if ok, 400 if not

		 
Parameters:
  - TOKEN_REQUEST:
		 - response_type STR: "token" [C], "code" [S]
		 - client_id CLIENT_ID
		 - redirect_uri APP_URL, percent-encoded
     - scope STR, e.g. "https://www.googleapis.com/auth/SERVICE ...". 
 		   It is good to only ask for the scope when action needed, not for all possible needed.
     - state STR: a value that is passed as is to APP_URL, percent-encoded. Example usage: keeping original URL around.
		   Can be used as CSRF token too.
	- TOKEN_REQUEST (Google-specific):
     - api_key API_KEY
	   - include_granted_scopes BOOL: include previously granted scopes. 
		   Goal: if several requests with different scopes, instead of having several TOKEN_STR with different scopes, 
			 the final TOKEN_STR has all the scopes, and others can be dropped.
     - immediate BOOL: if true, no popup. Only for refresh ???
     - [S] access_type "online|offline": if "offline", ACCESS_TOKEN will get a refresh_token
     - approval_prompt "force|auto": if "force", prompt again even if permission already given for current scope
     - login_hint STR: pre-fill the email/username field. Must be either the sub USER_ID or the user email address.
		   Can also be "sub", "email" or "address"??? (or several???)
     - prompt "none|consent [select_account]": "none" doesn't show user consent and fails if not logged in. 
		   "consent" ask for user content and to log in. "select_account" let user pick account.
  - AUTHORIZATION_CODE:
     - error STR: only if fail
     - state STR
     - code CODE_STR: only if success
  - INTERMEDIARY_TOKEN_REQUEST:
     - code CODE_STR
     - client_id CLIENT_ID
     - client_secret CLIENT_SECRET
     - redirect_uri APP_URI
     - grant_type "authorization_code"
  - ACCESS_TOKEN:
     - access_token TOKEN_STR: JWT, signed by ISSUER private key
     - [S] refresh_token REFRESH_TOKEN: only if access_type "offline". 
     - expires_in STR: in seconds
     - [S???] token_type "Bearer"
     - state STR
  - TOKEN_INFO:
     - error STR: only if expired
     - expires_in STR
		 - scope STR
     - audience CLIENT_ID (Google specific???)
  - REFRESH_REQUEST:
     - client_id CLIENT_ID
     - client_secret CLIENT_SECRET
     - grant_type "refresh_token"
     - refresh_token REFRESH_TOKEN


Authentication:
	- Like [S] but:
		 - Use scope "openid[ email]": if email, email[_verified] fields will be present in id_token OBJ.
		 - Use state STR, where STR is GET variables percent encoded:
		  	- security_token STR: CSRF token. Must verify that state STR remains unchanged across the exchange.
				- Any other, e.g. former url STR
  - ACCESS_TOKEN has id_token OBJ:
     - iss ISSUER
     - at_hash STR: not necessary
     - sub STR: user ID
     - email STR: a single user ID can have alias emails
     - email_verified BOOL
     - aud CLIENT_ID
     - azp CLIENT_ID
     - iat NUM: when request was made
     - exp NUM: when it expires
  - Must always verify that id_token.iss|aud are good
	- Access to Google+ profile:
	   - if scope: "profile", TOKENINFO.userid STR is there
		 - GET - https://www.googleapis.com/plus/v1/people/USERID/openIdConnect -> OBJ:
		    - kind: "plus#personOpenIdConnect"
				- gender: "male|female|other"
				- sub: user ID
				- [given|family_]name STR
				- profile URL (Google+ page)
				- picture URL
				- email STR
				- email_verified BOOL
				- locale STR: user preferred locale
		 - USERID: "me" to use authenticated user (require access authorization with scope: "profile"):
		    - https://www.googleapis.com/plus/v1/people/me/openIdConnect = DiscoveryDocument.userinfo_endpoint

				

OAUTH2ORIZE										#Node module to implement OAuth2 server. See online doc.
				
OAUTH													#OAuth2 client [S]
new OAUTH.OAuth2(CLIENT_ID, 	#Returns OAUTH2REQ
CLIENT_SECRET, DOMAIN, 				#  - AUTH_URL_PATH (def: "/oauth/authorize"): only PATH after DOMAIN
AUTH_URL_PATH, TOKEN_URL_PATH)#  - TOKEN_URL_PATH (def: "/oauth/access_token")
										
OAUTH2REQ.getAuthorizeUrl			
(TOKEN_REQUEST)								#Returns AUTH_URL?TOKEN_REQUEST (CLIENT_ID automatically inserted)

OAUTH2REQ.getOAuthAccessToken	#Do either (according to args):
(REFRESH_TOKEN|CODE_STR, 			#  - POST - TOKEN_URL__ REFRESH_REQUEST
REFRESH_REQUEST|							#  - POST - TOKEN_URL__ INTERMEDIARY_TOKEN_REQUEST: TOKEN_URL must actually be AUTH_URL
INTERMEDIARY_TOKEN_REQUEST, 	#CLIENT_ID and CLIENT_SECRET are automatically inserted
FUNC(ERROR_OBJ, TOKEN, 				#User-Agent: Node-oauth
REFRESH_TOKEN, ACCESS_TOKEN))	#ERROR_OBJ: statusCode, data (response)
															
OAUTH2REQ.get(URL, TOKEN,			#Do GET - URL with OAuth Authorization:
FUNC(ERROR_OBJ, RESULT, RES))	#  - ?access_token=TOKEN or, if OAUTH2REQ.useAuthorizationHeaderGET(true) was called, 
															#    HTTP Header Authorization: Bearer
															#  - can also:				
															#     - OAUTH2REQ.setAccessTokenName(VAR): instead of using "access_token"
															#     - OAUTH2REQ.setAuthMethod(STR):      instead of using "Bearer"
															
new PASSPORT-OAUTH2(OBJ, 			#STRATEGY that makes a client OAuth request:
FUNC([REQ, ]ACCESS_TOKEN, 		#  - on first call (i.e. any page), redirect user to AUTH_URL?TOKEN_REQUEST
REFRESH_TOKEN, 								#  - on APP_URL, POST - AUTH_URL__ INTERMEDIARY_TOKEN_REQUEST, then validates according to 
[INTERMEDIATE_TOKEN_REQUEST,]	#    ACCESS_TOKEN returned
PROF_OBJ, 										#REQ.session must exist.
FUNC2(ERROR, USERVAL, OBJ2)))	#OBJ:
															#  - authorizationURL: AUTH_URL
															#  - tokenURL: TOKEN_URL
															#  - clientID: CLIENT_ID
															#  - clientSecret: CLIENT_SECRET
															#  - callbackURL: APP_URL
															#  - scope SCOPE[_ARR]: with ARR, use scopeSeparator STR (def: " ")
															#  - sessionKey VAR (def: "oauth2:DOMAIN"): REQ.session.VAR is used
															#  - proxy true: can also use APPVAR "trust proxy"
															#Steps:
															#  - at init:
															#     - OAUTH2REQ = new OAUTH.OAuth2(CLIENT_ID, CLIENT_SECRET, "", AUTH_URL, TOKEN_URL)
															#       Assign it to this._oauth2 (can use it e.g. to do OAUTH2REQ.get(...)
															#  - on first call, will this.redirect(OAUTH2REQ.getAuthorizeUrl(TOKEN_REQUEST)):
															#     - TOKEN_REQUEST is filled with CLIENT_ID, response_type, redirect_uri, scope, state
															#     - state = RANDOM_STR, saved at REQ.session.SESSIONKEY.state
															#     - to fill other params, redefine STRATEGY.authorizationParams(PP_OBJ)->TOKEN_REQUEST
															#       (will be overwritten with above)
															#       See PASSPORT-GOOGLE-AUTH on how to do it.
															#  - on server answer to APP_URL: 
															#     - verify state = former state, then erases REQ.session.SESSIONKEY.state
															#         - if not egal -> this.fail()
															#     - if GET variable error="VAL":
															#         - if "access_denied" -> this.fail({ message: GET variable error_description })
															#         - if "other" -> this.error()
															#     - OAUTH2REQ.getOAuthAccessToken(CODE_STR, INTERMEDIATE_TOKEN_REQUEST)
															#        - Automatically set grant_type, redirect_uri, code, client_id, client_secret in PP_OBJ
															#        - to fill other params, redefined STRATEGY.tokenParams(PP_OBJ)->INTRMDIATE_TOKEN_REQUEST
															#          (will be overwritten with above)
															#        - Then on answer:
															#           - Fires STRATEGY.userProfile(TOKEN, FUNC(ERROR, PROF_OBJ)) 
															#             (def: do nothing, PROF_OBJ is {})
															#           - Fires FUNC(...):
															#              - If REQ, use OBJ.passReqToCallback true
															#              - this.fail(OBJ2) is !USERVAL
															#              - this.success(USERVAL, OBJ2) otherwise
															#           - this.error(ERROR) if ERROR
															#STRATEGY.name = "oauth2"
