
         
   CSS   
         



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            GENERAL            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SYNTAX  ==>                                     #Case sensitive. 
                                                #Skips whitespaces.
                                                #CSS3 on-going, divided in modules.

INTEROPERABILITY ==>                            #Non-supported are skipped, last line wins. So put fallback first.
                                                #See HTML doc for list of browsers
                                                #Extensions fallbacks used when experimental:
                                                #   -moz- (Firefox), -webkit- (Chrome+Safari), -o- (Opera), -ms- (IE)
                                                ##Ext: means necessarily prefix
                                                ##Opera Mini: means works on all supported browser but Opera Mini

CSSNEXT ==>                                    $#'FEATURE'. Use this syntax to mean it can be polyfilled by CSSNext.
                                               $#PLUGIN_OPTS might be specified.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             HTML              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<link rel="stylesheet" href="URL.css">          #From external file. Must be served with Content-Type [S] "text/css"
  rel="STR"                                     #Like <a|area>
  LINK.disabled                                 #Only with CSS sheets.
  LINK.sheet                                    #STYLESHEET|null

<style>...</style>                              #Inline
  disabled                                      #
  type="STR"                                    #MIME type. Def: 'text/css'
  STYLE.sheet                                   #STYLESHEET|null

<any>
  style="NAME: VAL;..."                         #In tags


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             CSSOM             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


HTMLELEM.style                                  #CSSSTYLEDEC: inline styling. For setting.
WINDOW.getComputedStyle(HTMLELEM[, STR])        #CSSSTYLEDEC: used values (readonly). For getting.
                                                #STR is a pseudo-element CSS selector, like ":after" (def: null).

CSSStyleDeclaration                             #Many CSS "PROP:VAL;"
CSSSTYLEDEC.length                              #
CSSSTYLEDEC[UINT]                               #'PROP'
CSSSTYLEDEC.cssText                             #'PROP:VAL;...'

CSSSTYLEDEC.PROP                                #'VAL'. PROP is camelcase
CSSSTYLEDEC.getPropertyValue('prop')->'VAL'     #
CSSSTYLEDEC.
getPropertyPriority('prop')->'important|'       #Like CSSSTYLEDEC.PROP but:
CSSSTYLEDEC.setProperty                         #  - 'prop' lowercase with dash
('prop', 'VAL'[, 'important'])                  #  - can get|set !important
CSSSTYLEDEC.removeProperty('prop')->'VAL'       #  - can remove

CSSSTYLEDEC.parentRule                          #CSSRULE|null


DOCUMENT.styleSheets                            #STYLESHEETLIST
STYLESHEETLIST.length
STYLESHEETLIST[UINT]

StyleSheet                                      #
STYLESHEET.ownerNode                            #NODE (usually STYLE|LINK).
STYLESHEET.type                                 #
STYLESHEET.href                                 #
STYLESHEET.title                                #
STYLESHEET.disabled                             #Same as STYLESHEET.ownerNode.type|href|title|disabled

CSSStyleSheet                                   #STYLESHEET child
CSSSTYLESHEET.cssRules                          #If inline, CSSRULELIST (CSSRULE_ARR-like)
                                                #If external file, null
CSSSTYLESHEET.insertRule
('SELECTORS { ... }', UINT)                     #
CSSSTYLESHEET.deleteRule(UINT)                  #
    

CSSRule                                         #
RULE.parentStyleSheet                           #CSSSTYLESHEET
STYLESHEET.parentStyleSheet                     #Parent STYLESHEET (when @import was used)
RULE.parentRule                                 #Parent RULE (e.g. in CSSMEDIARULE), or null
RULE.type                                       #ENUM among CSSRule.STYLE|CHARSET|IMPORT|MEDIA|FONT_FACE|PAGE|..._RULE
                                                #Readonly
RULE.cssText                                    #'SELECTORS { ... }'. Readonly.

CSSStyleRule                                    #CSSRULE for usual rule
STYLERULE.selectorText                          #'SELECTORS'. Readonly.
STYLERULE.style                                 #Readonly CSSSTYLEDEC


CSSMediaRule                                    #CSSRULE for @media

CSSPageRule                                     #CSSRULE for @page
PAGERULE.style                                  #Readonly CSSSTYLEDEC

CSSKeyframesRule                                #CSSRULE for @keyframes
KEYFRAMESRULE.name                              #'KEYFRAMES'
KEYFRAMESRULE.cssRules                          #KEYFRAMERULE_ARR (array-like)
KEYFRAMESRULE.appendRule('PERC,... { ... }')    #
KEYFRAMESRULE.find|deleteRule('PERC,...')        #

CSSKeyframeRule                                 #CSSRULE for PERC,... { ... } inside @keyframes
KEYFRAMERULE.keyText                            #'PERC,...'
KEYFRAMERULE.style                              #Readonly CSSSTYLEDEC


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TYPES             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


STR                                             
"STR"
'STR'                                           #Unicode : \XXXX.
VAR                                             #VAR names, used by CSS counters

NUM                                             #INT|FLOAT, can use scientific notation.
LEN                                             #Relative to font-size:
                                                #  - NUMrem: 1em is <html> font-size
                                                #  - NUMem: 1em is current font-size
                                                #     - when inherited, uses parent (that uses NUMem) font-size
                                                #     - to use current font-size even when inherited, use NUM instead 
                                                #       (only with line-height)
                                                #  - NUMex: lowercase height in current font-size (often 1/2 em)
                                                #  - NUMch: '0' width in current font-size (often 1/2em)
                                                #Relative to viewport size (i.e. only visible part):
                                                #  - NUMvh|vw: 1% of viewport height|width
                                                #  - NUMvmin: 1% of viewport min(height, width)
                                                #Absolute (avoid):
                                                #  - NUMpx|pc|pt|cm|mm|in: 
                                                #     - physical measure
                                                #     - Prefer px
                                                #     - always 96ppi, i.e.:
                                                #        - 1in = 96px = 72pt = 6pc = 25.4mm 
                                                #     - but this is virtual resolution and virtual pixels ("CSS pixels").
                                                #       Ratio between number of hardware pixels and CSS pixels is "pixel ratio",
                                                #       i.e. WINDOW.devicePixelRatio, usually from 1 to 4
                                                #Relative:
                                                #  - LENvh, LENvw, LENvmin
                                               ##    Opera mini
PERC                                            #Percentage. Depends on property.
LENP                                            #LEN|PERC

DIRECTION                                       #top|left|bottom|right|center
POSITION                                        #[VAL [VAL2]] where VAL|VAL2 is [DIRECTION] [LENP]
                                                #Def VAL VAL2: top left
                                                #Def VAL|VAL2: center 0
                                                #Def DIRECTION: center
                                                #Def LENP: 0
                                                #If using only one PERC, the second will get same computed value, so PERC PERC != PERC
ANGLE                                           #NUMdeg, NUMrad, NUMgrad. Can be negative.

TIME                                            #TIMEms|TIMEs
COLOR                                           #Can be:
                                                #  - STR, dont blue, red, etc. (SVG color keywords)
                                                #  - #NNN[A][NNN[A]]
                                               $#    'colorHexAlpha' when specifying alpha
                                                #  - rgb[a](255|100%,255|100%,255|100%[,1])
                                                #  - hsl[a](360,100%,100%[,1])
                                               $#  - hwb(360,100%,100%[,1])
                                               $#    'colorHwb'
                                               $#  - gray(VAL[,1]): same as rgba(VAL, VAL, VAL[,1])
                                               $#    'colorGray'
                                                #  - transparent: like rgba(1,1,1,0)
                                                #  - currentColor: current font "color"
                                               $#  - color(COLOR|HUE [MOD(VAL) ...]) 
                                               $#     - where MOD(VAL) can be:
                                               $#        - red|green|blue|alpha|a([+|-|* ]NUM|PERC)
                                               $#        - hue|saturation|lightness([+|-|* ]PERC)
                                               $#        - whiteness|blackness([+|-|* ]PERC)
                                               $#        - blend(COLOR2 PERC [rgb|hsl|hwb])
                                               $#        - tint|shade(PERC): same as blend(white|black PERC rgb)
                                               $#        - contrast(PERC): create different color with sufficient contrast
                                               $#     - not supported by CSSNext: COLOR cannot be currentColor
                                               $#     - 'colorFunction'

URI                                             #url("URL")|none
GRADIENT                                        #[repeating-]linear-gradient(ANGLE|STR, COLOR[ LENP],...)
                                                #  - STR: to [left|right] [top|bottom] (def: to bottom)
                                                #  - LENP: def: 0|100% for begin|end, interpolation for others.
                                                #    Cannot be negative.
                                                #[repeating-]radial-gradient([STR][ VAL][at POSITION], COLOR[ PERC],...)
                                                #  - STR: circle or ellipse (déf)
                                                #  - VAL is radius (def: farthest-corner):
                                                #    - STR: closest|farthest-corner|side
                                                #    - LEN for circle, LENP LENP2 for ellipse
                                                #  - POSITION is center (def: center)
                                               ##Opera mini
IMAGE                                           #URI|GRADIENT

FUNC                                            #FUNC(ARG)


calc(EXPR)                                     $#Perform - + * / operations:
                                               $#  - any NUM value, with[out] units
                                               $#     - for * /, one of the two sides must have no unit
                                               $#     - for + -, can mix units
                                               $#  - can use ( )
                                               $#  - must use space around operators
                                               $#Cannot be used in MEDIAQUERY
                                               $#'calc' (replace compile-time, except when not possible, i.e. + - mixing units)
                                               $#PLUGIN_OPTS:
                                               $#  - preserve BOOL (def: false): do not replace compile-time
                                               $#  - warnWhenCannotResolve BOOL (def: false): warn when compile-time replacement not possible
                                               $#  - mediaQueries BOOL (def: false): allows in MEDIAQUERY
                                               $#  - precision NUM (def: 5): for divisions

VAL,...                                         #Usually comma-separated list is used. But space is used for:
VAL ...                                         #  - top right bottom left lists
                                                #  - FUNC() lists
                                                #  - counter-reset|increment()


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            SYNTAX             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


/* COMMENT */

@STR VAL                                        #At-rules

SELECTORS {                                     #RULE
  VAR: VAL;...
}


VALUE CALCULATION ==>                           #  - initial: default (even before browser user agent stylesheet)
                                                #  - specified: after inheritance
                                                #  - computed: after calculation without layout (e.g. converting %, em)
                                                #  - used: after calculation with layout (e.g. converting %, em)
                                                #  - actual: after browser correction (e.g. border-width FLOAT->INT)

INHERITANCE ==>                                 #Some properties are inherited by elements children:
                                                #  - paragraph-related: text-align, white-space, visibility, etc.
                                                #  - font-related: color, font-*, etc.
                                                #  - table-related: border-collapse, etc.
                                                #  - list-related: list-*
                                                #  - quotes

initial                                        $#Used as a VAL, means initial value
                                               $#'initial' (PLUGIN_OPTS: see 'all')
inherit                                         #Used as a VAL, means parent VAL:
                                                #  - for inherited properties, allows restoring values, e.g.:
                                                #      SELECTOR { VAR: VAL; }                   // Override parent VAL
                                                #      MORE_SPECIFIC_SELECTOR { VAR: inherit; } // Restore parent VAL
                                                #  - for non-inherited properties, make them inherited, e.g.:
                                                #      PARENT { border: VAL }
                                                #      CHILD { border: inherit }

all: VAL                                       $#Same as { PROP: VAL ... } for any possible PROP
                                               $#VAL can be initial|inherit|unset|revert
                                               $#'initial':
                                               $#  - initial only
                                               $#  - polyfills by replacing with all PROP: initial_value (for all PROP).
                                               $#    So should use only once, then inherit from it, otherwise big file size..
                                               $#    So should use only once, then inherit from it, otherwise big file size.
                                               $#  - PLUGIN_OPTS: 
                                               $#     - replace BOOL (def: false): whether to only add polyfill or replace 'all'
                                               $#       altogether
                                               $#     - reset STR: which PROP to use:
                                               $#        - 'all' (def)
                                               $#        - 'inherited': only PROP that can be inherited

SHORTHAND PROPERTY ==>                          #Allow defining several properties in one, e.g. border, outline,
                                                #margin, padding, font, etc.
                                                #Note:
                                                #  - ommitted VAL takes default value, even if previously defined
                                                #  - "inherit" only works with 1-value syntax
                                                #  - order usually does not matter, except:
                                                #     - on positional values:
                                                #        - 4: TOP RIGHT BOTTOM LEFT
                                                #        - 3: TOP RIGHT|LEFT BOTTOM
                                                #        - 2: TOP|BOTTOM RIGHT|LEFT
                                                #        - 1: TOP|BOTTOM|RIGHT|LEFT
                                                #     - on corners:
                                                #        - 4: TOP-LEFT TOP-RIGHT BOTTOM-RIGHT BOTTOM-LEFT
                                                #        - 3: TOP-LEFT TOP-RIGHT|BOTTOM-LEFT BOTTOM-RIGHT
                                                #        - 2: TOP-LEFT|BOTTOM-RIGHT TOP-RIGHT|BOTTOM-LEFT
                                                #        - 1: TOP-LEFT|BOTTOM-RIGHT|TOP-RIGHT|BOTTOM-LEFT


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           AT-RULES            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


@charset "CHARSET";                             #Should always be at beginning with no newline|whitespace before.
                                                #Ex: "UTF-8"                                            
                                                #Not needed if CSS served with Content-Type with correct charset

@import URL [MEDIAQUERY]                        #Must be put first, but after @charset

@namespace [NAMESPACE] URL                      #Define an XML NAMESPACE or the default one (URL points to XML namespace)
                                                #This allows using NAMESPACE|SELECTOR, to restrict to a given NAMESPACE,
                                                #or SELECTOR to use default one.
                                                #Useful e.g. when mixing SVG with XHTML.
                                                #Must be put first, but after @charset|import


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         MEDIA QUERIES         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


@media MEDIAQUERYLIST { RULE }                   #Fire RULE if MEDIAQUERYLIST is met:
                                                #  - MEDIAQUERYLIST: [not] MEDIAQUERY,...
                                                #     - comma is 'or'
                                                #  - MEDIAQUERY: 
                                                #     - MEDIA|(FEATURE), 'and'-separated
                                                #     - If present, MEDIA must be first
                                                #  - MEDIA: "all|screen|print|speech" (def: 'all'): device type
                                                #  - (FEATURE) is either:
                                                #     - ([min-|max-]VAR[: VAL]) (def VAL: "not 0")
                                               $#     - ([NUM OP] VAR [OP2 NUM2]), where OP is < <= = >= >
                                               $#       'mediaQueriesRange'
                                                #  - VAR/VAL are:
                                                #     - height|width: viewport size
                                                #     - aspect-ratio NUM/NUM2 (e.g. 16/9)
                                                #     - orientation landscape|portrait
                                                #     - color NUM: bits/channel (0 if no colors)
                                                #     - color-index NUM: number of indexed colors (0 if none)
                                                #     - monochrome NUM: bits/channel. If not monochrome, 0.
                                                #     - scan: progressive|interlace (for tv)
                                                #     - grid NUM: 1 if tty or feature phone old display (0 otherwise)

<link|style|a|area|source>
  media="MEDIAQUERYLIST"                        #
STYLESHEET|MEDIARULE.media                      #MEDIALIST
MEDIALIST.length
MEDIALIST[UINT]                                 #'MEDIAQUERY'
MEDIALIST.mediaText                             #'MEDIAQUERYLIST'
MEDIALIST.appendMedium('MEDIAQUERY')
MEDIALIST.deleteMedium('MEDIAQUERY')            #

WINDOW.matchMedia("MEDIAQUERYLIST")->MQUERYLIST #
MEDIAQUERYLIST.media                            #"MEDIAQUERYLIST". Readonly
MEDIAQUERYLIST.matches                          #BOOL
MEDIAQUERYLIST.add|removeListener
(FUNC("MEDIAQUERYLIST"))                        #When matches changes.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           SELECTORS           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SPECIFICITY ==>                                 #When several SELECTOR for the same element.
                                                #Priority is 'specificity', checking (from most specific to least):
                                                #  - presence of: VAR: VAL !important (to avoid)
                                                #  - HTML-inline
                                                #  - 'NUM,NUM,NUM3' (compare NUM, then NUM2, then NUM3):
                                                #     - are:
                                                #        - NUM: number of #ID
                                                #        - NUM2: number of :PSEUDO, [ATTR ...], .CLASS
                                                #        - NUM3: number of TAG, ::PSEUDO
                                                #        (* is never counted)
                                                #     - SELECTOR combination:
                                                #        - SELECTOR, SELECTOR2: max points
                                                #        - others: add points
                                                #     - :PSEUDO() exceptions:
                                                #        - :nth-[last-]child|of-type(SELECTOR): adds matching SELECTOR
                                                #        - :matches(SELECTOR,...): adds matching SELECTOR but not :matches
                                                #        - :not(SELECTOR,...): adds max(SELECTOR,...) but not :not
                                                #  - load order (last has higher priority)

SELECTORS                                       #Same as SELECTOR,...

SELECTORSELECTOR2                               #And
SELECTOR, SELECTOR2,...                         #Or

SELECTOR SELECTOR2 ...                          #Descendant
SELECTOR > SELECTOR2 >...                       #Direct child
SELECTOR + SELECTOR2 +...                       #Direct next sibling
SELECTOR ~ SELECTOR2 ~...                       #Any following sibling

SELECTORS { [@nest] SELECTORS2 { ... } }       $#Each SELECTOR2 must contain &:
                                               $#  - SELECTORS is removed, but replaces each & by :matches(SELECTORS)
                                               $#  - @nest is mandatory if SELECTORS2 does not start with &
                                               $#'nesting'
SELECTORS { @RULE { ... } }                    $#Same as @RULE { SELECTORS { ... } }
                                               $#'nesting'
                                               $#PLUGIN_OPTS:
                                               $#  - bubble STR_ARR (def: 'document', 'media', 'supports'): supported @RULE
@RULE { @RULE2 { ... } ... }                   $#Combines @RULEs
                                               $#'nesting'


:not(SELECTOR,...)                              #Logical 'not'
                                               $#Using several SELECTOR,...:
                                               $#  - means !SELECTOR || !SELECTOR2 ...
                                               $#  - 'pseudoClassNot'
:matches(SELECTOR,...)                         $#Logical 'or'
                                               $#'pseudoClassMatches' (only works with several SELECTOR)
                                               $#PLUGIN_OPTS: lineBreak BOOL (def: false)


*                                               #Any. To avoid.

[ATTR]                                          #ATTR exists
[ATTR="STR"]                                    #ATTR value === "STR"
[ATTR!="STR"]                                  ##ATTR value !== "STR" (including nothing) (jQuery)
[ATTR$="STR"]                                   #ATTR value === "...STR"
[ATTR^="STR"]                                   #ATTR value === "STR..."
[ATTR|="STR"]                                   #ATTR value === "STR[-...]"
[ATTR*="STR"]                                   #ATTR value === "...STR..."
[ATTR~="STR"]                                   #ATTR value === "...STR..." and STR is a whole word (space-delimited)
#ID                                             #Same as [id="ID"]. Prefer using .CLASS
.CLASS                                          #Same as [class~="CLASS"]

:enabled|disabled                               #Like [disabled]
:checked                                        #Like [checked|selected]
:selected                                      ##Like [selected] (jQuery)
:data(STR)                                     ##Like [data-STR], but having used JQ.data(STR) (jQuery UI)
:lang(LANG)                                     #Like [lang="LANG"] but case-insensitive, and includes parents
:target                                         #Like #ID, where ID is URL fragment identifier

:required                                       #Like input|textarea|select[required]
:optional                                       #Like input|textarea|select:not([required])
:indeterminate                                  #Like input[type="checkbox"] + ELEM.indeterminate === true
:[in]valid                                      #ELEM.validity.valid

TAG                                             #<TAG>

:link                                           #Like [href], not previously clicked on it.
                                                #Should follow this order: :link, :visited, :hover, :active
:visited                                        #Like [href], previously clicked on it. 
                                                #Can apply change color-related properties (and not opacity).
:any-link                                      $#Like [href], previously clicked on it or not
                                               $#'pseudoClassAnyLink'

:input                                         ##<input>, <button>, <textarea>, <select>, <optgroup>, <option>, <label>,
                                               ##<fieldset>, etc. (jQuery)
:button|checkbox|file|image|password|radio|
reset|submit|text                              ##Like [type="button|checkbox|file|image|password|radio|reset|submit|text"] (jQuery)
:header                                        ##<h*> (not <hgroup>) (jQuery)
:root                                           #<html>

:nth-child([NUMn] + [NUM2])                     #Current element is x-th's child of its parent, where x === NUM*n + NUM2, with n>0
                                                #NUM|NUM2 can be negative.
                                                #Can also be :nth-child(odd|event), i.e. 2n[+1]
:nth-last-child(...)                            #Same but counting children from the end.
:first|last-child                               #Same as :nth-[last-]child(1)
:only-child                                     #Same as :first-child:last-child
:...-of-type                                    #Same as :...-child, but consider children tag by tag.
:odd|even                                      ##Same as :nth-child(odd|even) (jQuery)

:empty                                          #Has no child
:parent                                        ##Has child (jQuery)
:eq(INT)
:lt|gt(INT) 
:first|last                                    ##Of all the matching elements (jQuery)

:hover                                          #On mouseover.
:active                                         #On clickdown.
:focus                                          #On focus.
:focusable|tabbable                            ##(jQuery UI)
:animated                                      ##Currently animated (jQuery)

:hidden|visible                                ##Not taking any space (jQuery), e.g.:
                                               ##  - diplay: none
                                               ##  - width|height === 0
                                               ##  - <input type="hidden">
                                               ##  - hidden ancestor
                                               ##Does not cover invisible but taking space (e.g. 'transparent' or visibility: hidden)

:contains('STR')                               ##A TEXT descendant contains STR (jQuery)
:has(...)                                      ##Like JQ.has(...) (jQuery)

::first-letter                                  #Can only change font, text decoration, background and box model properties
                                                #Display BLOCK
::first-line                                    #Can only change font, text decoration and background properties
                                                #Display BLOCK


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           VARIABLES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


--VAR: VAL                                     $#Declare a PROP's value variable
                                               $#Scoping:
                                               $#  - scoped to current SELECTOR, including @media. 
                                               $#  - overrides declarations of VAR for less specific selectors.
                                               $#  - CSSnext only supports scoping to :root
                                               $#Updating a variable (e.g. using CSSOM) updates its references.
                                               $#'customProperties'
                                               $#PLUGIN_OPTS:
                                               $#  - variables.VAR: 
                                               $#     - add :root declarations with higher priority
                                               $#     - can also use PLUGIN.setVariables(OBJ)
                                               $#  - strict BOOL: if true (def), first output default value declaration, then
                                               $#    actual declaration
                                               $#  - preserve BOOL|STR (def: false): 
                                               $#     - if true|'computed', keeps --VAR: VAL in output
                                               $#     - if true, keeps var(--VAR) in output
                                               $#  - appendVariables BOOL (def: false): adds var(--VAR) at the end of output (unless preserve false)
                                               $#  - warnings BOOL (def: true)
var(--VAR[, VAL])                              $#Use a PROP's value variable
                                               $#VAL is default value

@custom-media --VAR MEDIAQUERYLIST             $#Declare a MEDIAQUERYLIST variable
                                               $#'customMedia'
                                               $#PLUGIN_OPTS:
                                               $#  - extensions.VAR: declare variables
                                               $#  - preserve BOOL (def: false): keeps @custom-media in output
                                               $#  - appendExtensions BOOL (def: false): adds @custom-media at end of output
                                               $#    (unless preserve false)
(--VAR)                                        $#Use a MEDIAQUERYLIST variable

@custom-selector :--VAR SELECTORS              $#Declare a SELECTORS variable
                                               $#Considered a :PSEUDO selector, which evaluates to :matches(SELECTORS)
                                               $#'customSelectors'
                                               $#PLUGIN_OPTS:
                                               $#  - extensions[:--VAR]: declare variables
                                               $#  - transformMatches BOOL (def: true): transform to :matches(SELECTORS)
                                               $#  - lineBreak BOOL (def: true): add newline after ,
:--VAR                                         $#Use a SELECTORS variable


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           BOX MODEL           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


BOX MODEL ==>                                   #Content > Padding > Border > Margin
[min|max-]height|width: LENP|auto               #Actual content:
                                                #  - def: auto, i.e. according to content
                                                #  - Can use box-sizing: content-box|border-box:
                                                #     - if border-box, specifies border-box height|width, not actual content
                                                #     - for browser compatibility (useless)
                                                #  - percentage: 
                                                #     - *width: parent block's width
                                                #     - *height: parent block's height, if specified. Otherwise, not used.
                                                #  - Display BLOCK
padding[-top|bottom|left|right]: LENP           #Padding: 
                                                #  - space between content and border
                                                #  - def: 0
                                                #  - Percentage: parent block's padding*
border-top|bottom|left|right-width: LEN|STR     #Border: see below (def: medium, but border-style none)
margin[-top|bottom|left|right]: LENP|auto       #Margin:
                                                #  - margin-top|bottom: Display BLOCK
                                                #  - can be negative
                                                #  - def: 0
                                                #  - Percentage: parent block's margin*
                                                #  - auto: like 0, except if:
                                                #     - Normal flow or (providing left|right are not 'auto') Absolute
                                                #     - used on both margin-left|right
                                                #     -> horizontally center element
                                                #  - collapsed:
                                                #     - only bigger margin is kept.
                                                #       If negative NUM, sum of smallest negative NUM and biggest positive NUM.
                                                #     - Normal flow
                                                #     - when two margin-top|bottom follow each other with nothing in-between:
                                                #        - margin-bottom and margin-top of an element with content+padding+border 0px
                                                #        - nothing (border|padding, text node, etc.) separating:
                                                #           - first child's margin-top and parent's margin-top
                                                #           - last child's margin-bottom and parent's margin-bottom
                                                #        - two vertical siblings (not necessarily same tag)

line-height: LENP|normal|NUM                    #Height of phrasing content's lines.
                                                #Will also affect, on Display:
                                                #  - INLINE: content's height
                                                #  - BLOCK, content's min-height (together with real 'min-height') unless 'height' specified
                                                #Percentage: like using NUMem
                                                #NUM (prefer) is like NUMem, but always current font-size even when inherited (see above)
                                                #Def: normal (around 1.2)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DISPLAY            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


REPLACED ELEMENT ==>                            #Element not ruled by CSS, e.g. <img|object|video|audio|canvas|iframe> 
                                                #and elements inserted with 'content':
                                                #  - no default 'display'
                                                #  - behave like inline-block elements, except:
                                                #     - not affected by phrasing content properties like line-height

display: VAL                                    #Default depends on HTML tag:
                                                #  - <table>-related elements: display: table-*
                                                #  - <li>: display: list-item
                                                #  - <ol|ul>: display: block
                                                #  - invisible content, like <head|link|script|meta|title|base>: display: none
                                                #  - top-level controls, like <input|button|textarea|select>: display: inline-block
                                                #  - lower-level controls, like <optgroup|option>: display: block
                                                #  - replaced elements: no default display
                                                #  - phrasing content, like <span>: display: inline
                                                #  - sectioning content, like <div|p>: display: block
display: inline|inline-block|block              #Differences:
                                                #  - normal flow: inline elements stacked horizontally, block vertically, 
                                                #    inline-block horizontally unless they span another line
                                                #  - inline not affected by width|height (or related properties) nor margin-top|bottom, [inline-]block is
                                                #  - inline[-*] usually phrasing content, block sectioning or embedded content
display: none                                   #Remove element from layout
<any>                                           #Like display:none but:
  hidden                                        #  - overriden if CSS display specified
                                                #  - to use when should never be shown in current state
Display BLOCK                                   #Means not display: inline
Display INLINE                                  #Means display: inline[-*]

visibility: STR                                 #Affect visibility:
                                                #  - visible (def)
                                                #  - hidden: but does not affect layout


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           POSITION            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PARENT BLOCK ==>                                #Means: 
                                                #  - Normal flow or floats: closest parent with Display BLOCK
                                                #  - position: absolute: closest absolute parent (if none, parent document)
                                                #  - position: fixed: viewport

NORMAL FLOW ==>                                 #Position:
position: static                                #  - normal (déf)
position: relative                              #  - same, but with shift relative to normal position. 
                                                #    Siblings and parents stay at same position.

FLOATS ==>                                      #Position:
float: left|right|none                          #  - like normal flow, but aligned to left|right, taking space normal flow 
                                                #    cannot occupy anymore.
                                                #  - will stack horizontally with other floats (unless clear: left|right|both)
                                                #  - forces display: block|table
clear: none|left|right|both                     #Shift element down to the lowest left|right|both floating box:
                                                #  - Normal flow: affect next elements
                                                #  - Floats: stack vertically
                                                #  - Absolute: no effect
                                                #"Clearfix":
                                                #  - make float's parent's min-height === float's height
                                                #  - how: set on parent those properties:
                                                #     - overflow: hidden|auto
                                                #     - or content: "" (with :after), display: block|table, clear: both
                                                #  - for IE7, used to require also zoom: 1 or width: 100%

ABSOLUTE ==>                                    #Taken out of normal flow:
position: absolute                              #  - relative to closest Absolute parent (if none, <body>)
position: fixed                                 #  - relative to viewport (i.e. not affected by scrolling)

top|bottom|right|left: LENP|auto                #Specify shift|position with position: relative|absolute|fixed 
                                                #Def: auto, i.e. 'not specified'
                                                #Percentage: parent block's top|bottom|right|left

z-index: NUM|auto                               #Stack: 
                                                #  - Absolute > Floating > Normal flow
                                                #  - Only relevant when there is potentional overlap, i.e.:
                                                #     - Absolute or display: relative
                                                #     - lower opacity
                                                #     - transform
                                                #  - higher is closer. Def is 0. Can be negative.
                                                #  - is done sibling to sibling, i.e.:
                                                #      <a>        // z-index: 1
                                                #        <b></b>  // z-index: 3
                                                #      </a>
                                                #      <c></c>    // z-index: 2, above <b>, because sibling to sibling
                                                #  - def: auto (i.e. same as parent, and DOM order among siblings)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      OVERFLOW / WRAPPING      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


overflow[-x|y]: STR                             #How overflown content is displayed (does not change siblings|parents layout):
                                                #  - visible (def): overflows
                                                #  - hidden: hidden, no scrollbar
                                                #  - auto: hidden, scrollbar if needed
                                                #  - scroll: hidden, always scrollbar
                                                #Display BLOCK
                                                #Overflow will only happen if block cannot vertically expand, i.e. either:
                                                #  - wrapped:
                                                #     - [max-]height
                                                #  - non-wrapped:
                                                #     - white-space: nowrap|pre  
                                                #     - word as long as width
word-wrap: STR                                  #If break-word (def: normal), breaks non-wrapped overflown content at any letter
                                                #(not only whitespace), making it not overflown anymore.
word-break: STR                                 #normal|break-all: same as word-wrap normal|break-all, but more standard
                                                ##Opera mini
text-overflow: STR                              #How non-wrapped overflown content is displayed:
                                                #  - clip (def): hidden
                                                #  - ellipsis: same but with "..."
                                                #Display BLOCK
white-space: STR                                #How whitespaces in phrasing content is handled:
                                                #  - wrapped: overflown whitespace -> newline
                                                #  - collapsed: several whitespaces -> one space
                                                #                         +----------+-------------+
                                                #                         | Wrapped  | Not wrapped |
                                                # +-----------------------+----------+-------------+
                                                # |     Any collapsed     | normal   | nowrap      |
                                                # +-----------------------+----------+-------------+
                                                # | Newline not collapsed | pre-line |             |
                                                # +-----------------------+----------+-------------+
                                                # | Nothing collapsed     | pre-wrap | pre         |
                                                # +-----------------------+----------+-------------+


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           PARAGRAPH           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


text-align: STR                                 #Horizontal alignment of phrasing content: left|right|center|justify
                                                #Display BLOCK
vertical-align: VAL                             #Vertical alignment of phrasing content:
                                                #  - baseline (def): baseline to parent's baseline
                                                #  - sub|super: baseline to parent's subscript|superscript's line
                                                #  - text-top|bottom: top|bottom to top|bottom's parent's line
                                                #  - top|bottom: top|bottom to top|bottom's parent's box
                                                #  - middle: middle to parent's baseline + 1ex
                                                #  - LENP: baseline to parent's baseline + LENP
                                                #Display INLINE
                                                #Percentage: current line-height

text-indent: LENP                               #Text indent (first line only)
                                                #Display BLOCK
                                                #Percentage: current width
                                                #Should avoid negative value
word-spacing: LENP|normal                       #Space between words.
                                                #Percentage: current font's width
letter-spacing: LEN|normal                      #Space between letters.
                                               ##Opera mini: letter-spacing


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             FONTS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


@font-face { VAR: VAL;... }                     #Loads a font, allowing it to be used as font-family.
                                                #VAR:
                                                #  - font-family: STR, new font-family name
                                                #  - src: SRC ...
                                                #     - SRC is local(STR) or URI [format(STR)]:
                                                #     - must be in same domain (same origin policy)
                                                #     - local(STR) look in user's browser. Use URI as fallback.
                                                #     - formats: 
                                                #        - woff: all
                                                #        - embedded-opentype: only IE
                                                #        - opentype|truetype: not IE
                                                #        - svg: only Safari
                                                #        - woff2: not IE nor Safari
                                                #       Should use fallbacks because of browser support (can use online generators)
                                                #  - font-style|variant|weight|stretch|feature-settings: for selecting font variants.
                                               ##Opera Mini

font-size: VAL                                  #VAL:
                                                #  - LENP. 
                                                #    Percentage: parent's font-size
                                                #  - rem-based keywords: [[x]x-]small|medium|large (about 0.55, 0.6, 0.8, 1, 1.125, 1.5, 2rem)
                                                #  - em-based keywords: larger|smaller (about 0.8, 1.2em)
font-family: STR,...                            #Font:
                                                #  - "STR": specific font (font name, which can differ from filename)
                                                #  - STR: browser font among sans-serif|serif|fantasy|cursive|monospace
                                                #Can use several for fallbacks:
                                                #  - done glyph by glyph, for a specific variant (font-style|etc.)

color: COLOR                                    #Font color
font-style: STR                                 #Can be:
                                                #  - normal (def)
                                                #  - oblique: slopped but not curvy
                                                #  - italic: slopped and curvy, fallbacks to oblique
font-weight: VAL                                #Can be:
                                                #  - normal|bold
                                                #  - 100-900: 100 is thin, 400 is normal, 700 is bold, 900 is extra bold
                                                #  - lighter|bolder: less|more than parent's, among 100|400|700|900
text-decoration: STR                            #Can be none|underline|overline|line-through
font: FONT-STYLE FONT-VARIANT FONT-WEIGHT       #Note:
 FONT-SIZE LINE-HEIGHT FONT-FAMILY              #  - font-size: must be defined, and be after font-style|variant|weigth but before line-height
                                                #  - font-family: must be defined, and be last
                                                #  - font-variant: only normal|small-caps allowed
                                                #  - font-stretch|kerning|size-adjust: reset

font-feature-settings: VAL,...                  #Sets OpenType features. VAL can be:
                                                #  - normal (def)
                                                #  - "FEAT"[ NUM|on|off]:
                                                #     - on (def) or off: same as 1|0
                                                #Prefer using font-variant when possible: higher-level, and not specific to OpenType
font-kerning                                   $#Whether to use kerning (font calculates letter spacing depending on letter):
                                               $#  - auto (def): decided by browser depending on font-size
                                               $#  - normal|none: yes|no
                                               $#'fontVariant', see below
font-variant*                                  $#'fontVariant'
                                               $#Works by translating to font-feature-settings, so only works for OpenType
                                               $#Does not work for inherit|initial|unset|auto|normal|none except:
                                               $#  - font-variant: normal|inherit
                                               $#  - font-kerning: normal|none
                                               $#font-variant: normal|small-caps is supported natively
font-variant-position: VAL                     $#Can be:
                                               $#  - 'normal' (def) 
                                               $#  - 'sub': subscript
                                               $#  - 'super': superscript
font-variant-ligatures: VAL                    $#How letters combine with each other. Can be:
                                               $#  - normal (def)
                                               $#  - none
                                               $#  - VAL2 ..., where VAL2 can be (in order, all optional):
                                               $#     - [no-]common-ligatures: usual ligatures, like fi, ffi, th
                                               $#     - [no-]discretionary-ligatures: ligatures only specific to the font
                                               $#     - [no-]historical-ligatures: ligatures used in old books
                                               $#     - [no-]contextual-ligatures: ligatures that depend on the surrounding letters
font-variant-caps: VAL                         $#Controls case. Can be:
                                               $#  - normal (def): keep case
                                               $#  - small-caps|unicase|all-small-caps: use small capitals on lowercase|uppercase|all chars
                                               $#  - petite-caps|all-petite-capps: use petite capitals (i.e. smaller than small
                                               $#    capitals on lowercase|all chars)
                                               $#  - titling-caps: use special "titling case" present in some font
font-variant-numeric: VAL                      $#How NUM/FLOAT are displayed. Can be:
                                               $#  - normal (def)
                                               $#  - VAL2 ..., where VAL2 can be (in order, all optional):
                                               $#     - ordinal: superscript for 1st, 2nd, etc.
                                               $#     - slashed-zero: slash on 0
                                               $#     - lining|oldstyle-nums: whether numbers should be aligned on baseline or not
                                               $#     - propertial|tabular-nums: whether numbers should have same size or not
                                               $#     - diagonal|stacked-fractions: whether fractions use a diagonal or horizontal line
font-variant: LIGATURES ALTERNATES CAPS 
 NUMERIC EAST-ASIAN                            $#Shorthand

text-transform: STR                             #Can be none|lowercase|uppercase|capitalize
text-shadow: VAL,...                            #Same syntax as box-shadow, except no spread nor inset.
                                               ##Opera mini

direction: STR                                  #Text direction: rtl or ltr (def)
unicode-bidi: STR                               #How 'direction' is used:
                                                #  - normal (def)
                                                #  - embed: only for children
                                                #  - bidi-override: also revert individual letters
 

																						 /=+===============================+=\
																						/  :                               :  \  
							 														  )==:          BACKGROUND           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


opacity: NUM                                    #From 0 to 1

background-color: COLOR                         #
background-image: IMAGE,...                     #Interaction with background-color:
                                                #  - goes over it
                                                #  - should always put a backup background-color in case image can't be downloaded.
                                                #Multiple IMAGE: 
                                                #  - First IMAGE goes on top. 
                                                #  - Doing successive background-image erase previous, not go over it. 
                                                #  - For all other background-* (except color), multiple VAL,... affect those 
                                                #    different backgrounds in same order.
                                                #SVG images: 
                                                #  - automatically fit to container unless size or ratio is specified 
                                                #    in the SVG file. 
                                                #  - If SVG looks blurry on Firefox, make it smaller then scale it 100 times.

background-origin: STR,...                      #background-image's origin, i.e. initial containing box:
                                                #  - together with background-position, determines where image starts 
                                                #  - determines how background-size: contain|cover work
                                                #Can be content-box, padding-box (def) or border-box
background-position: POSITION,...               #Where first background-image should start, within its origin (def: top left)
                                                #Percentage: 
                                                #  - 100% === origin's size - image's size
                                                #  - rational: 50% will center image, 100% will mirror it to other corner
background-attachment: STR,...                  #Can be:
                                                #  - scrolled (def): normal
                                                #  - fixed: 
                                                #     - make background's origin the viewport instead of background-origin
                                                #     - so doesn't move while scrolling
                                               ##Opera mini

background-clip: STR,...                        #Clip background-color|image (but does not change background's origin nor position)
                                                #Can be content-box, padding-box or border-box (def)
                                                #If border-box, goes beyond border (which can be transparent).

background-size: VAL,...                        #background-image's size:
                                                #  - X Y, where X|Y:
                                                #     - auto (def): image's intrisic size
                                                #     - LENP. Percentage: origin's box
                                                #  - XY: same as XY XY
                                                #  - contain: 
                                                #     - rescaled to background-image origin's box
                                                #     - while keeping ratio, so it is "contained":
                                                #        - one side of the image == one side of the box,
                                                #        - the other side image < other side box
                                                #  - cover: same but the other side image > other side box ("clipped")
                                               ##Opera mini

background-repeat: X[ Y] ,...                    #Repetition of the background-image (X alone means X X)
                                                #  - no-repeat
                                                #  - repeat (def)
                                                #  - repeat-x|y: same as repeat no-repeat (or inverse)

background: B-COLOR B-IMAGE B-POSITION
B-REPEAT B-ATTACHMENT B-CLIP ,...                #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BORDERS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


border-left|top|bottom|right-color: COLOR       #Def: currentColor
border-left|top|bottom|right-style: STR         #Parmi :
                                                #  - none|hidden (def): put width to 0. Prefer using border-*-width: 0
                                                #  - solid: one plain line
                                                #  - double: two plain lines
                                                #  - dotted
                                                #  - dashed
                                                #  - outset|inset : simple embossed|carved
                                                #  - ridge|groove : advanced embossed|carved
border-left|top|bottom|right-width: LEN|STR     #Width:
                                                #  - STR can be thin|medium|thick
                                                #  - def: medium (but def border-style is none)
border-bottom|top-left|right-radius:LENP[ LENP2]#Rounded corner: LENP horiz., LENP2 vertical.
                                                #Percentage: border box size.

border-color: COLOR ...                         #Shorthand
border-style: STR ...                           #Shorthand
border-width: VAL ...                           #Shorthand
border-radius: LENP ...[ / LENP2 ...]           #Shorthand. LENP sont les horiz. et LENP2 les vertic.
                                               ##Opera mini

border-left|top|bottom|right: B-COLOR B-STYLE 
B-WIDTH                                         #Shorthand
border: B-COLOR B-STYLE B-WIDTH                 #Shorthand


ALL ==>                                        ##Opera mini
                                                #Border-image box:
                                                #  - is originally same as border box, but when changed does not change border box
                                                #  - can go over border box:
                                                #     - with border-image-width > border-width: inside, covering padding|content
                                                #     - with border-image-outset > 0: outside, covering margins
border-image-source: IMAGE|none                 #If defined, border-color becomes transparent.
                                                #Must be the full square, 4 corners + 4 sides (corners will not be repeated, only middle image)
border-image-slice: VAL ... [fill]              #Same values as border-width (except can only be PERC or NUM (pixels))
                                                #Defines how the border-image-source is divided into corners, sides and middle,
                                                #by specifying top|bottom and left|right width:
                                                #  - e.g. with a 30*30px square, sides are 10px-wide and middle 10*10px, so should
                                                #    use 10 10 10 10
                                                #  - is blank beyond border-image-source
                                                #  - def: 100%, i.e. corner images will be full image, and side images will be empty
                                                #  - if 'fill', adds background-image as middle image
                                                #    fill can be placed anywhere
border-image-repeat: STR[ STR2]                 #How side images are repeated.
                                                #For horizontal[ vertical]:
                                                #  - stretch (def): to fit
                                                #  - repeat: repeat FLOAT times
                                                #  - round: repeat INT times, then stretch a little in order to fill gap still there
border-image-width: VAL ...                     #Same values as border-width
                                                #border-image box width (def: border-width)
border-image-outset: VAL ...                    #Same values as border-width
                                                #Grows/offsets border-image box (but does not change width)
border-image: BI-SOURCE BI-SLICE BI-WIDTH 
BI-OUTSET BI-REPEAT                             #Shorthand


ALL ==>                                        ##Opera mini
outline-color: COLOR                            #Outline are just like borders, except :
outline-style: STR                              #  - they are just outside borders 
outline-width: VAL                              #  - they don't take space (can even go over margin box).
outline: O-COLOR O-STYLE O-WIDTH                #  - they may be non-rectangular if some phrasing content is bigger than other
                                                #    phrasing content (depends on browser)
                                                #Avoid outline-style: none (bad for accessibility)

box-shadow: VAL,...                             #Shadow inside/outside of the margin box. 
                                                #Can be none or [inset] LEN LEN2 [LEN3[ LEN4]][ COLOR] : 
                                                #  - inset: inside instead of outside
                                                #  - LEN LEN2: horizontal/vertical shift
                                                #  - LEN3: blur radius (def: 0)
                                                #  - LEN4: spread, i.e. size compared to element, where positive number
                                                #    grows, negative shrinks (def: 0)
                                                #Can use multiple VAL for multiple shadows.
                                               ##Opera mini


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            COLUMNS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


column-width: LEN                               #Divides layout into several columns according to column width:
                                                #  - fill one column after another
                                                #  - no element can span several columns
                                                #Display BLOCK
                                                #Allow using column*
                                               ##Ext: -webkit, -moz
column-count: UINT                              #If column-width not set, same but according to number of columns.
                                                #If set, max. number of columns
                                                #Allow using column*
columns: WIDTH COUNT                            #Shorthand

column-gap: LEN|normal                          #Space between each column.
                                                #(déf: normal, i.e. 1em)

column-rule-color: COLOR                        #Like for border-* but for lines between columns: 
column-rule-style: STR                          #  - only appearing when columns are needed
column-rule-width: VAL                          #  - does not change columns positions
column-rule: COLOR STR VAL                      #Shorthand


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            TABLES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


display: table                                  #Like <table>
display: table-caption                          #Like <caption>
display: table-header|row|footer-group          #Like <thead|tbody|tfoot>
display: table-column[-group]                   #Like <col[group]>
display: table-row|cell                         #Like <tr|td|th>
                                                #Are all default display values for those elements.
                                                #All except: 
                                                #  - table:                   no position: relative
                                                #  - table[-caption]:         no margin
                                                #  - table[-caption|cell]:    no padding
                                                #  - table[-caption|column*]: no *width
                                                #  - table[-caption|row*]:    no *height
                                                #Table-cell can use vertical-align
                                                #Allow using table-related properties below.
                                                #Display BLOCK
display: inline-table                           #Like display: table, but Display INLINE

table-layout: STR                               #How cells width is calculated:
                                                #  - auto (def): according to content
                                                #  - fixed: 
                                                #     - if <col[group]>, according to their width
                                                #     - otherwise according to first <tr>'s cells width
                                                #On display: [inline-]table.
border-collapse: STR                            #How cell borders are merged:
                                                #  - collapse: merged.
                                                #    border-radius does not work.
                                                #  - separate (def): not merged. An extra 1px is added between cells
                                                #On display: [inline-]table.
border-spacing: LEN [LEN2]                      #If border-collapse: separate, space between cell borders (def: depends on browser)
                                                #On display: [inline-]table.
empty-cells: STR                                #Whether empty cells have borders and backgrounds: show (def) or hide.
                                                #On display: table-cell
caption-side: STR                               #Whether caption is on top (def) or bottom.
                                                #On display: table-caption


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             LISTS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


display: list-item                              #Like <li>:
                                                #  - allow using list-style-*
                                                #  - user agent usually adds margins on top|bottom and padding on left
                                                #Are default display values for <li> (<ol|ul> are display: block)

list-style-type: STR                            #Bullet point image, among: 
                                                #  - none 
                                                #  - disc (def for <ul>), square: shapes
                                                #  - decimal[-leading-zero] (def for <ol>): numbers
                                                #  - lower|upper-roman|alpha|latin (alpha|latin are same): letters
                                                #  - lower-greek, armenian, georgian
list-style-image: IMAGE                         #Bullet point image
list-style-position: STR                        #Bullet point position: 
                                                #  - inside: current box
                                                #  - outside (def): create extra inline box on left of current box
list-style : LS-IMAGE LS-POSITION LS-TYPE       


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           TRANSFORM           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


ALL ==>                                        ##Ext: -webkit
                                               ##Opera mini
transform: FUNC ...                             #Modify rendered element:
                                                #  - without changing flow
                                                #  - but applies to Absolute children too
                                                #Can be:
                                                #  - translateX|Y|Z(LENP)
                                                #  - translate[3d](LENP, LENP2[, LENP3])
                                                #     - 3d: only difference is to allow using LENP3
                                                #  - scaleX|Y|Z(NUM)
                                                #     - scaleZ multiplies translateZ
                                                #  - scale[3d](NUM, NUM2[, NUM3])
                                                #     - 3d: only difference is to allow using NUM3
                                                #  - rotate[X|Y|Z](ANGLE):
                                                #     - rotate(): same as rotateZ()
                                                #  - rotate3d(X, Y, Z, ANGLE):
                                                #     - keep rotation axis fixed, according to ratio X/Y/Z
                                                #  - perspective(LEN): like 'perspective: LEN', except: 
                                                #     - applied to (only) current element
                                                #     - must come before the FUNC that will use perspective
                                                #     - perspective-origin is transform-origin
                                                #        - if parent's perspective-origin present, use both
                                                #  - skewX|Y(ANGLE)
                                                #  - matrix[3d](6|12 NUM): matrix like OpenGL
transform-origin: X[ Y[ Z]]                     #Transformation center (def: 50% 50% 0).
                                                #In other words: translate3d(-X, -Y, -Z), applies transform(), then translate3d(X, Y, Z)
                                                #X|Y|Z can be LENP|DIRECTION.

perspective: LEN                                #Changes perspective ('distance from eye') for rotateX|Y(), translateZ(), 
                                                #for all child elements using 'transform' (but not for itself)
perspective-origin: X[ Y[ Z]]                   #Focus center ('eye position') of 'perspective' (def: 50% 50%)
                                                #X|Y|Z can be LENP|DIRECTION.

backface-visibility: STR                        #Whether back side is visible (def) or hidden

will-change: VAL,...                           $#Browser hint that the element will be animated/transformed/DOM-manipulated
                                               $#VAL can be:
                                               $#  - auto (def)
                                               $#  - scroll-position: vertical position in viewport
                                               $#  - contents: children
                                               $#  - PROP: including "transform"
                                               $#Example of browser optimizations:
                                               $#  - create new GPU stack layer in advance:
                                               $#     - for 3D transform and opacity transitions: 
                                               $#        - automatically done otherwise 
                                               $#        - this will create in advance
                                               $#     - for other transitions/animations: will 
                                               $#        - not automatically done otherwise
                                               $#        - this will force using GPU for them
                                               $#     - before, used to be done with hack:
                                               $#        - using translateZ or backface-visibility PROP to force GPU stack layer
                                               $#  - scroll-position: prerender invisible part of viewport
                                               $#  - contents: do not cache children content
                                               $#Improve performance but take more resources, so can decrease performance if overused. 
                                               $#Should only be used:
                                               $#  - for a limited period of time, i.e. added|removed by JavaScript or on CSS :hover
                                               $#     - exception: if this would result in frequent add|remove, i.e. slideshows
                                               $#  - on limited number of elements
                                               $#  - afterwards, if performance is a problem, not as premature optimization
                                               $#  - some time before the actual change happens, to give browser time to optimize
                                               $#'postcss-will-change': 
                                               $#  - only for will-change adding GPU stack layer


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:    TRANSITIONS ANIMATIONS     :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



ALL ==>                                        ##Opera mini
transition-property: STR|none|all,...           #Property to transition (déf: all):
                                                #  - any change to this property will be done smoothly, according to 
                                                #    other transition-*
                                                #  - with several STR,... other transition-* will follow same property order
                                                #    (or repeat if using only one value)
                                                #  - can be transited:
                                                #     - property based on numbers: including RECT, FUNC(NUM,...), COLOR
                                                #  - cannot be transited:
                                                #     - property based on TIME
                                                #     - background-repeat|size|position, font-stretch, text-shadow, grid-*, 
                                                #       border-*color, border-spacing
                                                #     - invisible elements
                                                #     - elements not ready on the document
                                                #Should avoid 'all'
transition-delay: TIME,...                      #How long before starting (def: 0s)
transition-duration: TIME,...                   #How long it lasts (def: 0s). 
                                                #Should add transition-delay to it.
transition-timing-function: FUNC,...            #Relation between value change and time spent (e.g. slower at end, etc.).
                                                #Can be :
                                                #  - linear (def)
                                                #  - ease-in|out: slow begin|end
                                                #  - ease-in-out: slow begin, slow end
                                                #  - ease: like ease-out, but slightly less slow begin
                                                #  - steps(NUM[, start|end]): 
                                                #     - if start (def: end), first step occurs immediately
                                                #  - step-start|end: like steps(1, start|end)
                                                #  - cubic-bezier(4 NUM): 
                                                #     - bezier curve, where start handler has position NUM1, NUM2 
                                                #       and end handler NUM3, NUM4
                                                #     - for jQuery UI Sine, Quad, Cubic, Quart, Circ, Expo, Back and Quint
                                                #       (but not Elastic nor Bounce) to cubic-bezier, see http://easings.net/
transition: PROPERTY DURATION FUNC DELAY ,...   #Shorthand

DOCUMENT|ELEM.ontransitionend =                 #When a CSS transition ends.
FUNC(TRANSITIONEVENT)                          ##Ext: webkitTransitionEnd
TransitionEvent                                 #Readonly.
                                               ##Ext: Webkit
TRANSITIONEVENT.propertyName
TRANSITIONEVENT.elapsedTime                     #Does not take transition-delay into account


ALL ==>                                        ##Ext: -webkit
                                               ##Opera mini
ANIMATIONS ==>                                  #Like transition, but:
                                                #  - sequence of them
                                                #  - can pause|repeat|reverse
                                                #  - launched as soon as the CSS selector containing 'animation-name' applies
@keyframes KEYFRAMES {                          #Define an animation.
  PERC,... { ... }                              #Each line is a single 'keyframe':
  ...                                           #  - go from 0% to 100%:
}                                               #     - can use 'from|to' for 0|100%
                                                #     - 0|100% must be specified
                                                #     - the timing is defined by the others animation-*
                                                #  - each time a keyframe is reached, its rules { ... } are applied
                                                #     - transitions are applied between keyframes
                                                #     - properties mentioned in some keyframes but not others are interpolated
                                                #     - animatable properties are same as transitionnable properties
                                                #  - cannot contain animation-*, except animation-timing-function which can be
                                                #    in KEYFRAMES (valid only for this one) or outside (for any)
animation-name: KEYFRAMES,...                   #Fires an animation.
                                                #Can be several animation, like transitions.

animation-duration: TIME,...                    #
animation-timing-function: FUNC,...             #
animation-delay: TIME,...                       #Like transitions, but for the whole animation.

animation-iteration-count: UINT|infinite,...    #Number of iterations (def: 1)
animation-direction: STR,...                    #Where to start each new iteration:
                                                #  - normal (def): always 0% to 100%
                                                #  - alternate: 0% to 100%, then 100% to 0%
animation-fill-mode: STR,...                    #Style to apply when animation is applied, but not playing yet|anymore:
                                                #  - 'yet', during delay:
                                                #     - none|forwards (def): no keyframe
                                                #     - backwards|both: first keyframe
                                                #  - 'anymore', after last keyframe:
                                                #     - none|backwards (def): no keyframe
                                                #     - forwards|both: last keyframe
animation-play-state: STR,...                   #When paused (def: running), stops current animation.
                                                #To manipulate:
                                                #  - having animation-name + animation-play-state: paused on general selector
                                                #    and animation-play-state: running on specific selector, so the 
                                                #    animation keeps state
                                                #  - through JavaScript
animation: NAME DURATION FUNC DELAY UINT DIR    #
  FILL STATE ,...                               #Shorthand

DOCUMENT|ELEM.onanimationstart|end = 
FUNC(ANIMATIONEVENT)                            #When CSS animation starts/ends.
DOCUMENT|ELEM.onanimationiteration =            #When CSS animation ends an interation (except the last one).
FUNC(ANIMATIONEVENT)                           ##Ext: webkitAnimationStart|End|Iteration
AnimationEvent                                  #Readonly.
                                               ##Ext: Webkit
ANIMATIONEVENT.propertyName
ANIMATIONEVENT.elapsedTime                      #Does not take animation-delay into account


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PAGED MEDIA          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PAGED MEDIA ==>                                 #For application that divides in pages, e.g. when printing.

page-break-after|before: STR                    #Insert page break:
                                                #  - auto (def): if at end|beginning of page
                                                #  - always
                                                #Display BLOCK, and not Absolute
page-break-inside: STR                          #Can insert page break inside the element: 
                                                #  - auto (def)
                                                #  - avoid

@page { ... }                                   #Only applies on paged media.
                                                #Can only change: margin, orphans|widows, page-break*
@page:first { ... }                             #Only first page
@page:left|right { ... }                        #Only left|right


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            CONTENT            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


content: VAL[ VAL2] ,...                        #Add inline box before|after SELECTOR. 
                                                #Selector must be SELECTOR::after|before.
                                                #Fill inline box with with content VAL[ VAL2] ,...:
                                                #  - none|normal (def)
                                                #  - STR
                                                #  - IMAGE
                                                #  - attr(VAR[, STR]): value of HTML attribute VAR, or STR if absent (def: "")
                                                #  - open|close-quote: 
                                                #     - opening|closing quotes
                                                #     - value depends on quote depth level, i.e. if a parent is preceded by
                                                #       an opening quote
                                                #     - their value can be determined by 'quotes' (cf below)
                                                #  - no-open|close-quote: don't insert quotes, put increment quote depth level
                                                #  - counter(COUNTER_VAR[, STR]): replaced by bullet value:
                                                #     - number is COUNTER_VAR value
                                                #        - COUNTER_VAR is initialized|incremented by counter-reset|increment
                                                #          (cf below)
                                                #        - it is done per siblings, i.e. independently for each DOM depth level,
                                                #          introducing counter depth level
                                                #     - STR is list-style-type (def: 'decimal')
                                                #  - counters(VAR, STR2[, STR]): same but:
                                                #     - preceded by counter value of each parent counter depth level, each followed
                                                #       by STR2 (e.g. ".")
quotes: VAL                                     #open|close-quote's value (def: auto):
                                                #  - none
                                                #  - [STR STR2] ...: one for each quote depth level
counter-reset|increment: COUNTER_VAR[ NUM] ...  #Set|increments COUNTER_VAR (def NUM: 0|1)
                                                #Other increment is done in each SELECTOR::after|before, and reset is done before
                                                #any (e.g. on <body> or <ul|ol>).


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            CURSOR             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


cursor: VAL,...                                 #Image du cursor. 
                                                #Can be multiple so if first fails, second is used, except if first fails 
                                                #because of URI NUM NUM2 syntax not supported (IE). In last case, put 
                                                #"cursor: VAL" fallback before another "cursor: URI NUM NUM2".
                                                #VAL possible :
                                                #  - STR parmi (see MDN for pictures) :
                                                #    - auto, default (def), none
                                                #    - context-menu, help, pointer, progress, wait
                                                #    - cell, crosshair, [vertical-]text
                                                #    - alias, copy, move, no-drop, not-allowed
                                                #    - all-scroll, col|row-resize, n|e|s|w|ne|nw|se|sw|ew|ns|nesw|nwse-resize
                                                #  - URI: can provide several URI as fallbacks
                                                #Mobile browsers do not support

pointer-events: VAR                             #When mouse events can be triggered.
                                                #Note that child events might still trigger it, then bubble it to the parent.
                                                #VAR:
                                                #  - auto (def, i.e. always for non-SVG, visiblePainted for SVG)
                                                #  - none: never
                                                #  (SVG only)
                                                #  - fill: mouse over fill
                                                #  - stroke: mouse over stroke
                                                #  - all: mouse over fill|stroke
                                                #  - painted: same as 'all' + fill|stroke SVG property not 'none'
                                                #  - visible, visiblePainted|Fill|Stoke: same as 'all|painter|fill|stroke' +
                                                #    visibility SVG property is 'visible'
                                                ##Opera mini


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:   SUPPORTED THROUGH CSSNEXT   :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                                #Android browser 4.3:
                                                #  - calc()

                                                #IE11:
                                                #  - custom properties
                                                #  - custom media queries
                                                #  - media queries range, e.g. width <= NUMpx
                                                #  - CSS extensions (custom selector)
                                                #  - CSS nesting
                                                #  - CSS conditional rules (only nested at-rules)
                                                #  - CSS color modules level 4
                                                #  - CSS3 fonts (font-variant[*] except font-variant-east-asian|alternates)
                                                #  - all
                                                #  - initial
                                                #  - CSS4 selectors (:any-link, :matches(), :not())
                                                #  - will-change


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         NOT SUPPORTED         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


                                                #Safari 8:
                                                #  - ANGLEturn
                                                #  - background-repeat: round|space
                                                #  - Grid (display: [inline-]grid)
                                                #  - Flex (align-*, flex*, justify-content, order, display: [inline-]flex)
                                                #  - @media (min|max-resolution, dppx, dpcm), 
                                                #  - Paged media (page-break-after|before (except auto|always), @page :first|left|right, marks, bleed)
                                                #  - Fragmentation (box-decoration-break, break-*)
                                                #  - animation-direction: [alternate-]reverse
                                                #  - CSS3 Text (text-align-last, word-break: keep-all)
                                                #  - CSS3 fonts (font-stretch, @font-feature-values, font-kerning, font-language-override, font-size-adjust, font-synthesis)
                                                #  - Masking (mask*, clip-path)
                                                #  - @viewport, [max|min-]zoom
                                                #  - touch-action
                                                #  - ime-mode
                                                #  - orphans|widows
                                                #  - @media [min|max-]resolution

                                                #Firefox 40:
                                                #  - @font-face: unicode-range
                                                #  - column-span
                                                #  - line-break
                                                #  - CSSPAGERULE: selectorText

                                                #Chrome 45:
                                                #  - Display module (display: contents|run-in),
                                                #  - hyphens
                                                #  - visibility: collapse (different behavior)

                                                #Safari mobile 9:
                                                #  - CSS device adaptation
                                                #  - ::selection

                                                #IE11:
                                                #  - CSS extensions (custom function, selector combinator, @RULE)
                                                #  - CSS4 selectors (except :any-link, :matches(), :not())
                                                #  - CSS Font loading API (description: @font-face in JavaScript)
                                                #  - CSS conditional rules (description: at-rules JavaScript classes, CSS.supports(), see CSSNext for nested at-rules)
                                                #  - WHATWG HTML (alternate style sheets):
                                                #     - DOCUMENT: lastStyleSheetSet, preferredStyleSheetSet, selectedStyleSheetSet, enableStyleSheetsForSet(), styleSheetSets
                                                #  - CSS transitions:
                                                #     - TRANSITIONEVENT: pseudoElement
                                                #  - CSS animations:
                                                #     - ANIMATIONEVENT: pseudoElement
                                                #  - CSSOM:
                                                #     - CSS: escape()
                                                #  - attr() (extended syntax)
                                                #  - background-image: image-rect()
                                                #  - Logical properties (caption-side: block|inline-*, clear|float: inline-start|end, block|inline-size, border-inline|block-*, 
                                                #    margin|padding|offset|max|min-block|inline-*)
                                                #  - cursor: grab[bing], zoom-in|out
                                                #  - Ruby layout (display: ruby*, ruby*)
                                                #  - @font-face WOFF2
                                                #  - Counter styles (list-style-type (extended values))
                                                #  - Intrisic sizing (min|max-height|width: fill|fit-content|min-content|max-content, 
                                                #    width: fit-content|min-content|max-content, [fill-]available, border|content-box)
                                                #  - CSS4 Media queries (@media scripting|pointer|hover|light-level|inverted-colors|update-frequency|overflow-block|overflow-inline)
                                                #  - nested @media
                                                #  - position: sticky
                                                #  - CSS3 Text (tab-size, text-align: justify-all|start|end|match-parent, text-indent: hanging|each-line, text-transform (full-width, full-size-kana))
                                                #  - CSS3 fonts (font-variant-east-asian|alternates)
                                                #  - outline-color: invert
                                                #  - text-overflow (two-value of STR)
                                                #  - CSS3 writing module (unicode-bidi: isolate*|plaintext)
                                                #  - Counter styles (@counter-style, symbols)
                                                #  - Blending (background|mix-blend-mode, isolation)
                                                #  - Replaced content (element(), image-rendering, image-orientation, object-fit|position)
                                                #  - Shapes (BASIC-SHAPE (i.e. inset|polygon|circle|ellipse()), shape-*)
                                                #  - Text decoration (text-decoration-*, text-underline-position)
                                                #  - CSS3 writing module (writing-mode, text-orientation, text-combine-upright)
                                                #  - transform-style, transform-box
                                                #  - :default
                                                #  - :dir(DIR)
                                                #  - @document
                                                #  - element
                                                #  - :in|out-of-range, :read-only|write 
                                                #  - LENvmax
                                                #  - outline-offset
                                                #  - overflow-wrap
                                                #  - resize
                                                #  - unset
                                                #  - filter()
                                                #  - :scope
                                                #  - scroll-behavior
                                                #  - scroll-snap-*
                                                #  - @supports
                                                #  - text-rendering
                                                #  - transition and animation on 'content'
                                                #  - Selector [ATTR ... i]
                                                #  - SVG fonts



                             
   ARCHITECTURE/FORMATTING   
                             



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            SUMMARY            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


ARCHITECTURE ==>                  							#JavaScript -> stylesheets if need JavaScript flexibility, standard stylesheets otherwise.

COMPONENT-BASED ARCHITECTURE ==>  							#Applies (for most of it) to any architecture:
																								#  - layers (directory, classname prefix, can only reference (but not override) same/upper): 
																								#     - index.css (only @import, globbing if possible) 
																								#     - base, context, helpers: categorized
																								#     - base/layout/project components: COMPONENT.css
																								#  - break into small UI components/blocks:
																								#     - categorized by type (layout/positioning, typography, other)
																								#     - abtract, can be placed anywhere
																								#     - composition over inheritance: limited override with .CLASS .CLASS2
																								#  - selectors:
                                                #     - JavaScript: .js-my-class, -qa-my-class, .is-my-state
                                                #     - CSS: 
                                                #        - .project-my-block[__my-elem][--my-mod[--my-mod-value]][.is-my-block-my-state][:PSEUDO] (BEM)
																								#           - must properly name
                                                #        - alternative: .my-elem [.my-mod] [.is-my-state] [:PSEUDO] (CSS modules)
                                                #           - simpler but requires tooling
                                                #        - .t-THEME SELECTOR
                                                #        - _SELECTOR: hack

CSS FORMATTING ==>                							#  // Variables are in a different file
																								#  $header-size: .5em;
                                                #  $font-size: 14px;
																								#  $sidebar-size: 0;
																								#  
																								#  
																								#  /**
																								#   * Block comment
																								#   */
																								#  
																								#  .my-block,
																								#  .my-other-unrelated-block { 
																								#    ...
																								#  }
																								#  
                                                #    // props order: display/positioning, transformations, visibility, margin->padding, content, text, misc
																								#    .my-block.is-state, .my-block.is-similar-state { 
																								#      display: block;
																								#      // props order: top, right, bottom, left
																								#      top:   $header-size;
																								#      right: $sidebar-size;
																								#      // No background properties
																								#      background-image: url("URL");
																								#      background-clip: content-box, padding-box;
																								#      box-shadow: inset 50% 50% #ede,
																								#                  inset 10% 10% #aaeeff;
																								#    }
																								#    // Comment explaining override
																								#    .my-block.is-state .my-other-block { 
																								#      ...  
																								#    }
																								#  
																								#  @media MEDIA_QUERY { 
																								#    
																								#    .my-block { 
																								#      ... 
																								#    }
																								#  
																								#  }

SASS/LESS FORMATTING ==>          							#  - syntax:
																								#     - (EXPR * VAL), NUM * 1px (not NUM + px)
																								#     - (VAL,...) 
																								#     - (
																								#         'VAR': VAL,
																								#       )
																								#  - props (in order, two newlines between each group):
																								#     - variables: constants, media queries, not temp variables
																								#     - @extend: only semantic inheritance, using simple %placeholder
																								#     - mixins with no content: only simple grouping together props
																								#     - others
																								#     - mixins with content
																								#     - nested selectors with &: only :PSEUDO and .is-STATE
																								#     - nested selectors without &
																								#  - functions: only simple
																								#  - avoid logic/loop, except to print warning message
																								#  - module to import should not define rulesets
																								#  - naming: [-][PROJECT]- (- for functions, PROJECT if needed)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CSS ARCHITECTURE        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


ABBREVIATIONS ==>                 							#  - BEM: BEM
																								#  - CG:  cssguidelin.es
																								#  - GC:  grvcoelho CSS style guide
																								#  - GS:  Google HTML/CSS style guide
																								#  - IC:  Idiomatic CSS
																								#  - IS:  Idiomatic Sass
                                                #  - JC:  jQuery CSS style guide
                                                #  - KC:  Khan CSS style guide
                                                #  - MW:  Mediawiki CSS coding conventions
																								#  - MCG: mdo code guide
																								#  - MCS: MCSS
																								#  - MN:  Montage naming convention
																								#  - OC:  OOCSS
																								#  - PG:  primercss.io guidelines
																								#  - RS:  RSCSS
																								#  - SG:  Sass guidelines
																								#  - SM:  SMACSS
																								#  - TC:  Trello CSS style guide
																								#  - WC:  Wordpress CSS coding standards

ALTERNATIVES ==>                  							#When there are competing recommandations, we use / instead of -, with the preferred choice
                                  							#on top

MAIN ARCHITECTURE CHOICE ==>      							#Summary:
                                  							#  - stylesheets: most standard/simple, but needs to use strong naming scheme
                                  							#  - JavaScript -> stylesheets: can use runtime JavaScript
                                  							#  - JavaScript -> HTML: can use runtime JavaScript but limitations (@rules, :pseudo, performance, debugging)
                                  							#  - HTML only: limited flexibility, custom/complex syntax, duplicated code
                                  							#Details:
                                  							#  - flexibility: 
                                  							#     - JavaScript -> stylesheets: run-time JavaScript
                                  							#     - JavaScript -> HTML: run-time JavaScript. Hard to work with @rules and :pseudo
                                  							#     - stylesheets: compile-time Less/Sass
                                  							#     - HTML only: compile-time HTML. Hard to work with @rules and :pseudo
                                  							#  - standard:
                                  							#     - stylesheets: standard
                                  							#     - JavaScript -> HTML/stylesheets: relies on tools, but can follow similar syntax as CSS
                                  							#     - HTML only: custom notation
                                  							#  - simplicity:
                                  							#     - syntax:
                                  							#        - stylesheets: simplest syntax
                                  							#        - JavaScript -> HTML: simple syntax
                                  							#        - JavaScript -> stylesheets: simple syntax
                                  							#        - HTML only: complicated syntax
                                  							#     - selectors:
                                  							#        - JavaScript -> HTML, HTML only: simplest (inline)
                                  							#        - JavaScript -> stylesheets: simple naming scheme
                                  							#        - stylesheets: strong naming scheme
                                  							#  - DRY:
                                  							#     - stylesheets, JavaScript -> stylesheets: low
                                  							#     - JavaScript -> HTML: low in source code, but duplicated code in production
                                  							#     - HTML only: duplicated code

 +=============================+=============================+=============================+=============================+=============================+
 | FEATURE                     | STYLESHEETS                 | HTML ONLY                   | JAVASCRIPT -> HTML          | JAVASCRIPT -> STYLESHEETS   |
 +=============================+=============================+=============================+=============================+=============================+
 |                             |                             |                             |                             |                             |
 | Declaration                 | Component-oriented CSS      | Only inline style or classes| JavaScript translated into  | JavaScript translated into  |
 |                             | stylesheets                 |                             | runtime HTML inline style   | runtime <style>/stylesheets |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Example                     |                             | Atomic CSS                  | Radium, JSS                 | JSS, Radium                 |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+------------------------------
 | Source organization         | Inside CSS files            | Inside HTML files           | Inside JS files                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Compile step                | Yes with LESS/SASS          | Yes with atomizer           | No                                                        |
 +-----------------------------+-----------------------------+-----------------------------+------------------------------------------------------------
 | Properties/values           | Compile-time                | Compile-time                | Run-time (JavaScript)                                     |
 |                             | (LESS/SASS expressions)     |                             |                                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Reuse code                  | LESS/SASS variables,        | Limited                     | JavaScript logic                                          |
 |                             | mixins, functions, @extend, |                             |                                                           |
 |                             | structures                  |                             |                                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Selectors                   | Component-oriented.         | Inline: simpler.                                          | Can be component-oriented.  |
 |                             | Usually using naming scheme | Problem: cannot edit all instances at once when debugging | JSS: favor .CLASS--BLOCK    |
 |                             | like BEM                    | Can still reuse some ideas of component-oriented.         |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | @rules, :pseudo             | Normal                      | No                          | Must either:                | Normal                      |
 |                             |                             |                             |  - use JS -> stylesheets    |                             |
 |                             |                             |                             |  - use JS logic,            |                             |
 |                             |                             |                             |    e.g. window.matchMedia() |                             |
 |                             |                             |                             |    for @media               |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Re-using LESS/SASS libraries| Ok                          | Cannot reuse                                                                            |
 +-----------------------------+-----------------------------+------------------------------------------------------------------------------------------
 | Automatic vendor prefix     | Through plugins or builtin                                                                                            |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+-----------------------------+
 | Performance                 | Fastest                     | Slower:                                                   | Fast                        |
 |                             |                             | - duplicate inline styles, so more bytes and more         |                             |
 |                             |                             |   calculation                                             |                             |
 |                             |                             | - React diff of style prop                                |                             |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+-----------------------------+
 | Stability                   | Standard                    | Relies on external tools                                                                |
 +=============================+=============================+=========================================================================================+


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      COMPONENT-ORIENTED       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CLASSNAMES ==>                    							#Naming scheme:
                                  							#  - main elements:
                                                #     - PROJECT
                                                #     - MODULE/FILE: unique identifier for a given file
                                                #        - is same as BLOCK/COMPONENT in components
																								#     - BLOCK/COMPONENT: [sub]component (unique across app)
																								#        - often at least two words
																								#        - CamelCase for blocks, camelCase for rest (MN)
																								#        - can be namespaced: 
                                                #           - c-: component, i.e. self-contained module
                                                #           - o-: object, i.e. non-self-contained module, to avoid
                                                #           - u-: utility
                                                #           - t-: theme, see below
                                                #           - _:  hack, see below
																								#     - ELEMENT: [sub]component's part (unique across BLOCK)
																								#        - when too many subelements, should be extracted as a BLOCK instead
																								#     - MODIFIER/VARIANT: styling state
																								#        - always local to a specific BLOCK|ELEMENT (no global MODIFIER)
																								#        - HTML need to have both selectors: with and without MODIFIER
																								#     - STATE: interaction state
																								#        - always local to a specific BLOCK|ELEMENT (no global STATE)
																								#        - :PSEUDO can be used instead or in addition to STATE
																								#        - dynamically changed by JavaScript (as opposed to BLOCK, ELEMENT and MODIFIER)
																								#  - a given DOM element can be several BLOCK|ELEMENT ('mixin')
                                  							#  - component syntax:
                                                #     / .ELEMENT [.MODIFIER] [.is|has-STATE] (CSS modules, see below):
                                                #        - compiles to .MODULE-ELEMENT [.MODULE-MODIFIER] [.MODULE-is|has-STATE]
                                                #        - comparison with BEM syntax:
                                                #           - simpler naming scheme
                                                #           - easier to enforce
                                                #           - requires tooling:
                                                #              - CSS sourcemaps (only supported with Webpack at the moment)
                                                #              - mapping compiled names, compile-time or run-time
																								#     / .BLOCK[__ELEMENT][--MODIFIER[--MODIFIERVALUE]][.is|has-[BLOCK-]STATE] (BEM MN GC CG IS): 
																								#        - can sometimes use _ or - instead of __ or --
																								#        - no BLOCK__ELEMENT__SUBELEMENT
                                  							#        - @MODIFIER instead of --MODIFIER: 
                                                #           - responsive suffix, used for media queries breakpoints, browser or theming
                                                #           - alternatives, which might be simplier: 
                                                #              - breakpoints: using @media only
                                                #              - browser/theming: using DOM-top-level class, e.g. .t-CLASS SELECTOR
																								#        - can .BLOCK--MODIFIER .BLOCK__ELEMENT (because .BLOCK--MODIFIER__ELEMENT is not correct syntax)
                                                #        - BLOCK-STATE: not standard syntax, but required to avoid name conflict when using mixins
																								#     / .BLOCK-ELEMENT[-SUBELEMENT-...][.mod|is-MODIFIER] (TC)
																								#     / .BLOCK[.-MODIFIER] [>] .ELEMENT[-MODIFIER] (RS)
																								#        - >: otherwise might target .BLOCK .ANOTHERBLOCK .ELEMENT
																								#     / .BLOCK .ELEMENT [.SUBELEMENT-...] [.MODIFIER|STATE] (OC)
                                                #  - other syntax:
                                  							#     - .PROJECT-SELECTOR: project-wide namespace (MN MW)
                                                #     - .t-CLASS SELECTOR: theming
                                                #     - _SELECTOR: hack. Can also put in separate file shame.css
                                  							#  - do not use nesting (including through & or mixins) to make naming scheme shorter

COMPONENTS DEFINITION ==>         							#Focus on using UI component (RS TC SM OC CG IS SG):
																								#  - 1 UI component === 1 BLOCK
																								#     - single responsibility: should break down big UI components
																								#     - make components as abstract as possible, including in classnames chosen
                                  							#  - define components types: layout/positioning, typography, other styling (IS)
																								#  - BLOCK declaration should not use positioning:
                                  							#     - so can be reused in different contexts
																								#     - but BLOCK2 using BLOCK might position BLOCK, and BLOCK might position ELEMENT, as long as it does not assume things
																								#       about how that other element work internally
                                                #  - can put CSS reset at the component level (see postcss-autoreset in PostCSS doc)
																								#Separate structure and skin (OC CG):
																								#  - structure: UI component, with only invariant structure, behavior and styling
																								#  - skin: 
																								#     - variant styling: 1 UI component can have many skins (like using BEM MODIFIER|STATE)
																								#     - cross-UI-component: 1 skin can be applied to many UI components (like using global BEM MODIFIER|STATE)

COMPONENTS INTERACTION ==>        							#Use composition over inheritance for components (MCS CG)
																								#Avoid .CLASS .CLASS2 (TC GC CG MCG PG):
																								#  - only use it when a UI component override another component:
																								#     - override can be e.g. positioning
																								#     - but must not overriding the inside of that other component. The other component should define MODIFIER instead.
																								#  - not when specifying a subelement: use naming scheme instead
																								#  - as such, rarely need to use Less/Sass nesting

CSS MODULES ==>                                 #Transform .CLASS in FILE into .CLASS-FILE_ID:
                                                #  - JavaScript must load CSS:
                                                #     - which exports { CLASS: 'CLASS-FILE_ID' ... }
                                                #     - using:
                                                #        - no loaders:
                                                #           - CSS:
                                                #              - postcss-modules: transforms CLASS to CLASS-FILE_ID and returns
                                                #                { CLASS: 'CLASS-FILE_ID' ... }
                                                #              - postcss-modules-scope + postcss-modules-extract-imports: adds :export|import
                                                #           - HTML:
                                                #              - posthtml-css-modules: transforms CLASS to CLASS-FILE_ID using
                                                #                { CLASS: 'CLASS-FILE_ID' ... }
                                                #        - Webpack: 
                                                #           - css-loader
                                                #           - react-css-modules: better than css-loader but requires React
                                                #        - Browserify: css-modulesify
                                                #        - RequireJS: css-modules-require-hook
                                                #     - when processed, actually adds two pseudo-classes (ICSS):
                                                #        - :export { CLASS: 'CLASS-FILE_ID' ... }
                                                #        - :import(FILE2) { CLASS: 'CLASS-FILE2_ID' }
                                                #  - can switch back and forth to normal mode with :global|local[(SELECTOR)] inside selectors
                                                #Also allow inheritance:
                                                #  - composes: CLASS ... [from FILE]: like @extend
                                                #postcss-modules-values also allows:
                                                #  - @value FILE_ALIAS: "FILE";
                                                #  - @value VAR[as VAR2],... from "FILE";


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CSS IN HTML          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CSS IN HTML ==>                   							#Use only inline styles.
                                  							#As such, do not use CSS classes as abstraction layer between HTML and CSS

ATOMIC CSS ==>                    							#Similar idea but more concise by using CSS classes shorthands for CSS props/vals:
																								#  - [ANCESTORCLASS[:PSEUDO]_]FUNC[(VAL|VAR,...)][!][:[:]PSEUDO][--MEDIA_QUERY]
																								#     - ! is !important
																								#     - FUNC: CSS props being styled, based on Emmet abbreviation, with some extensions
																								#  - a tool (atomizer) exists to create CSS stylesheets based on atomic class name that are used


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CSS IN JAVASCRIPT       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SUMMARY ==>                       							#Translated into stylesheets/<style>: see JSS
                                  							#Translated into HTML inline style: see React-CSS


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTORS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SELECTORS ==>                     							#  - only use .CLASS selectors (BEM RS JC):
																								#     - with possibly :PSEUDO
																								#     - but not tag selectors, attribute selectors, combinations nor *
                                  							#  - use namespaced js-CLASS for JavaScript selection (BEM RS PG MCG). Can also use qa-CLASS for browser testing.
																								#  - no !important (BEM RS JC MW)

CLASS NAMING ==>                  							#  - use abstract, meaningful, structural (not presentational) classnames/variables (MCG WC GS JC)
																								#  - case: 
                                                #     / dasherized (JC MW KC)
                                                #     / dasherized or camelcased (BEM GS RS)
																								#  - can use abbreviation list to keep CSS classnames short (MCS)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      LAYERS/ORGANIZATION      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


FILE ORGANIZATION ==>             							#Root dirs:
                                  							#  / per layer (see below)
                                  							#  / Idiomatic Sass (IS):
																								#     - assets/: static assets
																								#     - local/: private
																								#     - lib/: public
																								#     - components/: dependencies
                                  							#Main file:
																								#  - name: index.css (IS SG)
																								#  - order: each layer from most generic to most specific (TC)
																								#  - with only @import grouped by category (SG)
																								#  - use globbing where possible (SG)
																								#File division:
																								#  / BLOCK.css, 1 component === 1 file (RS MCG IS)
																								#  / FULL_SELECTOR.EXT (BEM):
																								#     - 1 component [subelement] + MODIFIER|STATE === 1 file
																								#     - directory: BLOCK/[__ELEMENT/][--MODIFIER/][.is-STATE/]
																								#     - group with other assets: .js|png|etc.
                                  							#File order:
                                  							#  - .BLOCK, .BLOCK-ELEMENT, .BLOCK[-ELEMENT].mod-MODIFIER, .BLOCK[-ELEMENT].is-MODIFIER, @media queries (TC)

LAYERS ==>                        							#What layers are, in order:
                                  							#  (external)
																								#  - vendors: external libraries (SG)
                                  							#  (base)
																								#  - base: CSS reset (MCS SM SG)
																								#  - context: media queries breakpoints, browser or theming (MCS SM SG)
                                  							#  (helpers)
																								#  / cosmetic styling: common generic styling (e.g. clearfix, padding, etc.) (MCS)
																								#  / abstracts: variables/functions/mixins (SG)
                                  							#  (components layers)
																								#  / base components: as abtract as possible (MCS)
																								#  / layout: layout-related UI components BLOCK (SM SG)
																								#  / module: other UI components BLOCK (SM SG)
																								#  / project components: specific to a given page/region/use-case (MCS SG)
																								#  / state: UI components MODIFIER/STATE (SM)
																								#What layers do:
																								#  - has its own file or directory (MCS SM SG PG IS)
																								#  - has its own classname prefix (SM)
																								#  - can be defined as (MCS SM SG):
																								#     - CSS classes: components, cosmetic styling, context (e.g. on body)
																								#     - variable or simple mixins/functions/inheritance: cosmetic styling, context
																								#  - restricted usage:
																							  #     - cannot reference lower layer CSS classes/variables (MCS)
																								#     - can reference (e.g. inheritance/mixins/variables) but not override (e.g. new rules for selectors) upper|same layer ("immutable css")

						
																             /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        CSS FORMATTING         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NEWLINES ==>                      							#  - newlines between rulesets/@rules:
																								#     / one between related, two between unrelated but same section, five between sections (CG WC)
																								#     / two (GC PG GS IC IS JC MW KC)
                                                #  - newline before comment (JC)
                                                #  - newline around { }:
                                  							#     / always (CG GS SG JC MW)
																								#     / except if only one prop/val (MCG IC)
                                  							#  - newline after , in selectors:
																								#     / except related selector (CG SG)
																								#     / always (GC MCG WC GS IC IS JC MW KC)
																								#  - newline after ; (GC CG MCG WC PG IC IS SG JC MW KC)
                                                #     - two newlines around props groups

INDENT/WIDTH ==>                  							#  - indent size:
																								#     / 2 spaces (MCG PG GS IS SG)
																								#     / 4 spaces (CG IC KC)
                                  							#     / tab (WC JC MW)
                                  							#  - indent according to depth level (e.g. .BLOCK__ELEMENT more than .BLOCK) (BEM RS CG)
																								#  - indent to vertically align related values (e.g. top:   0; bottom: 0;) (CG MCG)
																								#  - 80 chars columns (CG WC IC SG KC)
																								#  - use .editorconfig (MCG IC)

SPACE ==>                         							#  - no trailing whitespace (JC)
                                                #  - space after , > + ~ in selectors
																								#  - space before { (CG MCG PG IC IS JC KC)
                                                #  - space around ( ) (MW)
                                                #  - space around < <= > >= in @media
                                                #  - space after : but not before (GC CG MCG WC PG GS IC SG JC MW KC)
																								#  - space after , in values:
																								#     / except in longer values (like box-shadow):
                                  							#        / put every part on a new line except first one (WC)
                                  							#        / put every part on a new line (IC)
                                  							#     / always (IS SG MW)
																								#     / except inside FUNC() (MCG JC KC)

COMMENTS ==>                      							#  - style:
                                                #     - always // COMMENT (PG)
                                                #     - always /* COMMENT */ (JC KC)
																								#  - separate sections in a file with comments, using consistent amount of newlines (CG GS MCG)
																								#  - when selector from another file is being overriden (CG)
                                                #  - on linting disable

PROPS ==>                         							#  - order:
                                  							#     / logical:
                                                #        / display/positioning, transformations, visibility, margin->padding, content, text, misc ('Concentric CSS')
                                                #        / positioning, display, box model, text, background, border, transformations, others ('recess')
																								#        / display, positioning, box model, colors/typography, misc (WC)
																								#        / positioning, box model, typography, visual, misc (MCG)
																								#        / positioning, display & box model, misc (IC)
																								#     / alphabetical (GS KC)
																								#     - when not using shorthand properties, follow values order, e.g. top, right, bottom, left (WC)
                                                #     - empty lines between props groups
                                  							#  - shorthand properties:
																								#     / never (MCG PG)
																								#     / always (WC GS JC)
                                                #     - their value should be as short as possible, i.e. margin: 1px not margin: 1px 1px

VALUES ==>                        							#  - floats:
																								#     / .5 (MCG GS JC)
																								#     / 0.5 (WC SG)
                                                #     - 1 not 1.0
                                                #     - max precision: 2
                                                #     - no trailing zeros
																								#  - unitless 0, for LEN (MCG WC PG GS IC IS SG JC KC)
                                  							#  - colors:
																								#     / hex colors, lowercase, with 3 letters instead of 6 if possible, unless rgba() (MCG WC PG GS IC IS JC MW KC)
																								#     / hsl() (SG)
                                  							#  - em/percentage vs px:
																								#     / em/percentage, except px for font-size (PG)
																								#     / em/percentage (WC JC)
                                                #  - keywords:
                                                #     - do not use in font-weight (except lighter|darker)

QUOTES ==>                        							#  / "" (MCG WC IC IS JC)
																								#  / '' (SG)
																								#  / '', except for URL: do not use anything (GS MW)

@MEDIA ==>                        							#  - place:
                                  							#     / put @media-queries close to related code without the @media-queries (MCG TC)
																								#     / grouped together in beginning of each file (WC)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:     SASS/LESS FORMATTING      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EXPRESSIONS ==>                   							#  - (EXPR * VAL) or #{EXPR * VAL} (MCG SG)
                                  							#  - manipulate units with arithmetic, not string manipulation, 
                                  							#    e.g. NUM * 1px or NUM / 1px, but not NUM + px (SG)

ARR|OBJ ==>                       							#  - ARR: (VAL,...) on one line if short, with newlines after ( or , otherwise (SG)
																								#  - OBJ: ('VAR': VAL ,...) with trailing comma, space after :, newline after ( or , (SG)

PROPS ==>                         							#  - order:
																								#     / variables, inheritance, mixins with no content, others, mixins with content, nested selectors with &, nested selectors without & (IS)
																								#     / variables, mixins with no content, others, nested selectors, mixins with content (SG)
																								#     / inheritance, mixins, others (IC)
																								#  - two newlines between each group (SG)

NESTING ==>                       							#  - use &:
                                  							#     - only :PSEUDO or .is-STATE (SG)
                                                #  - two newlines separation (MW)

MIXINS/FUNC/VARIABLES/PLACEHOLDERS NAMING ==>  	#  - dasherized (SG)
																								#  - constants: all-caps (SG)
																								#  - namespaced:
                                  							#     / [-][PROJECT]- (IS):
                                  							#        - first dash: if functions (as opposed to mixin)
                                  							#        - PROJECT: unless private
                                  							#        - PROJECt is CamelCase if output selectors, camelCase if output props
																								#     / PROJECT- (SG IC)
																								#     / m|u- (TC)
                                                #     / mixin- (MW)

VARIABLES ==>                     							#  - use:
                                  							#     - instead of constants (SG WC TC KC)
																								#     - for media queries, according to size ('medium', etc.) not devices ('tablet', etc.) (SG WC TC)
																								#     - not as temporary variables (SG)
																								#  - can group them as OBJ (SG)
                                                #  - private variables:
                                                #     - only used inside their file
                                                #     - name convention: _VAR

INHERITANCE ==>                   							#  - use @EXTEND|:EXTEND:
																								#     / only where there is semantic inheritance (SG)
																								#     / prefer over mixin (IS)
																								#  - use %placeholder, and no complex one (SG)

MIXINS ==>                        							#  - use:
                                  							#     - only to group together often used props (SG TC)
                                  							#     - keep them simple (SG TC)
																								#  - MIXIN, not MIXIN() (SG)
																								#  - use variadic/splat, or named arguments (SG)

FUNCTIONS ==>                     							#  - use:
                                  							#     - only simple helpers (SG TC)

LOGIC/LOOP ==>                    							#  - use:
                                  							#     - conditions to check mixin arguments, together with @debug|warn|error() (SG)
                                  							#     - avoid otherwise (SG)
                                                #  - space before @else

IMPORT ==>                        							#  - modules to import should not define rulesets (IS)
