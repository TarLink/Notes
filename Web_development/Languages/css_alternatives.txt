
                      
   CSS_ALTERNATIVES   
                      



SUMMARY ==>                       #Others (vs CSS):
                                  #  - allow using run-time props/values in JavaScript
                                  #  - selectors simpler but less flexible
                                  #  - use JavaScript files instead of CSS files
                                  #JSS vs Radium:
                                  #  - JSS: create <style> run-time
                                  #  - Radium: use inline HTML attributes, so many problems: debug live editing, performance,
                                  #    does not work with everything (reusing CSS library, @rules)


 +=============================+=============================+=============================+=============================+
 | FEATURE                     | CSS/LESS/SASS               | JSS/REACT-JSS               | RADIUM                      |
 +=============================+=============================+=============================+=============================+
 | Declaration                 | Compile-time stylesheets    | runtime <style>             | runtime "style" attribute   |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Compile step                | Yes with LESS/SASS          | No                                                        |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Source organization         | Separate CSS files          | Separate or not JS files                                  |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Properties/values           | Compile-time                | Run-time (JavaScript)                                     |
 |                             | (LESS/SASS expressions)     |                                                           |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Selectors                   | Normal                      | .CLASS + component-namespace| inline, so similar to #ID   |
 |                             |                             | Can still use normal        | Problem: cannot edit all    |
 |                             |                             | selectors with CONF,        | instances at once when live |
 |                             |                             | or replace with JavaScript  | editing in Chrome developer |
 |                             |                             | logic.                      | tools.                      |
 |                             |                             | Favor first: simpler,       |                             |
 |                             |                             | cleaner but less flexible.  |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Precedence                  | Load order                  | More explicit in JavaScript                               |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | @rules except @media        | Normal                      | Using normal selectors      | Inject <style> with helper  |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | @media                      | Normal                      | Builtin support             | Use WINDOW.matchMedia()     |
 |                             |                             |                             | (needs mock on server)      |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Reuse code                  | LESS/SASS variables,        | "extend"                    | JavaScript logic            |
 |                             | mixins, functions, @extend, | or JavaScript logic         |                             |
 |                             | structures                  |                             |                             |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Re-using CSS libraries      | Ok                                                        | Need to use CSS class       |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Re-using LESS/SASS libraries| Ok                          | Cannot reuse                                              |
 +-----------------------------+-----------------------------+-----------------------------------------------------------+
 | Automatic vendor prefix     | Through plugins or builtin                                                              |
 +-----------------------------+-----------------------------+-----------------------------+-----------------------------+
 | Performance                 | Fastest                     | Fast                        | Slower:                     |
 |                             |                             |                             |  - duplicate inline styles, |
 |                             |                             |                             |    so more bytes and more   |
 |                             |                             |                             |    calculation              |
 |                             |                             |                             |  - React diff of style prop |
 +=============================+=============================+=============================+=============================+



         
   JSS   
         



VERSION ==>                       #3.2.0
                                  #Use JavaScript object to inject <style>, modify inline CSS or output CSS string.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             MAIN              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JSS.create()->JSSI                #

JSSI.createStyleSheet             #JSS_OBJ is { SELECTOR: RULES_OBJ ... }:
(JSS_OBJ[, CONF])->SHEET          #  - RULES_OBJ: like CSS accessed in JavaScript (i.e. ELEM.styles RULES_OBJ)
                                  #  - SELECTOR: unless CONF.named false, can only be:
                                  #     - '@media ...'
                                  #     - KEY, which will be converted to a .CLASS namespaced for this JSSI,
                                  #       accessible at SHEET.classes.KEY (e.g. .KEY--jss-ID)
                                  #CONF:
                                  #  - media 'MEDIAQUERY': <style> media HTML attribute
                                  #  - meta OBJ: debug information
                                  #  - link BOOL (def: false): make RULES_OBJ reference to CSSRule, so that it updates
                                  #    <style> when changed (slower)
SHEET.addRules(JSS_OBJ[, CONF])   #
SHEET.addRule                     
(['SELECTOR', ]RULES_OBJ[, CONF]) 
->RULES_OBJ                       #
JSSI.createRule(...)->RULES_OBJ   #Same as SHEET.addRule(...) but without a SHEET
SHEET.getRule('SLCTOR')->RULES_OBJ#

RULES_OBJ.applyTo(ELEM)           #Add to ELEM using ELEM.style
RULES_OBJ.prop('PROP'[, VAL])     #Get/set
RULES_OBJ.toJSON()                #
RULES_OBJ.toString()              #To CSS

SHEET.attach()                    #Inject output CSS as <style> in DOM
SHEET.detach()                    #Cleanup (good idea for performance)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            PLUGINS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JSSI.use(FUNC(RULES_OBJ))         #Plugin declaration

JSS-NESTED()->FUNC                #Version 1.0.0
                                  #Allow nesting rules like in Sass/Less, including using '&'

JSS-EXTEND()->FUNC                #Version 1.1.0
                                  #Allow using 'extend': 'SELECTOR'|RULES_OBJ as { PROP: VAL } 
                                  #to include another set of props (like in Sass/Less)

JSS-VENDOR-PREFIX()->FUNC         #Version 1.0.0
                                  #Adds vendor prefix to PROP according to current user agent.

JSS-CAMEL-CASE()->FUNC            #Version 1.0.0
                                  #Transform PROP from dasherized to camelcase.

JSS-PX()->FUNC                    #Version 1.0.0
                                  #Transform NUM to "NUMpx" for the relevant properties

JSS-PROPS-SORT()->FUNC            #Version 1.0.0
                                  #Reorder props so that shorcut properties are before non-shortcut ones.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CONVERSION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


jss FILE.css                      #Outputs JSS
                                  #Module jss-cli (2.0.0)
--pretty                          #
--format cjs                      #Adds module.exports = OBJ

JSS-CLI.cssToJss(STR)->OBJ        #As Node module
