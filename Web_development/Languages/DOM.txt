
         
   DOM   
         



SUMMARY ==>                                     #Basic:
                                                #  - HTML: integrating with HTML
                                                #Architecture:
                                                #  - Loading (async|sync)
                                                #  - Rendering:
                                                #     - steps: preload parsing, parsing, cascading, layout, paint, composite
                                                #     - performance: avoid re-rendering, max 4ms JavaScript
                                                #Utilities:
                                                #  - Utilities
                                                #  - Timeouts: setTimeout(), requestAnimationFrame(), etc.
                                                #  - console
                                                #  - performance: initial network, document loading performance
                                                #Events:
                                                #  - Events
                                                #  - UIEvent
                                                #  - Mouse/touch events
                                                #  - Load events
                                                #Document:
                                                #  - Top-level: WINDOW, DOCUMENT
                                                #  - query
                                                #  - iteration: crawling
                                                #  - test: between two NODE
                                                #  - creation
                                                #  - manipulation
                                                #  - observing
                                                #  - content
                                                #  - attr|text|comment
                                                #  - range|selection
                                                #  - CSSOM
                                                #  - CSSOM view (dimensions, position, scrolling)
                                                #Browsing:
                                                #  - location
                                                #  - history
                                                #Browser/device:
                                                #  - platform
                                                #  - geolocation
                                                #  - orientation|motion
                                                #Networking:
                                                #  - offline
                                                #  - HTTP headers
                                                #  - XHR
                                                #  - websocket
                                                #Storage:
                                                #  - files
                                                #  - storage: localStorage, sessionStorage
                                                #  - storage summary
                                                #Messaging/workers:
                                                #  - messaging
                                                #  - workers
                                                #UI components:
                                                #  - popup
                                                #  - drag&drop
                                                #  - RTF


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            GENERAL            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


VERSION ==>                                     #4

STANDARD ==>                                    #W3C for most
                                                #But WHATWG (fork) has few specs

TYPES ==>                                       #  - DOM (Document Object Model): WINDOW.document.*
                                                #  - BOM (Browser Object Model): browser elements, i.e. frames, history, location, window
                                                #  - Web APIs: Usually on WINDOW, e.g. WebSocket, BatteryManager, SessionStorage, etc.

XML ==>                                         #This doc doesn't include objects, etc. related to XML: check XML doc.

INTEROPERABILITY ==>                            #See HTML doc for list of browsers


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             HTML              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


INCLUDING IN HTML ==>                           #Priority is from top to bottom

LOADING|PARSING ORDER ==>                       #See DOM doc

<script>                                        #Loaded right away, sync (in same thread)
  src="FILE.js"                                 #From external file.
  type="STR"                                    #MIME type. Def: 'text/javascript'
  async                                         #Loaded right away, async (in a different thread)
                                                #"src" mandatory, not compatible with defer.
  defer                                         #Loaded on DOMContentLoaded, sync (in same thread)
                                                #"src" mandatory, not compatible with async.
  integrity="ALGO-HASH ..."                    $#See <link>
  charset="CHARSET"                             #Only works if Content-Type [S] does not provide the information (including when accessing files locally)
                                                #E.g. 'UTF-8' (def)
  SCRIPT.text                                   #Like SCRIPT.textContent
DOCUMENT.scripts                                #SCRIPT_HTMLCOLL

<script>CODE</script>                           #Inline.

<a|area>
  href="JavaScript:CODE"                        #
<any> 
  onEVENT="CODE"                                #Deprecated. EVENT lowercase.

<noscript>...</noscript>                        #When JavaScript not available.



                  
   ARCHITECTURE   
                  



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         BROWSER PARTS         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PARTS ==>                                       #Browser chrome:
																								#  - meta-information: history
																								#  - tabs-related features
																								#  - print, save
																								#  - changing URL: address bar, back|forward|refresh|home button, bookmarks
																								#  - changing loading state: stop button
																								#  - changing document: zoom, privacy, autofil, default font size, language, accessibility
																								#Extensions/addons
																								#Devtools: treated like a document
																								#Document: actual webpage


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        DOCUMENT PARTS         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PARTS ==>                                       #Rendering engine: 
                                                #  - parse and ask UI backend to paint HTML
																								#UI backend: 
                                                #  - does the pixel painting (a bit like Cairo)
																								#JavaScript interpreter: 
                                                #  - parse and execute JavaScript
																								#Networking: 
                                                #  - HTTP requests
																								#Data storage: 
                                                #  - localStorage, cookies, IndexedDB, etc.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        RENDERING STEPS        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


STEPS ==>                                       #Event-driven
                                                #Done locally, i.e. to the parts that changed


PRELOAD PARSING ==>                             #Like parsing, but simplistic for early optimizations
                                                #  - e.g. starting to perform HTTP requests

PARSING ==>                                     #HTML:
                                                #  - creates DOM tree
                                                #  - context-sensitive language, whereas CSS and JavaScript are context-free, because HTML has forgiving syntax
                                                #CSS:
                                                #  - creates CSSOM tree
                                                #JavaScript:
                                                #  - also execute it, which will get|set DOM|CSSOM tree

CASCADING ==>                                   #Creates render tree:
                                                #  - by combining DOM tree + CSSOM tree
                                                #     - assign CSS rules to DOM nodes
                                                #     - decide CSS rules priority (specificity)
                                                #  - does not include DOM nodes:
                                                #     - with display: none
                                                #     - not attached to DOCUMENT
                                                #     - not visible in viewport

LAYOUT ==>                                      #Add layout information to render tree:
                                                #  - viewport position|dimensions to render tree elements
                                                #  - depends on CSS display, box model and positioning properties:
                                                #     - one element can have several areas, e.g. multiline inline element
                                                #     - one element can have no area, e.g. with display none

PAINT ==>                                       #Calculate pixel information from render tree

COMPOSITE ==>                                   #Mix several paint areas, e.g. transparency

UI BACKEND ==>                                  #Change the actual screen pixels


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:     RENDERING PERFORMANCE     :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


WHEN IS RENDERING TRIGGERED ==>                 #Cascading (recalculating style):
                                                #  - changing HTML|CSS
                                                #Layout (reflow):
                                                #  - changing element position|dimensions 
                                                #  - viewport resizing|scrolling
                                                #  - does not trigger reflow (depends on browser):
                                                #     - stacking:               opacity|visibility, z-index
                                                #     - colors:                 border-color, color
                                                #     - images:                 background-*, border-image-*
                                                #     - non-layout decorations: border-radius, text-decoration
                                                #Paint (repaint):
                                                #  - changing UI but not positions|dimensions (e.g. colors)
                                                #  - does not trigger repaint nor reflow (depends on browser):
                                                #     - effects:                perspective*, transform*, backface-visibility
                                                #                               E.g. prefer translate() over positioning properties
                                                #     - browser UI:             pointer-events, resize, cursor
                                                #     - page breaks:            orphans|widows

GOOD PRACTICES ==>                              #Avoiding re-rendering:
                                                #  - re-rendering is deferred:
                                                #     - unless querying DOM|CSS info, which requires reflow|repaint to be calculated
                                                #     - so should do DOM|CSSOM getters before DOM|CSSOM setters
                                                #  - put NODE out of render tree temporarily while working on it
                                                #     - e.g. display: none or detach from DOCUMENT
                                                #  - change many things at once:
                                                #     - CSS classes > CSSSTYLEDEC.cssText > CSSSTYLEDEC.PROP
                                                #Limit re-rendering:
                                                #  - to small|simple UI parts
                                                #Limit DOM|CSSOM getters:
                                                #  - cache result instead of re-invoking function

TIMING ==>                                      #One frame at 60FPS is 17ms:
                                                #  - some time is for browser garbage collection, etc.
                                                #  - some time is for parsing, cascading, layout, painting, compositing, etc.
                                                #  - so JavaScript should not be more than 4ms per stack
                                                #     - otherwise use web worker to separate from rendering thread
                                                #     - if cannot use web worker (e.g. need DOM), break into several parts with requestAnimationFrame()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            LOADING            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SUMMARY ==>                       							#Async:
                                  							#  - JavaScript|CSS:
                                  							#     - when dynamically added, <script async> or <link rel="preload">
                                  							#     - problems: 
                                  							#        - using DOM|CSSOM -> DOMContentLoaded or <script defer>
                                  							#        - FOUC
                                                #  - fonts: always. FOUT vs FOIT vs FOFT
                                  							#  - other resources: always
                                  							#Should group HTML|CSS|JavaScript into components

JAVASCRIPT ==>                    							#Sync:
																								#  - inline <script>
																								#  - <script src>
																								#Async:
																								#  - how:
																								#     - <script src async>
																								#     - dynamically adding <script src> 
																								#  - problem: when script uses DOM
																								#  - fixes (aside from using sync):
																								#     - <script src defer> 
																								#     - DOMContentLoaded 
																								#     - (deprecated) <script> at end of <body>

CSS ==>                           							#Sync:
																								#  - <style>
																								#  - CSS <link>:
																								#     - parsing blocked at next <script> 
																								#     - rendering blocked right away
																								#     - exceptions:
																								#        - Safari: parsing blocked right away
																								#        - Firefox: 
																								#           - rendering not blocked if in <body>
																								#           - fix: adding empty <script> after CSS <link>
																								#  - @import
																								#Async:
																								#  - how:
																								#     - <link rel="preload" url="URL.css" as="style" onload="this.rel = 'stylesheet';"> (see HTTP doc)
																								#     - dynamically adding CSS <link>
                                                #     - non-matching media="MEDIAQUERYLIST"
																								#     - loadCSS (1.2.0):
																								#        - loadCSS('URI.css'[, ELEM[, 'MEDIAQUERYLIST']])->LINK
																								#           - dynamically adds CSS <link>, before ELEM (def: end of <head>)
																								#        - polyfills <link rel="preload" as="style">
																								#  - problems:
																								#     - (parsing) when script uses CSSOM
																								#     - (rendering) FOUC (Flash Of Unstyled Content):
																								#        - shows unstyled HTML
																								#        - makes DOM jumping around
																								#        - only for HTML visible on viewport
																								#  - fixes (aside from using sync):
                                  							#     - (parsing) DOMContentLoaded
																								#     - (rendering) emulate sync by temporarily display: none on related HTML

FONTS ==>                                       #@font-face always async
                                                #Problems: 
                                                #  - FOUT (Flash Of Unstyled Text): 
                                                #     - shows different font while download ongoing
                                                #     - def for IE
                                                #     - can be forced by adding web font to element once font loaded:
                                                #        - adding web font: by toggling CSS class
                                                #        - once font loaded: see below
                                                #        - should prioritize normal web fonts over variants (e.g. bold):
                                                #           - i.e. adding one CSS class per font
                                                #           - variants can be temporarily emulated using CSS
                                                #           - also called FOFT (Flash Of Faux Text)
                                                #  - FOIT (Flash of Invisible Text):
                                                #     - shows invisible font while download ongoing
                                                #     - best for icon fonts
                                                #     - def for Safari
                                                #     - can be forced by hiding text (visibility: hidden) until font loaded (using library
                                                #       like FontFaceObserver pr Google FontLoader, or CSS Font Loading spec)
                                                #  - FOFT (Flash of Fallback Text): 
                                                #     - FOIT for 3 seconds, FOUT then
                                                #     - best for normal content
                                                #     - def for Firefox, Chrome, Opera
                                                #Font download only starts:
                                                #  - when some HTML is rendered and uses the web font
                                                #  - (except Firefox, IE) and only if HTML has text content
                                                #  - can add <link rel="preload"> to start download earlier instead

OTHER RESOURCES ==>               							#Images, video, audio, svg, object, iframe: always async

PERFORMANCE ==>                   							#Async is best
																								#Should defer sync by grouping HTML|CSS|JavaScript into components:
																								#  - above the fold / critical path CSS:
																								#     - (poorer) alternative to grouping into components
																								#     - make first displayed DOM's CSS sync, other CSS async
																								#     - usually use headless browser to load page and figure out which CSS is "above the fold"



               
   UTILITIES   
               



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           UTILITIES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOMError                                        #
DOMERROR.name                                   #STR

DOMException                                    #
DOMEXCEPTION.name                               #

WINDW.onerror = FUNC('MSG','URL',LINENUM,COLNUM)#On unhandled exception or parsing error.
                                                #If the error comes from a <script> with a different origin:
                                                #  - same origin policy: the arguments will only be 'Script error', '', null, null
                                                #  - unless CORS is used, including <script crossorigin>

WINDOW|WORKERGLOBAL.btoa|atob(STR)              #Convert to|from Base64


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           TIMEOUTS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WINDOW|WORKERGLOBAL.setTimeout                  #Browsers actually enforce:
(FUNC(...), FLOAT[, ...])->ID                   #  - adds 4ms if nesting if 5 levels deep or more
                                                #  - 1 FUNC per second on inactive tabs
                                                #Uses macrotask queue (see JavaScript doc)
WINDOW|WORKERGLOBAL.clearTimeout(ID)            #
WINDOW|WORKERGLOBAL.setInterval
(FUNC(...), FLOAT[, ...])->ID                   #
WINDOW|WORKERGLOBAL.clearInterval(ID)           #
WNDW|WKRGLOBL.setImmediate(FUNC(...)[,...])->ID$#
WINDOW|WORKERGLOBAL.clearImmediate(ID)         $#Similar to set|clearTimeout(..., 0) but faster and more efficient (e.g. no 4ms minimum)

WINDOW.requestAnimationFrame(FUNC(FLOAT))->ID   #Similar to setTimeout() but:
                                                #  - before screen refresh:
                                                #     - usually 60 times/sec, but can be lower in inactive tabs
                                                #     - this avoids changing UI several times while screen is not refreshing
                                                #       (optimized and smoother results)
                                                #     - should be used for any visual change
                                                #  - FLOAT: PERFORMANCE.now() when current frame started
WINDOW.cancelAnimationFrame(ID)                 #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            CONSOLE            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/ 


WINDOW.console                                  #CONSOLE

CONSOLE.info|log|warn|error(VAL...)             #Can use format strings:
                                                #  - %d, %i: NUM  
                                                #  - %f: DOUBLE
                                                #  - %s: STR
                                                #Not IE11:
                                                #  - %O: OBJ
                                                #  - %o: hyperlink
                                                #  - %c: CSS "PROP:VAL;..."
CONSOLE.dir(OBJ|ELEM)                           #Prints with accordion arrows
                                                #ELEM will be printed as a JavaScript object, as opposed to HTML representation.
CONSOLE.dirxml(...)                             #Inverse
CONSOLE.table(OBJ_ARR|OBJ_OBJ[, STR[_ARR]])     #Prints as a table.
                                                #If STR[_ARR], only shows those columns.
                                                #Not IE11

CONSOLE.assert(BOOL, ...)                       #If false, like console.error(...), except cannot use format strings
CONSOLE.count(STR)                              #Increments a NUM for a given STR, then console.debug('STR: NUM')

CONSOLE.clear()                                 #
CONSOLE.group[Collapsed](...)                   #console.log(...) then starts dropdown (if Collapsed: closed at start), incrementing level
CONSOLE.groupEnd()                              #Stops dropdown, decrementing level

CONSOLE.trace(...)                              #console.log(...) (not IE11) then prints current stack.

CONSOLE.profile[End]([STR])                     #Start CPU profile (like clicking on 'Start' in devtools)
                                                #Def STR for profileEnd(): the most recent one.
CONSOLE.timeStamp(['LABEL'])                    #Add marker in Timeline view
                                                #Not IE11


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          PERFORMANCE          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CONSOLE.time[End](STR)                          #Does console.debug('STR: DOUBLEms') (microseconds-precise)


WINDOW.performance                              #PERFORMANCE

PERFORMANCE.now()->DOUBLE                       #Number of DOUBLE ms (decimals 5-microseconds-precise) since PERFORMANCETIMING.navigationStart
                                                #I.e. not affected by clock OS (as opposed to new Date())

PERFORMANCE.navigation                          #PERFORMANCENAVIGATION
PERFORMANCENAVIGATION.type                      #How page started.
                                                #Can be PerformanceNavigation.TYPE_*:
                                                #  - NAVIGATE: normal navigation
                                                #  - RELOAD: page reloaded
                                                #  - BACK_FORWARD: using history
                                                #  - RESERVED: any other
PERFORMANCENAVIGATION.redirectCount             #Number of redirections 3** that happened

PERFORMANCE.timing                              #PERFORMANCETIMING
                                                #All properties are Unix timestamps in ms
                                                #They are in order

PERFORMANCETIMING.navigationStart               #First event

PERFORMANCETIMING.redirectStart|End             #HTTP redirections (0 if none)
PERFORMANCETIMING.fetchStart                    #Is going to do HTTP main request
PERFORMANCETIMING.domainLookupStart|End         #DNS request (same as fetchStart if cached, local request or kept TCP socket (e.g. keep-alive))
PERFORMANCETIMING.connectStart|End              #TCP handshake (same as fetchStart if kept TCP socket)
PERFORMANCETIMING.secureConnectionStart         #TLS handshake (0 if none). End is connectEnd
PERFORMANCETIMING.requestStart                  #HTTP main request
PERFORMANCETIMING.responseStart|End             #HTTP main response

PERFORMANCETIMING.unloadEventStart|End          #Previous page unload event (0 if different origins)
PERFORMANCETIMING.domLoading                    #DOCUMENT.readyState 'loading'
PERFORMANCETIMING.domInteractive                #DOCUMENT.readyState 'interactive'
PERFORMANCETIMING.domContentLoadedEventStart|End#DOCUMENT DOMContentLoaded event
PERFORMANCETIMING.domComplete                   #DOCUMENT.readyState 'complete'
PERFORMANCETIMING.loadEventStart|End            #DOCUMENT load event



            
   EVENTS   
            



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PERFORMANCE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


DEFAULT HANDLERS ==>                            #Event with browser default handler (e.g. scroll, touch*, click on link, context menu) 
                                                #defer default handler, so user handler should not be too long

THROTTLING ==>                                  #Event handlers fired very rapidly (e.g. scroll, hovering) should be throttled

TEMPORARY ==>                                   #Conditional event handlers:
                                                #  - e.g. touchmove|end only triggered between touchstart and touchend
                                                #  - should be added|removed dynamically


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            EVENTS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


EventTarget                                     #Parent of any object that has events (not noted in this doc)
EVENTTARGET.add|removeEventListener             #BOOL: false (def) is bubbling phase, true is capturing phase.
('event', FUNC(EVENT)[, BOOL])                  #addEventListener() does not add twice same FUNC
<any onEVENT="CODE">                            #Same but:
EVENTTARGET.onEVENT = FUNC(EVENT)               #  - can only register one handler 
                                                #  - dispatchEvent() does not work
                                                #  - kept by cloneNode()
EVENTTARGET.dispatchEvent(EVENT)->BOOL          #Returns true if defaultPrevented.


Event                                           #
EVENT.type                                      #'click|mouseover|...'
EVENT.eventPhase                                #Event handlers are fired in that order:
                                                #  - Event.CAPTURING_PHASE: capturing handlers, from outermost to target
                                                #  - Event.AT_TARGET:       target
                                                #  - Event.BUBBLING_PHASE:  bubbling handlers (def), from target to outermost, providing EVENT.bubbles true
EVENT.bubbles                                   #True for:
                                                #  - UI events:
                                                #     - except select, resize, scroll
                                                #     - focus|blur does not bubble, but focusin|out fixes it
                                                #     - mouse|pointerover|out does bubble (should not), but mouse|pointerleave|enter fixes it
                                                #  - UI-related events:
                                                #     - fullscreen*, selectstart, SVG* (except SVG[Un]Load), visibilitychange
                                                #     - transitionend
                                                #  - location-related events:
                                                #     - DOMContentLoaded, hashchange, popstate
                                                #  - resourcetimingbufferfull
EVENT.currentTarget                             #The current EVENTTARGET (=== this in event handler)
EVENT.target                                    #The original EVENTTARGET

EVENT.cancelable                                #True for:
                                                #  - bubbling UI events, except:
                                                #     - end|abort-related: abort, dragend|leave, pointer|touchcancel, pointerlockchange|error
                                                #     - input, change
                                                #     - animation*
                                                #  - selectstart, transitionend, resourcetimingbufferfull
                                                #  - reset, beforeunload, invalid
EVENT.preventDefault()                          #Cancel browser default handler (but not user handlers), providing cancelable true
EVENT.defaultPrevented                          #preventDefault() has been called

EVENT.stopImmediatePropagation()                #Do not call any further user handlers
EVENT.stopPropagation()                         #Same, except for currentTarget's ones

EVENT.timeStamp                                 #DATE_NUM (Epoch in ms)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            UIEVENT            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


UIEvent                                         #Child of EVENT
UIEVENT.view                                    #WINDOW

FOCUSABLE                                       #Is A|AREA|BUTTON|INPUT|TEXTAREA|CONTENTEDITABLE|SELECT|WINDOW
FOCUSABLE.onfocus|blur = FUNC(FOCUSEVENT)       #Gains|loses focus. Can sometimes fire twice.
FOCUSABLE.onfocusin|out = FUNC(FOCUSEVENT)      #Like focus|blur, but bubbles.
FOCUSABLE.focus|blur()                          #Emit those events
DOCUMENT.activeElement                          #Currently focused ELEM. If none, BODY.
                                                #Readonly.
DOCUMENT.hasFocus()->BOOL                       #

FocusEvent                                      #UIEVENT child, for focus*|blur


INPUT|TEXTAREA.oninput = FUNC(EVENT)            #Control value just changed.
INPUT|TEXTAREA|SELECT.onchange = FUNC(EVENT)    #SELECT: control value changes.
                                                #INPUT|TEXTAREA: blur + value changed since focus


DOCUMENT|FOCUSABLE.onkeydown = FUNC(KEYBOARDEVT)#When key is down (repeats).
DOCUMENT|FOCUSABLE.onkeyup = FUNC(KEYBOARDEVENT)#When key is not down anymore (only once).

KeyboardEvent                                   #UIEVENT child
                                                #Modifier keys launch event themselves.
                                                #There is no attribute for getting the key value that is crossbrowser.
KEYBOARDEVENT.ctrl|shift|alt|metaKey            #True if pressed while keyboard event
KEYBOARDEVENT.location                          #Can be KeyboardEvent.DOM_KEY_LOCATION_*:
                                                #  - STANDARD (def)
                                                #  - LEFT|RIGHT: where key present several times on keyboard (e.g. Ctrl)
                                                #  - NUMPAD: key is on numpad


DOCUMENT|FOCUSABLE.oncompositionstart|end       #
 = FUNC(COMPOSITIONEVENT)                       #When IEM autocompletion start|ends
DOCUMENT|FOCUSABLE.oncompositionupdate
 = FUNC(COMPOSITIONEVENT)                       #When IME autocompletion is updated (e.g. by typing keys, including at start, but not at end)

CompositionEvent                                #UIEVENT child
                                                #Similar to key events, but for IME (Input Method Editor):
                                                #  - autocompletion choice started|ended
                                                #  - e.g. used:
                                                #     - when typing diacretics characters
                                                #     - for asian characters entry
                                                #     - by speech recognition software
                                                #     - word suggestion on mobile
COMPOSITIONEVENT.data                           #STR: characters entered


ELEM|DOCUMENT|WINDOW.onscroll = FUNC(EVENT)     #When scrolling happens.
WINDOW|ELEM.onresize = FUNC(EVENT)              #When user resizes window or element


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:      MOUSE/TOUCH EVENTS       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SUMMARY ==>                                     #In order:
                                                #                     +--------------+--------------+--------------+
                                                #                     | mouse        | tap          | hold         |
                                                #   +-----------------+--------------+--------------+--------------+
                                                #   | touchstart      |              | y            | y            |
                                                #   | touchmove       |              | y            |              |
                                                #   |                 |              | might scroll |              |
                                                #   |                 |              | or zoom      |              |
                                                #   | touchend        |              | y            |              |
                                                #   | touchcancel     |              |              | y            |
                                                #   +-----------------+--------------+--------------+--------------+
                                                #   | mouseover|enter | y            | session      | session      |
                                                #   | mouseout|leave  | y            | session      | session      |
                                                #   | mousemove       | y            | once         | once         |
                                                #   | mousedown       | y            | y            | y            |
                                                #   | mouseup         | y            | y            |              |
                                                #   | click           | y            | y            |              |
                                                #   | dblclick        | y            | zoom         |              |
                                                #   | contextmenu     | y            |              | y            |
                                                #   | wheel           | y            |              |              |
                                                #   +-----------------+--------------+--------------+--------------+


ALL                                             #Is ELEM|DOCUMENT|WINDOW
ALL.onclick = FUNC(MOUSEEVENT)                  #Left click down then up on same element. Fired after mouseup.
HTMLELEM.click()                                #
ALL.oncontextmenu = FUNC(MOUSEEVENT)            #Same for right click.
ALL.ondblclick = FUNC(MOUSEEVENT)               #Same for double left click.
ALL.onmousedown|up = FUNC(MOUSEEVENT)           #Any mouse button down|up (only once).
ALL.onmousemove = FUNC(MOUSEEVENT)              #While moves (repeats).

ALL.onmouseover|out = FUNC(MOUSEEVENT)          #When enter|leaves (only once)
                                                #Bubbles, which means that anytime the mouse enters/leaves a child element, 
                                                #it is fired again: prefer mouseenter|leave.
ALL.onmouseenter|leave = FUNC(MOUSEEVENT)       #Same but doesn't bubble

MouseEvent                                      #UIEVENT child
MOUSEEVENT.screenX|Y                            #According to screen
MOUSEEVENT.clientX|Y                            #According to page (visual viewport)
MOUSEEVENT.pageX|Y                              #According to page (layout viewport)
MOUSEEVENT.offsetX|Y                            #Offset to ELEM border-box top-left corner
MOUSEEVENT.ctrl|shift|alt|metaKey               #True if pressed while mouse event
MOUSEEVENT.button                               #0|1|2 if left|middle|right click while mouse event
MOUSEEVENT.detail                               #Number of clicks.
                                                #Only for [dbl]click, mousedown|up


WINDOW|DOCUMENT|ELEM.onwheel = FUNC(WHEELEVENT) #
WHEELEVENT                                      #Child of MOUSEEVENT 
WHEELEVENT.deltaX|Y|Z                           #Amount scrolled as DOUBLE
WHEELEVENT.deltaMode                            #Whether deltaX|Y|Z is in WheelEvent.DOM_DELTA_PIXEL|LINE|PAGE


TOUCH EVENTS ==>                                #Only:
                                                #  - touch screens (which might have a mouse as well)
                                                #  - implemented by Chrome|Opera on desktop
                                                #Emulation concepts:
                                                #  - tap -> like left click
                                                #  - hold -> like select + right click
                                                #  - mouse hovering sessions:
                                                #     - tapping somewhere -> like keeping mouse hovered until next tap
                                                #        - fire mouseover|enter once the first time, 
                                                #          then mouseout|leave once when exits
                                                #        - mousemove fired only once, at each tap
                                                #     - touchmove: more of a gesture|swipe session than hovering
                                                #Touch user interaction:
                                                #  - double tap: zoom
                                                #  - touchmove: might scroll|zoom
                                                #Mouse events are fired in addition after touch events:
                                                #  - unless preventDefault() fired during touch events
                                                #  - unless zooming|scrolling
                                                #  - with 300ms delay:
                                                #     - allow waiting for double tap
                                                #     - can be disabled with <meta name="viewport"> (see HTML doc)
                                                #Warning:
                                                #  - finger less precise than mouse
                                                #  - should keep touch event handlers limited in number and space, cause it can flicker scrolling

DOCUMENT|ELEM.ontouchstart = FUNC(TOUCHEVENT)   #Like mousedown but for touch, except:
                                                #  - preventDefault() prevents scrolling, zooming
DOCUMENT|ELEM.ontouchend = FUNC(TOUCHEVENT)     #Like mouseup but for touch
DOCUMENT|ELEM.ontouchcancel = FUNC(TOUCHEVENT)  #Fired when touch stops but not because of touchend:
                                                #  - holding usually triggers contextmenu
                                                #  - going beyong screen borders
                                                #  - too many fingers on screen
DOCUMENT|ELEM.ontouchmove = FUNC(TOUCHEVENT)    #Like mousemove but for touch, except:
                                                #  - more of a gesture|swipe session than hovering, i.e. only cares about DOM when move starts:
                                                #     - target remains the same during the whole move
                                                #     - move stops when touchend|touchcancel, not when not hovering anymore
                                                #  - preventDefault() prevents scrolling|zooming:
                                                #     - only on the first touchmove event

TOUCHEVENT.alt|ctrl|meta|shiftKey               #Like MOUSEEVENT
TOUCHEVENT.changedTouches                       #TOUCHLIST: that actually triggered the TOUCHEVENT
TOUCHEVENT.targetTouches                        #TOUCHLIST: any with TOUCH.target === TOUCHEVENT.target
TOUCHEVENT.touches                              #TOUCHLIST: any related or not to current TOUCHEVENT

TOUCHLIST                                       #TOUCH_ARR-like
                                                #On touchend|touchcancel, that touch is not available anymore
TOUCH.identifier                                #ID_NUM
TOUCH.target                                    #
TOUCH.screen|client|pageX|Y                     #Like MOUSEEVENT


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          LOAD EVENTS          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.onDOMContentLoaded = FUNC(EVENT)       #When page parsed
WINDOW.onload = FUNC(UIEVENT)                   #When resources done loading
DOCUMENT.readyState                             #Can be:
                                                #  - "loading": first
                                                #  - "interactive": after DOMContentLoaded
                                                #  - "complete": after load
DOCUMENT.onreadystatechange = FUNC(EVENT)       #When DOCUMENT.readyState changes
WINDOW.onbeforeunload = FUNC(BEFOREUNLOADEVENT) #Just before unload.
                                                #If BEFOREUNLOADEVENT.returnValue STR + return STR (for crossbrowser):
                                                #  - does WINDOW.confirm(STR) first
                                                #  - not supported by Mobile Safari nor Chrome
                                                #  - only if page has been interacted with.
WINDOW.onunload = FUNC(UIEVENT)                 #On closing page.
                                                #DOM is still available but invisible to the user.

WINDOW|DOCUMENT.onpageshow|hide =               #
FUNC(PAGETRANSITIONEVENT)                       #Like [un]load, except also fired when loaded from history cache.
PAGETRANSITIONEVENT.persisted                   #True when loaded from history cache.

RESOURCE                                        #Any external|embedded resource: 
                                                #  - <script>, <style>, <link> (including prefetching)
                                                #  - <img>, <input type="image">, <video>, <audio>, <iframe>, <svg>, <object>
                                                #Also <body>
RESOURCE.onload = FUNC(UIEVENT)                 #When done loading
RESOURCE.onerror = FUNC(UIEVENT)                #
WINDOW|RESOURCE.onabort = FUNC(UIEVENT)         #When starts loading but stops.


DOCUMENT.visibilityState                        #Can be:
                                                #  - 'hidden': not current tab, window is minimized or OS screen is locked
                                                #  - 'prerender': e.g. using <link rel="prerender">
                                                #  - 'visible'
DOCUMENT.hidden                                 #When visibilityState !== 'visible'
DOCUMENT.onvisibilitychange = FUNC(EVENT)       #When DOCUMENT.visibilityState changes



              
   DOCUMENT   
              



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           TOP-LEVEL           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Window                                          #
Document                                        #NODE child, parent of HTML. 
HTMLDocument                                    #DOCUMENT child
DocumentType                                    #See HTML doc

WINDOW.window                                   #Same as WINDOW
WINDOW.document                                 #DOCUMENT
DOCUMENT.defaultView                            #WINDOW|null

DOCUMENT.doctype                                #
DOCUMENT.documentElement                        #
HTMLDOCUMENT.body                               #
HTMLDOCUMENT.head                               #See HTML doc

HTMLDOCUMENT.title                              #
HTMLDOCUMENT.scripts                            #
HTMLDOCUMENT.images                             #
HTMLDOCUMENT.links                              #
HTMLDOCUMENT.forms                              #See HTML doc

WINDOW.status                                   #Status bar text. Not always available.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             QUERY             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Node                                            #Parent of ELEM, DOCUMENT, CHARDATA, DOCUMENTTYPE, DOCUMENTFRAG
                                                #Note: any whitespace between two ELEM is a CHARDATA
Element                                         #NODE being an HTML|SVG tag
HTMLElement                                     #
HTMLUnknownElement                              #Cf doc HTML
NodeList                                        #Similar to HTMLCOLL but for NODE

DOCUMNT|HTMLELEM.getElementsByClassName('CLASS')#HTMLCOLL
DOCUMENT.getElementsByName('NAME')              #HTMLCOLL
DOCUMENT|ELEM.getElementsByTagName('tag|*')     #HTMLCOLL
DOCUMENT.getElementById('ID')                   #ELEM|null
WINDOW.ID                                       #Same but from WINDOW
DOCUMENT|ELEM|DOCUMENTFRAG.                     #ELEM|null or NODELIST
querySelector[All]('CSS_SELECTOR')              #Cannot use pseudo-element
                                                #As opposed to jQuery, the query:
                                                #  - is retrieved differently:
                                                #     - is not actually performed from DOCUMENT|ELEM|DOCUMENTFRAG
                                                #     - it is done from the top document, then only returns ones that are ancestors to DOCUMENT|ELEM|DOCUMENTFRAG
                                                #     - this can carry different results because:
                                                #        - it allows higher parts of the query to target parent nodes
                                                #        - providing lower parts of the query target children nodes
                                                #  - cannot start with a combinator

NODE.childNodes                                 #NODELIST. Readonly.
HTMLELEM.children                               #HTMLCOLL. Readonly
ELEM.childElementCount                          #children.length
NODE.hasChildNodes()->BOOL                      #
NODE.first|lastChild                            #NODE|null. Readonly.
ELEM.first|lastElementChild                     #ELEM|null. Readonly.
NODE.previous|nextSibling                       #NODE|null. Readonly.
ELEM.previous|nextElementSibling                #ELEM|null. Readonly.
NODE.parentNode                                 #NODE. Readonly. null for DOCUMENT or root NODE not attached in DOM
HTMLELEM.parentElement                          #ELEM. Readonly. null for HTML
NODE.ownerDocument                              #DOCUMENT. Readonly. null for DOCUMENT


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           ITERATION           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.createNodeIterator
(NODE[, ENUM[, OBJ]])->NODEITERATOR             #Arguments are root, whatToShow (def: null), {filter}
NodeIterator                                    #
NODEITERATOR.root                               #NODE. Iterate over its children
NODEITERATOR.whatToShow                         #or'd ENUM: NodeFilter.SHOW_ALL|ELEM|ATTRIBUTE|TEXT|COMMENT|
                                                #DOCUMENT|DOCUMENT_TYPE|DOCUMENT_FRAGMENT
NODEITERATOR.filter                             #FUNC(NODE)->NodeFilter.FILTER_ACCEPT|REJECT
NODEITERATOR.next|previousNode()->NODE|null     #


DOCUMENT.createTreeWalker
(NODE[, ENUM[, OBJ]])->TREEWALKER               #
TreeWalker                                      #Like NodeIterator but can iterate recursively over children
TREEWALKER.root                                 #
TREEWALKER.whatToShow                           #
TREEWALKER.filter                               #Can also return NodeFilter.FILTER_SKIP, which rejects parent but not children
TREEWALKER.next|previousNode()                  #Like NODEITERATOR

TREEWALKER.currentNode                          #NODE
TREEWALKER.parentNode()->NODE|null              #
TREEWALKER.first|lastChild()->NODE|null         #
TREEWALKER.previous|nextSibling()->NODE|null    #Also moves cursor



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TEST              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


NODE.isEqualNode(NODE2)->BOOL                   #NODE.outerHTML === NODE2.outerHTML
HTMLELEM.contains(HTMLELEM2)->BOOL              #Is child or same
NODE.compareDocumentPosition(NODE2)->NUM        #Returns or'd bitmask of relation of NODE2 to NODE:
                                                #  - DOCUMENT_POSITION_CONTAINS|CONTAINED_BY
                                                #  - DOCUMENT_POSITION_PRECEDING|FOLLOWING: of start tag, i.e. if contains, precedes
                                                #  - DOCUMENT_DISCONNECTED: not same DOCUMENT
                                                #  - DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
                                                #None (i.e. 0) means NODE === NODE2


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           CREATION            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.implementation                         #DOMIMPL

DOMIMPL.createHTMLDocument(['TITLE'])->HTML     #
DOCUMENT.createElement('TAG')->ELEM             #
DOCUMENT.createTextNode(STR)->TEXT              #
DOCUMENT.createComment(STR)->COMMENT            #
DOCUMENT.createAttribute('ATTR')->ATTR          #

new DOMParser()                                 #
DOMPARSER.parseFromString('HTML', 'text/html')
->HTMLDOCUMENT                                  #
DOMPARSER.parseFromString('SVG','image/svg+xml')
->XMLDOCUMENT                                   #

RANGE.createContextualFragment('HTML')
->DOCUMENTFRAG                                  #'HTML' is content. DOCUMENTFRAG.ownerDocument is taken from RANGE.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         MANIPULATION          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SAME DOCUMENT ==>                               #Required for all methods except importNode|adoptNode()

NODE.insertBefore(NODE2[, NODE3])->NODE2       #Insert NODE2 as NODE child, before sibling NODE3 (def: put as last child).
NODE.appendChild(NODE2)->NODE2                  #Same as NODE.insertBefore(NODE2, null)
NODE.removeChild(NODE3)->NODE3                  #
NODE.replaceChild(NODE2, NODE3)->NODE3          #Same as NODE.insertBefore(NODE2, NODE3) + NODE.removeChild(NODE3)
NODE.cloneNode([BOOL])->NODE2                   #NODE2 is not attached to DOM.
                                                #Does not keep:
                                                #  - children, unless BOOL true
                                                #  - event listeners (except <any onevent>)
DOCUMENT.importNode(NODE[, BOOL])->NODE2        #Same but NODE does not have to be in current DOCUMENT
DOCUMENT.adoptNode(NODE)->NODE2                 #Same as DOCUMENT.importNode(NODE, true) but then remove NODE


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           OBSERVING           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


new MutationObserver                            #FUNC is listener aggregator:
(FUNC(RECORD_ARR, OBSERVER))                    #  - each RECORD represents a listener added by OBSERVER.observe()
                                                #RECORD:
                                                #  - NODE2 insertion|removal:
                                                #     - type 'childList'
                                                #     - target NODE: NODE2's parent
                                                #     - added|removedNodes NODELIST|null
                                                #     - previous|nextSibling NODE|null
                                                #  - CHARDATA modification:
                                                #     - type 'characterData'
                                                #     - target CHARDATA
                                                #     - oldValue STR
                                                #  - ELEM's attributes insertion|removal|modification:
                                                #     - type 'attributes'
                                                #     - target ELEM
                                                #     - attributeName[space] STR
                                                #     - oldValue STR
OBSERVER.observe(NODE, OBJ)                     #OBJ:
                                                #  - childList|characterData|attributes BOOL (def: false): at least one must be true
                                                #  - attribute|characterDataOldValue BOOL (def: false): populate RECORD.oldValue
                                                #  - attributesFilter 'ATTR'_ARR: only observe those attributes
                                                #  - subtree BOOL (def: false): include descendants
OBSERVER.takeRecords()->RECORD_ARR              #OBSERVERS's FUNC is always fired after DOM event handlers
                                                #So must call this to get access to pending RECORD_ARR inside a DOM event handler
                                                #This empties RECORD_ARR
OBSERVER.disconnect()                           #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            CONTENT            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.compatMode                             #
DOCUMENT.characterSet                           #See HTML doc


NODE.nodeType                                   #Among DOCUMENT.DOCUMENT[_TYPE|FRAGMENT]|ELEM|TEXT|COMMENT_NODE
                                                #Readonly.
NODE.nodeName                                   #For ELEM: ELEM.tagName
                                                #For DOCUMENTTYPE: DOCUMENTTYPE.name
                                                #Others: '#comment|text|document[-fragment]'
                                                #Readonly.
ELEM.tagName                                    #'TAG|tag'


HTMLELEM.inner|outerHTML                        #'HTML', with[out] ELEM itself
                                                #Can lead to XSS attacks, so prefer textContent if only TEXT.
HTMLELEM.insertAdjacentHTML
('before|afterbegin|end', 'HTML')               #Inserts 'HTML' inside ELEM next to its start|end tag.

NODE.textContent                                #Children TEXT concatenated as STR.
                                                #DOCUMENT: null
NODE.nodeValue                                  #For CHARDATA: NODE.textContent
                                                #Others: null
NODE.normalize()                                #Erase empty TEXT, and join adjacent TEXT.

DOCUMENT.open()                                 #Remove all 'HTML'
DOCUMENT.write[ln]('HTML',...)                  #Append 'HTML' (with newline if "ln") to BODY
                                                #Fires HTMLDOCUMENT.open() first
DOCUMENT.close()                                #To be invoked after HTMLDOCUMENT.write*()


ELEM.ATTR                                       #
ELEM.attributes                                 #
ELEM.getAttribute[Node]('ATTR')->'VAL'|ATTR     #
ELEM.setAttribute[Node]('ATTR', 'VAL'|ATTR)     #
ELEM.hasAttribute('ATTR')->BOOL                 #
ELEM.hasAttributes()->BOOL                      #
ELEM.removeAttribute[Node]('ATTR'|ATTR)[->ATTR] #See HTML doc


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:       ATTR/TEXT/COMMENT       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



Attr                                            #HTML attribute
ATTR.name                                       #'ATTR'
ATTR.value                                      #'VAL'

CharacterData                                   #NODE child. TEXT|COMMENT parent
CHARDATA.data                                   #STR
CHARDATA.length                                 #NUM
CHARDATA.appendData(STR)                        #
CHARDATA.insertData(UINT, STR)                  #
CHARDATA.substringData(UINT, UINT2)->STR        #
CHARDATA.deleteData(UINT, UINT2)                #
CHARDATA.replaceData(UINT, UINT2, STR)          #

Text                                            #CHARDATA child. ELEM's text content
TEXT.wholeText                                  #TEXT and its sibling TEXT2 as a single STR
TEXT.splitText(UINT)                            #Split into two TEXT at position UINT

Comment                                         #CHARDATA child. HTML comment


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:       RANGE / SELECTION       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/
  

Range                                           #NODE or parts of NODE following each other.
DOCUMENT.createRange()->RANGE                   #
DocumentFragment                                #NODE child. Several NODE or parts of NODE not attached to DOM
DOCUMENT.createDocumentFragment()->DOCUMENTFRAG #

RANGE.start|endContainer                        #NODE
RANGE.start|endOffset                           #Offset after|before start|endContainer:
                                                #  - if start|endContainer CHARDATA, in Unicode CHAR
                                                #  - otherwise in NODE
                                                #Readonly.
RANGE.setStart|End(NODE, UINT)                  #
RANGE.setStart|EndBefore|After(NODE)            #
RANGE.selectNode[Contents](NODE)                #Set start|endContainer|offset so it selects NODE (if 'Contents', its children)
RANGE.collapsed                                 #startContainer === endContainer
RANGE.collapse([BOOL])                          #Collapse to startContainer (BOOL true) or endContainer.

RANGE.commonAncestorContainer                   #Deepest NODE containing both startContainer and endContainer
RANGE.compareBoundaryPoints(ENUM,RANGE2)->-1|0|1#According to ENUM Range.END|START_TO_END|START

RANGE.insertNode(NODE)                          #At RANGE start
RANGE.surroundContents(NODE)                    #Wraps with NODE.
                                                #NODE must have no children.
                                                #RANGE boundaries cannot be inside a CHARDATA.
RANGE.cloneContents()->DOCUMENTFRAG             #Like NODE.cloneNode()
RANGE.deleteContents()                          #
RANGE.extractContents()->DOCUMENTFRAG           #Like cloneContents() + deleteContents()
RANGE.toString()                                #Gets textContent

RANGE.cloneRange()->RANGE2                      #


DOCUMENT|ELEM.onselectstart = FUNC(EVENT)       #When selection starts, i.e. on new anchorNode, even collapsed
DOCUMENT.onselectionchange = FUNC(EVENT)        #When selection starts|changes, i.e. on new anchorNode or focusNode
TEXTAREA|INPUT.onselect = FUNC(UIEVENT)         #When selection ends (of text inside)

TEXTAREA|INPUT.selectionEnd|Start               #start|end indexes UINT
TEXTAREA|INPUT.setSelectionRange(NUM,NUM2[,STR])#With start NUM, end NUM2, selectionDirection 'none' (def) or 'forward|backward'
TEXTAREA|INPUT.select()                         #Emit select event


WINDOW.getSelection()->SELECTION                #
Selection                                       #User selection, containing one or more RANGE.
SELECTION.anchor|focusNode                      #Like RANGE.start|endContainer
SELECTION.anchor|focusOffset                    #Like RANGE.start|endOffset
SELECTION.isCollapsed                           #Like RANGE.collapsed
SELECTION.collapseToStart|End()                 #Like RANGE.collapse()
SELECTION.collapse(NODE, UINT)                  #Like RANGE.setEnd() + RANGE.collapse()
SELECTION.selectAllChildren(NODE)               #Like RANGE.setNodeContents()
SELECTION.toString()                            #Like RANGE.toString()

SELECTION.rangeCount                            #length (0 if none). Always 1 in current browsers (no multiple selections).
SELECTION.getRangeAt(UINT)->RANGE               #
SELECTION.addRange(RANGE)                       #Only works if RANGE includes a SELECTION's RANGE2, which will merge (so does nothing)
SELECTION.removeRange(RANGE)                    #
SELECTION.removeAllRanges()                     #

SELECTION.deleteFromDocument()                  #Erase all TEXT's content (not parent node, but potentially children)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             CSSOM             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SEE CSS DOC ==>                                 #For CSSOM and CSSOM view (including dimensions, positions, scrolling)



              
   BROWSING   
              



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           LOCATION            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WINDOW.location                                 #LOCATION

[WORKER]LOCATION.href                           #
DOCUMENT.URL                                    #Same but readonly
[WORKER]LOCATION.toString()                     #Returns LOCATION.href

[WORKER]LOCATION.protocol                       #
[WORKER]LOCATION.hostname                       #Can only be set to a superdomain.
DOCUMENT.domain                                 #Same but readonly
[WORKER]LOCATION.port                           #
[WORKER]LOCATION.host                           #
[WORKER]LOCATION.origin                         #protocol + host
[WORKER]LOCATION.pathname                       #
[WORKER]LOCATION.search                         #
[WORKER]LOCATION.hash                           #Same as A|AREA.

LOCATION.assign(STR)                            #Navigate to URL STR.
LOCATION.replace(STR)                           #Same but don't save current page in history.
LOCATION.reload()                               #Reload current page.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            HISTORY            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.referrer                               #Previous page's URL, or '' if none.

WINDOW.history                                  #Browser HISTORY

HISTORY.length                                  #
HISTORY.go(NUM)                                 #Navigates
HISTORY.back|forward()                          #Same as go(1|-1)
HISTORY.pushState(STATE, 'TITLE'[, 'URL'])      #Adds an history entry, and goes to it.
                                                #Must be handled server-side too.
HISTORY.replaceState(...)                       #Removes current history entry, then do HISTORY.pushState(...)
HISTORY.state                                   #STATE

WINDOW.onpopstate = FUNC(POPSTATEVENT)          #Triggered by:
                                                #  - user using browser history (e.g. Back|Forward buttons or shortcuts)
                                                #  - HISTORY.go|back|forward()
                                                #Providing the later history entry was created by HISTORY.pushState|replaceState()
                                                #Not triggered by HISTORY.pushState|replaceState() itself.
PopStateEvent                                   #EVENT child
POPSTATEVENT.state                              #STATE|null

WINDOW.onhashchange = FUNC(HASHCHANGEEVENT)     #On LOCATION.hash change.
HashChangeEvent                                 #EVENT child
HASHCHANGEEVENT.old|newURL                      #



                    
   BROWSER/DEVICE   
                    



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           PLATFORM            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WINDOW.navigator                                #NAVIGATOR
[WORKER]NAVIGATOR.userAgent                     #Browser type|version. Not readonly.
                                                #Prefer feature detection to user agent.
[WORKER]NAVIGATOR.platform                      #OS and CPU, e.g. "Linux x86_64". Not readonly.


NAVIGATOR.mimeTypes                             #MIMETYPEARR (HTMLCOLL-like of MIMETYPE)
                                                #Mime types recognized for <object>, e.g. Flash and PDF
MIMETYPE.type                                   #'MIME/TYPE'
MIMETYPE.suffixes                               #'EXT'
MIMETYPE.description                            #STR
MIMETYPE.enabledPlugin                          #PLUGIN

NAVIGATOR.plugins                               #PLUGINARR (HTMLCOLL-like of PLUGIN with extra methods)
                                                #Plugins allowing using mime types for <object>
PLUGINARR.refresh([BOOL])                       #If true, also refreshes the page
PLUGIN.name                                     #STR
PLUGIN.description                              #STR
PLUGIN.filename                                 #STR
PLUGIN[NUM]                                     #MIMETYPE
PLUGIN.length                                   #Of MIMETYPE

NAVIGATOR.javaEnabled()->BOOL                   #

WINDOW|NAVIGATOR.doNotTrack                     #HTTP header DNT, as STR|null (see HTTP doc)
                                                #Try both WINDOW or NAVIGATOR for cross-browser compatibility


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          GEOLOCATION          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


NAVIGATOR.geolocation                           #GEOLOCATION

GEOLOCATION.getCurrentPosition
(FUNC(POS), FUNC2(POS_ERR), POS_OPTS)           #Asks for user confirmation, then only use cached answer (positive or not)
GEOLOCATION.watchPosition(...)->UINT            #Like GEOLOCATION.getCurrentPosition(...) but fired each time POS changes
GEOLOCATION.clearWatch(UINT)                    #

POS.coords.latitude|longitude                   #DOUBLE
POS.coords.accuracy                             #NUM (meters)
POS.coords.altitude[Accuracy]                   #null in many devices
POS.coords.heading                              #DOUBLE indicating direction angle:
                                                #  - 0 (north), 90 (east), etc.
                                                #  - null if no device sensor
                                                #  - NaN if POS.coords.speed 0
POS.coords.speed                                #DOUBLE (m/s). 
                                                #null if no device sensor.
POS.timestamp                                   #DATE_NUM

POS_ERR.code                                    #NUM:
                                                #  - 1: permission denied 
                                                #  - 2: position unavailable 
                                                #  - 3: timeout
POS_ERR.message                                 #STR

POS_OPTS.enableHighAccuracy                     #BOOL. If true, maybe higher accuracy, but more power consumption (def: false)
POS_OPTS.timeout                                #NUM (def: Infinity)
POS_OPTS.maximumAge                             #NUM for cache (in ms, 0 for none) (def: Infinity)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:      ORIENTATION/MOTION       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DESKTOP SUPPORT ==>                             #Only Chrome/Firefox on desktop. Supported on mobile browsers.

WINDOW.ondeviceorientation = 
FUNC(DEVICEORIENTATIONEVENT)                    #When device orientation changes
DEVICEORIENTATIONEVENT.beta|gamma|alpha         #x|y|z axis angle DOUBLE (0-360)
DEVICEORIENTATIONEVENT.absolute                 #BOOL: whether angle is Earth-related or arbritrary

WINDOW.ondevicemotion = FUNC(DEVICEMOTIONEVENT) #When device moves
DEVICEMOTIONEVENT.acceleration[IncludingGravity]#DEVICEACCELERATION
                                                #Usually should not use 'IncludingGravity'
DEVICEACCELERATION.x|y|z                        #x|y|z axis move in DOUBLE m/s
DEVICEMOTIONEVENT.rotationRate                  #DEVICEROTATIONRATE
DEVICEROTATIONRATE.beta|gamma|alpha             #x|y|z axis angle DOUBLE (0-360)
DEVICEMOTIONEVENT.interval                      #Timeframe of the sample in NUM ms



                
   NETWORKING   
                



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            OFFLINE            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


[WORKER]NAVIGATOR.onLine                        #BOOL. Is the browser connected to network.
                                                #Updated each time a network request is made.
                                                #Some browsers return true even if only connected to local network.
WINDOW|WORKERGLOBAL.
onoffline|online = FUNC(EVENT)                  #When NAVIGATOR.onLine changed


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         HTTP HEADERS          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.lastModified                           #Returns Last-Modified [S] as 'DATE'
                                                #If not set, current date.

DOCUMENT.cookie                                 #Get|set Set-Cookie [S]
                                                #Get all 'VAR=VAL;VAR=VAL...' but only set a single 'VAR=VAL[;SVAR=SVAL]...'
                                                #Should use en|decodeURIComponent(VAL)
                                                #Setting on Chrome when using file:/// does not work.
NAVIGATOR.cookieEnabled                         #BOOL. Readonly.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              XHR              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


XmlHttpRequest                                  #HTTP request|response
new XmlHttpRequest()                            #

XHR.open                                        #Specify the request:
(METHOD, URL[, BOOL[, USERNAME[, PASSWORD]]])   #  - BOOL: if true (def), async
XHR.setRequestHeader('VAR', 'VAL')              #Adds HTTP header
                                                #Cannot be set via XHR:
                                                #  - Underlying HTTP protocol: Host, Connection, Keep-Alive, Expect, Upgrade [C]
                                                #  - Request integrity: Origin, Via, Date, User-Agent, Content-Length, Transfer-Encoding, TE, Trailer [C]
                                                #  - Browser capability: Accept-Charset, Accept-Encoding [C]
                                                #  - Security/privacy: Cookie, Referer, Access-Control-Request-Headers|Method, DNT [C]
                                                #Some headers are set by def, usually same as normal page load request, e.g. for Chrome:
                                                #  - Connection: keepalive [C]
                                                #  - Content-Length [C]
                                                #  - Host, Referer, User-Agent [C]
                                                #  - Cache-Control: no-cache [C]
                                                #  - Accept [C], Accept-Encoding [C], Accept-Language [C]
XHR.responseType                                #Modifies how XHR.response is interpreted:
                                                #  - 'text' or '' (def): STR
                                                #  - 'arraybuffer': ARRBUFFER
                                                #  - 'blob': BLOB
                                                #  - 'document': DOCUMENT
                                                #  - 'json': OBJ
XHR.overrideMimeType('MIME/TYPE')               #Overrides Content-Type [S]
XHR.withCredentials                             #If true (def: false), send credentials (cookies and HTTP authentication data) with the request.

XHR.send([REQ_BODY])                            #Sends the request.
                                                #REQ_BODY (only if HTTP method allows it):
                                                #  - STR: 
                                                #     - body is STR as is
                                                #     - default Content-Type: "text/plain[;charset=CHARSET]" [C]
                                                #     - to use Content-Type: "application/x-www-form-urlencoded" [C] with 'VAR=VAL&...', must manually:
                                                #        - use encodeURIComponent()
                                                #        - set Content-Type
                                                #  - DOCUMENT:
                                                #     - body is DOCUMENT as STR
                                                #     - default Content-Type: "application/xml[;charset=CHARSET]" [C]
                                                #  - BLOB|ARRBUFFERVIEW:
                                                #     - body is binary as is
                                                #     - no default Content-Type [C]
                                                #  - FORMDATA:
                                                #     - body as "multipart/form-data" content (see HTML doc)
                                                #        - filename is "blob" for anonymous BLOB, real filename otherwise, and not set for STR
                                                #     - default Content-Type: "multipart/form-data;boundary=BOUNDARY" [C]
XHR.abort()                                     #Emit event

new FormData([FORM])                            #
FORMDATA.append('VAR', STR)                     #
FORMDATA.append('VAR', BLOB[, 'FILENAME'])      #

XHR.onreadystatechange = FUNC(EVENT)            #When XHR.readyState changes
XHR.readyState                                  #Can be:
                                                #  - XHR.UNSENT: uninitialized
                                                #  - XHR.OPENED: open()
                                                #  - XHR.HEADER_RECEIVED: send() and response header received
                                                #  - XHR.LOADING: downloading response body
                                                #  - XHR.DONE: downloaded response body

XHR.onloadstart = FUNC(PROGRESSEVENT)           #When starts reading
XHR.onprogress = FUNC(PROGRESSEVENT)            #When is reading
XHR.onload[end] = FUNC(PROGRESSEVENT)           #When finishes. load is success, loadend is success or failure.
XHR.onabort = FUNC(PROGRESSEVENT)               #
XHR.onerror = FUNC(PROGRESSEVENT)               #

XHR.upload.on*                                  #Like XHR.on*:
                                                #  - except readystatechange
                                                #  - only fired if REQ_BODY with proper HTTP method

XHR.timeout                                     #In ms (def: 0, i.e. unlim)
XHR.ontimeout = FUNC(PROGRESSEVENT)             #

PROGRESSEVENT.lengthComputable                  #true if PROGRESSEVENT.loaded|total available
PROGRESSEVENT.loaded|total                      #Number of bytes

XHR.status[Text]                                #HTTP response status code as NUM|STR
XHR.response                                    #Server response as STR|ARRBUFFER|BLOB|DOCUMENT|OBJ, depending on XHR.responseType
XHR.responseText                                #Server response as STR
XHR.getResponseHeader('VAR')->'VAL'             #
XHR.getAllResponseHeaders()->OBJ                #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           WEBSOCKET           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WebSocket                                       #
new WebSocket('URL'[, STR[_ARR]])               #Opens websocket (see Websocket doc)
                                                #STR[_ARR] are requested subprotocols.
                                                #Throws SECURITY_ERR if port blocked.
WEBSOCKET.send(STR|BLOB|ARRBUFFER[VIEW])        #Can throw: 
                                                #  - INVALID_STATE_ERR: connection not opened 
                                                #  - SYNTAX_ERR: invalid data sent
WEBSOCKET.onopen = FUNC(EVENT)                  #
WEBSOCKET.onmessage = FUNC(MESSAGEEVENT)        #
WEBSOCKET.binaryType                            #MESSAGEEVENT.data type: 'blob' (def) or 'arraybuffer'

WEBSOCKET.url                                   #'URL'
WEBSOCKET.protocol                              #Subprotocol STR returned by server.
WEBSOCKET.extensions                            #Extensions STR, changed by server.
WEBSOCKET.bufferedAmount                        #Number of bytes sent buffered.

WEBSOCKET.readyState                            #Any of WebSocket.CONNECTING|OPEN|CLOSING|CLOSED

WEBSOCKET.close([UINT[, STR]])                  #UINT is error code (1000 (def) or 3000-4999)
                                                #STR error message (def: '')
                                                #Should make sure bufferedAmount is 0 before.
                                                #Can throw:
                                                #  - INVALID_ACCESS_ERR: invalid UINT
                                                #  - SYNTAX_ERR: invalid STR
WEBSOCKET.onclose = FUNC(CLOSEEVENT)            #
CLOSEEVENT.wasClean                             #True if cleanly closed.
CLOSEEVENT.code                                 #UINT
CLOSEEVENT.reason                               #STR

WEBSOCKET.onerror = FUNC(ERROREVENT)            #
ERROREVENT.message                              #STR
ERROREVENT.filename                             #STR
ERROREVENT.lineno                               #NUM
ERROREVENT.colno                                #NUM
ERROREVENT.error                                #ERROR



             
   STORAGE   
             



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             FILES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Blob                                            #Similar to ARRBUFFER but kept as temp file, not in memory.
                                                #Can see debug info at about:blobs (Chrome)
new Blob(ARRBUFFER_ARR|DATAVIEW_ARR|            #ARR will be concatenated.
TYPED_ARR_ARR|BLOB_ARR|STR_ARR[, OBJ])          #OBJ: type 'MIME'
                                                #Max size: around 500MB
BLOB.size                                       #
BLOB.type                                       #'MIME'
BLOB.slice(ULONG[, ULONG2[, 'MIME']])->BLOB2    #From byte ULONG to byte ULONG2 (def: end)

URL.createObjectURL(BLOB)->'URL'                #'URL' is an 'object URL':
                                                #  - manipulated like a data URI, but only contains name not data
                                                #  - invalid after tab closed
                                                #Can be used by other WINDOW.
URL.revokeObjectURL('URL')                      #

FileList                                        #FILE_ARR (array-like)
File                                            #BLOB child
                                                #Obtained usually through INPUT|DATATRANSFER.files
FILE.name                                       #Filename


new FileReader()                                #
FILEREADER.readAsText(BLOB[, 'ENCODING'])       #Starts reading. FILEREADER.result will be STR
                                                #Def 'ENCODING': 'UTF-8'
FILEREADER.readAsArrayBuffer(BLOB)              #Same but result will be ARRBUFFER
FILEREADER.readAsDataURL(BLOB)                  #Same but result will be data URI
FILEREADER.result                               #VAL, or null (error or not read yet)
FILEREADER.readyState                           #Can be :
                                                #  - FileReader.EMPTY: before read
                                                #  - FileReader.LOADING : read in progress
                                                #  - FileReader.NONE : read complete|error|abort
FILEREADER.abort()                              #
FILEREADER.error                                #DOMERROR with name "NotFoundError|SecurityError|NotReadableError"

FILEREADER.onloadstart = FUNC(PROGRESSEVENT)    #
FILEREADER.onprogress = FUNC(PROGRESSEVENT)     #
FILEREADER.onload[end] = FUNC(PROGRESSEVENT)    #
FILEREADER.onabort = FUNC(PROGRESSEVENT)        #
FILEREADER.onerror = FUNC(PROGRESSEVENT)        #Cf XHR

FileReaderSync                                  #Same as as FileReader but:
                                                #  - sync: returns VAL instead of firing events, so only read*()
                                                #  - only available inside WORKER



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          WEB STORAGE          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WINDOW.localStorage                             #Persistent OBJ per domain.
                                                #Private browsing:
                                                #. - (Safari) has a max quota of 0 bytes, sp setItem() will throw error
                                                #. - (other browsers) creates new STORAGE temp.
                                                #Cleaned when cleaning cookies.
WINDOW.sessionStorage                           #Same but cleaned when WINDOW is closed.

STORAGE.length                                  #
STORAGE.key(UINT)->'VAR'                        #
STORAGE.getItem('VAR')->'VAL'                   #
STORAGE.setItem('VAR', 'VAL')                   #
STORAGE.removeItem('VAR')                       #
STORAGE.clear()                                 #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        STORAGE SUMMARY        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DIFFERENT STORAGE ==>                           #All storage : can be erased through private data erasing GUI for normal 
                                                #websites/hosted apps, but not for extensions/packaged apps.

                            +------------------+-----------------------+--------------------+--------------------------------+
                            | Avail.           | Limit                 | Model              | Other                          |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+
  | cookies                 | All              | 4KB/cookie, 50/domain | Flat. As STR.      | Communicated to server         |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+
  | localStorage            | All              | 2-10MB/domain         | Flat. As STR.      | Not async.                     |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+
  | XHR                     | All              | None                  | None               | Slower. Persisted on server.   |
  |                         |                  |                       |                    | Requires network.              |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+
  | chrome.storage          | Chrome apps/exts | Unlim (permissions)   | Flat. As OBJ.      | Can be used by content scripts |
  |                         |                  |                       |                    | Can Cloud sync.                |
  |                         |                  |                       |                    | Storage event.                 |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+
  | indexedDB               | Not Safari       | Unlim (permissions)   | Database           |                                |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+
  | chrome.downloads        | Chrome exts      | Unlim (only download) | Real filesystem    | Filechooser popup or not       |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+
  | chrome.[sync]filesystem | Chrome apps      | Unlim (permissions)   | Real filesystem    | Use fileSystem API.            |
  |                         |                  |                       |                    | Can sync with Google Drive.    |
  +-------------------------+------------------+-----------------------+--------------------+--------------------------------+


DEBUGGING ==>                                   #about:quota-internals (Chrome)



                       
   MESSAGING/WORKERS   
                       



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           MESSAGING           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SUMMARY ==>                                     #Comparison:
                                                #  - onstorage: any tab, same domain. Transfer STR. Broadcasts.
                                                #  - postMessage(): same tab, any domain. Transfer much more types. Broadcasts.
                                                #    Works with WORKER
                                                #  - MessageChannel: like postMessage() but does not broadcast, and buffers.


WINDOW.onstorage = FUNC(STORAGEEVENT)           #Triggered when another WINDOW2 modified localStorage|sessionStorage:
                                                #  - WINDOW2: an IFRAME|popup|parent on same tab or another tab.
                                                #    Has to be same domain.
                                                #  - Only triggered if value changed.
STORAGEEVENT.key                                #'VAR'
STORAGEEVENT.new|oldValue                       #'VAL'
STORAGEEVENT.storageArea                        #STORAGE
STORAGEEVENT.url                                #WINDOW2.URL


WINDOW2.postMessage                             #WINDOW2 protocol+host must match second argument:
(VAL, 'PROTOCOL://HOST|*'[, VAL2_ARR])          #  - WINDOW2: an IFRAME|WORKERS|popup|parent on same tab.
                                                #    Does not have to be same domain.
                                                #  - VAL can be BOOL|STR|NUM|ARR|PLAIN_OBJ|MAP|SET|DATE|REGEXP|BLOB|FILE[LIST]|
                                                #    ARRBUFFER[VIEW]|IMAGEDATA, but not ERROR|FUNC
                                                #VAL2 can be:
                                                #  - ARRBUFFER[VIEW]: to use if VAL is ARRBUFFER[VIEW] (to transfer ownership)
                                                #  - MESSAGEPORT: will be available in MESSAGEEVENT.ports 
WINDOW2.onmessage = FUNC(MESSAGEEVENT)          #
MESSAGEEVENT.data                               #VAL
MESSAGEEVENT.origin                             #PROTOCOL://HOST|*
                                                #Should be checked to prevent XSS and CSRF
MESSAGEEVENT.source                             #WINDOW having called postMessage()
MESSAGEEVENT.ports                              #MESSAGEPORT_ARR


WORKER|DWORKERGLOBAL.postMessage(VAL[,VAL2_ARR])#
WORKER|DWORKERGLOBAL.onmessage = FUNC(MESGEVENT)#Like WINDOW.postMessage() but between WORKER and its parent


new MessageChannel()                            #Like WINDOW.postMessage() but:
                                                #  - using dedicated channel instead of broadcasting to any listener on a given domain.
                                                #  - messages are buffered until listener setup
MESSAGECHANNEL.port1|2                          #MESSAGEPORT
MESSAGEPORT.postMessage(VAL[, VAL2_ARR])        #Sent to the other MESSAGEPORT message event handler
                                                #See WINDOW.postMessage()
MESSAGEPORT.onmessage = FUNC(MESSAGEEVENT)      #
MESSAGEPORT.start|close()                       #Starts|stops using message event handler
                                                #Cannot be restarted after closed.



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            WORKERS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


ABSTRACTWORKER                                  #Base class for WORKER
Worker                                          #Child of ABSTRACTWORKER. Thread
WorkerGlobalScope                               #WORKERGLOBAL: global scope in a script launched as a WORKER or SHAREDWORKER
                                                #Can use Web APIs, limited BOM (see below) but not DOM
DedicatedWorkerGlobalScope                      #DWORKERGLOBAL, child of WORKERGLOBAL, for WORKER


new Worker('SCRIPT_URL')                        #Same origin policy
WORKERGLOBAL.importScripts('SCRIPT_URL'...)     #Load other scripts

WORKER.terminate()                              #
DWORKERGLOBAL.close()                           #
ABSTRACTWORKER|WORKERGLOBAL.onerror 
= FUNC(ERROREVENT)                              #Fired on runtime exception (but not on other exceptions, e.g. throwing an ERROR)

WORKERGLOBAL|WINDOW.self                        #Returns WORKERGLOBAL|WINDOW
                                                #Goal is to refer to global scope whether in a worker or not
WORKERGLOBAL.navigator                          #WORKERNAVIGATOR
WORKERGLOBAL.location                           #WORKERLOCATION


[WORKER]NAVIGATOR.hardwareConcurrency          $#NUM of cores, i.e. number of workers that should be run at once.
                                               $#'core-estimator' (version from 2016-05-31):
                                               $#  - must run [WORKER]NAVIGATOR.getHardwareConcurrency(FUNC(NUM)) first



                   
   UI COMPONENTS   
                   



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             POPUP             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


WINDOW.open('URL', 'NAME'[,'FEAT=VAL,...'])     #Opens new tab, providing user removed popup blocker.
->WINDOW2                                       #'URL':
                                                #  - if '', blank page
                                                #  - while page is loading, WINDOW2 will be blank page.
                                                #NAME:
                                                #  - is WINDOW2.name
                                                #  - if existing, replace content of that one
                                                #FEAT:
                                                #  - dialog|modal yes|no (def: no): popup instead of new tab
WINDOW2.opener                                  #WINDOW|null: if WINDOW.open()
WINDOW2.close()                                 #Close WINDOW2 opened with WINDOW.open()
WINDOW2.closed                                  #BOOL

WINDOW2.moveBy|To(NUM, NUM2)                    #Move WINDOW2 opened with WINDOW.open() (relative|absolute to screen)
WINDOW2.resizeBy|To(NUM, NUM2)                  #Same for size


WINDOW.alert([STR])                             #Opens popup with OK button. Def STR: ''
WINDOW.confirm([STR])->BOOL                     #Same with OK and Cancel buttons. Return true if OK.
WINDOW.prompt([STR[, 'PLACEHOLDER']])->STR2|null#Same but asks for user input.

WINDOW.print()                                  #Opens print dialog



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           DRAG&DROP           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


MOBILE SUPPORT ==>                              #Drag&drop is not available on mobile

<any>
  draggable="true|false|"                       #Changes possibility to drag (user interaction + events):
                                                #  - "true" (def on links, images, selection)
                                                #  - "false"
                                                #  - "" (def otherwise): inherit

DragEvent                                       #MOUSEEVENT child
                                                #During a drag, keyboard and other mouse events are neutralized.
                                                #Drag and drop sources can also come from other applications.
DRAGEVENT.dataTransfer                          #DATATRANSFER

ELEM|DOCUMENT.ondragstart = FUNC(DRAGEVENT)     #When source starts being dragged
                                                #Should do DATATRANSFER.setData()
                                                #Can set DATATRANSFER.effectAllowed
ELEM|DOCUMENT.ondragend = FUNC(DRAGEVENT)       #When source stops being dragged (success or not)
                                                #Can check if operation was successful with DATATRANSFER.dropEffect
ELEM|DOCUMENT.ondrag = FUNC(DRAGEVENT)          #When source moves

ELEM|DOCUMENT.ondragenter|leave = FUNC(DRAGEVNT)#When target starts|ends being hovered
                                                #Should call DRAGEVENT.stopPropagation() + preventDefault()
ELEM|DOCUMENT.ondragover = FUNC(DRAGEVENT)      #When target is being hovered and source moves
                                                #Should call DRAGEVENT.stopPropagation() + preventDefault()
ELEM|DOCUMENT.ondrop = FUNC(DRAGEVENT)          #When target is being dropped on
                                                #Should do DATATRANSFER.getData()
                                                #Should call DRAGEVENT.stopPropagation() + preventDefault()

DATATRANSFER.setData('MIME', 'VAL')             #To do during dragstart.
                                                #Can set several types:
                                                #  - the most specific should be preferred on getData()
                                                #  - should include 'text/plain' as a fallback
                                                #Usual 'MIME':
                                                #  - "text/plain": 
                                                #     - default for links and selection
                                                #  - "text/uri-list": 
                                                #     - default for images
                                                #     - URLs, newline-separated. 
                                                #     - can have comments starting with #
                                                #     - will also define "URL" MIME with only the first URL
                                                #  - "text/html"
                                                #  - "Files": FILELIST
DATATRANSFER.getData('MIME')->'VAL'             #
DATATRANSFER.clearData(['MIME'])                #
DATATRANSFER.types                              #'MIME'_ARR
DATATRANSFER.files                              #Same as DATATRANSFER.getData('Files')

DATATRANSFER.effectAllowed                      #To do during dragstart. 
                                                #Restrict possible dropEffect:
                                                #  - 'copy|move|link|none'
                                                #  - 'copyLink|copyMove|linkMove|all': combination
                                                #  - 'uninitialized': like 'all'
                                                #If unallowed, drop will not be performed.
DATATRANSFER.dropEffect                         #Can be read on dragend (not drop)
                                                #Can be set on dragover|dragenter, but also default are chosen according to modifier:
                                                #  - 'copy' (def with shift)
                                                #  - 'move' (def with no modifier key)
                                                #  - 'link' (def with shift+ctrl)
                                                #  - 'none'


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              RTF              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCUMENT.designMode                             #If 'on' (def: 'off'), disable events and allow execCommand()
DOCUMENT.execCommand                            #Fire RTF (MIDAS) COMMAND on current selection
('COMMAND'[, false, 'ARG'])->BOOL               #Returns false if failed.
                                                #Available COMMAND ARG:
                                                #  - back|forecolor "#ffffff"
                                                #  - hilitecolor "#ffffff": only if styleWithCSS
                                                #  - bold|italic|strikethrough|underline
                                                #  - paste
                                                #  - createlink "URL" | unlink
                                                #  - de|increasefontsize
                                                #  - delete
                                                #  - fontname "FONT"
                                                #  - fontsize "NUM"
                                                #  - heading "H*"
                                                #  - out|indent
                                                #  - inserthorizontalrule : replace by <hr>
                                                #  - inserthtml STR : replace by HTMLDOCUMENT code STR
                                                #  - insertimage STR
                                                #  - insert[un]ordererdlist
                                                #  - insertparagraph
                                                #  - justifycenter|full|left|right
                                                #  - undo|redo
                                                #  - removeformat
                                                #  - selectall
                                                #  - sub|superscript
                                                #  - styleWithCSS : change format with CSS, not HTMLDOCUMENT
                                                #  - contentReadOnly : all document becomes readonly
                                                #Browsers implement differently: use tags (e.g. <b>) or CSS (e.g. <... style="...">)
DOCUMENT.queryCommandSupported('COMMAND')->BOOL #Browser can do it
DOCUMENT.queryCommandEnabled('COMMAND')->BOOL   #Browser allows to do it
DOCUMENT.queryCommandIndeterm('COMMAND')->BOOL  #Current selection: if style partially applied to children
DOCUMENT.queryCommandState('COMMAND')->BOOL     #Current selection: If style applied or not
DOCUMENT.queryCommandValue('COMMAND')->'ARG'    #Current selection


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         NOT SUPPORTED         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


POLYFILLS ==>                                   #
UPDATING ==>                                    #
STAGES ==>                                      #
UNSUPPORTED BROWSERS ==>                        #
PARTIAL SUPPORT ==>                             #See HTML doc

FULLY SUPPORTED ==>                             #
																						    #DOM Requirements (G)
																						    #Element Traversal Specification (R)
																						    #Geolocation API (R)
                                                #High resolution Time (R)
																						    #HTML5 Web Messaging (R)
																						    #JavaScript, a.k.a. Web ECMAScript (WHATWG) (difference between JavaScript in browsers and ES6 spec, for the moment none)
																						    #Navigation Timing (R)
																						    #Page Visibility (Second Edition) (R)
																						    #Page Visibility 2 (W)
																						    #Progress Events (R)
																						    #WebIDL Level 1 (R)
																						    #Web IDL (Second Edition) (E)
																						    #WebSocket API (R)
																						    #Web Storage (Second Edition) (R)
																						    #XMLHttpRequest Level 1 (W)

FULLY|PARTIALLY UNSUPPORTED ==>                 #Follows, by category.


DOM ==>                                     IE11#Custom Elements (W) (register a <tag> with lifecycle events)
                                                #  - including <any>: is, CUSTOMELEMENTSREGISTRY, WINDOW: customElements
                                                #DOM Level 3 (R):
                                            IE11#  - COMMENT: new
                                            IE11#  - CUSTOMEVENT
                                            IE11#  - DOCUMENT: documentURI
                                            IE11#  - EVENT: new, isTrusted (always true)
                                            IE11#  - NODE: baseURI
                                                #DOM Level 4 (R):
                                            IE11#  - CHARDATA: previous|nextElementSibling
                                            IE11#  - DOCTYPE|ELEM|CHARDATA: remove()
                                            IE11#  - DOCUMENT: new, origin, contentType
                                            IE11#  - DOCUMENTFRAG: new, getElementById()
                                            IE11#  - DOCUMENT[FRAGMENT]: children
                                            IE11#  - DOMTOKENLIST: toggle() second arg, add|remove() multiple args, iterable
                                            IE11#  - ELEM (instead of HTMLELEM): classList, className, id, getElementsByClassName(), children
                                            IE11#  - NODE (instead of HTMLELEM): contains(), parentElement
                                            IE11#  - NODEITERATOR: [pointerBefore]referenceNode
                                            IE11#  - NODELIST: iterable
                                            IE11#  - RANGE: new, comparePoint(), intersectsNode(), isPointInRange()
                                            IE11#  - TEXT: new
                                                #DOM (WHATWG):
                                            IE11#  - DOCTYPE|ELEM|CHARDATA: before|after(STR|NODE...), replaceWith(STR|NODE...)
                                            IE11#  - DOCUMENT: createElement() second argument OBJ
                                            IE11#  - DOCUMENT[FRAGMENT]|ELEM: append|prepend(NODE|STR...)
                                            IE11#  - DOMTOKENLIST: replace(STR, STR), supports(STR)->BOOL, value
                                            IE11#  - ELEM: closest(), getAttributeNames()
                                            IE11#  - EVENTTARGET: add|removeEventListener(..., OBJ) (instead of BOOL)
                                            IE11#  - NODE: isConnected
                                                #DOM Parsing and Serialization (W):
                                            IE11#  - ELEM (instead of HTMLELEM): innerHTML, outerHTML, insertAdjacentHTML()
																						IE11#FindText API (W) (search for text inside DOM)
                                            IE11#Shadow DOM (W) (DOM inside another DOM)
                                                #  - including EVENT: composedPath(), composed, NODE: getRootNode(), <slot>, <any>: slot

WORKERS ==>                                 IE11#Service Workers (W) (workers shared-loaded across a domain/directory or reacting to events in the browser's background. Can intercept HTTP requests.)
                                                #  - including about:inspect#service-workers, about:serviceworkers-internals (Chrome only), about:serviceworkers (Firefox)
                                                #Web Workers (W):
                                            IE11#  - Shared Workers (worker that can be shared/accessed across tabs|iframes)
                                                #     - including about:inspect#workers (Chrome only)

NETWORK REQUESTS ==>                        IE11#Beacon (W) (XHR guarenteed to be sent even if tab closes)
                                            IE11#Fetch (WHATWG) (higher-level API for XHR)
																						IE11#Network Error Logging (G) (NEL [C] header that tells browser [where|how] to report HTTP network problems)
																						IE11#Reporting API (W) (generalization of CSP reporting fields, for other APIs)
                                            IE11#URL (API part) (WHATWG) (URL getter/setters, including Punicode):
                                            IE11#Webmention (R) (get HTTP requests when another website links to current site)
                                            IE11#XMLHttpRequest (WHATWG) (XHR.responseURL (request URL after redirects), more methods on FORMDATA)

REALTIME ==>                                IE11#Notifications API (WHATWG) (notifications outside browser)
																						IE11#Web Notifications (R)
                                                #  - developers.google.com/web/fundamentals/primers/push-notifications
                                                #  - developers.google.com/web/fundamentals/engage-and-retain/push-notifications
                                                #  - developers.google.com/web/fundamentals/getting-started/push-notifications/
                                            IE11#Push API (W) (server unidirectional push, using a capability URL and targetting a service worker)
                                            IE11#Server-Sent Events (R) (server unidirectional push, using a plain text stream (continously opened HTTP response))
                                                #  - including EventSource, MESSAGEEVENT: lastEventId

FILES ==>                                       #File API (W):
                                             F46#  - BLOB: close()
                                            IE11#  - BLOB: isClosed
                                            IE11#  - FILE: new
                                            IE11#  - URL: createFor()
                                            IE11#Indexed Database API (R) (like localStorage, but faster, async and more structured)
                                                #  - including about:indexeddb-internals (Chrome only)
                                            IE11#Streams API (WHATWG) (like Node.js streams)

MOBILE ==>                                  IE11#Client Hints (W) (RTF draft-ietf-httpbis-client-hints) (client HTTP headers indicating screen size/ratio, network speed, etc.)
																						IE11#Web App Manifest (W) (progressive web apps)

SENSORS ==>                                 IE11#Ambient Light Sensor (W) (luminosity sensor)
                                            IE11#Battery Status API (R) (battery level)
                                                #DeviceOrientation Event (W):
                                            IE11#  - WINDOW: oncompassneedscalibration = FUNC(EVENT), ondeviceorientationabsolute = FUNC(EVENT)
																						IE11#Generic Sensor API (W) (generic API for sensors)
                                            IE11#Proximity Sensor (W) (on close the device is from user)
                                           SM9.3#Screen Orientation API (W) (reading|setting portrait|landscape mode)
                                            IE11#Vibration API (R) (vibrate device)
																						IE11#Wake Lock API (W) (prevent mobile screen lock)
																						IE11#Wake Lock: Use cases (G)

INPUT ==>                                   IE11#Gamepad (W) (gamepads|controllers input)
																						IE11#Input Events (E) (beforeinput event, input event selection ranges)
                                            S9.1#Pointer Events (R) (higher-level events for mouse|touch|pen)
																						S9.1#Pointer Events Level 2 (W)
                                            IE11#Pointer Lock (R) (FPS-like mouse capture, i.e. no icon, can go beyond document boundaries, gets movements deltas not absolute position)
																						    #Touch Events (R):
                                            IE11#  - DOCUMENT: createTouch[List]()
                                            IE11#Touch Events API level 2 (E) (touch pressure|rotation|radius)
																						    #UI Events Specification (W):
                                            S9.1#  - COMPOSITIONEVENT: data
                                            S9.1#  - KEYBOARDEVENT|MOUSEEVENT: getModifierState()
                                            S9.1#  - KEYBOARDEVENT: repeat, location, code, key
                                            IE11#  - KEYBOARDEVENT: isComposing
                                            S9.1#  - MOUSEEVENT: buttons
                                             F46#  - FOCUSEVENT|MOUSEEVENT: relatedTarget
																						S9.1#UI Events KeyboardEvent code Values (W)
																						S9.1#UI Events KeyboardEvent key Values (W)

BROWSER UI ==>                              IE11#Clipboard API and events (W)
                                            IE11#Custom Scroll Restoration (E) (how scrolling is restablished with history back|forward)
                                                #  - including HISTORY: scrollRestoration
																				 	 SM9.3#Fullscreen API (WHATWG) (make element take full screen)
                                                #  - including <iframe>: allowfullscreen
                                                #Selection API (W):
                                            IE11#  - SELECTION: type, empty(), setPosition(), extend(), setBaseAndExtent(), containsNode()
                                            IE11#  - INPUT|TEXTAREA: onselectionchange = FUNC(EVENT)

DEBUGGING ==>                                   #Console (WHATWG):
                                            IE11#  - CONSOLE: table(), timeStamp(), info|log|warn|error() (%o, %c, %O), trace() first arg
                                             C50#  - CONSOLE: assert() (format strings)

PERFORMANCE ==>                             IE11#Cooperative Scheduling of Background Tasks (W) (low priority threads)
																						IE11#High Resolution Time Level 2 (W) (WORKERGLOBALSCOPE.performance)
                                             F46#Navigation Timing API level 2 (W)
																						IE11#Network Information API (E) (network type and speed)
                                            S9.1#Performance Timeline (R) (higher-level API on other timing APIs)
																						S9.1#Performance Timeline Level 2 (W)
                                           SM9.3#Resource Timing Level 1 (R) (network timing stats when loading resources)
                                           SM9.3#User Timing (R) (custom timing stats)

SECURITY ==>                                IE11#Credential management API (W) (easier and standardized login flows)
                                            IE11#Permissions API (W) (request|query other APIs permissions)
                                            IE11#Secure Contexts (W) (check if file|https://. Used by other APIs)
                                            IE11#Web Authentication: A Web API for accessing scoped credentials (W)
                                            IE11#Web Cryptography API (R) (crypto: symmetric, asymmetric, hashes, PRNG)

PRIVACY ==>                                     #DNT (R):
                                            IE11#  - NAVIGATOR: doNotTrack (instead of WINDOW.doNotTrack)
                                             C50#  - NAVIGATOR: store|remove|confirmSiteSpecific|WebSideTrackingException()
                                            IE11#Frame Timing (G) (frame refresh rate timing stats)
                                            IE11#Referrer policy (W) (control over Referred [C])
                                                #  - including <a|area|iframe|img|link>: referrerpolicy

EXTERNAL DEVICES ==>                        IE11#Network Service Discovery (W) (DNS-SD using NAVIGATOR.getNetworkServices())
																						IE11#Presentation API (R) (connecting to external display, e.g. TV or Chromecast)
																						IE11#Remote Playback API (W) (manipulating external display, e.g. TV or Chromecast)
