
          
   HTML   
          


VERSION ==>                                     #HTML5

XHTML ==>                                       #Follows HTML5 but:
                                                #  - MIME "application/[xhtml+]xml" instead of "text/html"
                                                #  - more restrictive
                                                #  - can be parsed as XML
                                                #Polyglot: XHTML HTML-compatible


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:       INTEROPERABILITY        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


BROWSER COMPTABILITY ==>                        #Desktop:
																								#  - Chrome 44, Opera 31
																								#  - Safari 8
																								#  - IE 11
                                                #  - Edge 12
																								#  - Firefox 40
																								#Mobile/tablet:
																								#  - Chrome Mobile 44, Opera Mobile 31
																								#  - Safari Mobile 8.4
																								#  - Opera Mini 8
																								#  - Android browser 4.4
																								#  - UC browser 9.9

DOCUMENT.compatMode                             #Can be:
                                                #  - "CSS1Compat": normal
                                                #  - "BackCompat": Quirks mode:
                                                #     - when browser thinks this is a legacy website, tries to load it using 
                                                #       legacy HTML/CSS/JavaScript
                                                #     - often triggered by DOCTYPE

HTML5 SHIV ==>                                 ##Polyfill for some HTML5 tags (3.7.2) for IE<9
                                               ##Options are passed with WINDOW.htlm5 = OBJ (before loading script):
                                               ##  - elements "TAG ...":
                                               ##     - def. ones work without polyfill with IE9, except: <abbr> (IE7), 
                                               ##       <progress|datalist> (IE10), <bdi|data|details|summary|main|meter|
                                               ##       output|dialog|template> (no current version of IE)
                                               ##  - shivCSS BOOL (def: true): adds CSS polyfill, e.g. display: block
                                               ##  - shivMethods BOOL (def: true): adds support for IE6-8 by monkey patching
                                               ##    DOCUMENT.createElement|DocumentFragment()->ELEM
                                               ##    Difference: ELEM.parentNode is DOCUMENTFRAGMENT, but should be null.
                                               ##    jQuery monkey patches too.
                                               ##Problem: 
                                               ##  - just allows using empty/featureless tags, but the ones with functionality
                                               ##    (e.g. <audio|video|canvas>) will not work
                                               ##  - cannot clone ELEM in JavaScript for browsers that use the polyfill.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            SYNTAX             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<TAG attr[="value"]>...</TAG>                   #Not self-closing
<TAG>/                                          #Means <TAG/> or <TAG> (self-closing)

OPTIONAL TAGS ==>                               #Are optional, but will be implicitely added: <html>, <head>, <body>, <tbody>
OPTIONAL END TAG ==>                            #List:
                                                #  - Table-related: <thead>, <tbody>, <tfoot>, <tr>, <th>, <td>
                                                #  - List-related: <option>, <optgroup> <li>, <dt>, <dd>, <colgroup>
                                                #  - <p>

<!-- COMMENT -->                                #Cannot include -- nor start with > or ->

CATEGORIES ==>                                  #Content categories:
                                                #  - metadata: in <head>
                                                #  - flow/inline: in <body>
                                                #     - sectioning: <section>, <article>, <nav>, <aside>
                                                #     - heading: <h*>
                                                #     - phrasing: <span>, etc. Can only include other phrasing
                                                #        - embedded: <canvas>, <video>, <img>, etc.
                                                #     - interactive: <a>, forms, <embed>/<object> and <iframe>, <img usemap>
                                                #        - form
                                                #Also:
                                                #  - transparent: can be suppressed with document still valid
                                                #  - replaced: embedded or form (not affected by CSS)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              CSS              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<link rel="stylesheet" href="URL.css">          #
  media="MEDIAQUERYLIST"                        #
  rel="STR"                                     #
  LINK.disabled                                 #
  LINK.sheet                                    #See CSS doc

<style>                                         #
  media="MEDIAQUERYLIST"                        #
  disabled                                      #
  type="STR"                                    #
  STYLE.sheet                                   #See CSS doc

<any> 
  style="NAME: VAL;[NAME: VAL;]..."             #See CSS doc


<any>
  hidden                                        #See CSS doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          JAVASCRIPT           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<script>                                        #
<a href="JavaScript:CODE"></a>                  #
<any onEVENT="CODE"></any>                      #See DOM doc

<noscript>                                      #See DOM doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              DOM              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


HTMLElement                                     #Child of ELEM, parent of all HTML tags.
HTMLTAGElement                                  #HTMLELEM of <TAG>
                                                #Only when there are IDL attributes on top of the HTML ones
                                                #Sometimes called slightly differently
HTMLUnknownElement                              #HTMLELEM using a tagName not supported
HTMLCollection                                  #HTMLELEM_ARR-like, with also HTMLCOLLECTION.ID


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          ATTRIBUTES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


HTML VS IDL ATTRIBUTES ==>                      #The HTML attribute and JavaScript one (IDL attribute) are in sync but:
                                                #  - some exist only in JavaScript
                                                #  - lowercase in HTML, camelcase in JavaScript
                                                #  - STR in HTML, any type in JavaScript
                                                #  - some are readonly
                                                #  - not kept in sync: CONTROL.value|checked, ELEM.onEVENT
                                                #  - if empty in HTML, JavaScript might give default value

ELEM.ATTR                                       #IDL attributes
ELEM.attributes                                 #HTML attributes as NAMEDNODEMAP (like HTMLCOLLECTION)
ELEM.getAttribute[Node]('ATTR')->'VAL'|ATTR     #
ELEM.setAttribute[Node]('ATTR', 'VAL'|ATTR)     #
ELEM.hasAttribute('ATTR')->BOOL                 #
ELEM.hasAttributes()->BOOL                      #
ELEM.removeAttribute[Node]('ATTR'|ATTR)[->ATTR] #HTML attributes

<any>
  data-VAR="VAL"                                #Custom attribute:
                                                #  - VAR should start with namespace, e.g. data-myapp-myprop
                                                #  - [a-z-] (no uppercase)
  ANY.dataset.VAR                               #Camelcased


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<any>
  class="STR STR..."                            #Used for CSS|JavaScript selection
                                                #Only [:alpha:][[:alnum:]-_].
  HTMLELEM.className                            #'CLASS ...'
  HTMLELEM.classList                            #DOMTOKENLIST
  id="STR"                                      #Same but must be unique. To avoid unless really need singleton.

DOMTOKENLIST                                    #Like HTMLCOLLECTION with extra methods:
DOMTOKENLIST.add|remove('CLASS')                #
DOMTOKENLIST.toggle('CLASS')->BOOL              #
DOMTOKENLIST.contains('CLASS')->BOOL            #
DOMTOKENLIST.toString()->'CLASS ...'            #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              SEO              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<title>                                         #Tab title, containing only text.
                                                #Also used by search engines.
                                                #Should be different for each page.
  TITLE.text                                    #Like TITLE.textContent
DOCUMENT.title                                  #<title>.textContent

<meta name="description" content="STR">/        #Description, used by SEO, and also browsers bookmarks.
                                                #140 chars max.
                                                #Should be different for each page.
                                                #Should escape quotes.
<meta name="keywords" content="STR...">/        #Search engine keywords

<meta name="robots"                             #Search engine hints:
 content="WORD,...">/                           #  - [no]index: index current page
                                                #  - [no]follow: index linked pages
                                                #  - noimageindex: index current page for image search (Google)
                                                #  - noodp: do not used auto-generated description if missing <meta name="description">
                                                #  - noydir: similar (Yahoo)
                                                #  - nosnippet: do not show description (Google)
                                                #  - noarchive: do not cache (Google, Yahoo)
                                                #  - nocache: do not cache (Bing)
                                                #Can also use X-Robot-Tags: "..." [S]
                                                #Should also use DOMAIN/robots.txt with:
                                                #  User-agent: *
                                                #  [Dis]Allow: /section/*
                                                #Globbing * ? and regex $ only.
<meta name="googlebot|slurp" content="STR">/    #Like "robots" but only for Google|Slurp

SITEMAP ==>                                     #Can be declared:
                                                #  - in robots.txt:
                                                #      Sitemap: URL
                                                #Is a XML file:
                                                #  <?xml version="1.0" encoding="UTF-8"?>
                                                #  <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                                                #    <url>
                                                #      <loc> URL: hints to what to visit. Must be inside the same directory as Sitemap's parent's directory
                                                #      [<lastmod> YYYY[-MM[-DD[Thh:mm[:ss[.s]]TZ]]]: hints to when to visit
                                                #      [<changefreq> always|hourly|daily|weekly|monthly|yearly|never]: hints to when to visit
                                                #      [<priority> DOUBLE (from 0-1) (def: 0.5)]: when search engine picks between several possible pages
                                                #Sitemap index is a directory of sitemaps:
                                                #  <?xml version="1.0" encoding="UTF-8"?>
                                                #  <sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
                                                #    <sitemap>
                                                #      <loc> SITEMAP_URL
                                                #      [<lastmod> ...]

<meta name="google" content="WORD,...">/        #Google-specific:
                                                #  - notranslate: no Google translate


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             I18N              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<meta charset="utf-8">/                         #Should be first in <head>
                                                #Can also use &#x00[00[00]]
DOCUMENT.characterSet                           #STR (e.g. 'UTF-8')
                                                #Can be different than the one set by the document if user overrided it.

<any>
  lang="STR"                                    #Language code.
                                                #Used by:
                                                #  - CSS: :lang(), hyphens, etc.
                                                #  - browser font selection
                                                #  - external tools: SEO, spellcheck, translation
                                                #  - a11y
  NAVIGATOR.language                            #Language code of the browser UI
<a|area|link>
  hreflang="STR"                                #Language code of document linked by href="URL".
  
<any>
  dir="ltr|rtl|auto"                            #Text direction
  DOCUMENT.dir                                  #'ltr|rtl'
<bdo>                                           #Phrasing content which should use dir="..."


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             A11Y              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<any>
  title="STR"                                   #Tooltip                           

<any>
  role="STR"                                    #Semantic purpose (ARIA)

<focusable>
  accesskey="CHAR"                              #Give focus. Shortcut depends on browser :
                                                #  - Safari/Chrome  : Alt (Ctrl-Opt on Mac)
                                                #  - IE             : Alt
                                                #  - Firefox        : Shift-Alt (Ctrl-Opt on Mac)
                                                #  - Opera          : Shift-Esc
  tabindex="NUM"                                #Tab order:
                                                #  - -NUM: cannot be tabbed
                                                #  - 0: auto
                                                #  - NUM
                                                #Should prefer browser default.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MOBILE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<meta name="viewport" content="WORD, ...">/     #WORD:
                                                #  - width|height=NUM|device-width|height: viewport width|height to use on mobile
                                                #  - initial|minimum|maximum-scale=DOUBLE: zoom value, from 0.0 to 10.0
                                                #  - user-scalable=yes|no: user can zoom-in|out.
                                                #    Disabling zoom also disables the 300ms tap delay (used for double-tap zooms)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        SECTIONING TOP         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<!DOCTYPE html>/
DOCUMENT.doctype                                #DOCUMENTTYPE. Readonly
DocumentType                                    #NODE child.
DOCUMENTTYPE.name                               #Typically "html"

<html>                                          #Should contain only <head> and <body>, in that order.
DOCUMENT.documentElement                        #HTML

<head>                                          #
DOCUMENT.head                                   #
<body>                                          #
DOCUMENT.body                                   #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            HEADER             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


FAVICON ==>                                     #Should:
                                                #  - put favicon.ico (with 16x16, 32x32, 48x48) in DOMAIN/favicon.ico
                                                #    <link rel="shortcut icon" href="FILE.ico|png"> not needed.
                                                #  - <link rel="apple-touch-icon-precomposed" href=".../favicon-152.png" 
                                                #    (with 152x152): for iOS/Android
                                                #  - <meta name="msapplication-TileColor" content="#FFFFFF">
                                                #    <meta name="msapplication-TileImage" content=".../favicon-144.png">
                                                #    (with 144x144): for IE10

<meta name="author" content="PERSON">/          #Can use several
<meta name="publisher" content="STR">/          #
<meta name="contact" content="EMAIL">/          #
<meta name="copyright" content="PERSON">/       #

<meta name="application-name" content="STR">/   #Like <title>, but app-wide
<meta name="generator" content="STR">/          #Generated by a tool

<meta name="STR" content="STR">/                #Anything


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       SECTIONING UPPER        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<div>                                           #Prefer other sectioning upper tags.

<header>                                        #Beginning
<footer>                                        #End
<aside>                                         #Not on document flow, but related (sidebars, glossary, ads, etc.)
<figure>                                        #Not on document flow, self-contained (e.g. floating picture)
<figcaption>                                    #Text inside <figure>. Only one per <figure>

<section>                                       #Chapters, tabbed page, blocks, sections
<article>                                       #Like <section> but more self-contained, from a list of similar items,
                                                #e.g. blog post, comment, etc.
<nav>                                           #Main purpose is to contain links

<blockquote>                                    #Multiline quote
  cite="URL"                                    #Source
<address>                                       #Postal address


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       SECTIONING LOWER        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<p>                                             #Generic

<pre>                                           #Programming language content

<h1-h6>                                         #Headings.

<ol>                                            #Ordered list (bullet point-like) of <li>. 
                                                #Can be nested.
  start="NUM"                                   #Starting index
<ul>                                            #Same as <ol> but unordered
<li>                                            #
  value="NUM"                                   #Index (only inside <ol>)

<dl>                                            #Definition list, containing pairs of <dt> + <dd>
<dt>                                            #Title followed by one or more <dd>
<dd>                                            #Content


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           PHRASING            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<span>                                          #Prefer other phrasing tag.

<strong>                                        #Stressed as more important
<em>                                            #Stressed as different content-wise
<i>                                             #Stressed as different form-wise
<b>                                             #Different style-wise
<mark>                                          #Stressed as relevant to current text (e.g. currently searched keywords)

<ins|del>                                       #New|removed content (document edits)
  datetime="STR"                                #Change date
  cite="URL"                                    #URL explaining change
<s>                                             #Outdated content (no document edits)
<u>                                             #Wrong|mispelled content

<code>                                          #Computer code
<kbd>                                           #Command line input
<samp>                                          #Command line output
<var>                                           #Math|programming variable

<q>                                             #Quote
  cite="URL"                                    #Source
<cite>                                          #Reference
<abbr>                                          #Abbreviation
  title="STR"                                   #Full name.
<dfn>                                           #Term defined elsewhere
  title="STR"                                   #Defined term (def: textContent)

<sub|sup>                                       #Subscript/superscript                                           
<small>                                         #Small prints or side comments

<br>/                                           #Semantic line break.
<hr>/                                           #Semantic paragraph break.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             LINKS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


URL                                             #Can be:
                                                #  - [..|./]URL: relative
                                                #  - [PROT:]/[/]URL: absolute
                                                #  - "[URL]#ID|NAME": anchor
                                                #  - data URI:
                                                #     - "data:[MIMETYPE];base64,CODE":
                                                #        - CODE: data encoded in base64 (e.g. using WINDOW.btoa|atob())
                                                #           - base64 discard whitespaces
                                                #        - def MIMETYPE: text/plain
                                                #     - "data:[MIMETYPE];charset=utf-8,CODE":
                                                #        - CODE: data URI encoded (e.g. with encode|decodeURIComponent())

<base>/                                         #Base for relative URLs (def: ".") and default target for following URLs.
                                                #Only first <base> counts.
  href="URL"                                    #Can be relative|absolute
  target="STR"                                  #


<a>                                             #Link
  href="URL"                                    #
  target="STR"                                  #How to open link:
                                                #  - "_self" (def): same tab
                                                #  - "_blank": new tab
                                                #  - "_parent": parent iframe
                                                #  - "_top": top iframe
  type="STR"                                    #MIME type (semantic info)
  media="MEDIAQUERYLIST"                        #See CSS doc
  rel="STR [STR2]..."                           #Relationship between current page and linked page.
                                                #Semantic info.
                                                #Often used:
                                                #  - "nofollow": search engine should consider link external, and not
                                                #    endorsed by current site (often paid ads)
                                                #  - page content:
                                                #     - "help"
                                                #     - "search"
                                                #     - "sidebar": content to be displayed in a sidebar
                                                #     - "license"
                                                #     - "bookmark": permalink for closest section
                                                #     - "archives": backup/archive
                                                #     - "tag"
                                                #  - "index|up": hierarchy
                                                #  - "first|prev|next|last": sequence (webcomics, forum, etc.)
                                                #  - "external": different site
                                                #  - "author": author of the link
                                                #  - "alternate": different media|hreflang|type
                                                #  - "dns-prefetch": DNS lookup before any interaction
  A.rel                                         #"STR ..."
  A.protocol                                    #"PROTOCOL:"
  A.hostname                                    #"HOSTNAME"
  A.port                                        #"NUM"
  A.host                                        #"HOSTNAME[:PORT]"
  A.pathname                                    #"/PATH"
  A.search                                      #"?SEARCH"
  A.hash                                        #"#HASH"
DOCUMENT.links                                  #A|AREA_HTMLCOLLECTION
DOCUMENT.anchors                                #A_HTMLCOLLECTION (only those with "name" attribute)


<img|object>                                    #
  usemap="#MAP_NAME"                            #Use a <map>, i.e. transparent overlay
<map>                                           #
  MAP.areas                                     #AREA_HTMLCOLLECTION
  MAP.images                                    #IMG|OBJECT_HTMLCOLLECTION
<area>/                                         #Hot-spot inside a <map>
  shape="rect|circle|poly|default"              #
  coords="NUM..."                               #According to shape (in CSS pixels):
                                                #  - "rect|default" : left,top,right,bottom
                                                #  - "circle" : x,y,radius
                                                #  - "poly" : x1,y1,...,xn,yn
  alt="STR"                                     #Like <img>
  href="URL"                                    #
  target="STR"                                  #
  type="STR"                                    #
  media="MEDIAQUERYLIST"                        #
  rel="STR"                                     #
  AREA.rel                                      #
  AREA.protocol                                 #
  AREA.hostname                                 #
  AREA.port                                     #
  AREA.host                                     #
  AREA.pathname                                 #
  AREA.search                                   #
  AREA.hash                                     #Like <a>, A

<img>                                           #
  ismap                                         #Adds '?NUM,NUM2' (pointer coordinates) to parent <a|area> URL when pressed


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             FORM              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/

<any>
  contenteditable="|true|false"                 #Make content editable by user, and all children tags.
  HTMLELEM.contentEditable                      #'true|false|inherit'
  HTMLELEM.isContentEditable                    #BOOL

<input|textarea|CONTENTEDITABLE|any>
  spellcheck="true|false|"                      #Red line under wrong word, depending on lang attribute.
                                                #Only works on INPUT|TEXTAREA|CONTENTEDITABLE but is inherited by descendants
                                                #on <any>
                                                #Can be:
                                                #  - "true" (def for TEXTAREA or contenteditable)
                                                #  - "false" (def for INPUT)
                                                #  - "": inherit

<control>                                       #Means <input|textarea|select|button|fieldset|object>
  CONTROL.validity                              #Returns VALIDITYSTATE
    VALIDITYSTATE.valid                         #False if any other property is true
    VALIDITYSTATE.typeMismatch                  #True if incorrect pattern (via default pattern in some <input>)
    VALIDITYSTATE.patternMismatch               #True if incorrect pattern (via CONTROL.pattern)
    VALIDITYSTATE.tooLong                       #True if beyond CONTROL.maxlength (can't be true in most browsers, which prevent user 
                                                #from going over maxlength)
    VALIDITYSTATE.rangeOverflow|Underflow       #Same for CONTROL.max|min
    VALIDITYSTATE.stepMismatch                  #Same for CONTROL.step
    VALIDITYSTATE.customError                   #setCustomValidity() has been called
  CONTROL.validationMessage                     #Current error message
  CONTROL.setCustomValidity(STR)                #Sets:
                                                #  - VALIDITYSTATE.customError: false if "", true otherwise
                                                #  - CONTROL.validationMessage: STR
  CONTROL|FORM.checkValidity()->BOOL            #Returns CONTROL|FORM.validity.valid
                                                #If false:
                                                #  - fills CONTROL.validationMessage (automatically localized by browser)
                                                #  - fires CONTROL|FORM.oninvalid = FUNC(EVENT)
                                                #Called on FORM:
                                                #  - automatically before submit event, and if false:
                                                #     - does not trigger submit event
                                                #     - show validationMessage next to ELEM 
                                                #  - unless FORM.novalidate true
  CONTROL.willValidate                          #True if checkValidity() will be called during submit
                                                #Usually true, except e.g. if CONTROL.disabled true
<form>
  novalidate                                    #See above


<form>                                          #Parent of <control>
                                                #Don't nest.
  action="URL"                                  #Redirects current URL when the form is submitted:
  method="post|get"                             #  - unless EVENT.preventDefault()
  enctype="TYPE"                                #     - can do AJAX request instead in event handler
																								#  - use METHOD:
																								#     - GET: payload in query string
																								#     - POST: payload in request body
																								#  - using each <control name="VAR">, CONTROL.value VAL and TYPE:
																								#     - "text/plain": 
																								#        - VAR=VAL, newline-separated
																								#     - "application/x-www-form-urlencoded" (def): 
																								#        - VAR=VAL, &-separated, percent-encoded, but space converted to + instead of %20
																								#     - "multipart/form-data; boundary=STR": 
																								#            STR	
																								#            Content-Disposition: form-data; name="VAR"[; filename="FILE"]
																								#            [Content-Type: TYPE]
																								#            content as is
																								#            STR
																								#            ...
																								#            STR--
																								#        - more efficient than percent-encoding for binary/big payload, e.g. file upload.
																								#        - STR should be long enough and random. Can include a graphical line with "------" for humans reading the request.
																								#  - <input type="file">:
																								#     - with "multipart/form-data", use filename="FILE" and Content-Type: TYPE
																								#     - with others, just send filename
  accept-charset="STR"                          #Charset in Content-Type [C]. Def is charset of the page (often UTF-8).
  target="STR"                                  #Like <a>
  FORM.onsubmit = FUNC(EVENT)                   #Fired by:
																								#  - clicking on <input|button type="submit">
																								#  - enter key while focus inside the <form>
																								#  - FORM.submit() (sometimes)
  FORM.submit()                                 #Might emit (or not) FORM.onsubmit = FUNC(EVENT)
                                                #Then submits form.
  FORM.onreset = FUNC(EVENT)                    #Fired by:
                                                #  - clicking on <input|button type="reset">
                                                #  - FORM.reset() (sometimes)
  FORM.reset()                                  #Might emit (or not) FORM.onreset = FUNC(EVENT)
                                                #Then resets controls.
  autocomplete="off|on"                         #Does:
                                                #  - fills <control> using same name|id, on any domain name
                                                #  - fills same <control> on same page when going back|forth in history
                                                #Will not be used:
                                                #  - for address, phone number, names: if user enabled browser's autofill functionality (Chrome)
                                                #  - but prompted instead for:
                                                #     - <input type="password"> (IE/Firefox/Chrome) 
                                                #     - <input type="text"> that look like username (Firefox)
                                                #     - <input type="email"> (Safari)
                                                #If set to false, all <input> should also have their autocomplete attribute set to false. 
  FORM.elements                                 #CONTROL_HTMLCOLLECTION
  FORM[UINT]
  FORM.ID                                       
  FORM.length                                   #Same as using FORM.elements
DOCUMENT.forms                                  #FORM_HTMLCOLLECTION

<control|label|legend>
  form="ID"                                     #Def: parent <form>
  CONTROL|LABEL|LEGEND|OPTION.form              #

<input>/                                        #Various <control>, depending on type="STR"
  name="VAR"                                    #
  value="VAL"                                   #Default value
  INPUT.defaultValue                            #Default value
  INPUT.value                                   #Current value
  disabled                                      #
  type="text"                                   #Single-line input (linebreaks are removed). 
    maxlength="NUM"                             #Max number of Unichars. Def: -1 (infinite).
    size="NUM"                                  #Size of box, in number of Unichars (def: 20). 
    placeholder="STR"                           #What to show when value empty (not supported by password).
    autocomplete="off|on"                       #Like <form> (def: on)
    readonly                                    #Like disabled, but user can still click it (but not modified). 
  type="password"                               #Like type="text" but doesn't show input
  type="email|tel|url|search"                   #Like type="text" but semantically indicate content which can influence:
                                                #  - layout (e.g. "tel" gets input keyboard on iOS)
                                                #  - default validity pattern (e.g. "email|url")
  type="checkbox"                               #Uses checked instead of value
    checked                                     #Default checked 'on|'
    INPUT.defaultChecked                        #Default checked BOOL
    INPUT.checked                               #Current checked BOOL
    INPUT.indeterminate                         #BOOL, indicating parent checkbox where some children are true, others false
  type="radio"                                  #Like type="checkbox" but exclusive with others with same name
  type="file"                                   #Upload.
    INPUT.value                                 #'FILENAME'. Readonly
    INPUT.files                                 #FILELIST. Readonly
  type="button"                                 #
    value="LABEL"                               #
  type="hidden"                                 #Not displayed
  type="submit"                                 #See FORM.submit|onsubmit
    formaction|target|enctype|method|
    novalidate="STR"                            #Override the action|target|enctype|method|novalidate attribute of the associated FORM.
    value="LABEL"                               #
  type="image"                                  #See FORM.submit|onsubmit
    formaction|target|enctype|method|
    novalidate="STR"                            #Like type="reset"
    INPUT.value                                 #Cannot be seen nor set in UI
    src="URL"                                   #
    alt="STR"                                   #
    width|height="NUM"                          #Like <img>
  type="reset"                                  #See FORM.reset|onreset
    value="LABEL"                               #Label
  type="range"                                  #Slider
    min|max="NUM"                               #
    step="NUM"                                  #
    INPUT.stepUp|Down()                         #

<button>                                        #Like <input type="submit|reset|button"> (same members) except label are children not INPUT.value
  type="submit|reset|button"                    #Def: 'button'

<textarea>                                      #Like <input type="text"> (same members), but multiline.
  TEXTAREA.defaultValue                         #Use children instead of value="STR"
  cols="NUM"                                    #Width in Unichars (def: 20)
  rows="NUM"                                    #Same for lines.
  wrap="STR"                                    #How the browser automatically insert linebreaks for wrapping : "soft" (def) or "hard"
  TEXTAREA.type                                 #Always 'textarea'
  
<select>                                        #Dropdown with <option>/<optgroup>
  name="VAR"   
  disabled                                      #Like <input>
  size="NUM"                                    #If >= 2, is a scrollable area instead of a dropdown, showin NUM items
                                                #Def: 0
  multiple                                      #
  type                                          #'select-one|multiple'
  SELECT.value                                  #First selected OPTION.value
  SELECT.selectedIndex                          #First selected OPTION index (or -1)
  SELECT.options                                #OPTION_HTMLCOLLECTION
  SELECT[NUM]                                   #Like SELECT.options[NUM]
  SELECT.length                                 #Like SELECT.options.length
  SELECT.add(OPTION[, OPTION2])                 #Adds OPTION, before OPTION2 (def: end)
  SELECT.remove(UINT)                           #Removes OPTION

<optgroup>                                      #<option> group
  label="STR"
  disabled
<option>                                        #Choice
  value="STR"                                   #If empty STR, it is the default option.
  label="STR"                                   #Def: children
  OPTION.text                                   #Same as OPTION.label
  selected                                      
  OPTION.defaultSelected                        #Initial value of "selected"
  disabled
  OPTION.index                                  #UINT. Readonly.

<progress>                                      #Children are not used
  value="NUM"                                   #From 0 to max (def: 0).
                                                #Will look undeterminate until set.
  max="NUM"                                     #
  PROGRESS.position                             #Returns value / max. Readonly.
  
<label>                                         #Phrasing content before a <control>
                                                #Clicking on it clicks on <control>
                                                #Should always be used.
  for="ID"                                      #<control> ID
  LABEL.htmlFor                                 #Instead of LABEL.for

<fieldset>                                      #<control> container (but can contain other elements)
  disabled                                      #
<legend>                                        #<fieldset> title


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TABLE             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<table>                                         #
  TABLE.caption|tHead|tFoot|tBodies             #TBODY|TFOOT|TABLECAPTION|null
  TABLE.createCaption|THead|TFoot()             #Creates or returns
  TABLE.deleteCaption|THead|TFoot()             #
  TABLE.rows                                    #TR_HTMLCOLLECTION.
  TABLE.insertRow(UINT)                         #Creates and returns a TR
  TABLE.deleteRow(UINT)                         #Removes a TR

<caption>/                                      #<table> title

<thead>                                         #Section of <table> with first TR
<tbody>                                         #Section of <table> with middle TR
<tfoot>                                         #Section of <table> with last TR
  TBODY|TFOOT.rows                              #
  TBODY|TFOOT.delete|insertRow(UINT)            #Like TABLE

<tr>                                            #<table> row, containing <td> or <th>
  TR.cells                                      #TD|TH_HTMLCOLLECTION.
  TR.deleteCell(UINT)                           #
  TR.insertCell(UINT)                           #
  TR.rowIndex                                   #UINT. -1 if not in a <table>
  TR.sectionRowIndex                            #Same but inside current TBODY|TFOOT

<td>                                            #<table> cell, inside a <tr>
  rowspan="NUM"                                 #How much cells it extends horiz. (0 -> all) (def 1)
  colspan="NUM"                                 #Same for vertic.
  headers="ID[ ID2...]"                         #ID of the <th> related to this cell. Only semantic (i.e. for screen readers)
  TD.cellIndex                                  #UINT. -1 if not in a <table>
<th>                                            #Like <td> (same members) but semantically a header. Usually:
                                                #  - in <thead|tfoot>: vertical header
                                                #  - first|last child of <tr>: horizontal header
                                                #  - but can be elsewhere, in which case should specify intent (i.e. for screen readers)
                                                #    with scope="col|row[group]"
  scope="STR"                                   #

<colgroup>                                      #<col> group. Child of <table>
                                                #Does not change content, just used for CSS selecting all relevant <td|th>
  span="NUM"                                    #Number of columns (def: all). If present, no <col> inside.
<col>/                                          #Columns. 
  span="NUM"                                    #Number of columns (def: 1)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           EMBEDDED            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



<img>/                                          #Image
                                                #Formats: JPEG, GIF, PNG, SVG, BMP, ICO (BMP/PNG)
  src="URL"
  alt="STR"                                     #If image not available
  height|width="NUM"                            #In CSS pixels
                                                #For responsive images, use max-width: 100%, height: auto
                                                #height|width will define max, but keep responsive
  IMG.naturalHeight|width                       #Same, but size of the file, without browser resizing
  IMG.complete                                  #True if read and displayed, and format accepted by browser.
DOCUMENT.images                                 #IMG_HTMLCOLLECTION


<iframe>                                        #Embedded HTML document
  src="URL"                   
  height="NUM"
  width="NUM"                                   #In CSS pixels
  name="STR"                                    #
  sandbox[="STR ..."]                           #Security restrictions (some can be lifted using "STR" allow-*):
                                                #  - plugins disabled
                                                #  - scripts disabled (allow-scripts)
                                                #  - no form submission (allow-forms)
                                                #  - unique origin, so same-origin policy apply (allow-same-origin)
                                                #    Also block document.cookie and localStorage access
                                                #  - no popups
                                                #  - can't go up to container DOCUMENT
                                                #  - can't use <object> or similar
                                                #  - can't use seamless attribute
                                                #  - can't use autoplay attribute, autofocus, etc.
  IFRAME.contentDocument|Window                 #DOCUMENT|WINDOW
                                                #Throws exception if same-origin policy does not match.
                                                #Can use postMessage() instead
WINDOW2.frameElement                            #Inverse: IFRAME|null
WINDOW2.parent                                  #Parent WINDOW. If none, WINDOW2.
WINDOW2.top                                     #WINDOW2.parent.parent...
WINDOW.frames                                   #IFRAME ARR-like
WINDOW[NUM]                                     #Like WINDOW.frames[NUM]
WINDOW.length                                   #Like WINDOW.frames.length


<object>                                        #External resource, identified by MIME type
                                                #Supported by browser natively or via plugins
                                                #Ex: Flash, PDF
                                                #If not supported, content inside <object> is displayed.
  data="URL"
  type="STR"                                    #MIME-type
  name="STR"                                    #
  height="NUM"
  width="NUM"                                   #In CSS pixels
  OBJECT.contentDocument                        #DOCUMENT|null
  WINDOW2.frameElement|parent|top               #Like <iframe>
<param>/                                        #<object> option
  name="STR"
  value="STR"


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             MEDIA             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<audio>                                         #
  volume="NUM"                                  #From 0 to 1

<video>                                         #
  height|width="NUM"                            #In CSS pixels. 
                                                #Video always keep ratio.
  VIDEO.videoHeight|Width                       #Natural size (i.e. beside browser resizing)
  poster="URL"                                  #Thumbnail

<media>                                         #<audio|video>
  src="URL"                                     #Source. 
                                                #Can be multiple times, so browser chooses the best one.
                                                #Prefer using <source>
                                                #Best formats:
                                                #  - <audio>: from best to worst quality:
                                                #     - .wav (lossless)           (not IE)                      audio/wave
                                                #     - .webm Opus                (not IE, Safari, any mobile)  audio/webm 
                                                #     - .ogg/.opus Opus           (not IE, Safari, any mobile)  audio/ogg
                                                #     - .webm Vorbis              (not IE, Safari [Mobile])     audio/webm
                                                #     - .ogg/.oga Vorbis          (not IE, Safari [Mobile])     audio/ogg
                                                #     - .acc                      (not Firefox)                 audio/aac
                                                #     - .mp3                      (all)                         audio/mpeg
                                                #  - <video>: 
                                                #     - .webm Opus VP8/VP9        (not IE, Safari, any mobile)  video/webm
                                                #     - .webm Vorbis VP8/VP9      (not IE, Safari [Mobile])     video/webm
                                                #     - .ogg/.ogv Theora          (not IE, Safari, any mobile)  video/ogg
                                                #     - .mp4                      (all)                         video/mp4
  MEDIA.src                                     #Reflects HTML attribute
  MEDIA.currentSrc                              #As opposed to MEDIA.src:
                                                #  - use <source> if used
                                                #  - gives server answer, not client request
                                                #  - null if networkState is NETWORK_EMPTY
                                                #  - readonly
  MEDIA.canPlayType('MIME')                     #Returns "probably" (true), "" (false) or "maybe" (unknown).

<source>/                                       #Like <audio|video src="URL">. <audio|video> child
  src="URL"                                     #
  type="URL"                                    #MIME type
  media="MEDIAQUERYLIST"                        #See CSS doc

<media>
  controls                                      #Show controls (play, etc.)

  preload="STR"                                 #Can be:
                                                #  - "none"
                                                #  - "metadata": only preload metadata
                                                #  - "auto" or "": preload whole file
  MEDIA.load()                                  #Reloads
                                                #Required if src has been changed
  MEDIA.onemptied = FUNC(EVENT)                 #Reloaded, i.e. using MEDIA.load()
  MEDIA.onloadedmetadata = FUNC(EVENT)          #Loaded metadata
  MEDIA.onloadeddata = FUNC(EVENT)              #Loaded first frame of data.
  MEDIA.oncanplay = FUNC(EVENT)                 #Loaded several frames of data
  MEDIA.oncanplaythrough = FUNC(EVENT)          #Can play until the end (according to current download rate, i.e. might still be fetching)
  MEDIA.onsuspend = FUNC(EVENT)                 #Data fetching stopped, including for normal end of fetch.
  MEDIA.readyState                              #How much data is loaded:
                                                #  - HAVE_NOTHING
                                                #  - HAVE_METADATA: same as loadedmetadata
                                                #  - HAVE_CURRENT_DATA: same as loadeddata
                                                #  - HAVE_FUTURE_DATA: same as canplay
                                                #  - HAVE_ENOUGH_DATA: same as canplaythrough
  MEDIA.onreadystatechange = FUNC(EVENT)        #When MEDIA.readyState changes
  MEDIA.buffered                                #Buffer as TIMESRANGE:
                                                #  - length (usually 1)
                                                #  - start|end(UINT): return start|end of buffer numbered UINT (in secs)
                                                #If seek forward/backward, creates new ranges in TIMESRANGE.

  autoplay                                      #
  MEDIA.pause()                                 #
  MEDIA.paused                                  #BOOL. Readonly.
  MEDIA.onpause = FUNC(EVENT)                   #Including when paused because finish playing
  MEDIA.play()                                  #
  MEDIA.onplay = FUNC(EVENT)                    #When played after having been paused
  MEDIA.onplaying = FUNC(EVENT)                 #When played after having been paused or initially
  MEDIA.played                                  #Same as MEDIA.buffered but for what has been played.

  MEDIA.seeking                                 #BOOL. Readonly
  MEDIA.onseeking|seeked = FUNC(EVENT)          #Start|ends changing current place
  MEDIA.ontimeupdate = FUNC(EVENT)              #Current place changed, e.g. when playing or seeking|seeked
  MEDIA.seekable                                #Same as MEDIA.played for seekable

  MEDIA.onwaiting = FUNC(EVENT)                 #Paused because lack of data
  MEDIA.ended                                   #BOOL. Readonly.
  MEDIA.onended = FUNC(EVENT)                   #
  MEDIA.onstalled = FUNC(EVENT)                 #Cannot fetch data
  MEDIA.error                                   #The most recent MEDIAERROR, ou null. Readonly.
  MEDIA.networkState                            #Media loading state :
                                                #  - NETWORK_EMPTY: not started yet
                                                #  - NETWORK_LOADING
                                                #  - NETWORK_IDLE: stop loading
                                                #  - NETWORK_NO_SOURCE

  loop                                          #
  MEDIA.currentTime                             #DOUBLE (in sec)
  MEDIA.duration                                #DOUBLE. Readonly. Can be:
                                                #  - 0: not available
                                                #  - Inf: streaming
                                                #  - NaN: inconnu
  MEDIA.ondurationchange = FUNC(EVENT)          #Emitted when first loaded too

  muted                                         #
  MEDIA.onvolumechange = FUNC(EVENT)            #

  MEDIA.playbackRate                            #Speed:
                                                #  - <0: backward 
                                                #  - 0 et 1: slow motion
                                                #  - 1: normal (def)
                                                #  - >1: fast forward
                                                #Sound is muted outside of a specific range (e.g. 0.25 to 5), depending on browsers.
  MEDIA.defaultPlaybackRate                     #Initial value of "playbackRate"
  MEDIA.onratechange = FUNC(EVENT)              #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            CANVAS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<svg>                                           #Document SVG
                                                #Like a .svg file, but without <?xml ?>. 


<canvas>                                        #Area where to draw vector graphics via JavaScript.
                                                #Content is displayed if canvas not supported
  width="NUM"
  height="NUM"                                  #In CSS pixel
  CANVAS.getContext(STR)                        #"2d" to return a CONTEXT, "3d" a 3DCONTEXT (WebGL)
  CANVAS.toDataURL([STR[, NUM]])                #Returns as data URI
                                                #STR is "image/png" (def) or "image/jpeg"
                                                #NUM is jpeg quality, from 0 à 1.

  CanvasRenderingContext2D                      #Enfant de PATHMETHODS et DRAWINGSTYLES
  CONTEXT.canvas                                #Renvoie le CANVAS sous-jacent
  CONTEXT.save|restore()
  CONTEXT.scale(DOUBLE, DOUBLE2)
  CONTEXT.rotate(DOUBLE)
  CONTEXT.translate(DOUBLE, DOUBLE2)
  CONTEXT.[setT|t]ransform(6 DOUBLE)
  CONTEXT.globalAlpha
  CONTEXT.globalCompositeOperation              #Not blend modes
  CONTEXT.stroke|fillStyle
  CONTEXT.createLinearGradient(4 DOUBLE)
  CONTEXT.createRadialGradient(6 DOUBLE)
  CONTEXT.createPattern(VIDEO|CANVAS|IMAGE)
  CONTEXT.shadowOffsetX|Y
  CONTEXT.shadowBlur
  CONTEXT.shadowColor
  CONTEXT.clearRect(4 DOUBLE)
  CONTEXT.fillRect(4 DOUBLE)
  CONTEXT.strokeRect(4 DOUBLE)
  CONTEXT.beginPath()
  CONTEXT.fill|stroke([STR])
  CONTEXT.clip([STR])
  CONTEXT.isPointInPath|Stroke(2 DOUBLE[, STR])
  CONTEXT.fill|strokeText(4 DOUBLE)             
  CONTEXT.measureText(STR)
  CONTEXT.drawImage(VIDEO|CANVAS|IMAGE, 2|4|8 DOUBLE)
  CONTEXT.createImageData(IMAGEDATA|2 DOUBLE)
  CONTEXT.getImageData(4 DOUBLE)
  CONTEXT.putImageData(IMAGEDATA, 2|4 DOUBLE)
  
  CONTEXT.lineWidth
  CONTEXT.lineCap
  CONTEXT.lineJoin
  CONTEXT.miterLimit
  CONTEXT.*etLineDash(DOUBLE...)
  CONTEXT.lineDashOffset
  CONTEXT.font
  CONTEXT.textAlign
  CONTEXT.textBaseline

  CONTEXT.moveTo(2 DOUBLE)                      #Commence un nouveau path (coordonnées locales).
  CONTEXT.lineTo(2 DOUBLE)                      #Continue un path avec une nouvelle ligne.
  CONTEXT.quadraticCurveTo(4 DOUBLE)
  CONTEXT.bezierCurveTo(6 DOUBLE)
  CONTEXT.arcTo(6 DOUBLE)
  CONTEXT.rect(4 DOUBLE)
  CONTEXT.arc(5 DOUBLE[, BOOL])
  CONTEXT.closePath()                           #Clot le path.

  CanvasGradient
  GRADIENT.addColorStop(DOUBLE, STR)
  CanvasPattern
  
  TextMetrics
  TEXTMETRICS.width
  
  ImageData
  IMAGEDATA.width|height
  IMAGEDATA.data


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            OTHERS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<any>
  draggable="STR"                               #See DOM doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         NOT SUPPORTED         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NOT SUPPORTED ==>                               #IE11<=:
																								#  - Context menus:
																								#     - <menu>
																								#     - <menuitem>
																								#     - <any>: contextmenu (and ELEM: onshow = FUNC(EVENT))
																								#     - <button>: type="menu"
																								#       BUTTON: menu
																								#  - Ruby annotations:
																								#     - <rp>
																								#     - <rt>
																								#     - <rtc>
																								#     - <ruby>
																								#  - HTTP2:
																								#     - <meta>: http-equiv="Accept-CH", name="referrer"
																								#  - CORS:
																								#     - <audio|img|link|script|video>: crossorigin
																								#  - CANVAS: captureStream(), probablySupportsContext(), setContext(), transferControlToProxy(), toBlob()
																								#    CANVASPATTERN: setTransform()
																								#    CANVASRENDERINGCONTEXT2D: currentTransform, direction, filter, globalCompositeOperation (blend modes),
																								#    imageSmoothingEnabled, addHitRegion(), clearHitRegion(), drawFocusIfNeeded(), ellipse(), removeHitRegion(),
																								#    resetTransform(), scrollPathIntoView(), isPointInStroke()
																								#    PATH2D
																								#    IMAGEBITMAP
																								#    WINDOW|WORKERGLOBALSCOPE: createImageBitmap()
																								#    IMAGEDATA: new
																								#    TEXTMETRICS: *BoundingBox|Height|Baseline*
																								#    MOUSEEVENT: region
																								#  - <svg>: CSS transitions|animations
																								#  - BUTTON|INPUT|PROGRESS|SELECT|TEXTAREA: labels
																								#    VALIDITYSTATE: badInput
																								#    FORM: reportValidity()
																								#  - Microdatas:
																								#     - <any>: item*
																								#  - <any>: dropzone, translate
																								#    HTMLELEM: forceSpellCheck(), properties
																								#    DOMTOKENLIST: toggle() second arg, add|remove() multiple args, on <svg>
																								#  - <a>: ping
																								#  - <area>: rel
																								#  - <a|area>: download, media
																								#    A|AREA: origin|password|username
																								#  - A|AREA|LINK: relList
																								#  - AUDIO|VIDEO: fastSeek(), defaultMuted
																								#  - <bdi>
																								#  - <data>
																								#  - <details>, <summary>
																								#  - <dialog>
																								#  - <fieldset>: name
																								#    FIELDSET: type, elements
																								#  - <iframe>: seamless, srcdoc, allowfullscreen, sandbox="allow-popups-to-escape-sandbox"
																								#  - <img|source>: sizes, srcset
																								#  - IMG: x, y, currentSrc
																								#    Formats: APNG
																								#  - <input>: type="color|date|datetime-local|month|time|week", autosave
																								#    INPUT: valueAsDate(), valueAsNumber()
																								#  - <input|textarea>: minlength, selectionDirection, inputmode
																								#    INPUT|TEXTAREA: autocapitalize, setRangeText() 
																								#  - LABEL: control
																								#  - <link>: sizes, rel="preconnect|preload"
																								#    Favicon: SVG
																								#  - <main>
                                                #  - <meta>: itemprop
																								#  - <meter>
																								#  - NODE: baseURI
																								#  - <object>: typemustmatch
																								#    OBJECT: contentWindow
																								#  - <ol>: reversed
																								#  - <output>
																								#  - <picture>
																								#  - RADIONODELIST
																								#  - SELECT: selectedOptions
																								#  - <style>: scoped
																								#  - TABLE: sortable, stopSorting()
																								#  - <td>: colspan (value 0)
																								#  - <textarea>: autocomplete
																								#    TEXTAREA: textLength
																								#  - <time>
																								#  - <wbr>
																								#Safari Mobile 9.2<=:
																								#  - HTMLELEM: accessKeyLabel
																								#  - <button|input|select|textarea>: autofocus
																								#  - <input>: pattern, type="number"
																								#  - <input|select|textarea>: required, VALIDITYSTATE.valueMissing
																								#  - <link>: rel="prefetch|prerender"
																								#  - <progress>: value (indeterminate)
																								#  - <track>
																								#Firefox 46<=:
																								#  - <video mediagroup>
																								#Android browser 4.3 <=:
																								#  - <input type="file">: multiple
																								#Safari 8<=:
																								#  - <datalist>
                                                #  - <img>: longdesc
																								#  - <input>: accept, list
