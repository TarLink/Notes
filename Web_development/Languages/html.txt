
          
   HTML   
          


VERSION ==>                                     #HTML5

XHTML ==>                                       #Follows HTML5 but:
                                                #  - MIME "application/[xhtml+]xml" instead of "text/html"
                                                #  - more restrictive
                                                #  - can be parsed as XML
                                                #Polyglot: XHTML HTML-compatible


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:       INTEROPERABILITY        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


BROWSER COMPTABILITY ==>                        #Desktop:
																								#  - Chrome 44, Opera 31
																								#  - Safari 8
																								#  - IE 11
                                                #  - Edge 25
																								#  - Firefox 40
																								#Mobile/tablet:
																								#  - Chrome Mobile 44, Opera Mobile 31
																								#  - Safari Mobile 8.4
																								#  - Opera Mini 8
																								#  - Android browser 4.4
																								#  - UC browser 9.9

DOCUMENT.compatMode                             #Can be:
                                                #  - "CSS1Compat": normal
                                                #  - "BackCompat": Quirks mode:
                                                #     - when browser thinks this is a legacy website, tries to load it using 
                                                #       legacy HTML/CSS/JavaScript
                                                #     - often triggered by DOCTYPE

HTML5 SHIV ==>                                 ##Polyfill for some HTML5 tags (3.7.2) for IE<9
                                               ##Options are passed with WINDOW.htlm5 = OBJ (before loading script):
                                               ##  - elements "TAG ...":
                                               ##     - def. ones work without polyfill with IE9, except: <abbr> (IE7), 
                                               ##       <progress|datalist> (IE10), <bdi|data|details|summary|main|meter|
                                               ##       output|dialog|template> (no current version of IE)
                                               ##  - shivCSS BOOL (def: true): adds CSS polyfill, e.g. display: block
                                               ##  - shivMethods BOOL (def: true): adds support for IE6-8 by monkey patching
                                               ##    DOCUMENT.createElement|DocumentFragment()->ELEM
                                               ##    Difference: ELEM.parentNode is DOCUMENTFRAGMENT, but should be null.
                                               ##    jQuery monkey patches too.
                                               ##Problem: 
                                               ##  - just allows using empty/featureless tags, but the ones with functionality
                                               ##    (e.g. <audio|video|canvas>) will not work
                                               ##  - cannot clone ELEM in JavaScript for browsers that use the polyfill.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             MAIN              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<TAG attr[="value"]>...</TAG>                   #Not self-closing
<TAG>/                                          #Means <TAG/> or <TAG> (self-closing)

OPTIONAL TAGS ==>                               #Are optional, but will be implicitely added: <html>, <head>, <body>, <tbody>
OPTIONAL END TAG ==>                            #List:
                                                #  - Table-related: <thead>, <tbody>, <tfoot>, <tr>, <th>, <td>
                                                #  - List-related: <option>, <optgroup> <li>, <dt>, <dd>, <colgroup>
                                                #  - <p>

<!-- COMMENT -->                                #Cannot include -- nor start with > or ->

CATEGORIES ==>                                  #Content categories:
                                                #  - metadata: in <head>
                                                #  - flow/inline: in <body>
                                                #     - sectioning: <section>, <article>, <nav>, <aside>
                                                #     - heading: <h*>
                                                #     - phrasing: <span>, etc. Can only include other phrasing
                                                #        - embedded: <canvas>, <video>, <img>, etc.
                                                #     - interactive: <a>, forms, <embed>/<object> and <iframe>, <img usemap>
                                                #        - form
                                                #Also:
                                                #  - transparent: can be suppressed with document still valid
                                                #  - replaced: embedded or form (not affected by CSS)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              CSS              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<link rel="stylesheet" href="URL.css">          #
  media="MEDIAQUERYLIST"                        #
öö  LINK.disabled                               #
  LINK.sheet                                    #See CSS doc

<style>                                         #
  media="MEDIAQUERYLIST"                        #
  disabled                                      #
  title="STR"                                   #
  type="STR"                                    #
  STYLE.sheet                                   #See CSS doc

<any> 
  style="NAME: VAL;[NAME: VAL;]..."             #See CSS doc


<any>
  hidden                                        #See CSS doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          JAVASCRIPT           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<script>                                        #
<a href="JavaScript:CODE"></a>                  #
<any onEVENT="CODE"></any>                      #See DOM doc

<noscript>                                      #See DOM doc


HTMLElement                                     #Child of ELEM, parent of all HTML tags.
ää HTMLUnknownElement                              #Child of HTMLELEM
TAG                                             #Usually class name is HTMLTAGElement
                                                #But the ones that do have any special attributes are just HTMLElement
ELEM.ATTR                                       #Manipulates IDL attribute
ELEM.getAttribute('ATTR')->'VAL'                #
ELEM.setAttribute('ATTR', 'VAL')                #
ELEM.hasAttribute('ATTR')->BOOL                 #
ELEM.removeAttribute('ATTR')                    #
ELEM.removeAttributeNode(ATTR)->ATTR            #Manipulates HTML attribute
                                                #The HTML attribute and JavaScript one (IDL attribute) are in sync but:
                                                #  - some exist only in JavaScript
                                                #  - lowercase in HTML, camelcase in JavaScript
                                                #  - STR in HTML, BOOL|STR|NUM|HTMLELEM in JavaScript
                                                #  - some are readonly
                                                #  - not kept in sync: CONTROL.value|checked, DOCUMENT.title, ELEM.onEVENT
                                                #  - if empty in HTML, JavaScript might give default value
ää HTMLELEM.hasAttributes()                        #
ää HTMLELEM.getAttributeNode()                     #
ää HTMLELEM.setAttributeNode()                     #

ää ELEM.attributes                                 #
ää NAMEDNODEMAP.length                             #
ää NAMEDNODEMAP[NUM]                               #
ää NAMEDNODEMAP.getNamedItem()                     #
ää NAMEDNODEMAP.setNamedItem()                     #
ää NAMEDNODEMAP.removeNamedItem()                  #

<any>
  data-VAR="VAL"                                #Custom attribute:
                                                #  - VAR should start with namespace, e.g. data-myapp-myprop
                                                #  - [a-z-] (no uppercase)
  ANY.dataset.VAR                               #Camelcased

HTMLCollection                                  #List of HTMLELEM
HTMLCOLLECTION.length
HTMLCOLLECTION[UINT]                            #
HTMLCOLLECTION.ID                               #


<any>
  draggable="STR"                               #See DOM doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<any>
  class="STR STR..."                            #Used for CSS|JavaScript selection
                                                #Only [:alpha:][[:alnum:]-_].
  HTMLELEM.className                            #'CLASS ...'
  HTMLELEM.classList                            #DOMTOKENLIST
  id="STR"                                      #Same but must be unique. To avoid unless really need singleton.

DOMTOKENLIST                                    #Like HTMLCOLLECTION with extra methods
                                              åå#SEE IE RESTRICTIONS
DOMTOKENLIST.add|remove('CLASS')                #
DOMTOKENLIST.toggle('CLASS')->BOOL              #
DOMTOKENLIST.contains('CLASS')->BOOL            #
DOMTOKENLIST.toString()->'CLASS ...'            #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              SEO              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<title>                                         #Tab title, containing only text.
                                                #Also used by search engines.
                                                #Should be different for each page.
  TITLE.text                                    #STR
DOCUMENT.title                                  #Current title (does not update <title>) 

<meta name="description" content="STR">/        #Search engine description. 
                                                #140 chars max.
                                                #Should be different for each page.
<meta name="keywords" content="STR...">/        #Search engine keywords

<meta name="robots"                             #Search engine indexation of current page (index) or linked pages (follow).
 content="[no]index,[no]follow">/               #Should also use DOMAIN/robots.txt with:
                                                #  User-agent: *
                                                #  [Dis]Allow: /section/*
                                                #Globbing * ? and regex $ only.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             I18N              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<meta charset="utf-8">/                         #Should be first in <head>
                                                #Can also use &#x00[00[00]]
DOCUMENT.characterSet                           #STR (e.g. 'UTF-8')
                                                #Can be different than the one set by the document if user overrided it.

<any>
  lang="STR"                                    #Language code.
                                                #Used by:
                                                #  - CSS: :lang(), hyphens, etc.
                                                #  - browser font selection
                                                #  - external tools: SEO, spellcheck, translation
                                                #  - a11y
ää  NAVIGATOR.language                            #
  dir="ltr|rtl|auto"                            #Text direction
ää  DOCUMENT.dir                                  #

<a|area|link>
  hreflang="STR"                                #
  
<bdo>                                           #Phrasing content which should use dir="..."


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             A11Y              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<any>
  title="STR"                                   #Tooltip                           
öö  role="STR"                                    #

<any>
  accesskey="CHAR"                              #Give focus. Shortcut depends on browser :
                                                #  - Safari/Chrome  : Alt (Ctrl-Opt on Mac)
                                                #  - IE             : Alt
                                                #  - Firefox        : Shift-Alt (Ctrl-Opt on Mac)
                                                #  - Opera          : Shift-Esc
  tabindex="NUM"                                #Tab order


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        SECTIONING TOP         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<!DOCTYPE html>/
DOCUMENT.doctype                                #DOCUMENTTYPE. Readonly
DocumentType                                    #NODE child.
DOCUMENTTYPE.name                               #Typically "html"

<html>                                          #Should contain only <head> and <body>, in that order.
DOCUMENT.documentElement                        #HTML

<head>                                          #
DOCUMENT.head                                   #
<body>                                          #
DOCUMENT.body                                   #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            HEADER             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<link rel="shortcut icon" href="favicon.ico">/  #Only .ico is crossbrowser. Should:
                                                #  - use 16x16 and 32x32 sizes
                                                #  - default name favicon.ico  
                                                #  - put in website root dir
ää                                                #PNG (see caniuse)

<link>
ää  type                                          #

                                              åå#Find list of <link>, including rel="dns-prefetch" + MDN link types

<meta name="author" content="Me">/
<meta name="contact" content="me@me.com">/
<meta name="copyright" content="Moi même">/

<meta name="generator" content="FrontPage 4.0">/

<meta name="anyother" content="is possible">/

<meta>
ää   http-equiv                                   #

                                              åå#Find list of <meta>


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       SECTIONING UPPER        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<div>                                           #Deprecated
<header>                                        #Beginning
<section>                                       #Middle: general
<nav>                                           #Middle: containing links
<aside>                                         #Middle: side text (glossary, ads, etc.)
<footer>                                        #End
<figure>                                        #Not linked to document flow (e.g. floating picture)

<figcaption>                                    #Text inside <figure>


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       SECTIONING LOWER        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<p>                                             #Prefer other sectioning lower tags.
<article>                                       #Blog post, comment, etc.
<pre>                                           #Programming language content
<blockquote>                                    #Multiline quote
  cite="URL"                                    #Source
<address>                                       #Postal address


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        SECTIONING LIST        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<h1-h6>                                         #Headings.

<ol>                                            #Ordered list (bullet point-like) of <li>. 
                                                #Can be nested.
  start="NUM"                                   #Starting index
<ul>                                            #Same as <ol> but unordered
<li>                                            #
  value="NUM"                                   #Index (only inside <ol>)

<dl>                                            #Definition list, containing pairs of <dt> + <dd>
<dt>                                            #Title followed by one or more <dd>
<dd>                                            #Content


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           PHRASING            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<span>                                          #Prefer other phrasing tag.
<strong>                                        #Semantic version of bold
<em>                                            #Semantic version of italic
<mark>                                          #Highlighted text
ää <b>                                             #
ää <i>                                             #

<ins|del>                                       #New|removed content
  datetime="STR"                                #Change date
  cite="URL"                                    #URL explaining change
ää <s>                                             #
ää <u>                                             #

<code>                                          #Programming language
<kbd>                                           #Command line input
<samp>                                          #Command line output
<var>                                           #Math|programming variable

<q>                                             #Quote
  cite="URL"                                    #Source
<cite>                                          #Reference
<abbr>                                          #Abbreviation
  title="STR"                                   #Full name.
<dfn>                                           #Term defined elsewhere
  title="STR"                                   #Defined term

<sub|sup>                                       #Subscript/superscript                                           
ää <small>                                         #

<br>/                                           #Linebreak. Use as a newline in a paragraph, not to increase space 
                                                #between paragraphs (prefer CSS for this).
<hr>/                                           #Semantic break between two paragraphs, often showing a horizontal line


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             LINKS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


URL                                             #Can be:
                                                #  - normal URL: relative|absolute, any protocol
                                                #  - "[URL]#ID": anchor
                                                #  - <iframe|object> name
                                                #  - data URI:
                                                #     - "data:[MIMETYPE];base64,CODE":
                                                #        - CODE: data encoded in base64 (e.g. using WINDOW.btoa|atob())
                                                #           - base64 discard whitespaces
                                                #        - def MIMETYPE: text/plain
                                                #     - "data:[MIMETYPE];charset=utf-8,CODE":
                                                #        - CODE: data URI encoded (e.g. with encode|decodeURIComponent())

<base>/                                         #Base for relative URLs (def: ".") and default target for following URLs.
                                                #Only first <base> counts.
  href="URL"                                    #Can be relative|absolute
  target="STR"                                  #
öö NODE.baseURI                                    #Base of relative URL relatives. 
                                                #Same as LOCATION.href except:
                                                #  - <base> used
                                                #  - DOCUMENT dynamically created: null


<a>                                             #Link
  href="URL"                                    #
  target="STR"                                  #How to open link:
                                                #  - "_self" (def): same tab
                                                #  - "_blank": new tab
                                                #  - "_parent": direct parent frame
                                                #  - "_top": top parent frame (erase all other frames)
  type="STR"                                    #MIME type (semantic info)
  media="MEDIAQUERYLIST"                        #See CSS doc
  rel="STR [STR2]..."                           #Relationship between current page and linked page.
                                                #Semantic info.
                                                #Often used:
                                                #  - "nofollow": search engine should consider link external, and not
                                                #    endorsed by current site (often paid ads)
                                                #  - point to specific page:
                                                #    - "help"
                                                #    - "search"
                                                #    - "sidebar": content to be displayed in a sidebar
                                                #    - "license"
                                                #    - "bookmark": key index page, used often as bookmark
                                                #  - "prev|next": sequence (webcomics, forum, etc.)
                                                #  - "external": externe, not endorsed
                                                #  - "author": author of the link
                                              åå#(see MDN microformats)
  A.rel                                         #"STR ..."
öö  A.relList                                     #DOMTOKENLIST (like classList)
  A.protocol                                    #"PROTOCOL:"
  A.hostname                                    #"HOSTNAME"
  A.port                                        #"NUM"
  A.host                                        #"HOSTNAME:PORT"
  A.pathname                                    #"/PATH"
  A.search                                      #"?SEARCH"
  A.hash                                        #"#HASH"
DOCUMENT.links                                  #A|AREA_HTMLCOLLECTION
ää DOCUMENT.anchors                                #


<map>                                           #Parent of <area>
                                                #Transparent overlay above <img|object usemap="MAP_NAME">
  MAP.areas                                     #AREA_HTMLCOLLECTION
  MAP.images                                    #IMG|OBJECT_HTMLCOLLECTION
<area>/                                         #Hot spot
  shape="rect|circle|poly|default"              #
  coords="NUM..."                               #According to shape (in CSS pixels):
                                                #  - "rect" : left,top,right,bottom
                                                #  - "circle" : x,y,radius
                                                #  - "poly" : x1,y1,...,xn,yn
  alt="STR"                                     #Text to show if cannot load image
  href="URL"                                    #
  target="STR"                                  #
  type="STR"                                    #
  media="MEDIAQUERYLIST"                        #
  rel="STR"                                     #Like <a>
  AREA.rel                                      #
öö  AREA.relList                                  #
  AREA.protocol                                 #
  AREA.hostname                                 #
  AREA.port                                     #
  AREA.host                                     #
  AREA.pathname                                 #
  AREA.search                                   #
  AREA.hash                                     #Like A
<img|object>                                    #See other members below
  usemap="#ID"                                  #
<img>                                           #See other members below
  ismap                                         #If inside <a|area>, adds URL?NUM,NUM2 with mouse coordinates on click event


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             FORM              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/

<any>
  contenteditable="true|false|"                 #Make content editable by user, and all children tags.
  HTMLELEM.contentEditable                      #'true|false|inherit'
  HTMLELEM.isContentEditable                    #BOOL

<control>                                       #Means <input|textarea|select|button|fieldset|object>
  spellcheck="true|false|"                      #Red line under wrong word, depending on lang attribute.
                                                #Can be:
                                                #  - "true" (def for TEXTAREA or contenteditable)
                                                #  - "false" (def for other controls)
                                                #  - "": inherit
                                              åå#See caniuse and MDN 'controlling spell checking'

  CONTROL.validity                              #Returns VALIDITYSTATE
    VALIDITYSTATE.valid                         #False if any other property is true
    VALIDITYSTATE.valueMissing                  #True if required field, but no value
    VALIDITYSTATE.typeMismatch                  #True if incorrect pattern (via default pattern in some <input>)
    VALIDITYSTATE.patternMismatch               #True if incorrect pattern (via CONTROL.pattern)
    VALIDITYSTATE.tooLong                       #True if beyond .maxlength (can't be true in most browsers, which prevent user 
                                                #from going over .maxlength)
ää    VALIDITYSTATE.rangeOverflow|Underflow       #
ää    VALIDITYSTATE.stepMismatch                  #
    VALIDITYSTATE.customError                   #setCustomValidity() has been called
  CONTROL.setCustomValidity(STR)                #If:
                                                #  - "": makes valid
                                                #  - otherwise: makes invalid, with validationMessage STR.
  CONTROL|FORM.checkValidity()                  #Returns .validity.valid, and if false, fires invalid EVENT on CONTROL|FORM
                                                #Called automatically by submit event: if false:
                                                #  - preventDefault(), stopPropagation()
                                                #  - show validationMessage next to ELEM 
  CONTROL.willValidate                          #True if checkValidity() will be called during submit (usually true).
  CONTROL.validationMessage                     #
<form>
ää  novalidate                                    #


<form>                                          #Parent of <control>
                                                #Don't nest.
																								#Fire 'submit' event:
																								#  - click on <input|button type="submit">
																								#  - Enter key while focus inside the <form>
																								#  - programatically
  action="URL"                                  #Will change current URL on 'submit' event:
  method="post|get"                             #  - unless EVENT.preventDefault()
  enctype="TYPE"                                #     - can do AJAX request instead in event handler
																								#  - use METHOD:
																								#     - GET: payload in query string
																								#     - POST: payload in request body
																								#  - using <control name="VAR">, CONTROL.value VAL and TYPE:
																								#     - "text/plain": 
																								#        - VAR=VAL, newline-separated
																								#     - "application/x-www-form-urlencoded" (def): 
																								#        - VAR=VAL, &-separated, percent-encoded, but space converted to + instead of %20
																								#     - "multipart/form-data; boundary=STR": 
																								#        - more efficient than percent-encoding for binary/big payload, e.g. file upload.
																								#        - STR should be long enough and random. Can include a graphical line with "------" for humans reading the request.
																								#        - format:
																								#            STR	
																								#            Content-Disposition: form-data; name="VAR"[; filename="FILE"]
																								#            [Content-Type: TYPE]
																								#            content as is
																								#            STR
																								#            ...
																								#            STR--
																								#  - <input type="file">:
																								#     - with "multipart/form-data", use filename="FILE" and Content-Type: TYPE
																								#     - with others, just send filename
  accept-charset="STR"                          #Charset in Content-Type [C]. Def is charset of the page (souvent UTF-8).
  target="STR"                                  #Like <a>
  autocomplete="off|on"                         #Suggestion from previous use of the form. 
                                                #If set to false, all <input> should also have their autocomplete attribute set to false. 
                                              åå#See caniuse
  FORM.elements                                 #CONTROL_HTMLCOLLECTION
  FORM[UINT]
  FORM.ID                                       
  FORM.length                                   #Same as using FORM.elements
  FORM.submit()                                 #See above. Emit submit EVENT on FORM
  FORM.reset()                                  #Resets controls. Emit reset EVENT on FORM
DOCUMENT.forms                                  #FORM_HTMLCOLLECTION

<control|label|legend>
  form="ID"                                     #Def: parent <form>
  CONTROL|LABEL|LEGEND|OPTION.form              #

<input>/                                        #Various <control>, depending on type="STR"
  name="VAR"                                    #
  value="VAL"                                   #Default value
  INPUT.defaultValue                            #Default value
  INPUT.value                                   #Current value
  disabled                                      #Disable use.
öö  autofocus                                     #Gives focus when page loads. Works only via HTML not JavaScript.
  type="text"                                   #Single-line input (linebreaks are removed). 
    maxlength="NUM"                             #Max number of Unichars. Def: -1 (infinite).
    size="NUM"                                  #Size of box, in number of Unichars (def: 20). 
    placeholder="STR"                           #What to show when value empty (not supported by password).
    autocomplete="off|on"                       #Like <form> (def: on)
                                              åå#See caniuse
    readonly                                    #Like disabled, but user can still click it (but not modified). 
    INPUT.selectionEnd|Start                    #start|end indexes UINT
    INPUT.setSelectionRange(NUM, NUM2[, STR])   #With start NUM, end NUM2, selectionDirection 'none' (def) or 'forward|backward'
    INPUT.select()                              #Emit select event
  type="password"                               #Like type="text" but doesn't show input
  type="email|tel|url|search"                   #Like type="text" but semantically indicate content which can influence:
                                                #  - layout (e.g. "tel" gets input keyboard on iOS)
                                                #  - default validity pattern (e.g. "email|url")
  type="checkbox"                               #Uses checked instead of value
    checked                                     #Default checked 'on|'
    INPUT.defaultChecked                        #Default checked BOOL
    INPUT.checked                               #Current checked BOOL
ää    INPUT.indeterminate                         #
  type="radio"                                  #Like type="checkbox" but exclusive with others with same name
  type="file"                                   #Upload.
    INPUT.value                                 #Filename. Readonly
    INPUT.files                                 #File content as FILELIST. Readonly
öö    multiple                                    #Can upload several files.
  type="button"                                 #
    INPUT.value                                 #Label
  type="reset"                                  #Fire 'reset' on click, which unless prevented resets the form.
    INPUT.value                                 #Label
  type="image"                                  #Fire 'submit' on click.
    INPUT.value                                 #Label
    src="URL"                                   #
    formaction|target|enctype|method|
    novalidate="STR"                            #Override the action|target|enctype|method|novalidate attribute of the associated FORM.
    alt="STR"                                   #Like <img>
    width|height="NUM"                          #
  type="hidden"                                 #Not displayed
  type="submit"                                 #
    formaction|target|enctype|method|
    novalidate="STR"                            #Like type="image"
ää  type="range"                                  #
ää    min|max="NUM"                               #
ää    step="NUM"                                  #
ää    INPUT.stepUp|Down()                         #

<button>                                        #Like <input type="submit|reset|button"> (same members) except label are children not INPUT.value
  type="submit|reset|button"                    #Def: 'button'

<textarea>                                      #Like <input type="text"> (same members), but multiline.
  TEXTAREA.defaultValue                         #Use children instead of value="STR"
  cols="NUM"                                    #Width in Unichars (def: 20)
  rows="NUM"                                    #Same for lines.
  wrap="STR"                                    #How the browser automatically insert linebreaks for wrapping : "soft" (def) or "hard"
  TEXTAREA.type                                 #Always 'textarea'
  
<select>                                        #Dropdown with <option>/<optgroup>
  name="VAR"  
öö  autofocus                                     
  disabled                                      #Like <input>
  size="NUM"                                    #How many elements to show at once (def: 0)
  multiple                                      #
ää  type                                          #
  SELECT.value                                  #First selected OPTION.value
  SELECT.selectedIndex                          #First selected OPTION index
  SELECT.options                                #OPTION_HTMLCOLLECTION
  SELECT[NUM]                                   #Like SELECT.options[NUM]
  SELECT.length                                 #Like SELECT.options.length
  SELECT.add(OPTION[, OPTION2])                 #Adds OPTION, before OPTION2 (def: end)
  SELECT.remove(UINT)                           #Removes OPTION

<optgroup>                                      #<option> group
  label="STR"
  disabled
<option>                                        #Choice
  value="STR"                                   #If empty STR, it is the default option.
  label="STR"                                   #Def: children
  OPTION.text                                   #Same as OPTION.label
  selected                                      
  OPTION.defaultSelected                        #Initial value of "selected"
  disabled
  OPTION.index                                  #UINT. Readonly.

<progress>                                      #
  value="NUM"                                   #From 0 to max (def: 1).
  max="NUM"                                     #
  PROGRESS.position                             #Returns value / max. Readonly.
  
<label>                                         #Phrasing content before a <control>
  for="ID"                                      #<control> ID
  LABEL.htmlFor                                 #Instead of LABEL.for

<fieldset>                                      #<control> container
ää  disabled                                      #
öö  FIELDSET.elements                             #CONTROL_HTMLCOLLECTION
öö  FIELDSET.type                                 #Always "fieldset"
<legend>                                        #<fieldset> title


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TABLE             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<table>                                         #
  TABLE.caption|tHead|tFoot|tBodies             #TBODY|TFOOT|TABLECAPTION|null
  TABLE.createCaption|THead|TFoot()             #Creates or returns
  TABLE.deleteCaption|THead|TFoot()             #
  TABLE.rows                                    #TR_HTMLCOLLECTION.
  TABLE.insertRow(UINT)                         #Creates and returns a TR
  TABLE.deleteRow(UINT)                         #Removes a TR

<caption>/                                      #<table> title

<thead>                                         #Section of <table> with first TR
<tbody>                                         #Section of <table> with middle TR
<tfoot>                                         #Section of <table> with last TR
  TBODY|TFOOT.rows                              #
  TBODY|TFOOT.delete|insertRow(UINT)            #Like TABLE

<tr>                                            #<table> row, containing <td> or <th>
  TR.cells                                      #TD|TH_HTMLCOLLECTION.
  TR.deleteCell(UINT)                           #
  TR.insertCell(UINT)                           #
  TR.rowIndex                                   #UINT. -1 if not in a <table>
  TR.sectionRowIndex                            #Same but inside current TBODY|TFOOT

<td>                                            #<table> cell, inside a <tr>
  rowspan="NUM"                                 #How much cells it extends horiz. (0 -> all) (def 1)
  colspan="NUM"                                 #Same for vertic.
  headers="ID[ ID2...]"                         #ID of the <th> related to this cell.
  TD.cellIndex                                  #UINT. -1 if not in a <table>
<th>                                            #Like <td> but inside <thead> (same members)
ää  scope                                         #

<colgroup>                                      #<col> group
  span="NUM"                                    #Number of columns (def: all). If present, no <col> inside.
<col>/                                          #Columns. Does not change content, just used for CSS selection.
  span="NUM"                                    #Number of columns (def: 1)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           EMBEDDED            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<img>/                                          #Image
                                                #Formats: JPEG, GIF, PNG, SVG, BMP, ICO (BMP/PNG)
  src="URL"
  alt="STR"                                     #If image not available
  height|width="NUM"                            #In CSS pixels
                                                #For responsive images, use max-width: 100%, height: auto
                                                #height|width will define max, but keep responsive
  IMG.naturalHeight|width                       #Same, but size of the file, so not affected by height|width
öö  longdesc="STR"                                #
  IMG.complete                                  #True if read and displayed, and format accepted by browser.
DOCUMENT.images                                 #IMG_HTMLCOLLECTION


<iframe>                                        #Embedded HTML document
  src="URL"                   
  height="NUM"
  width="NUM"                                   #In CSS pixels
  name="STR"                                    #
  IFRAME.contentDocument|Window                 #DOCUMENT|WINDOW
  sandbox[="STR ..."]                           #Security restrictions (some can be lifted using "STR" allow-*):
                                                #  - plugins disabled
                                                #  - scripts disabled (allow-scripts)
                                                #  - no form submission (allow-forms)
                                                #  - unique origin, so same-origin policy apply (allow-same-origin)
                                                #    Also block document.cookie and localStorage access
                                                #  - no popups
                                                #  - can't go up to container DOCUMENT
                                                #  - can't use <object> or similar
                                                #  - can't use seamless attribute
                                                #  - can't use autoplay attribute, autofocus, etc.


<object>                                        #External resource, identified by MIME type
                                                #Supported by browser natively or via plugins
                                                #Ex: Flash, PDF
                                                #If not supported, content inside <object> is displayed.
  data="URL"
  type="STR"                                    #MIME-type
  name="STR"                                    #
  height="NUM"
  width="NUM"                                   #In CSS pixels
  OBJECT.contentDocument                        #DOCUMENT|null
<param>/                                        #<object> option
  name="STR"
  value="STR"


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             MEDIA             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<audio>                                         #
  volume="NUM"                                  #From 0 to 1

<video>                                         #Same members as <audio> (except volume) with extra
  height|width="NUM"                            #In CSS pixels. 
                                                #Video always keep ratio.
  VIDEO.videoHeight|Width                       #Natural size (i.e. beside height|width HTML attributes)
  poster="URL"                                  #Thumbnail (first frame by def)

<source>/                                       #Like <audio|video src="URL">
  src="URL"                                     #
  type="URL"                                    #MIME type, e.g. "video/ogg", "video/webm", "video/mp4", "audio/webm", 
                                                #"audio/ogg", "audio/wave", "audio/mpeg" (mp3), "audio/aac"
  media="MEDIAQUERYLIST"                        #See CSS doc

<media>                                         #<audio|video>
  src="URL"                                     #Source. 
                                                #Can be multiple times, so browser chooses the best one.
                                                #Prefer utiliser <source>
                                                #Best formats:
ää                                                #  - <audio>: Formats: ACC (not Firefox), MP3 (all), wav (not IE), 
ää                                                #    ogg Vorbis (not IE, Safari [Mobile]), Opus (not IE, Safari, any mobile) (see MDN Supported media formats)
ää                                                #  - <video>: Formats: WebM (not IE, Safari [Mobile]), 
ää                                                #    ogg Theora (not IE, Safari, any mobile), MPEG4/H264 (all) (see MDN Supported media formats)
                                                #  - audio:
                                                #     - Firefox + Opera + Chrome : 
                                                #        - .ogg/.oga (Vorbis) vs .webm (Vorbis): webm has better quality
                                                #        - others, less interesting:
                                                #           - .ogg/.opus (Opus/Ogg) (without Opera): newer, less support but better quality
                                                #           - .wav (also Safari): lossless (heavier)
                                                #     - IE + Safari (+ Chrome) : .mp3 (more widespread) or .aac (better quality)
                                                #  - video:
                                                #     - Firefox + Opera + Chrome : .ogg/.ogv (Theora) vs .webm (Vorbis/VP8): webm has better quality
                                                #     - IE + Safari (+ Chrome) : .mp4 (H.264)
  MEDIA.currentSrc                              #Like MEDIA.src, but better:
                                                #  - use <source> if used
                                                #  - gives server answer, not client request
                                                #  - null if networkState is NETWORK_EMPTY
                                                #  - readonly
  MEDIA.canPlayType('MIME')                     #Returns "probably" (true), "" (false) or "maybe" (unknown).

  controls                                      #Show controls (play, etc.)

  preload="STR"                                 #Can be:
                                                #  - "none"
                                                #  - "metadata": only preload metadata
                                                #  - "auto" or "": preload whole file
  MEDIA.load()                                  #Reloads (emits 'load' event)
                                                #Required if src has been changed
  MEDIA.onemptied = FUNC(EVENT)                 #Reloaded, i.e. using MEDIA.load()
  MEDIA.onloadedmetadata = FUNC(EVENT)          #Loaded metadata
  MEDIA.onloadeddata = FUNC(EVENT)              #Loaded first frame of data.
  MEDIA.oncanplay[through] = FUNC(EVENT)        #Finish loading, i.e. media can play. 
                                                #If Through: can play until the end (while still buffering until the end)
ää  MEDIA.readyState                              #
ää  MEDIA.onreadystatechange = FUNC(EVENT)        #
  MEDIA.buffered                                #Buffer as TIMESRANGE:
                                                #  - length (usually 1)
                                                #  - start|end(UINT): return start|end of buffer numbered UINT (in secs)
                                                #If seek forward/backward, creates new ranges in TIMESRANGE.

  autoplay                                      #
  MEDIA.pause()                                 #
  MEDIA.paused                                  #BOOL. Readonly.
  MEDIA.onpause = FUNC(EVENT)                   #
  MEDIA.play()                                  #
  MEDIA.onplay = FUNC(EVENT)                    #When played after having been paused
  MEDIA.onplaying = FUNC(EVENT)                 #When played after having been paused or initially
  MEDIA.played                                  #Same as MEDIA.buffered but for what has been played.

  MEDIA.seeking                                 #BOOL. Readonly
  MEDIA.onseeking|seeked = FUNC(EVENT)          #Start|ends changing current place
  MEDIA.ontimeupdate = FUNC(EVENT)              #Current place changed
  MEDIA.seekable                                #Same as MEDIA.played for seekable

  MEDIA.onwaiting = FUNC(EVENT)                 #Paused because lack of data
  MEDIA.ended                                   #BOOL. Readonly.
  MEDIA.onended = FUNC(EVENT)                   #
  MEDIA.onstalled = FUNC(EVENT)                 #Cannot fetch data
  MEDIA.onsuspend = FUNC(EVENT)                 #Data fetching stopped
  MEDIA.error                                   #The most recent MEDIAERROR, ou null. Readonly.
  MEDIA.networkState                            #Media loading state :
                                                #  - NETWORK_EMPTY: not started yet
                                                #  - NETWORK_LOADING
                                                #  - NETWORK_IDLE: stop loading
                                                #  - NETWORK_NO_SOURCE

  loop                                          #
  MEDIA.currentTime                             #DOUBLE (in sec)
  MEDIA.duration                                #DOUBLE. Readonly. Can be:
                                                #  - 0: not available
                                                #  - Inf: streaming
                                                #  - NaN: inconnu
  MEDIA.ondurationchange = FUNC(EVENT)          #

  muted                                         #
  MEDIA.onvolumechange = FUNC(EVENT)            #

  MEDIA.playbackRate                            #Speed:
                                                #  - <0: backward 
                                                #  - 0 et 1: slow motion
                                                #  - 1: normal (def)
                                                #  - >1: fast forward
                                                #Sound is muted outside of a specific range (e.g. 0.25 to 5), depending on browsers.
  MEDIA.defaultPlaybackRate                     #Initial value of "playbackRate"
  MEDIA.onratechange = FUNC(EVENT)              #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            CANVAS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<svg>                                           #Document SVG
                                                #Like a .svg file, but without <?xml ?>. 


<canvas>                                        #Area where to draw vector graphics via JavaScript.
                                                #Content is displayed if canvas not supported
  width="NUM"
  height="NUM"                                  #In CSS pixel
  CANVAS.getContext(STR)                        #"2d" to return a CONTEXT, "3d" a 3DCONTEXT (WebGL)
  CANVAS.toDataURL([STR[, NUM]])                #Returns as data URI
                                                #STR is "image/png" (def) or "image/jpeg"
                                                #NUM is jpeg quality, from 0 à 1.

  CanvasRenderingContext2D                      #Enfant de PATHMETHODS et DRAWINGSTYLES
  CONTEXT.canvas                                #Renvoie le CANVAS sous-jacent
  CONTEXT.save|restore()
  CONTEXT.scale(DOUBLE, DOUBLE2)
  CONTEXT.rotate(DOUBLE)
  CONTEXT.translate(DOUBLE, DOUBLE2)
  CONTEXT.[setT|t]ransform(6 DOUBLE)
  CONTEXT.globalAlpha
  CONTEXT.globalCompositeOperation              #Not blend modes
  CONTEXT.stroke|fillStyle
  CONTEXT.createLinearGradient(4 DOUBLE)
  CONTEXT.createRadialGradient(6 DOUBLE)
  CONTEXT.createPattern(VIDEO|CANVAS|IMAGE)
  CONTEXT.shadowOffsetX|Y
  CONTEXT.shadowBlur
  CONTEXT.shadowColor
  CONTEXT.clearRect(4 DOUBLE)
  CONTEXT.fillRect(4 DOUBLE)
  CONTEXT.strokeRect(4 DOUBLE)
  CONTEXT.beginPath()
  CONTEXT.fill|stroke([STR])
  CONTEXT.clip([STR])
  CONTEXT.isPointInPath|Stroke(2 DOUBLE[, STR])
  CONTEXT.fill|strokeText(4 DOUBLE)             
  CONTEXT.measureText(STR)
  CONTEXT.drawImage(VIDEO|CANVAS|IMAGE, 2|4|8 DOUBLE)
  CONTEXT.createImageData(IMAGEDATA|2 DOUBLE)
  CONTEXT.getImageData(4 DOUBLE)
  CONTEXT.putImageData(IMAGEDATA, 2|4 DOUBLE)
  
  CONTEXT.lineWidth
  CONTEXT.lineCap
  CONTEXT.lineJoin
  CONTEXT.miterLimit
  CONTEXT.*etLineDash(DOUBLE...)
  CONTEXT.lineDashOffset
  CONTEXT.font
  CONTEXT.textAlign
  CONTEXT.textBaseline

  CONTEXT.moveTo(2 DOUBLE)                      #Commence un nouveau path (coordonnées locales).
  CONTEXT.lineTo(2 DOUBLE)                      #Continue un path avec une nouvelle ligne.
  CONTEXT.quadraticCurveTo(4 DOUBLE)
  CONTEXT.bezierCurveTo(6 DOUBLE)
  CONTEXT.arcTo(6 DOUBLE)
  CONTEXT.rect(4 DOUBLE)
  CONTEXT.arc(5 DOUBLE[, BOOL])
  CONTEXT.closePath()                           #Clot le path.

  CanvasGradient
  GRADIENT.addColorStop(DOUBLE, STR)
  CanvasPattern
  
  TextMetrics
  TEXTMETRICS.width
  
  ImageData
  IMAGEDATA.width|height
  IMAGEDATA.data
