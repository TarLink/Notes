
               
   IMMUTABLE   
               


VERSION ==>                       #3.7.6

GOAL ==>                          #Data types:
                                  #  - immutable:
                                  #     - setters creates copies
                                  #        - unless setters did not change anything
                                  #        - efficient: copies are as deep for what changed, shallow otherwise
                                  #     - uses:
                                  #        - object which should be used but not modified
                                  #        - fast track changes: === instead of deep comparison
                                  #           - i.e. consumer gets new objects instead of keeping references

RETURN VALUE ==>                  #Is the same object, unless specified otherwise



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             BASE              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


BASE ==>                          #Not a real type, but methods implemented by all other types

IMMUTABLE.is()
IMMUTABLE.fromJS()

BASE.size (except ITERABLE)

BASE.toSeq()
BASE.toKeyedSeq()
BASE.toIndexedSeq()
BASE.toSetSeq()

BASE.equals()
BASE.hashCode()

BASE.get()
BASE.has()
BASE.includes()
BASE.first()
BASE.last()

BASE.getIn()
BASE.hasIn()

BASE.toJS()
BASE.toArray()
BASE.toObject()

BASE.toMap()
BASE.toOrderedMap()
BASE.toSet()
BASE.toOrderedSet()
BASE.toList()
BASE.toStack()

BASE.keys()
BASE.values()
BASE.entries()

BASE.keySeq()
BASE.valueSeq()
BASE.entrySeq()

BASE.map()
BASE.filter()
BASE.filterNot()
BASE.reverse()
BASE.sort()
BASE.sortBy()
BASE.groupBy()

BASE.forEach()

BASE.slice()
BASE.rest()
BASE.butLast()
BASE.skip()
BASE.skipLast()
BASE.skipWhile()
BASE.skipUntil()
BASE.take()
BASE.takeLast()
BASE.takeWhile()
BASE.takeUntil()

BASE.concat()
BASE.flatten()
BASE.flatMap()

BASE.reduce()
BASE.reduceRight()
BASE.every()
BASE.some()
BASE.join()
BASE.isEmpty()
BASE.count()
BASE.countBy()

BASE.find()
BASE.findLast()
BASE.findEntry()
BASE.findLastEntry()
BASE.max()
BASE.maxBy()
BASE.min()
BASE.minBy()

BASE.isSubset()
BASE.isSuperset()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            GENERAL            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


[ORDERED]SET|LIST|[ORDERED]MAP|STACK.withMutations()
[ORDERED]SET|LIST|[ORDERED]MAP|STACK.asMutable()
[ORDERED]SET|LIST|[ORDERED]MAP|STACK.asImmutable()
[Ordered]Set|List|[Ordered]Map|Stack.is*()

[ORDERED]SET|LIST|[ORDERED]MAP|STACK.clear()

[ORDERED]SET|LIST|[ORDERED]MAP.delete()

[Ordered]Set|List|Stack.of()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          LIST/STACK           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

IMMUTABLE.List

LIST.setSize()

IMMUTABLE.Stack

STACK.peek()
STACK.unshiftAll()
STACK.pushAll()

LIST|STACK.push()
LIST|STACK.pop()
LIST|STACK.unshift()
LIST|STACK.shift()

*.INDEXED|LIST|STACK.fromEntrySeq()

*.INDEXED|LIST|STACK.interpose()
*.INDEXED|LIST|STACK.interleave()
*.INDEXED|LIST|STACK.splice()
*.INDEXED|LIST|STACK.zip()
*.INDEXED|LIST|STACK.zipWith()

*.INDEXED|LIST|STACK.indexOf()
*.INDEXED|LIST|STACK.lastIndexOf()
*.INDEXED|LIST|STACK.findIndex()
*.INDEXED|LIST|STACK.findLastIndex()

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              MAP              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

IMMUTABLE.Map

*.KEYED|[ORDERED]MAP.flip()
*.KEYED|[ORDERED]MAP.mapKeys()
*.KEYED|[ORDERED]MAP.mapEntries()

*.KEYED|[ORDERED]MAP.keyOf()
*.KEYED|[ORDERED]MAP.lastKeyOf()
*.KEYED|[ORDERED]MAP.findKey()
*.KEYED|[ORDERED]MAP.findLastKey()

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           LIST/MAP            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



LIST|[ORDERED]MAP.set()
LIST|[ORDERED]MAP.update()
LIST|[ORDERED]MAP.merge()
LIST|[ORDERED]MAP.mergeWith()
LIST|[ORDERED]MAP.mergeDeep()
LIST|[ORDERED]MAP.mergeDeepWith()

LIST|[ORDERED]MAP.setIn()
LIST|[ORDERED]MAP.deleteIn()
LIST|[ORDERED]MAP.updateIn()
LIST|[ORDERED]MAP.mergeIn()
LIST|[ORDERED]MAP.mergeDeepIn()




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              SET              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

IMMUTABLE.Set

[ORDERED]SET.fromKeys()

[ORDERED]SET.add()
[ORDERED]SET.union()
[ORDERED]SET.intersect()
[ORDERED]SET.subtract()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            ORDERED            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

IMMUTABLE.OrderedMap|OrderedSet


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            RECORD             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

                                             
IMMUTABLE.Record


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              SEQ              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

IMMUTABLE.Seq

SEQ[.SET|KEYED|INDEXED].cacheResult()
Seq.isSeq()
Seq[.Set|Indexed].of()



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLLECTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

IMMUTABLE.Collection


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           ITERABLE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


IMMUTABLE.Iterable

Iterable.isIterable() 
Iterable.isKeyed() 
Iterable.isIndexed() 
Iterable.isAssociative() 
Iterable.isOrdered()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SUBTYPES            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


IMMUTABLE.Seq|Collection|Iterable.Keyed|Indexed|Set

IMMUTABLE.Range()
IMMUTABLE.Repeat()
