
              
   CKEDITOR   
              


VERSION ==>                       #4.5.4

INSTALLATION ==>                  #Bower: ckeditor
                                  #No RequireJS
                                  #When concatenated, must define install path with ENVVAR CKEDITOR_BASEPATH

BUILDING ==>                      #Goal:
                                  #  - create release (minify, etc.)
                                  #  - pick only needed parts
                                  #Use dev/builder/build.sh:
                                  #  - download and launch ckbuilder.jar
                                  #  - based on build-config.js, which defines CKBUILDER_CONFIG OBJ:
                                  #     - skin 'SKIN'
                                  #     - plugins.PLUGIN 1|0 (def: none)
                                  #     - languages.LANG (e.g. 'en' or 'en-us') 1|0 (def: all)
                                  #     - ignore PATH_ARR
                                  #     - js 'PATH[,start|aftercore|end]'_ARR: custom JavaScript added to build
                                  #  - create ./release/ckbuilder/ (optimized but not concatenated)
                                  #  - options:
                                  #     --build-config FILE
                                  #     --overwrite
                                  #     --leave-js|css-unminified
                                  #     --no-zip|tar
                                  #Can use online builder, or online toolbar configurator to do it too.

MODE ==>                          #Can be:
                                  #  - on textarea: 
                                  #     - 'normal mode' (with toolbars, etc., in an <iframe>)
                                  #     - automatically updates textarea value with HTML content
                                  #  - on any[contenteditable="BOOL"]: 'inline mode', read-write or read-only


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              ENV              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.env                      #ENV
ENV.air|chrome|edge|gecko|ie|
safari|webkit                     #BOOL
ENV.version                       #NUM browser version
ENV.iOS|mac                       #BOOL

ENV.isCompatible                  #BOOL: supported by CKEditor

ENV.quirks                        #BOOL (IE quirks mode)
ENV.needsBr|NbspFiller            #BOOL: needs to fix <br> or non-breaking space.

ENV.secure()->BOOL                #HTTPS

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             BASE              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.replace('ID'[, CONF])    #Using global variable CKEDITOR and $("#ID"). Returns EDITOR

EDITOR.on('instanceReady')        #
EDITOR.on('change')               #


CKEDITOR.config                   #CONF
CKEDITOR.editorConfig(CONF)       #Function which, when called, can modify CONF
                                  #If defines a CONF.customConfig, recursively loads it.
CONF.customConfig                 #FILE which usually define CKEDITOR.editorConfig
                                  #Def: package config.js

CKEDITOR.editor                   #EDITOR_FUNC
CKEDITOR.instances.ID             #EDITOR


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            JQUERY             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JQ.ckeditor([CONF])               #Use jQuery adapter to instantiate.
                                  #Must load adapters/jquery.js
                                  #Returns a jQuery PROMISE, resolved when loaded, with also property:
                                  #  - editor EDITOR
                                  #JQ.val([VAL]) will work out-of-the-box, except if CONF.jqueryOverrideVal false
                                  #Exposes some CEVENT as JQEVENTs: 'instanceReady|destroy|setData|getData|dataReady.ckeditor'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          BASE_ATTRS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.setReadOnly(BOOL)          #
EDITOR.readOnly                   #
COMMAND_DEF.readOnly              #If true (def: false), will appear in read-only mode

CONF.width|height                 #'CSS_LENP'|NUM (def: ''|200). Only 'normal mode'.
CONF.tabIndex                     #

CONF.contentsCss                  #CSS 'FILE[_ARR]' for editor in 'normal mode'
EDITOR.addContentsCss('FILE')     #
  
CONF.[active][shift]enterMode     #Default behavior when hitting [SHIFT-]ENTER among CKEDITOR.ENTER_P|BR|DIV (def: P and BR)
                                  #'active' is current (e.g. current selection), non-'active' is default
EDITR.setActiveEnterMode(VAL,VAL2)#For activeEnterMode and activeShiftEnterMode
                                  #Fires 'activeEnterModeChange'
FILTER.getAllowedEnterMode        #Check if FILTER allows this enterMode (shiftEnterMode if true), i.e. if <p>, <br> or <div>
(VAL[, BOOL])                     #are allowed. If none, returns CKEDITOR.EDITOR_BR


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.getSelection()             #Returns DOM_SELECTION
CONF.[un]lockSelection
([DOM_SELECTION])                 #Keeps selection even when editor loses focus.

SELECTION.getStartElement()       #Returns DOM_ELEM


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             I18N              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONF.language                     #'LANG' (def: CONF.defaultLanguage, i.e. 'en')
PLUGIN_DEF.lang                   #Languages supported by the PLUGIN, as 'LANG,...'|'LANG'_ARR
                                  #Should not stored in plugins/PLUGIN/lang/LANG.js, which should call
                                  #CKEDITOR.plugins.setLang(...)
                                  #Available ones depend on build.
PLUGINS.setLang
('PLUGIN', 'LANG', OBJ)           #Sets a PLUGINS's translations, where OBJ are translations.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            PLUGINS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


LOADING ==>                       #Uses:
                                  #  - CONF.plugins "PLUGIN,..." (depends on build)
                                  #  - CONF.extraPlugins "PLUGIN,...": same without override def. CONF.plugins
                                  #  - CONF.removePlugins "PLUGIN,..."
                                  #Loading PLUGIN fires plugins/PLUGIN/plugin.js:
                                  #  - should call CKEDITOR.plugins.add()

CKEDITOR.plugins                  #PLUGINS
PLUGINS.add('PLUGIN', PLUGIN_DEF) #Initialize plugin
PLUGIN_DEF.[before|after]init     #Called once per EDITOR, e.g. calling EDITOR.ui.addButton()
(EDITOR)                          #Fires EDITOR 'pluginsLoaded'
PLUGIN_DEF.onLoad()               #Called once for all EDITORs

PLUGINS.basePath|filename         #dirname|filename
PLUGINS.loaded|registered         #BOOL

PLUGINS.get('NAME')               #
PLUGINS.get[Folder]Path('NAME')   #dirname|filename
STYLSESET.load
('NAME', FUNC(OBJ)[, THIS])       #

PLUGINS.addExternal
('NAME', 'FILE', PLUGIN_DEF_ARR)  #
PLUGINS.externals                 #OBJ (everything registered with addExternal())

PLUGIN_DEF.requires               #Dependencies, as 'PLUGIN,...' or 'PLUGIN'[_ARR]

PLUGIN_DEF.icons                  #'ICON', using plugins/PLUGIN/icons/ICON.png, as 16x16px
PLUGIN_DEF.hidpi                  #If true (def), provides HiDPI under plugins/PLUGIN/icons|images/hidpi/*,
                                  #with e.g. a pixel ratio of 2


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            WIDGET             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'widget'
WIDGETS ==>                       #Plugins that are treated as a single entity in the editor when
                                  #removed|selected|deleted|moved.

CKEDITOR.plugins.widget           #WIDGETS
EDITOR.widgets.instances          #WIDGET_ARR

WIDGETS.add('WIDGET', WIDGET_DEF) #
WIDGET_DEF.upcast(DOM_ELEM)->BOOL #When any DOM_ELEM is created, will make it a WIDGET if true
WIDGET_DEF.init()                 #When widget loaded (i.e. when EDITOR is initialized)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              UI               :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.ui                       #UI. Is an EVENTEMITTER
UI.add('NAME', VAL, OBJ)          #According to VAL CKEDITOR.UI_BUTTON|MENUBUTTON|PANEL|PANEL_BUTTON|RICHCOMBO|SEPARATOR,
                                  #creates a new UI object, with definition OBJ:
                                  #  - CKEDITOR.UI_BUTTON: like UI.addButton(...)
                                  #  - CKEDITOR.UI_RICHCOMBO: like UI.addRichCombo(...)
                                  #When ready, fires 'ready'
UI.create|get('NAME')             #[Creates and] returns an UI element, e.g. BUTTON
UI.addHandler(VAL, OBJ)           #Creates a UI type (like CKEDITOR.UI_*). OBJ:
                                  #  - contentsElement DOM_ELEM: container
                                  #  - create(OBJ)->DOM_ELEM2
                                  #Handlers for builtins UI types are available at BUTTON|PANEL|RICHCOMBO.handler

UI.space('bottom|contents|top')   #Returns UI container for main UI elements, i.e. bottom|top bars and content.
UI.spaceId('...')                 #Same but returns ID


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             PANEL             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Lower-level UI used by toolbar
PANEL.addBlock('BLOCK', BLOCK)    #
PANEL.getBlock('BLOCK')           #
PANEL.showBlock('BLOCK')          #
PANEL.render(...)                 #Like BUTTON.render(...)

BLOCK.markItem(NUM)               #Mark as activated


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          FLOATPANEL           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Lower-level UI used by dropdowns
FLOATPANEL.addBlock('BLOCK',BLOCK)#
FLOATPANEL.getBlock('BLOCK')      #
FLOATPANEL.render(...)            #Like BUTTON.render(...)

FLOATPANEL.addListBlock
('BLOCK', BLOCK_ARR)              #

FLOATPANEL.allowBlur(BOOL)        #
FLOATPANEL.blur|focus()           #

FLOATPANEL.showBlock('BLOCK',     #DOM_ELEM is offset parent, NUM is 1|2|3|4 for different corners.
DOM_ELEM, NUM[, X][, Y][, FUNC()])#FUNC is done callback.
FLOATPANEL.showAsChild
(FLOATPANEL2, ...)                #Using FLOATPANEL2.showBlock(...)
FLOATPANEL.reposition()           #Put in same position as last showBlock()
FLOATPANEL.hide[Child]()          #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PANELBUTTON          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Same interface as BUTTON


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          MENUBUTTON           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Same interface as BUTTON


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            TOOLBAR            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONF.toolbarLocation              #'top|bottom' (def: 'top'). In 'normal mode'
CONF.toolbarCanCollapse           #If true (def: false), user can collapse toolbar.
CONF.toolbarStartupExpanded       #If true (def), and CONF.toolbarCanCollapse true, starts collapsed.
CONF.toolbarGroupCycling          #If true (def), arrow keystokes navigate between button groups, not buttons

CONF.toolbar                      #Buttons. Either:
                                  #  - 'TOOLBAR'
                                  #  - VAL_ARR:
                                  #     - OBJ:
                                  #        - name 'BUTTON_GROUP'
                                  #        - items 'BUTTON'_ARR
                                  #           - '-': separator
                                  #     - '/': newline
CONF.toolbar_TOOLBAR              #Same but defines a 'TOOLBAR'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         BUTTON_GROUP          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONF.toolbarGroups                #Button groups. Same value as CONF.toolbar VAL_ARR, except:
                                  #  - items -> groups
                                  #  - 'PLUGIN' instead of 'BUTTON'
UI.addToolbarGroup('BUTTON_GROUP', 
'NEXT_BUTTON_GROUP'|NUM 
[,'PARENT_BUTTON_GROUP'])

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BUTTON             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONF.removeButtons                #"BUTTON,...". Prefer removePlugins

UI.addButton('BUTTON', BUTTON_DEF)
BUTTON_DEF.label                  #STR
BUTTON_DEF.command                #'COMMAND'
BUTTON_DEF.toolbar                #'BUTTON_GROUP[,NUM]'
  
BUTTON.render(EDITOR, STR_ARR)    #Adds button's 'HTML' to STR_ARR
BUTTON.setState(STATE)            #See COMMAND.setState(STATE)
BUTTON.getState()                 #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           RICHCOMBO           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Toolbar dropdowns
UI.addRichCombo
('RICHCOMBO', RICHCOMBO_DEF)      #

RICHCOMBO.render(...)             #Like BUTTON.render(...)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           COMMANDS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.editor.addCommand        
('COMMAND', COMMAND_DEF)          #Function to fire.

COMMAND_DEF.exec(EDITOR[, VAL])   #Main function fired.
EDITOR.execCommand([VAL])         #Can return VAL2

COMMAND_DEF.async                 #If true (def: false), fires async:
                                  #  - exec(EDITOR, OBJ2) does not return anything
                                  #  - fires 'afterCommandExec' with CEVENT.data OBJ:
                                  #     - name 'COMMAND'
                                  #     - command COMMAND
                                  #     - commandData OBJ2
                                  #     - returnValue VAL2
COMMAND_DEF.canUndo               #If true (def), hook into Undo/Redo system.
COMMAND_DEF.editorFocus           #If true (def), firing commands gives focus to EDITOR

COMMAND_DEF.contextSensitive      #If false (def: true), COMMAND_DEF.refresh() not fired.
COMMAND_DEF.context               #If true (def), DOM_PATH is passed to COMMAND_DEF.refresh()
COMMAND_DEF.refresh               #Function fired when selection changed. Should call:
(EDITOR, DOM_PATH)                #  - should call COMMAND.setState()
                                  #Fire COMMAND 'refresh'

COMMAND                           #Instance. Has all COMMAND_DEF properties|methods, plus:
                                  #Is an EVENTEMITTER.
COMMAND.[previous]state           #STATE:
                                  #  - CKEDITOR.TRISTATE_DISABLED: disabled
                                  #  - CKEDITOR.TRISTATE_ON|OFF: enabled and active|inactive
                                  #When changed, fires 'state'
COMMAND.setState(STATE)           #
COMMAND.toggleState()             #Toggle between TRISTATE_ON|OFF
COMMAND.disable|enable()          #Toggle between TRISTATE_DISABLED and TRISTATE_ON|OFF
COMMAND_DEF.startDisabled         #If true (def: false), disabled until a selection is being made.

COMMAND.uiItems                   #ARR of associated UI items.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FEATURE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Base interface, usually added to COMMAND, BUTTON or RICHCOMBO
                                  #Goal is augment current FILTER, and check if compatible with it.
                                  #Must always be done, but automatically done by UI.addButton|RichCombo()
FEATURE.name                      #
FEATURE.allowedContent            #
FEATURE.contentForms              #
FEATURE.contentTransformations    #Will use CKEDITOR.filter.allow|addContentForms|addTransformations(...)
FEATURE.requiredContent           #Will use CKEDITOR.filter.check(RULES) to check if feature can be activated

EDITOR|FILTER.add|checkFeature
(FEATURE)                         #Checks if FILTER allows this FEATURE. Returns BOOL
COMMAND.checkAllowed([BOOL])      #Do CKEDITOR.editor.activeFilter.checkFeature(COMMAND), i.e. COMMAND implements FEATURE.
                                  #If BOOL true, no caching.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FILTERS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



FILTER                            #Filters input
new CKEDITOR.filter(RULES|EDITOR) #Returns current FILTER, setup at load.
CKEDITOR.filter.instances[ID]     #FILTER, according to FILTER.id NUM
EDITOR.[active]filter             #FILTER. 
                                  #'active' is current (e.g. current selection), non-'active' is default
EDITOR.setActiveFilter(FILTER)    #Fires event 'activeFilterChange'

FILTER|FEATURE.allowedContent     #RULES:
                                  #  - true: everything
                                  #  - OBJ:
                                  #     - KEY "TAG ..."
                                  #        - can use $1 to mean anything, then using elements CKEDITOR.dtd
                                  #     - styles (CSS prop), attributes (HTML ATTR), classes (HTML class):
                                  #        - true: anything
                                  #        - "[!]STR ..."
                                  #          - ! means required (if not there, erase), otherwise optional (others are erased)
                                  #          - can use * meaning "anything", or e.g. attributes "data-*"
                                  #        - OBJ:
                                  #          - match(ELEM)->BOOL
                                  #          - propertiesOnly BOOL: if true, works only if another RULE allows this TAG
                                  #  - "RULE;...", where "RULE" can be "OBJ.KEY{OBJ.styles}[OBJ.attributes](OBJ.classes)"
                                  #  - STYLE[_ARR]
                                  #Read-only. Can be written with:
                                  #  - CONF.allowedContent RULES
                                  #    When not set, is in "automatic mode", i.e. defined by plugins.
                                  #  - CONF.extraAllowedContent: same but does not overwrite plugins definitions.
FILTER.disallowedContent          #RULES, applied before allowedContent.
                                  #Read-only. Can be written with:
                                  #  - CONF.disallowedContent
FILTER.customConfig               #True if CONF.extraAllowedContent used.

FILTER.allow(RULES[, 'FEATURE'])  #Adds to FILTER.allowedContent. Can be only for a specific 'FEATURE'
FILTER.disallow(RULES)            #Adds to FILTER.disallowedContent
FILTER.disable()                  #Sets allowedContent to true
FILTER.disabled                   #

FILTER.addElementCallback
(FUNC(HTML_ELEM)
[->CKEDITOR.FILTER_SKIP_TREE])    #Whether not to filter that element.

FILTER.check                      #Returns true if not filtered. 
(RULES[, BOOL][, BOOL2])          #Ignores '!' required unless BOOL2 true
                                  #Ignores transformations if BOOL true
FILTER.applyTo(HTML_ELEM|FRAGMENT #Modifies element. Returns true if something was changed.
[, BOOL][, BOOL2][, VAL])         #  - if BOOL true, returns 'HTML' instead
                                  #  - transformOnly BOOL (def: false)
                                  #  - enterMode (def: CKEDITOR.editor.activeEnterMode)

FILTER.addTransformations         #Add transformation groups OBJ_ARR:
(OBJ_ARR_ARR)                     #  - for each group, picks the first transformation OBJ that matches
                                  #Transformation OBJ:
                                  #  - element 'TAG,...': to match
                                  #  - left(HTML_ELEM)->BOOL: should it transform?
                                  #  - right(HTML_ELEM, TRANSFORMTOOLS) or STR (i.e. TRANSFORMTOOLS[STR]): transformation
                                  #  - check???
TRANSFORMTOOLS.                   
alignmentToAttribute|Style
(HTML_ELEM)                       #Converts from|to using CSS attributes float or HTML attribute align

FILTER.addContentForms(VAL_ARR)   #If an input TAG matches any VAL, is replaced by the first VAL that is not filtered out.
                                  #VAL are:
                                  #  - RULES
                                  #  - [RULES, FUNC(HTML_ELEM)->BOOL]

FILTER.destroy()                  #

FILTER.id                         #
FILTER.editor                     #EDITOR_FUNC. null if standalone



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SKINS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


STRUCTURE ==>                     #Files:
                                  #  - skin.js: logic
                                  #  - editor[_BROWSER].css: main CSS
                                  #     - BROWSER is loaded if ENV[BROWSER] is true
                                  #  - dialog[_BROWSER].css: 
                                  #     - dialogs CSS
                                  #     - to support 'dialog' busy state, see online doc on CSS to add
                                  #  - icons/ICON.png: will override default ones provided by plugins
                                  #  - notification.css: for 'notification' plugin (can copy from Moono skin)
                                  #Available ones depends on build
                                  #Can be packaged (concatenates, minify, sprites) using:
                                  #  java -jar ckbuilder.jar --build-skin "SKIN" "SKIN-release"

CKEDITOR.skinName                 
CONF.skin                         #'SKIN'
CKEDITOR.skin                     #SKIN

SKIN.name                         #
SKIN.path()                       #
SKIN.getPath('PART')              #
SKIN.loadPart('PART'[, FUNC()])   #

SKINS.icons                       #OBJ
SKIN.addIcon('ICON', 'PATH'[, Y]
[, STR])                          #STR is background-size CSS value
SKIN.getIconStyle('ICON'[, BOOL]) #Returns CSS style of 'ICON'. If true, indicates RTL.
 
CONF.uiColor                      #"CSS_COLOR". 
                                  #SKIN.chameleon must be defined.
                                  #Can use plugin 'uicolor' to let user define it.
EDITOR.getUIColor()               #
SKIN.chameleon('EDITOR', 'PART')  #

EXTRA CLASSES ==>                 #On the editor:
                                  #  - .cke_rtl: RTL
                                  #  - .cke_hc: High contrast


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              I/O              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.getData([BOOL])            #Returns HTML content.
                                  #If true, only returns cached data, and does not fire [before]getData() events.
                                  #Fires event '[before]getData' with CEVENT.data.dataValue STR (getData() only)
EDITOR.setData(STR[, OBJ])        #Sets HTML content
                                  #Fires 'dataReady' and OBJ.callback(), unless OBJ.internal true.
                                  #If OBJ.noSnapshot true, do not record in undo history.

EDITOR.insertHtml                 #STR is 'HTML'
(STR[, STR2[, DOM_RANGE]])        #STR2 can be:
                                  #  - 'html': filtered by CKEDITOR.filter
                                  #  - 'unfiltered_html': no FILTER
                                  #  - 'text': plain text, i.e. will inherit current position styles
                                  #DOM_RANGE (def: current selection)
                                  #Fires:
                                  #  - 'insertHtml' with CEVENT.data: mode STR2, dataValue STR, range DOM_RANGE
                                  #  - 'afterInsertHtml' with CEVENT.data: intoRange DOM_RANGE
EDITOR.insertText(STR)            #Like EDITOR.insertHtml(STR, 'text')
EDITOR.insertElement(DOM_ELEM)    #Like EDITOR.insertHtml(DOM_ELEM.getOuterHtml()), except fires different events:
                                  #  - 'insertElement' with CEVENT.data DOM_ELEM


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          HTMLWRITER           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Advanced control on HTML output
EDITOR.dataProcessor.
toDataFormat|Html('STR')          #From HTML to BBCode, and inverse.
EDITOR.dataFilter|htmlFilter      #FILTER used by each

EDITOR.dataProcessor.writer       #WRITER used when retrieving output
WRITER.indentationChars           #' ' or '\t' (def: CONF.dataIndentationChars (def: '\t'))
WRITER.lineBreakChars             #'\r\n' or '\n' (def)
WRITER.selfClosingEnd             #How self-closing tags are closed: '>' or '/>' (def)
WRITER.setRules('TAG', OBJ)       #Formatting for a given TAG. OBJ:
                                  #  - indent BOOL: indent children
                                  #  - breakBefore|AfterOpen|Close BOOL: inserting newlines

CONF.basicEntities                #If true (def), escape basic HTML entities
CONF.entities                     #If true (def), escape HTML entities
CONF.entities_greek|latin         #If true (def), escape Greek|Latin HTML entities
CONF.entities_processNumerical    #If true (def: false), convert all Unicode numbers into HTML entities.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            EVENTS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CEVENTEMITTER.fire                
('EVENT'[, OBJ[, EDITOR]])        #Returns false if cancelled, VAL otherwise.
CEVENTEMITTER.fireOnce(...)       #Same as CEVENTEMITTER.fire(...) followed by removeListener()
CEVENTEMITTER.
on|once('EVENT', FUNC(CEVENT)
[, THIS][, OBJ2][, PRIO_NUM])     #OBJ2 available at CEVENT.listenerData
CEVENTEMITER.hasListeners('EVENT')#
CEVENTEMITTER.removeListener
('EVENT')                         #
CEVENTEMITTER.removeAllListeners()#
CEVENTEMITTER.define('EVENT', OBJ)#If OBJ.errorProof true, wrap listener in try|catch block
CEVENTEMITTER.capture()           #???


CEVENT
CEVENT.data                       #OBJ
CEVENT.name                       #STR
CEVENT.editor                     #EDITOR
CEVENT.sender                     #OBJ that sends the event

CEVENT.cancel|stop()              #fire() will return false|true
CEVENT.removeListener()           #Removes current listener


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            RESIZE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Only 'normal mode'
CONF.resize_enabled               #BOOL (def: true). Show resizing handle in bottom right corner.
CONF.resize_max|minHeight|Width   #NUM
CONF.resize_dir                   #'both|vertical|horizontal'

EDITOR.resize                     #  - BOOL: if true, applied to content area, otherwise to entire editor area
(NUM, NUM2[, BOOL[, BOOL2]])      #  - BOOL2: if true, applied to inner area, otherwise to outer area


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOGROW            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Adapt height to content. Not needed in 'inline mode'
CONF.autoGrow_min|maxHeight       #NUM (def: 200|0)
CONF.autoGrow_bottomSpace         #NUM (def: 0), space between content and bottom border
CONF.autoGrow_onStartup           #BOOL (def: false), if true, adjust initial height on startup instead of focus.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             IMAGE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Instering images. By default produces <img>
CONF.image_prefillDimensions      #If true (def), upload box prefills dimensions.
CONF.image_previewText            #Preview text shown in upload box.
CONF.image_removeLinkByEmptyURL   #If true (def), remove links when URL is ''


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            IMAGE2             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Replace "image" plugin. Allows:
                                  #  - captions
                                  #  - resize handler
                                  #  - drag&drop
                                  #By default produces:
                                  #  figure.image
                                  #    img
                                  #    figcaption
CONF.image2_captionedClass        #'CLASS' applied to <figure> (def: 'image')
CONF.image2_alignClasses          #STR_ARR. 3 CSS classes also applied to <figure> when aligned to left|center|right
                                  #Def: use style="float:left|right" and 'text-align: center'
CONF.image2_disableResizer        #If false (def), allow resizing image.
CONF.image2_prefillDimensions     #Like CONF:image_prefillDimensions


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TABLE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Inserting <table>


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          TABLETOOLS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Cell properties context menu + context menu with inserting|splitting|removing rows|cells|columns


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          TABLERESIZE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Resize handle for columns|rows



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DIALOGS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.dialog                   #DIALOGS
DIALOGS.add                       #Fires CKEDITOR 'dialogDefinition' with CEVENT.data:
('DIALOG', DIALOGDEF|PATH)        #  - name 'DIALOG'
                                  #  - definition DIALOGDEF
                                  #Can be used to hook into any plugin dialog.
                                  #PATH: usually plugins/PLUGIN/dialogs/*.js
DIALOGS.addIframe('DIALOG', TITLE,
MINWIDTH, MINHEIGHT
[, FUNC(DIALOGDEF)][, DIALOGDEF]) #Add <iframe> DIALOG.
DIALOGS.addUIElement('TYPE', FUNC)#Add custom dialog
DIALOGS.getCurrent()              #
DIALOGS.exists('DIALOG')          #

DIALOGS.cancel|okButton()         #Default handlers for cancel|ok buttons (def: fires 'ok|cancel')

DIALOGDEF.getContents('TAB')      #Returns TAB
TAB.get('FIELD')                  #Returns FIELD
FIELD.default                     #Default value

DIALOGDEF.onLoad|Show()           #First|every time
DIALOGDEF.onOk|Cancel()           #

DIALOGDEF.buttons                 #
DIALOGDEF.contents                #CONTENT_ARR

DIALOGDEF.resizable               #CKEDITOR.DIALOG_RESIZE_NONE|WIDTH|HEIGHT
DIALOGDEF.minHeight|Width         #NUM
DIALOGDEF.height|width            #NUM
DIALOGDEF.title                   #STR

DIALOG.state                      #CKEDITOR.DIALOG_STATE_IDLE|BUSY
DIALOG.setState(VAL)              #Fires event 'state' with CEVENT.data CKEDITOR.DIALOG_STATE_IDLE|BUSY

DIALOG.addPage(CONTENT_ARR)       #
DIALOG.selectPage('TAB')          #
CONF.removeDialogTabs(STR)        #Remove tabs, as 'DIALOG:TAB;...'
DIALOG.isTableEnabled
(EDITOR, 'DIALOG', 'TAB')         #Check if part of removeDialogTabs()

new CKEDITOR.dialogCommand
('DIALOG')                        #Returns a COMMAND_DEF that opens a dialog 'DIALOG'


CONTENT                           #A tab
CONTENT.id                        #
CONTENT.label                     #STR
CONTENT.title                     #STR
CONTENT.accessKey                 #STR
CONTENT.elements                  #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DIALOG             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Modals


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         DIALOGADVTAB          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #'Advanced' tab in dialogs, allowing to set HTML attrs id|dir|style|class


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLORDIALOG          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


																  #Color picker in dialogs where user needs to pick a color


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           EMBEDBASE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Base plugin for "embed[semantic]"

  
																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        EMBED[SEMANTIC]        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Embedded URL content in an <iframe> using Iframely.
                                  #If "semantic", uses oEmbed standard.
CONF.embed_provider               
CKEDITOR.plugins.embedBase.       #oEmbed provider (def: "//ckeditor.iframe.key/api/oEmbed={url}&callback={callback}")
baseDefinition.providerUrl        #Can use "{url}" (requested URL) and "{callback}" (JSONP)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOEMBED           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Autoembed URLs when pasted (show error when cannot automatically embed)
CONF.autoEmbed_widget             #Plugin "STR,..."[(URL)] to use (def: "embed,embedsemantic")


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CODESNIPPET          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

                                  
                                  #Insert code snippets (using highlight.js)
                                  #In 'inline mode', needs to load hightlight.js JavaScript and CSS.
CONF.codeSnippet_codeClass        #'CLASS' of <code> (def: 'hljs')
CONF.codeSnippet_languages        #OBJ of programming languages (def: null, i.e. all)
CONF.codeSnippet_theme            #STR color theme (def: 'default')
CONF.codesnippet.
setHighlighter(HIGHLIGHTER)       #Use another highlighter than highlight.js


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CODESNIPPETGESHI        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Like 'codesnippet', but uses GeSHI hightlighter (server-side) instead of highlight.js
CONF.codeSnippetGeshi_url         #'URL' (PHP)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MATHJAX            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Inserting TeX
CONF.mathJaxClass                 #'CLASS'. Any elements with this CSS class will be converted (def: 'math-tex')
CONF.mathJaxLib                   #MathJax library path


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PLACEHOLDER          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Insert words that are treated as a single entity


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           CLIPBOARD           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Handlers pasted and dropped content.
CONF.clipboard_defaultContentType #If not sure whether 'text' or 'html' (def).
CONF.forcePasteAsPlainText        #If true, forces all pasted content as 'text'.

EDITOR.getClipboardData           #Open window to paste data.
(OBJ, FUNC(OBJ2))                 #OBJ: title STR
                                  #OBJ2: type STR, dataValue STR

EDITOR.on('[afterP|p]aste')       #CEVENT.data:
                                  #  - type STR (e.g. 'html', 'text', 'auto')
                                  #  - dataValue STR
                                  #  - method 'drop|paste'
                                  #  - dataTransfer DATATRANSFER
                                  #  - dontFilter BOOL: if true, does not apply CONF.pasteFilter
EDITOR.on('dragstart|end')        #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
EDITOR.on('drop')                 #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
                                  #  - drag|dropRange DOM_RANGE
                                  #    Can also use CLIPBOARD.getRangeAtDropPosition(EVENT, EDITOR)-> DOM_RANGE
CLIPBOARD.mainPasteEvent          #'[after]paste': which event to prefer listening to with this browser

EDITOR.pasteFilter                #FILTER. 
                                  #Not applied when input comes from CKEditor.
                                  #Def: CONF.pasteFilter:
                                  #  - 'plain-text': will convert to plain text
                                  #  - 'semantic-content' (def for Chrome, Safari, Opera): usual HTML tags
                                  #  - RULES (see filters)
                                  #  - null (def for other browsers)

DATATRANSFER                      #Higher-level API for DOM DATATRANSFER
DATATRANSFER.getData('TYPE')      #
DATATRANSFER.setData('TYPE', STR) #
DATATRANSFER.isEmpty()            #
DATATRANSFER.getFile(NUM)         #
DATATRANSFER.getFilesCount()      #

DATATRANSFER.$                    #DOM clipboard event
DATATRANSFER.id                   #
DATATRANSFER.sourceEditor         #EDITOR

CKEDITOR.plugins.clipboard        #CLIPBOARD
CLIPBOARD.canClipboardApiBeTrusted
(DATATRANSFER, EDITOR)            #False if browser does not support 'hmtl' type in DOM clipboard.
CLIPBOARD.isCustomCopyCutSupported#False if browser does not allow using DOM clipboard.
CLIPBOARD.
isCustomDataTypesSupported        #True if browser allows using custom data types in DOM clipboard's getData|setData()
CLIPBOARD.isFileApiSupported      #True if browser supports DOM files.

CLIPBOARD.getDropTarget(EDITOR)   #Returns DOM_OBJ
CLIPBOARD.
preventDefaultDropOnElement
(DOM_OBJ)                         #Prevents dropping on it.

CLIPBOARD.
initDrag|PasteDataTransfer
([DOM_EVENT[, EDITOR]])           #
CLIPBOARD.resetDragDataTransfer   #Programmatically create drag|paste


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         PASTEFROMWORD         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Allow pasting from Microsoft Word
CONF.pasteFromWordCleanupFile     #FILE. Module providing MSWord cleanup function
CONF.pasteFromWord
NumberedHeadingsToList            #BOOL (def: false)
CONF.pasteFromWordPromptCleanup   #If true (def: false), shows dialog to say content will be cleaned.
CONF.pasteFromWordRemoveFontStyles#Def: true
CONF.pasteFromWordRemoveStyles    #Def: true


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         BASICSTYLES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Font formatting
CONF.coreStyles_bold|italic|strike
|subscript|superscript|underline  #STYLE applied


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         REMOVEFORMAT          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Remove font formatting


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FORMAT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Paragraph formatting
CONF.format_address|div|h1-6|p|pre#STYLE
CONF.format_tags                  #Which ones to use, e.g. 'p;div;h3' (def: all)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          STYLESCOMBO          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Formatting list ("styles")
CONF.stylesSet                    #Can be:
                                  #  - 'NAME'
                                  #  - 'NAME:FILE|URL'
                                  #  - false
                                  #  - 'default', i.e. styles.js

CKEDITOR.stylesSet                #STYLESSET
STYLESSET                         #Implements PLUGINS


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       STYLESHEETPARSER        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Parse CSS files from CONF.contentsCss in order to define CKEDITOR.styleSet
CONF.stylesheetParser_
skip|validSelectors               #REGEXP (def: /(^body\.|^\.)/i and /\w+\.\w+/)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLORBUTTON          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Font and background colors
CONF.colorButton_enableMore       #If true (def), shows color picker
CONF.colorButton_colors           #List of colors displayed as 'CSS_COLOR,...'
CONF.
colorButton_foreStyle|backStyle   #STYLE describing how the format is applied (can use "#(color)")


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SCAYT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Spell checker as you type. Uses WebSpellChecker.net
                                  #Uses ads (unless purchasing license)
CONF.disableNativeSpellChecker    #If true (def), disable browser's native spell checking.
CONF.scayt_autoStartup            #Def: false

CONF.scayt_sLang                  #Lang among (def. 'en_US')
CONF.scayt_userDictionaryName     #User-defined dictionary

CONF.scayt_contextCommands        #"STR|..." for the context menu options.
                                  #Def: 'ignore|ignoreall|add'
                                  #Also available: 'off|all' and 'option|language|dictionary|about'
CONF.scayt_uiTabs                 #'1|0,1|0,1|0': whether to show 'Options', 'Languages', 'Dictionary' (def: '1,1,1')
CONF.scayt_contextMenuItemsOrder  #Suggestions context menu order. Def: 'suggest|moresuggest|control'
CONF.scayt_moreSuggestions        #'on|off' (def: 'on')

CONF.scayt_minWordLength          #NUM (def: 4)
CONF.scayt_maxSuggestions         #NUM (def: 5)
CONF.scayt_disableOptionsStorage  #STR[_ARR] for the "Options" menu to disable (def: '')
                                  #Available: 'options', 'ignore-all-caps-words', 'ignore-domain-names',
                                  #'ignore-words-with-mixed-cases', 'ignore-words-with-numbers', 'lang', 'all'
CONF.scayt_elementsToIgnore       #'TAG,...' (def: 'style')

CONF.scayt_service
Host|Path|Port|Protocol           #Which endpoint to use (def: 'http://svc.webspellchecker.net/spellcheck31/script/ssrv.cgi')

CONF.scayt_customDictionaryIds    #Custom dictionaries 'ID,...' (only licensed version)
CONF.scayt_customerId             #Customer ID (only licensed version)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              WSC              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Spell checker through a dialog box, using also WebSpellChecker.net.
CONF.wsc_cmd                      #Which tabs is opened by default in dialog box, among 'spell|thes|grammar' (def: 'spell')

CONF.wsc_lang                     #Like CONF.scayt_sLang
CONF.wsc_userDictionaryName       #Like CONF.scayt_userDictionaryName
CONF.wsc_customerDictionaryIds    #Like CONF.scayt_customerDictionaryIds
CONF.wsc_customerId               #Like CONF.scayt_customerId


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:    SOURCEAREA|SOURCEDIALOG    :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #HTML source editing. 
                                  #  - sourcearea: inline. Only for 'normal mode'
                                  #  - sourcedialog: through a dialog
CONF.sourceAreaTabSize            #Def: 4 (tab-size CSS property)
                                  #Only if CONF.dataIndentationChars is '\t'

EDITOR.mode                       #'wysiwyg|source'
COMMAND_DEF.modes                 #Which modes can execute this commands as OBJ.wysiwyg|source 0|1


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BBCODE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #BBCode source editing


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           MAGICLINE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Allows inserting new lines through a red line when it is hard to do so
CONF.magicline_color              #Def: "red"
CONF.magicline_everywhere         #If false (def), only shows when needed
CONF.magicline_triggerOffset      #How close to make it appear (def: 30)
CONF.magicline_holdDistance       #How close to catch focus, as percentage of triggerOffset (def: 0.5)
CONF.magicline_tabuList           #Do not show if element has those HTML attributes STR_ARR (def: ['data-widget-wrapper'])
CONF.
magicline_keystrokeNext|Previous  #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           A11YHELP            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Shows shortcut dialog



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          SHAREDSPACE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Detach toolbar and bottom bar from content area, and share those across several EDITOR.
                                  #Not compatible with 'resize' nor 'maximize'
CONF.sharedSpaces.top|bottom      #'ID'|ELEM: where to put toolbar and bottom bar.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         NOTIFICATION          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Shows notifications
new CKEDITOR.plugins.notification #Returns NOTIFICATION
(EDITOR, OBJ)                     #OBJ:
                                  #  - message STR
                                  #  - type 'info' (def) or 'warning|success|progress'
                                  #  - progress NUM
                                  #  - duration NUM: how long visible. 
                                  #    Def:
                                  #     - warning|progress: 0, i.e. disabled
                                  #     - info|success: CONF.notification_duration NUM (def: 5000)
                                  #  - important BOOL
EDITOR.showNotification
(STR[, STR[, NUM]])               #Returns NOTIFICATION, with message, type, progress|duration
NOTIFICATION.message|type|progress
|duration                         #
NOTIFICATION.element              #DOM_ELEM
NOTIFICATION.editor               #EDITOR
NOTIFICATION.id                   #
NOTIFICATION.show|hide()          #Fires EDITOR event 'notificationShow|Hide' with CEVENT.data.notification NOTIFICATION
NOTIFICATION.update(OBJ)          #Fires EDITOR event 'notificationUpdate' with CEVENT.data.notification NOTIFICATION and
                                  #CEVENT.data.options OBJ
                                  #OBJ is same as constructor.
NOTIFICATION.isVisible()          #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:    NOTIFICATIONAGGREGATOR     :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Used to fire only one notification when several tasks performed (see online doc)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          WYSIWYGAREA          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Full page button
CONF.fullPage                     #If true (def: false), outputs a full HTML page (as an <iframe>)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           DOCPROPS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #With 'wysiwygarea', allows changing page properties through a dialog.



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           DEVTOOLS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Show extra dev infos about dialogs as popovers
CONF.devtools_styles              #'CSS' to be applied to popovers
CONF.devtools_textCallback(...)   #Text to be shown in popovers


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         ELEMENTSPATH          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Shows HTML path of focused element in bottom bar.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CONTEXTMENU          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.addMenuGroup
('MENUGROUP'[, NUM])              #NUM is priority order
MENUGROUP.show
(DOM_ELEM, NUM[, X][, Y])         #Shows menu at a specific location. NUM is corner 1|2|3|4
MENUGROUP.hide()                  #

MENUGROUP.add(MENUITEM_DEF)       #
MENUGROUP.removeAll()             #Add|remove elements to any context menu
MENUGROUP.addListener             #Add|remove elements to some context menu
(FUNC(DOM_ELEM, DOM_SELECTION,    #Fired on any right click. 
DOM_PATH))                        #Should return { 'MENUITEM': CKEDITOR.TRISTATE_* } according to args.

EDITOR.addMenuItem
('MENUITEM', MENUITEM_DEF)        #
EDITOR.addMenuItems
(MENUITEM_DEF_ARR)                #

MENUITEM_DEF.group                #'MENUGROUP'
MENUITEM_DEF.label                #STR
MENUITEM_DEF.icon                 #PATH
MENUITEM_DEF.command              #'COMMAND'
