
              
   CKEDITOR   
              


VERSION ==>                       #4.5.4

INSTALLATION ==>                  #Bower: ckeditor
                                  #No RequireJS
                                  #When concatenated, must define install path with ENVVAR CKEDITOR_BASEPATH

MODE ==>                          #Can be:
                                  #  - on textarea: 
                                  #     - 'normal mode' (with toolbars, etc., in an <iframe>)
                                  #     - automatically updates textarea value with HTML content
                                  #  - on any[contenteditable="BOOL"]: 'inline mode', read-write or read-only


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             BASE              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.replace('ID'[, CONF])    #Using global variable CKEDITOR and $("#ID"). Returns EDITOR

EDITOR.on('instanceReady', FUNC())#
EDITOR.on('change', FUNC(CEVENT)) #


CKEDITOR.config                   #CONF
CKEDITOR.editorConfig(CONF)       #Function which, when called, can modify CONF
                                  #If defines a CONF.customConfig, recursively loads it.
CONF.customConfig                 #FILE which usually define CKEDITOR.editorConfig
                                  #Def: package config.js

CKEDITOR.editor                   #EDITOR_FUNC
CKEDITOR.instances.ID             #EDITOR


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          BASE_ATTRS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.setReadOnly(BOOL)          #
EDITOR.readOnly                   #

CONF.language                     #'LANG' (def: CONF.defaultLanguage, i.e. 'en')

CONF.width|height                 #'CSS_LENP'|NUM (def: ''|200). Only 'normal mode'.
CONF.tabIndex                     #

CONF.contentsCss                  #CSS 'FILE[_ARR]' for editor in 'normal mode'

CONF.[shifte|E]nterMode           #Default behavior when hitting [SHIFT-]ENTER among CKEDITOR.ENTER_P|BR|DIV (def: P and BR)

CKEDITOR.env.isCompatible         #False if current browser not supported


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            PLUGINS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PLUGINS ==>                       #Can add|remove:
                                  #  - using online builder
                                  #  - or toolbar configurator online
                                  #  - use strict builder at dev/builder/build.sh
                                  #  - or download, then set with:
                                  #     - CONF.plugins "PLUGIN,..."
                                  #     - CONF.extraPlugins "PLUGIN,...": same without override def. CONF.plugins
                                  #     - CONF.removePlugins "PLUGIN,..."
                                  #     - CONF.removeButtons "BUTTON,...": prefer removePlugins


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            WIDGETS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


WIDGETS ==>                       #Can add|remove:
                                  #  - using online builder
                                  #  - use strict builder at dev/builder/build.sh
                                  #Are treated as single entities.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SKINS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SKINs ==>                         #Can add|remove:
                                  #  - using online builder
                                  #  - use strict builder at dev/builder/build.sh
                                  #  - or download, then set with:
                                  #     - CONF.skin or CKEDITOR.skinName STR

CKEDITOR.skin                     #SKIN

CONF.uiColor                      #"CSS_COLOR". 
                                  #SKIN.chameleon must be defined.
                                  #Can use plugin 'uicolor' to let user define it.
EDITOR.getUIColor()               #
SKIN.chameleon('EDITOR', 'PART')  #

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            JQUERY             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JQ.ckeditor([CONF])               #Use jQuery adapter to instantiate.
                                  #Must load adapters/jquery.js
                                  #Returns a jQuery PROMISE, resolved when loaded, with also property:
                                  #  - editor EDITOR
                                  #JQ.val([VAL]) will work out-of-the-box, except if CONF.jqueryOverrideVal false
                                  #Exposes some CEVENT as JQEVENTs: 'instanceReady|destroy|setData|getData|dataReady.ckeditor'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            OUTPUT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.getData([BOOL])            #Returns HTML content.
                                  #If true, only returns cached data, and does not fire [before]getData() events.
                                  #Fires [before]getData(CEVENT), with CEVENT.data.dataValue STR (getData() only)
EDITOR.setData(STR[, OBJ])        #Sets HTML content
                                  #Fires dataReady(CEVENT) and OBJ.callback(), unless OBJ.internal true.
                                  #If OBJ.noSnapshot true, do not record in undo history.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          HTMLWRITER           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Advanced control on HTML output
EDITOR.dataProcessor.
toDataFormat|Html('STR')          #From HTML to BBCode, and inverse.
EDITOR.dataFilter|htmlFilter      #FILTER used by each

EDITOR.dataProcessor.writer       #WRITER used when retrieving output
WRITER.indentationChars           #' ' or '\t' (def: CONF.dataIndentationChars (def: '\t'))
WRITER.lineBreakChars             #'\r\n' or '\n' (def)
WRITER.selfClosingEnd             #How self-closing tags are closed: '>' or '/>' (def)
WRITER.setRules('TAG', OBJ)       #Formatting for a given TAG. OBJ:
                                  #  - indent BOOL: indent children
                                  #  - breakBefore|AfterOpen|Close BOOL: inserting newlines

CONF.basicEntities                #If true (def), escape basic HTML entities
CONF.entities                     #If true (def), escape HTML entities
CONF.entities_greek|latin         #If true (def), escape Greek|Latin HTML entities
CONF.entities_processNumerical    #If true (def: false), convert all Unicode numbers into HTML entities.
            

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            TOOLBAR            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONF.toolbarLocation              #'top|bottom' (def: 'top'). In 'normal mode'
CONF.toolbarCanCollapse           #If true (def: false), user can collapse toolbar.
CONF.toolbarStartupExpanded       #If true (def), and CONF.toolbarCanCollapse true, starts collapsed.
CONF.toolbarGroupCycling          #If true (def), arrow keystokes navigate between button groups, not buttons

CONF.toolbar                      #Buttons. Either:
                                  #  - 'TOOLBAR'
                                  #  - VAL_ARR:
                                  #     - OBJ:
                                  #        - name 'BUTTON_GROUP'
                                  #        - items 'BUTTON'_ARR
                                  #           - '-': separator
                                  #     - '/': newline
CONF.toolbar_TOOLBAR              #Same but defines a 'TOOLBAR'
CONF.toolbarGroups                #Button groups. Same value as CONF.toolbar VAL_ARR, except:
                                  #  - items -> groups
                                  #  - 'PLUGIN' instead of 'BUTTON'
CKEDITOR.ui.addToolbarGroup
('BUTTON_GROUP', 
'NEXT_BUTTON_GROUP', 
'PARENT_BUTTON_GROUP')
CKEDITOR.ui.addButton             #OBJ:
('BUTTON', OBJ)                   #  - label STR
                                  #  - command STR
                                  #  - toolbar 'BUTTON_GROUP[,NUM]'
  


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FILTERS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



FILTER                            #Filters input
new CKEDITOR.filter(RULES|EDITOR) #Returns current FILTER, setup at load.
CKEDITOR.filter.instances[ID]     #FILTER, according to FILTER.id NUM
FILTER.allowedContent             #RULES:
                                  #  - true: everything
                                  #  - OBJ:
                                  #     - KEY "TAG ..."
                                  #        - can use $1 to mean anything, then using elements CKEDITOR.dtd
                                  #     - styles (CSS prop), attributes (HTML ATTR), classes (HTML class):
                                  #        - true: anything
                                  #        - "[!]STR ..."
                                  #          - ! means required (if not there, erase), otherwise optional (others are erased)
                                  #          - can use * meaning "anything", or e.g. attributes "data-*"
                                  #        - OBJ:
                                  #          - match(ELEM)->BOOL
                                  #          - propertiesOnly BOOL: if true, works only if another RULE allows this TAG
                                  #  - "RULE;...", where "RULE" can be "OBJ.KEY{OBJ.styles}[OBJ.attributes](OBJ.classes)"
                                  #  - STYLE[_ARR]
                                  #Read-only. Can be written with:
                                  #  - CONF.allowedContent RULES
                                  #    When not set, is in "automatic mode", i.e. defined by plugins.
                                  #  - CONF.extraAllowedContent: same but does not overwrite plugins definitions.
FILTER.disallowedContent          #RULES, applied before allowedContent.
                                  #Read-only. Can be written with:
                                  #  - CONF.disallowedContent
FILTER.customConfig               #True if CONF.extraAllowedContent used.
FILTER.disabled                   #
FILTER.editor                     #EDITOR_FUNC. null if standalone


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            EVENTS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CEVENTEMITTER.fire('EVENT', OBJ)  #
CEVENTEMITTER.
on('EVENT', FUNC(CEVENT)[, OBJ2]) #OBJ2 available at CEVENT.listenerData

CEVENT
CEVENT.data                       #OBJ
CEVENT.name                       #STR
CEVENT.editor                     #EDITOR
CEVENT.sender                     #OBJ that sends the event

CEVENT.cancel|stop()              #fire() will return false|true
CEVENT.removeListener()           #Removes current listener


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            RESIZE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Only 'normal mode'
CONF.resize_enabled               #BOOL (def: true). Show resizing handle in bottom right corner.
CONF.resize_max|minHeight|Width   #NUM
CONF.resize_dir                   #'both|vertical|horizontal'

EDITOR.resize                     #  - BOOL: if true, applied to content area, otherwise to entire editor area
(NUM, NUM2[, BOOL[, BOOL2]])      #  - BOOL2: if true, applied to inner area, otherwise to outer area


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOGROW            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Adapt height to content. Not needed in 'inline mode'
CONF.autoGrow_min|maxHeight       #NUM (def: 200|0)
CONF.autoGrow_bottomSpace         #NUM (def: 0), space between content and bottom border
CONF.autoGrow_onStartup           #BOOL (def: false), if true, adjust initial height on startup instead of focus.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             IMAGE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Instering images. By default produces <img>
CONF.image_prefillDimensions      #If true (def), upload box prefills dimensions.
CONF.image_previewText            #Preview text shown in upload box.
CONF.image_removeLinkByEmptyURL   #If true (def), remove links when URL is ''


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            IMAGE2             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Replace "image" plugin. Allows:
                                  #  - captions
                                  #  - resize handler
                                  #  - drag&drop
                                  #By default produces:
                                  #  figure.image
                                  #    img
                                  #    figcaption
CONF.image2_captionedClass        #'CLASS' applied to <figure> (def: 'image')
CONF.image2_alignClasses          #STR_ARR. 3 CSS classes also applied to <figure> when aligned to left|center|right
                                  #Def: use style="float:left|right" and 'text-align: center'
CONF.image2_disableResizer        #If false (def), allow resizing image.
CONF.image2_prefillDimensions     #Like CONF:image_prefillDimensions


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TABLE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Inserting <table>


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          TABLETOOLS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Cell properties context menu + context menu with inserting|splitting|removing rows|cells|columns


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          TABLERESIZE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Resize handle for columns|rows


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLORDIALOG          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


																  #Color picker in dialogs where user needs to pick a color
                                  #Uses 'dialog' plugin                                  


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DIALOG             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Modals


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         DIALOGADVTAB          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #'Advanced' tab in dialogs, allowing to set HTML attrs id|dir|style|class


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           EMBEDBASE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Base plugin for "embed[semantic]"

  
																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        EMBED[SEMANTIC]        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Embedded URL content in an <iframe> using Iframely.
                                  #If "semantic", uses oEmbed standard.
CONF.embed_provider               
CKEDITOR.plugins.embedBase.       #oEmbed provider (def: "//ckeditor.iframe.key/api/oEmbed={url}&callback={callback}")
baseDefinition.providerUrl        #Can use "{url}" (requested URL) and "{callback}" (JSONP)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOEMBED           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Autoembed URLs when pasted (show error when cannot automatically embed)
CONF.autoEmbed_widget             #Plugin "STR,..."[(URL)] to use (def: "embed,embedsemantic")


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CODESNIPPET          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

                                  
                                  #Insert code snippets (using highlight.js)
                                  #In 'inline mode', needs to load hightlight.js JavaScript and CSS.
CONF.codeSnippet_codeClass        #'CLASS' of <code> (def: 'hljs')
CONF.codeSnippet_languages        #OBJ of programming languages (def: null, i.e. all)
CONF.codeSnippet_theme            #STR color theme (def: 'default')
CONF.codesnippet.
setHighlighter(HIGHLIGHTER)       #Use another highlighter than highlight.js


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CODESNIPPETGESHI        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Like 'codesnippet', but uses GeSHI hightlighter (server-side) instead of highlight.js
CONF.codeSnippetGeshi_url         #'URL' (PHP)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MATHJAX            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Inserting TeX
CONF.mathJaxClass                 #'CLASS'. Any elements with this CSS class will be converted (def: 'math-tex')
CONF.mathJaxLib                   #MathJax library path


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PLACEHOLDER          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Insert words that are treated as a single entity


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           CLIPBOARD           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Handlers pasted and dropped content.
CONF.clipboard_defaultContentType #If not sure whether 'text' or 'html' (def).
CONF.forcePasteAsPlainText        #If true, forces all pasted content as 'text'.

EDITOR.getClipboardData           #Open window to paste data.
(OBJ, FUNC(OBJ2))                 #OBJ: title STR
                                  #OBJ2: type STR, dataValue STR

EDITOR.[afterP|p]aste(CEVENT)     #CEVENT.data:
                                  #  - type STR (e.g. 'html', 'text', 'auto')
                                  #  - dataValue STR
                                  #  - method 'drop|paste'
                                  #  - dataTransfer DATATRANSFER
                                  #  - dontFilter BOOL: if true, does not apply CONF.pasteFilter
EDITOR.dragstart|end(CEVENT)      #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
EDITOR.drop(CEVENT)               #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
                                  #  - drag|dropRange DOM_RANGE
                                  #    Can also use CLIPBOARD.getRangeAtDropPosition(EVENT, EDITOR)-> DOM_RANGE
CLIPBOARD.mainPasteEvent          #'[after]paste': which event to prefer listening to with this browser

EDITOR.pasteFilter                #FILTER. 
                                  #Not applied when input comes from CKEditor.
                                  #Def: CONF.pasteFilter:
                                  #  - 'plain-text': will convert to plain text
                                  #  - 'semantic-content' (def for Chrome, Safari, Opera): usual HTML tags
                                  #  - RULES (see filters)
                                  #  - null (def for other browsers)

DATATRANSFER                      #Higher-level API for DOM DATATRANSFER
DATATRANSFER.getData('TYPE')      #
DATATRANSFER.setData('TYPE', STR) #
DATATRANSFER.isEmpty()            #
DATATRANSFER.getFile(NUM)         #
DATATRANSFER.getFilesCount()      #

DATATRANSFER.$                    #DOM clipboard event
DATATRANSFER.id                   #
DATATRANSFER.sourceEditor         #EDITOR

CKEDITOR.plugins.clipboard        #CLIPBOARD
CLIPBOARD.canClipboardApiBeTrusted
(DATATRANSFER, EDITOR)            #False if browser does not support 'hmtl' type in DOM clipboard.
CLIPBOARD.isCustomCopyCutSupported#False if browser does not allow using DOM clipboard.
CLIPBOARD.
isCustomDataTypesSupported        #True if browser allows using custom data types in DOM clipboard's getData|setData()
CLIPBOARD.isFileApiSupported      #True if browser supports DOM files.

CLIPBOARD.getDropTarget(EDITOR)   #Returns DOM_OBJ
CLIPBOARD.
preventDefaultDropOnElement
(DOM_OBJ)                         #Prevents dropping on it.

CLIPBOARD.
initDrag|PasteDataTransfer
([DOM_EVENT[, EDITOR]])           #
CLIPBOARD.resetDragDataTransfer   #Programmatically create drag|paste


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         PASTEFROMWORD         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Allow pasting from Microsoft Word
CONF.pasteFromWordCleanupFile     #FILE. Module providing MSWord cleanup function
CONF.pasteFromWord
NumberedHeadingsToList            #BOOL (def: false)
CONF.pasteFromWordPromptCleanup   #If true (def: false), shows dialog to say content will be cleaned.
CONF.pasteFromWordRemoveFontStyles#Def: true
CONF.pasteFromWordRemoveStyles    #Def: true


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         BASICSTYLES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Font formatting
CONF.coreStyles_bold|italic|strike
|subscript|superscript|underline  #STYLE applied


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         REMOVEFORMAT          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Remove font formatting


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FORMAT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Paragraph formatting
CONF.format_address|div|h1-6|p|pre#STYLE
CONF.format_tags                  #Which ones to use, e.g. 'p;div;h3' (def: all)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          STYLESCOMBO          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Formatting list ("styles")
CONF.stylesSet                    #Can be:
                                  #  - 'NAME'
                                  #  - 'NAME:FILE|URL'
                                  #  - false
                                  #  - 'default', i.e. styles.js

CKEDITOR.stylesSet                #STYLESSET
STYLESSET.basePath|filename       #dirname|filename
STYLESSET.loaded|registered       #BOOL

STYLESSET.add
('NAME', PLUGIN_DEF_ARR)          #
STYLESSET.get('NAME')    #
STYLESSET.get[Folder]Path('NAME') #dirname|filename
STYLSESET.load
('NAME', FUNC(OBJ)[, THIS])       #

STYLESSET.addExternal
('NAME', 'FILE', PLUGIN_DEF_ARR)  #
STYLESSET.externals               #OBJ (everything registered with addExternal())


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       STYLESHEETPARSER        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Parse CSS files from CONF.contentsCss in order to define CKEDITOR.styleSet
CONF.stylesheetParser_
skip|validSelectors               #REGEXP (def: /(^body\.|^\.)/i and /\w+\.\w+/)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLORBUTTON          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Font and background colors
CONF.colorButton_enableMore       #If true (def), shows color picker
CONF.colorButton_colors           #List of colors displayed as 'CSS_COLOR,...'
CONF.
colorButton_foreStyle|backStyle   #STYLE describing how the format is applied (can use "#(color)")


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SCAYT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Spell checker as you type. Uses WebSpellChecker.net
                                  #Uses ads (unless purchasing license)
CONF.disableNativeSpellChecker    #If true (def), disable browser's native spell checking.
CONF.scayt_autoStartup            #Def: false

CONF.scayt_sLang                  #Lang among (def. 'en_US')
CONF.scayt_userDictionaryName     #User-defined dictionary

CONF.scayt_contextCommands        #"STR|..." for the context menu options.
                                  #Def: 'ignore|ignoreall|add'
                                  #Also available: 'off|all' and 'option|language|dictionary|about'
CONF.scayt_uiTabs                 #'1|0,1|0,1|0': whether to show 'Options', 'Languages', 'Dictionary' (def: '1,1,1')
CONF.scayt_contextMenuItemsOrder  #Suggestions context menu order. Def: 'suggest|moresuggest|control'
CONF.scayt_moreSuggestions        #'on|off' (def: 'on')

CONF.scayt_minWordLength          #NUM (def: 4)
CONF.scayt_maxSuggestions         #NUM (def: 5)
CONF.scayt_disableOptionsStorage  #STR[_ARR] for the "Options" menu to disable (def: '')
                                  #Available: 'options', 'ignore-all-caps-words', 'ignore-domain-names',
                                  #'ignore-words-with-mixed-cases', 'ignore-words-with-numbers', 'lang', 'all'
CONF.scayt_elementsToIgnore       #'TAG,...' (def: 'style')

CONF.scayt_service
Host|Path|Port|Protocol           #Which endpoint to use (def: 'http://svc.webspellchecker.net/spellcheck31/script/ssrv.cgi')

CONF.scayt_customDictionaryIds    #Custom dictionaries 'ID,...' (only licensed version)
CONF.scayt_customerId             #Customer ID (only licensed version)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              WSC              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Spell checker through a dialog box, using also WebSpellChecker.net.
CONF.wsc_cmd                      #Which tabs is opened by default in dialog box, among 'spell|thes|grammar' (def: 'spell')

CONF.wsc_lang                     #Like CONF.scayt_sLang
CONF.wsc_userDictionaryName       #Like CONF.scayt_userDictionaryName
CONF.wsc_customerDictionaryIds    #Like CONF.scayt_customerDictionaryIds
CONF.wsc_customerId               #Like CONF.scayt_customerId


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:    SOURCEAREA|SOURCEDIALOG    :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #HTML source editing. 
                                  #  - sourcearea: inline. Only for 'normal mode'
                                  #  - sourcedialog: through a dialog
CONF.sourceAreaTabSize            #Def: 4 (tab-size CSS property)
                                  #Only if CONF.dataIndentationChars is '\t'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BBCODE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #BBCode source editing


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           MAGICLINE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Allows inserting new lines through a red line when it is hard to do so
CONF.magicline_color              #Def: "red"
CONF.magicline_everywhere         #If false (def), only shows when needed
CONF.magicline_triggerOffset      #How close to make it appear (def: 30)
CONF.magicline_holdDistance       #How close to catch focus, as percentage of triggerOffset (def: 0.5)
CONF.magicline_tabuList           #Do not show if element has those HTML attributes STR_ARR (def: ['data-widget-wrapper'])
CONF.
magicline_keystrokeNext|Previous  #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           A11YHELP            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Shows shortcut dialog



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          SHAREDSPACE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Detach toolbar and bottom bar from content area, and share those across several EDITOR.
                                  #Not compatible with 'resize' nor 'maximize'
CONF.sharedSpaces.top|bottom      #'ID'|ELEM: where to put toolbar and bottom bar.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         NOTIFICATION          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Shows notifications
new CKEDITOR.plugins.notification #Returns NOTIFICATION
(EDITOR, OBJ)                     #OBJ:
                                  #  - message STR
                                  #  - type 'info' (def) or 'warning|success|progress'
                                  #  - progress NUM
                                  #  - duration NUM: how long visible. 
                                  #    Def:
                                  #     - warning|progress: 0, i.e. disabled
                                  #     - info|success: CONF.notification_duration NUM (def: 5000)
                                  #  - important BOOL
EDITOR.showNotification
(STR[, STR[, NUM]])               #Returns NOTIFICATION, with message, type, progress|duration
NOTIFICATION.message|type|progress
|duration                         #
NOTIFICATION.element              #DOM_ELEM
NOTIFICATION.editor               #EDITOR
NOTIFICATION.id                   #
NOTIFICATION.show|hide()          #Fires EDITOR.notificationShow|Hide(CEVENT). where CEVENT.data.notification NOTIFICATION
NOTIFICATION.update(OBJ)          #Fires EDITOR.notificationUpdate(CEVENT). where CEVENT.data.notification NOTIFICATION and
                                  #CEVENT.data.options OBJ
                                  #OBJ is same as constructor.
NOTIFICATION.isVisible()          #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:    NOTIFICATIONAGGREGATOR     :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Used to fire only one notification when several tasks performed (see online doc)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          WYSIWYGAREA          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Full page button
CONF.fullPage                     #If true (def: false), outputs a full HTML page (as an <iframe>)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           DOCPROPS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #With 'wysiwygarea', allows changing page properties through a dialog.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DIALOGS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.on                       #Allows customizing builtin dialogs.
('dialogDefinition', FUNC(CEVENT))#CEVENT.data:
                                  #  - name STR
                                  #  - definition DIALOGDEF

DIALOGDEF.getContents('TAB')      #Returns TAB
TAB.get('FIELD')                  #Returns FIELD
FIELD.default                     #Default value

DIALOGDEF.onLoad|Show()           #First|every time
DIALOGDEF.onOk|Cancel()           #

DIALOGDEF.buttons                 #
DIALOGDEF.contents                #

DIALOGDEF.resizable               #CKEDITOR.DIALOG_RESIZE_NONE|WIDTH|HEIGHT
DIALOGDEF.minHeight|Width         #NUM
DIALOGDEF.height|width            #NUM
DIALOGDEF.title                   #STR

DIALOG.selectPage('TAB')          #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           DEVTOOLS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Show extra dev infos about dialogs as popovers
CONF.devtools_styles              #'CSS' to be applied to popovers
CONF.devtools_textCallback(...)   #Text to be shown in popovers


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         ELEMENTSPATH          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Shows HTML path of focused element in bottom bar.
