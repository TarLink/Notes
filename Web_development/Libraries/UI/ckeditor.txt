
              
   CKEDITOR   
              


VERSION ==>                       #4.5.4

INSTALLATION ==>                  #Bower: ckeditor
                                  #No RequireJS

BUILDING ==>                      #Goal:
                                  #  - create release (minify, etc.)
                                  #  - pick only needed parts
                                  #Use dev/builder/build.sh:
                                  #  - download and launch ckbuilder.jar
                                  #  - based on build-config.js, which defines CKBUILDER_CONFIG OBJ:
                                  #     - skin 'SKIN'
                                  #     - plugins.PLUGIN 1|0 (def: none)
                                  #     - languages.LANG (e.g. 'en' or 'en-us') 1|0 (def: all)
                                  #     - ignore PATH_ARR
                                  #     - js 'PATH[,start|aftercore|end]'_ARR: custom JavaScript added to build
                                  #  - create ./release/ckbuilder/ (optimized but not concatenated)
                                  #  - options:
                                  #     --build-config FILE
                                  #     --overwrite
                                  #     --leave-js|css-unminified
                                  #     --no-zip|tar
                                  #Can use online builder, or online toolbar configurator to do it too.

SUMMARY ==>                       #Initialization:
                                  #  - init: normal mode vs inline mode
                                  #  - jquery
                                  #  - config
                                  #Base:
                                  #  - events
                                  #Environment:
                                  #  - env
                                  #  - adobeair: Adobe Air support
                                  #  - about: credits dialog
                                  #Helpers:
                                  #  - XML
                                  #  - AJAX
                                  #i18n:
                                  #  - i18n: base
                                  #  - language: let user change HTML lang|dir attribute
                                  #  - bdi
                                  #Design:
                                  #  - skins
                                  #  - uicolor: allow user change base color
                                  #UI:
                                  #  - UI: base
                                  #  - panel
                                  #  - floatpanel
                                  #  - menu
                                  #  - contextmenu
                                  #  - button
                                  #  - panelbutton
                                  #  - menubutton
                                  #  - listblock
                                  #  - richcombo
                                  #Dialogs:
                                  #  - dialog: base
                                  #  - dialogui: base UI elements
                                  #  - dialogadvtab: advanced tab (change id|dir|style|class)
                                  #  - iframedialog: <iframe> dialog
                                  #  - colordialog: color picker dialog
                                  #  - popup: window.open()
                                  #Notification:
                                  #  - notification
                                  #  - notificationaggregator: one notification for several tasks
                                  #Toolbar:
                                  #  - wysiwygarea: main editing mode
                                  #  - divarea: 'inline mode' alternative
                                  #  - toolbar
                                  #  - floatingspace: where to place toolbar in 'inline mode'
                                  #  - sharedspace: one toolbar, several EDITOR
                                  #  - fixed: toolbar always on top (while editor present and 'normal mode')
                                  #  - maximize
                                  #IO:
                                  #  - I/O: base
                                  #  - filter
                                  #  - HTML writer: advanced filter
                                  #  - enterkey: typing 'Enter'
                                  #  - tab: typing 'Tab'
                                  #  - entities: HTML entities
                                  #  - lineutils: creating horizontal spaces
                                  #  - markdown: edit in Markdown
                                  #  - bbcode: BBCode output
                                  #  - autosave
                                  #  - lite: track changes
                                  #Extensions:
                                  #  - commands: functions to fire
                                  #  - feature: command + filter
                                  #  - plugins: commands/dialogs/shortcuts/init_code/button/etc. that can be added or not
                                  #  - widget: single entity on the editor
                                  #Basic:
                                  #  - readonly
                                  #  - undo
                                  #  - find
                                  #  - newpage: clears page
                                  #Selection:
                                  #  - selection: base
                                  #  - selectall
                                  #clipboard:
                                  #  - clipboard: base
                                  #  - pastetext: paste as plain text
                                  #  - pasteword: paste from Word
                                  #Font formatting:
                                  #  - basicstyles: bold|italic|underline|strike|subscript|superscript
                                  #  - removeformat
                                  #  - stylescombo: list of predefined styles
                                  #  - stylesheetparser: use CSS files for 'stylescombo'
                                  #  - font: font-family, font-size
                                  #  - ckeditor-gwf-plugin: Google Web Font font families
                                  #  - colorbutton: color, background-color
                                  #  - texttransform: change case
                                  #  - letterspacing: CSS letter-spacing
                                  #Paragraph formatting:
                                  #  - indent[block]: indent|outdent button
                                  #  - justify
                                  #  - lineheight
                                  #  - format: list of predefined styles
                                  #  - blockquote: <blockquote>
                                  #  - div: <div>
                                  #Insert:
                                  #  - link
                                  #  - autolink: when pasting
                                  #  - horizontalrule
                                  #  - specialchar
                                  #  - forms: <input>, etc.
                                  #  - html5validation: form validation
                                  #  - templates: predefined 'HTML' chunks
                                  #  - placeholder: [[...]] WIDGET
                                  #  - token: similar to placeholder
                                  #  - footnotes
                                  #List:
                                  #  - indenlist: indent|outdent with Tab
                                  #  - list
                                  #  - liststyles: edit list-style-*
                                  #Tables:
                                  #  - table
                                  #  - tabletools: add context menu options on <table>
                                  #  - tableresize
                                  #  - quicktable: like <table>, but also shows quicktable
                                  #  - layoutmanager: <table> meant for layout
                                  #Multimedia:
                                  #  - image[2]
                                  #  - imagerotate: rotate <img>
                                  #  - chart: insert charts using chart.js
                                  #  - youtube
                                  #  - locationmap: Google Maps
                                  #  - googledocs
                                  #  - audio: <audio>
                                  #  - flash: Adobe Flash
                                  #  - slideshow: inserting slideshows
                                  #  - smiley
                                  #  - fontawesome: insert FontAwesome icons
                                  #embed:
                                  #  - fakeobjects: replace by <img> when editor idle
                                  #  - embedbase: base
                                  #  - embed[semantic]: <iframe> oEmbed
                                  #  - autoembed: when pasting
                                  #  - iframe: <iframe>
                                  #  - codesnippet[geshi]: code editor
                                  #  - codemirror: code editor
                                  #  - mathjax: TeX
                                  #  - widgetboostrap: insert Boostrap widgets
                                  #Upload:
                                  #  - save: <form> submit
                                  #  - filebrowser: filebrowser popup
                                  #  - filetools: file upload helpers
                                  #  - uploadwidget
                                  #  - uploadimage
                                  #  - imageuploader
                                  #Size:
                                  #  - autogrow
                                  #  - resize
                                  #  - wordcount: bottom bar word count, and possibility to restrict max length
                                  #Correction: 
                                  #  - scayt|swc: auto-correction
                                  #  - autocorrect: substitute sequences as you type, e.g. <--> to ↔
                                  #Print:
                                  #  - print: browser print popup
                                  #  - preview: popup with HTML output
                                  #  - pagebreak
                                  #a11y:
                                  #  - tabindex
                                  #  - magicline: easy insert with red line helper
                                  #  - a11yhelp: shortcuts popup
                                  #Developers:
                                  #  - sourcearea|sourcedialog: editing HTML code
                                  #  - docprops: page properties
                                  #  - devtools: dialog development visual helpers
                                  #  - showborders: table development visual helpers
                                  #  - showblocks: visual helpers
                                  #  - elementspath: HTML path in bottom bar




                    
   INITIALIZATION   
                    




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             INIT              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


MODE ==>                          #Can be:
                                  #  - on textarea: 
                                  #     - 'normal mode' (with toolbars, etc., in an <iframe>)
                                  #     - automatically updates textarea value with HTML content
                                  #  - on any[contenteditable="BOOL"]: 'inline mode', read-write or read-only


CKEDITOR.replace('ID'[, CONF])    #Using global variable CKEDITOR and $("#ID"). Returns EDITOR

EDITOR.on('instanceReady')        #
EDITOR.on('change')               #


CKEDITOR.editor                   #EDITOR_FUNC
CKEDITOR.instances.ID             #EDITOR

EDITOR.destroy()                  #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            JQUERY             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JQ.ckeditor([CONF])               #Use jQuery adapter to instantiate.
                                  #Must load adapters/jquery.js
                                  #Returns a jQuery PROMISE, resolved when loaded, with also property:
                                  #  - editor EDITOR
                                  #JQ.val([VAL]) will work out-of-the-box, except if CONF.jqueryOverrideVal false
                                  #Exposes some CEVENT as JQEVENTs: 'instanceReady|destroy|setData|getData|dataReady.ckeditor'
JQ.editor                         #EDITOR


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            CONFIG             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.config                   #all-EDITOR CONF
EDITOR.config                     #EDITOR-specific CONF
CKEDITOR.editorConfig(CONF)       #Function which, when called, can modify all-EDITOR CONF
                                  #If defines a CONF.customConfig, recursively loads it.
CONF.customConfig                 #FILE which usually define CKEDITOR.editorConfig
                                  #Def: package config.js





          
   BASE   
          




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            EVENTS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CEVENTEMITTER.fire                
('EVENT'[, OBJ[, EDITOR]])        #Returns false if cancelled, VAL otherwise.
CEVENTEMITTER.fireOnce(...)       #Same as CEVENTEMITTER.fire(...) followed by removeListener()
CEVENTEMITTER.
on|once('EVENT', FUNC(CEVENT)
[, THIS][, OBJ2][, PRIO_NUM])     #OBJ2 available at CEVENT.listenerData
CEVENTEMITER.hasListeners('EVENT')#
CEVENTEMITTER.removeListener
('EVENT')                         #
CEVENTEMITTER.removeAllListeners()#
CEVENTEMITTER.define('EVENT', OBJ)#If OBJ.errorProof true, wrap listener in try|catch block
CEVENTEMITTER.capture()           #???


CEVENT
CEVENT.data                       #OBJ
CEVENT.name                       #STR
CEVENT.editor                     #EDITOR
CEVENT.sender                     #OBJ that sends the event

CEVENT.cancel|stop()              #fire() will return false|true
CEVENT.removeListener()           #Removes current listener




                 
   ENVIRONMENT   
                 




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              ENV              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.env                      #ENV
ENV.air|chrome|edge|gecko|ie|
safari|webkit                     #BOOL
ENV.version                       #NUM browser version
ENV.iOS|mac                       #BOOL

ENV.isCompatible                  #BOOL: supported by CKEditor

ENV.quirks                        #BOOL (IE quirks mode)
ENV.needsBr|NbspFiller            #BOOL: needs to fix <br> or non-breaking space.

ENV.secure()->BOOL                #HTTPS


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           ADOBEAIR            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'adobeair'
                                  #Support for Adobe Air


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             ABOUT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'about' (depends: 'dialog')
COMMAND 'about'                   #Fires dialog 'about', which shows credits.
                                  #Done by button 'About'




             
   HELPERS   
             




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              XML              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'xml'
new CKEDITOR.xml('XML')           #Returns XML
XML.baseXml                       #XML as OBJ
XML.getInnerXml('XPATH'[,CONTEXT])#
XML.selectNodes('XPATH'[,CONTEXT])#
XML.selectSingleNode
('XPATH'[, CONTEXT])              #
 

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             URLS              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.getUrl('PATH|URL')       #Function resolving URLs internally used.
                                  #If 'URL', adds CKEDITOR.timestamp (build timestamp) at the end as "?t=TIMESTAMP"
                                  #If 'URL' or absolute 'PATH', returns it
                                  #If relative 'PATH', appends BASEPATH
CKEDITOR.basePath                 #BASEPATH:
                                  #  - def: where CKEDITOR is loaded (using <script> src)
                                  #  - can override with ENVVAR CKEDITOR_BASEPATH



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             AJAX              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'ajax' (depends: 'xml')
CKEDITOR.ajax.load[Xml]|post(...) #Ajax helpers used by other plugins





          
   I18N   
          




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             I18N              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.langCode                   #Current 'LANG':
                                  #  - def: CONF.language 
                                  #     - def: CKEDITOR.lang.detect(CONF.defaultLanguage (def: 'en'))))
EDITOR.lang.[PLUGIN.]LANG         #OBJ of translations to use
                                  #Done at initialization, so cannot dynamically change.


CKEDITOR.lang.load                #Loads BASEPATH/lang/LANG3.js, which fills CKEDITOR.lang.LANG (core translations)
('LANG'[, 'LANG2'],               #Done once at initialization.
FUNC('LANG3', OBJ))               #LANG3:
                                  #  - 'LANG' 
                                  #  - if null|undefined: CKEDITOR.lang.detect('LANG2'):
                                  #     - by order of priority:
                                  #        - NAVIGATOR.userLanguage|language
                                  #        - 'LANG2'
                                  #     - checks if part of supported languages (CKEDITOR.lang.languages, depends on build)
                                  #OBJ is CKEDITOR.lang.LANG3, with also OBJ.dir 'rtl|ltr'
                                  #Fire 'langLoaded'

PLUGIN_DEF.lang                   #Languages supported by the PLUGIN, as 'LANG,...'|'LANG'_ARR
                                  #When plugin is initialized, this will load plugin translations into CKEDITOR.lang.PLUGIN.LANG:
                                  #  - load BASEPATH/plugins/PLUGIN/lang/LANG.js, which should call 
                                  #    PLUGINS.setLang('PLUGIN', 'LANG', OBJ):
                                  #     - this will CKEDITOR.lang.PLUGIN.LANG = OBJ


CONF.contentsLanguage             #If CONF.fullPage true, <html lang="VAL"> (def: EDITOR.langCode)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           LANGUAGE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'language' (depends: 'menubutton')
COMMAND 'language'                #Toggle settings HTML attributes lang and dir on all <span>
                                  #Done by MENUBUTTON 'Language' and contextMenu (MENUGROUP 'language[_remove]')
CONF.language_list                #STR_ARR of 'CODE:LABEL[:rtl|ltr]', e.g. 'fr:French'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              BDI              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'bdi'
COMMAND 'BidiLtr|Rtl'             #Change direction. Done by buttons 'ltr|rtl' (toolbar 'bidi')
EDITOR.on('dirChanged')           #Fired with CEVENT.data: node DOM_NODE, dir STR




            
   DESIGN   
            




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SKINS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


STRUCTURE ==>                     #Files:
                                  #  - skin.js: logic
                                  #  - editor[_BROWSER].css: main CSS
                                  #     - BROWSER is loaded if ENV[BROWSER] is true
                                  #  - dialog[_BROWSER].css: 
                                  #     - dialogs CSS
                                  #     - to support 'dialog' busy state, see online doc on CSS to add
                                  #  - icons/ICON.png: will override default ones provided by plugins
                                  #  - notification.css: for 'notification' plugin (can copy from Moono skin)
                                  #Available ones depends on build
                                  #Can be packaged (concatenates, minify, sprites) using:
                                  #  java -jar ckbuilder.jar --build-skin "SKIN" "SKIN-release"

CKEDITOR.skinName                 
CONF.skin                         #'SKIN'
CKEDITOR.skin                     #SKIN

SKIN.name                         #
SKIN.path()                       #
SKIN.getPath('PART')              #
SKIN.loadPart('PART'[, FUNC()])   #

SKINS.icons                       #OBJ
SKIN.addIcon('ICON', 'PATH'[, Y]
[, STR])                          #STR is background-size CSS value
SKIN.getIconStyle('ICON'[, BOOL]) #Returns CSS style of 'ICON'. If true, indicates RTL.
 
CONF.uiColor                      #"CSS_COLOR". 
                                  #SKIN.chameleon must be defined.
                                  #Can use plugin 'uicolor' to let user define it.
EDITOR.getUIColor()               #
SKIN.chameleon('EDITOR', 'PART')  #

EXTRA CLASSES ==>                 #On the editor:
                                  #  - .cke_rtl: RTL
                                  #  - .cke_hc: High contrast


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            UICOLOR            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'uicolor' (depends: 'dialog')
COMMAND 'uicolor'                 #Opens dialog 'uicolor', which let user change toolbar color.
                                  #Done by button 'UIColor' (toolbar 'tools')




        
   UI   
        




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              UI               :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.ui                       #UI. Is an EVENTEMITTER
UI.add('NAME', VAL, OBJ)          #According to VAL CKEDITOR.UI_BUTTON|MENUBUTTON|PANEL|PANEL_BUTTON|RICHCOMBO|SEPARATOR,
                                  #creates a new UI object, with definition OBJ:
                                  #  - CKEDITOR.UI_BUTTON: like UI.addButton(...)
                                  #  - CKEDITOR.UI_RICHCOMBO: like UI.addRichCombo(...)
                                  #When ready, fires 'ready'
UI.create|get('NAME')             #[Creates and] returns an UI element, e.g. BUTTON
UI.addHandler(VAL, OBJ)           #Creates a UI type (like CKEDITOR.UI_*). OBJ:
                                  #  - contentsElement DOM_ELEM: container
                                  #  - create(OBJ)->DOM_ELEM2
                                  #Handlers for builtins UI types are available at BUTTON|PANEL|RICHCOMBO.handler

UI.space('bottom|contents|top')   #Returns UI container for main UI elements, i.e. bottom|top bars and content.
UI.spaceId('...')                 #Same but returns ID


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             PANEL             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'panel'
                                  #Lower-level UI used by toolbar
PANEL.addBlock('BLOCK', BLOCK)    #
PANEL.getBlock('BLOCK')           #
PANEL.showBlock('BLOCK')          #
PANEL.render(...)                 #Like BUTTON.render(...)

BLOCK.markItem(NUM)               #Mark as activated


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          FLOATPANEL           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'floatpanel' (depends: 'panel')
                                  #Lower-level UI used by dropdowns
FLOATPANEL.addBlock('BLOCK',BLOCK)#
FLOATPANEL.getBlock('BLOCK')      #
FLOATPANEL.render(...)            #Like BUTTON.render(...)

FLOATPANEL.addListBlock
('BLOCK', BLOCK_ARR)              #

FLOATPANEL.allowBlur(BOOL)        #
FLOATPANEL.blur|focus()           #

FLOATPANEL.showBlock('BLOCK',     #DOM_ELEM is offset parent, NUM is 1|2|3|4 for different corners.
DOM_ELEM, NUM[, X][, Y][, FUNC()])#FUNC is done callback.
FLOATPANEL.showAsChild
(FLOATPANEL2, ...)                #Using FLOATPANEL2.showBlock(...)
FLOATPANEL.reposition()           #Put in same position as last showBlock()
FLOATPANEL.hide[Child]()          #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             MENU              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'menu' (depends: 'panel')
                                  #Lower-level UI used by dropdowns
CONF.menu_subMenuDelay            #Delay before showing menu options (def: 400)
EDITOR.fire('menuShow')           #CEVENT.data: panel PANEL_ARR


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CONTEXTMENU          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'contextmenu' (depends: 'menu')

CONF.menu_groups                  #'MENUGROUP,...'

EDITOR.addMenuGroup
('MENUGROUP'[, NUM])              #NUM is priority order
MENUGROUP.show
(DOM_ELEM, NUM[, X][, Y])         #Shows menu at a specific location. NUM is corner 1|2|3|4
MENUGROUP.hide()                  #

MENUGROUP.add(MENUITEM_DEF)       #
MENUGROUP.removeAll()             #Add|remove elements to any context menu
MENUGROUP.addListener             #Add|remove elements to some context menu
(FUNC(DOM_ELEM, DOM_SELECTION,    #Fired on any right click. 
DOM_PATH))                        #Should return { 'MENUITEM': CKEDITOR.TRISTATE_* } according to args.

EDITOR.addMenuItem
('MENUITEM', MENUITEM_DEF)        #
EDITOR.addMenuItems
(MENUITEM_DEF_ARR)                #

MENUITEM_DEF.group                #'MENUGROUP'
MENUITEM_DEF.label                #STR
MENUITEM_DEF.icon                 #PATH
MENUITEM_DEF.command              #'COMMAND'

CONF.browserContextMenuOnCtrl     #If false, do not show when pressing 'Ctrl' + click


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BUTTON             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugins 'button'

UI.addButton('BUTTON', BUTTON_DEF)
BUTTON_DEF.label                  #STR
BUTTON_DEF.command                #'COMMAND'
BUTTON_DEF.toolbar                #'BUTTON_GROUP[,NUM]'
  
BUTTON.render(EDITOR, STR_ARR)    #Adds button's 'HTML' to STR_ARR
BUTTON.setState(STATE)            #See COMMAND.setState(STATE)
BUTTON.getState()                 #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PANELBUTTON          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'panelbutton' (depends: 'button')
                                  #Buttons opening a panel (e.g. 'colorbutton')
                                  #Same interface as BUTTON


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          MENUBUTTON           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'menubutton' (depends: 'menu', 'button')
                                  #Buttons opening a list (e.g. 'language')
                                  #Same interface as BUTTON



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           LISTBLOCK           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'listblock' (depends: 'panel')
                                  #Base of richcombo


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           RICHCOMBO           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'richcombo' (depends: 'floatpanel', 'listblock', 'button')
                                  #Toolbar dropdowns
UI.addRichCombo
('RICHCOMBO', RICHCOMBO_DEF)      #

RICHCOMBO.render(...)             #Like BUTTON.render(...)




             
   DIALOGS   
             




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DIALOG             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'dialog'
CKEDITOR.dialog                   #DIALOGS
DIALOGS.add                       #Fires CKEDITOR 'dialogDefinition' with CEVENT.data:
('DIALOG', DIALOGDEF|PATH)        #  - name 'DIALOG'
                                  #  - definition DIALOGDEF
                                  #Can be used to hook into any plugin dialog.
                                  #PATH: usually plugins/PLUGIN/dialogs/*.js
DIALOGS.addIframe('DIALOG', TITLE,
MINWIDTH, MINHEIGHT
[, FUNC(DIALOGDEF)][, DIALOGDEF]) #Add <iframe> DIALOG.
DIALOGS.addUIElement('TYPE', FUNC)#Add custom dialog
DIALOGS.getCurrent()              #
DIALOGS.exists('DIALOG')          #

DIALOGS.cancel|okButton()         #Default handlers for cancel|ok buttons (def: fires 'ok|cancel')

DIALOGDEF.getContents('TAB')      #Returns TAB
TAB.get('FIELD')                  #Returns FIELD
FIELD.default                     #Default value

DIALOGDEF.onLoad|Show()           #First|every time
DIALOGDEF.onOk|Cancel()           #

DIALOGDEF.buttons                 #
DIALOGDEF.contents                #CONTENT_ARR

DIALOGDEF.resizable               #CKEDITOR.DIALOG_RESIZE_NONE|WIDTH|HEIGHT
DIALOGDEF.minHeight|Width         #NUM
DIALOGDEF.height|width            #NUM
DIALOGDEF.title                   #STR

DIALOG.state                      #CKEDITOR.DIALOG_STATE_IDLE|BUSY
DIALOG.setState(VAL)              #Fires event 'state' with CEVENT.data CKEDITOR.DIALOG_STATE_IDLE|BUSY

DIALOG.addPage(CONTENT_ARR)       #
DIALOG.selectPage('TAB')          #
CONF.removeDialogTabs(STR)        #Remove tabs, as 'DIALOG:TAB;...'
DIALOG.isTableEnabled
(EDITOR, 'DIALOG', 'TAB')         #Check if part of removeDialogTabs()

new CKEDITOR.dialogCommand
('DIALOG')                        #Returns a COMMAND_DEF that opens a dialog 'DIALOG'


CONTENT                           #A tab
CONTENT.id                        #
CONTENT.label                     #STR
CONTENT.title                     #STR
CONTENT.accessKey                 #STR
CONTENT.elements                  #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           DIALOGUI            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'dialogui'
                                  #Extra UI elements that can be added to dialogs (e.g. inputs, etc.)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         DIALOGADVTAB          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'dialogadvtab' (depends: 'dialog')
                                  #'Advanced' tab in dialogs, allowing to set HTML attrs id|dir|style|class


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         IFRAMEDIALOG          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'iframedialog' (depends: 'dialog')
CKEDITOR.dialog.addIframe(...)    #Create a DIALOG containing an <iframe>


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLORDIALOG          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'colordialog' (requires: 'dialog')
																  #Color picker in dialogs where user needs to pick a color
                                  #Dialog|command 'colordialog'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             POPUP             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'popup'
EDITOR.popup                      #Opens popup. 
('URL'[, STR][, STR2][, STR3])    #Def STR[2]: '80%|70%'
                                  #STR3: passed to window.open(). Def: 'location=no,menubar=no,toolbar=no,
                                  #dependent=yes,minimizable=no,modal=yes,alwaysRaised=yes,resizable=yes,scrollbars=yes'




                  
   NOTIFICATION   
                  




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         NOTIFICATION          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'notification' (depends: 'toolbar')
                                  #Shows notifications
new CKEDITOR.plugins.notification #Returns NOTIFICATION
(EDITOR, OBJ)                     #OBJ:
                                  #  - message STR
                                  #  - type 'info' (def) or 'warning|success|progress'
                                  #  - progress NUM
                                  #  - duration NUM: how long visible. 
                                  #    Def:
                                  #     - warning|progress: 0, i.e. disabled
                                  #     - info|success: CONF.notification_duration NUM (def: 5000)
                                  #  - important BOOL
EDITOR.showNotification
(STR[, STR[, NUM]])               #Returns NOTIFICATION, with message, type, progress|duration
NOTIFICATION.message|type|progress
|duration                         #
NOTIFICATION.element              #DOM_ELEM
NOTIFICATION.editor               #EDITOR
NOTIFICATION.id                   #
NOTIFICATION.show|hide()          #Fires EDITOR event 'notificationShow|Hide' with CEVENT.data.notification NOTIFICATION
NOTIFICATION.update(OBJ)          #Fires EDITOR event 'notificationUpdate' with CEVENT.data.notification NOTIFICATION and
                                  #CEVENT.data.options OBJ
                                  #OBJ is same as constructor.
NOTIFICATION.isVisible()          #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:    NOTIFICATIONAGGREGATOR     :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'notificationaggregator'
                                  #Used to fire only one notification when several tasks performed (see online doc)
CKEDITOR.plugins.
notificationaggregator.*          #




             
   TOOLBAR   
             


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          WYSIWYGAREA          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'wysiwygarea'
                                  #'wysiwyg' mode (i.e. main editing mode)

CONF.fullPage                     #If true (def: false), outputs a full HTML page (as an <iframe>)

CONF.contentsCss                  #CSS 'FILE[_ARR]' for editor in 'normal mode'
EDITOR.addContentsCss('FILE')     #

CONF.disableObjectResizing        #If true (def: false), allow user to resize images and tables
                                  #Does not work on IE
CONF.disableNativeTableHandles    #If true (def), disables Firefox native <table> tools

CONF.baseHref                     #Base URL for <a> (using <base>)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            DIVAREA            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'divarea'
                                  #Similar to inline mode, using a <div>


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            TOOLBAR            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'toolbar' (depends: 'button')
CONF.toolbarLocation              #'top|bottom' (def: 'top'). In 'normal mode'
CONF.toolbarCanCollapse           #If true (def: false), user can collapse toolbar.
CONF.toolbarStartupExpanded       #If true (def), and CONF.toolbarCanCollapse true, starts collapsed.
CONF.toolbarGroupCycling          #If true (def), arrow keystokes navigate between button groups, not buttons

EDITOR.toolbar                    #TOOLBAR
CONF.toolbar                      #Buttons. Either:
                                  #  - 'TOOLBAR'
                                  #  - VAL_ARR:
                                  #     - OBJ:
                                  #        - name 'BUTTON_GROUP'
                                  #        - items 'BUTTON'_ARR
                                  #           - '-': separator
                                  #     - '/': newline
CONF.toolbar_TOOLBAR              #Same but defines a 'TOOLBAR'

COMMAND 'toolbarFocus'            #Gives focus (also shortcut F10)


CONF.toolbarGroups                #Button groups. Same value as CONF.toolbar VAL_ARR, except:
                                  #  - items -> groups
                                  #  - 'PLUGIN' instead of 'BUTTON'
UI.addToolbarGroup('BUTTON_GROUP', 
'NEXT_BUTTON_GROUP'|NUM 
[,'PARENT_BUTTON_GROUP'])

CONF.removeButtons                #"BUTTON,...". Prefer removePlugins


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         FLOATINGSPACE         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'floatingspace'
                                  #Place the toolbar, when in inline mode

CONF.floatSpaceDocked|            #Space between element and bar when toolbar is docked|pinned
PinnedOffsetX|Y                   #Def: 10,10 (docked) and 20,20 (pinned)
CONF.floatSpacePreferRight        #If true (def: false), align to right, not left


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          SHAREDSPACE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'sharedspace'
                                  #Detach toolbar and bottom bar from content area, and share those across several EDITOR.
                                  #Not compatible with 'resize|maximize'
CONF.sharedSpaces.top|bottom      #'ID'|ELEM: where to put toolbar and bottom bar.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             FIXED             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'fixed' (1.0)
                                  #Keeps toolbar on top of screen when scrolling: 
                                  #  - in 'normal mode'
                                  #  - as long as editor still on screen
                                  #Does it by doing DOM manipulation (not using CKEditor API)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           MAXIMIZE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'maximize'
COMMAND 'maximize'                #Full screen editor. Fire 'maximize' with CEVENT.data CKEDITOR.TRISTATE_ON|OFF
                                  #Done by button 'Maximize' (toolbar 'maximize')
                                  #Does not work with 'sharedspaces' or in inline mode




        
   IO   
        




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              I/O              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.getData([BOOL])            #Returns HTML content.
                                  #If true, only returns cached data, and does not fire [before]getData() events.
                                  #Fires event '[before]getData' with CEVENT.data.dataValue STR (getData() only)
EDITOR.setData(STR[, OBJ])        #Sets HTML content
                                  #Fires 'dataReady' and OBJ.callback(), unless OBJ.internal true.
                                  #If OBJ.noSnapshot true, do not record in undo history.

EDITOR.insertHtml                 #STR is 'HTML'
(STR[, STR2[, DOM_RANGE]])        #STR2 can be:
                                  #  - 'html': filtered by CKEDITOR.filter
                                  #  - 'unfiltered_html': no FILTER
                                  #  - 'text': plain text, i.e. will inherit current position styles
                                  #DOM_RANGE (def: current selection)
                                  #Fires:
                                  #  - 'insertHtml' with CEVENT.data: mode STR2, dataValue STR, range DOM_RANGE
                                  #  - 'afterInsertHtml' with CEVENT.data: intoRange DOM_RANGE
EDITOR.insertText(STR)            #Like EDITOR.insertHtml(STR, 'text')
EDITOR.insertElement(DOM_ELEM)    #Like EDITOR.insertHtml(DOM_ELEM.getOuterHtml()), except fires different events:
                                  #  - 'insertElement' with CEVENT.data DOM_ELEM

EDITOR.on('change')               #Only in 'wysiwyg' mode.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FILTERS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



FILTER                            #Filters input
new CKEDITOR.filter(RULES|EDITOR) #Returns current FILTER, setup at load.
CKEDITOR.filter.instances[ID]     #FILTER, according to FILTER.id NUM
EDITOR.[active]filter             #FILTER. 
                                  #'active' is current (e.g. current selection), non-'active' is default
EDITOR.setActiveFilter(FILTER)    #Fires event 'activeFilterChange'

FILTER|FEATURE.allowedContent     #RULES:
                                  #  - true: everything
                                  #  - OBJ:
                                  #     - KEY "TAG ..."
                                  #        - can use $1 to mean anything, then using elements CKEDITOR.dtd
                                  #     - styles (CSS prop), attributes (HTML ATTR), classes (HTML class):
                                  #        - true: anything
                                  #        - "[!]STR ..."
                                  #          - ! means required (if not there, erase), otherwise optional (others are erased)
                                  #          - can use * meaning "anything", or e.g. attributes "data-*"
                                  #        - OBJ:
                                  #          - match(ELEM)->BOOL
                                  #          - propertiesOnly BOOL: if true, works only if another RULE allows this TAG
                                  #  - "RULE;...", where "RULE" can be "OBJ.KEY{OBJ.styles}[OBJ.attributes](OBJ.classes)"
                                  #  - STYLE[_ARR]
                                  #Read-only. Can be written with:
                                  #  - CONF.allowedContent RULES
                                  #    When not set, is in "automatic mode", i.e. defined by plugins.
                                  #  - CONF.extraAllowedContent: same but does not overwrite plugins definitions.
FILTER.disallowedContent          #RULES, applied before allowedContent.
                                  #Read-only. Can be written with:
                                  #  - CONF.disallowedContent
FILTER.customConfig               #True if CONF.extraAllowedContent used.

FILTER.allow(RULES[, 'FEATURE'])  #Adds to FILTER.allowedContent. Can be only for a specific 'FEATURE'
FILTER.disallow(RULES)            #Adds to FILTER.disallowedContent
FILTER.disable()                  #Sets allowedContent to true
FILTER.disabled                   #

FILTER.addElementCallback
(FUNC(HTML_ELEM)
[->CKEDITOR.FILTER_SKIP_TREE])    #Whether not to filter that element.

FILTER.check                      #Returns true if not filtered. 
(RULES[, BOOL][, BOOL2])          #Ignores '!' required unless BOOL2 true
                                  #Ignores transformations if BOOL true
FILTER.applyTo(HTML_ELEM|FRAGMENT #Modifies element. Returns true if something was changed.
[, BOOL][, BOOL2][, VAL])         #  - if BOOL true, returns 'HTML' instead
                                  #  - transformOnly BOOL (def: false)
                                  #  - enterMode (def: CKEDITOR.editor.activeEnterMode)

FILTER.addTransformations         #Add transformation groups OBJ_ARR:
(OBJ_ARR_ARR)                     #  - for each group, picks the first transformation OBJ that matches
                                  #Transformation OBJ:
                                  #  - element 'TAG,...': to match
                                  #  - left(HTML_ELEM)->BOOL: should it transform?
                                  #  - right(HTML_ELEM, TRANSFORMTOOLS) or STR (i.e. TRANSFORMTOOLS[STR]): transformation
                                  #  - check???
TRANSFORMTOOLS.                   
alignmentToAttribute|Style
(HTML_ELEM)                       #Converts from|to using CSS attributes float or HTML attribute align

FILTER.addContentForms(VAL_ARR)   #If an input TAG matches any VAL, is replaced by the first VAL that is not filtered out.
                                  #VAL are:
                                  #  - RULES
                                  #  - [RULES, FUNC(HTML_ELEM)->BOOL]

FILTER.destroy()                  #

FILTER.id                         #
FILTER.editor                     #EDITOR_FUNC. null if standalone


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          HTMLWRITER           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'htmlwriter'
                                  #Advanced control on HTML output
EDITOR.dataProcessor.
toDataFormat|Html('STR')          #From HTML to BBCode, and inverse.
EDITOR.dataFilter|htmlFilter      #FILTER used by each

EDITOR.dataProcessor.writer       #WRITER used when retrieving output
WRITER.indentationChars           #' ' or '\t' (def: CONF.dataIndentationChars (def: '\t'))
WRITER.lineBreakChars             #'\r\n' or '\n' (def)
WRITER.selfClosingEnd             #How self-closing tags are closed: '>' or '/>' (def)
WRITER.setRules('TAG', OBJ)       #Formatting for a given TAG. OBJ:
                                  #  - indent BOOL: indent children
                                  #  - breakBefore|AfterOpen|Close BOOL: inserting newlines


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           ENTERKEY            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'enterkey'
                                  #What happens when typing '[shift-]enter'
CONF.[active][shift]enterMode     #Default behavior when hitting [SHIFT-]ENTER among CKEDITOR.ENTER_P|BR|DIV (def: P and BR)
                                  #'active' is current (e.g. current selection), non-'active' is default
EDITR.setActiveEnterMode(VAL,VAL2)#For activeEnterMode and activeShiftEnterMode
                                  #Fires 'activeEnterModeChange'
FILTER.getAllowedEnterMode        #Check if FILTER allows this enterMode (shiftEnterMode if true), i.e. if <p>, <br> or <div>
(VAL[, BOOL])                     #are allowed. If none, returns CKEDITOR.EDITOR_BR

COMMAND '[shifte|E]nter'          #Programmatically


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              TAB              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'tab'
                                  #Make [Shift-]Tab fire COMMAND:
                                  #  - 'blur[Back]': going to next EDITOR
                                  #  - 'selectNext|PreviousCell': going to next <table> cell (if CONF.enableTabKeyTools true (def))
                                  #Or insert several spaces
CONF.tabSpaces                    #NUM (def: 4)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           ENTITIES            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'entities'
CONF.basicEntities                #If true (def), escape basic HTML entities
CONF.entities                     #If true (def), escape HTML entities
CONF.entities_greek|latin         #If true (def), escape Greek|Latin HTML entities
CONF.entities_processNumerical    #If true (def: false), convert all Unicode numbers into HTML entities.
CONF.entities_additional          #Comma-separated (def: "#39", i.e. quote char)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           LINEUTILS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Plugin 'lineutils'
CKEDITOR.plugins.lineutils.
finder|locator|liner              #Utilities to create horizontal spaces in the editor


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           MARKDOWN            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'markdown' (1.0)
                                  #Adds mode 'markdown' (use marked library)

COMMAND 'markdown'                #Changes mode
                                  #Done by button 'Markdown'

CONF.markdown.mode                #Def: 'gfm'
CONF.markdown.lineNumbers         #Def: true
CONF.markdown.theme               #Def: 'default'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BBCODE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'bbcode' (depends: 'entities')
                                  #Outputs BBCode instead of HTML (by using a FILTER)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOSAVE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                ##Community plugin 'autosave'
                                 #Saves to localStorage


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             LITE              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                ##Community plugin 'lite'
                                 #Track changes



                
   EXTENSIONS   
                




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           COMMANDS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CKEDITOR.editor.addCommand        
('COMMAND', COMMAND_DEF)          #Function to fire.

COMMAND_DEF.exec(EDITOR[, VAL])   #Main function fired.
EDITOR.execCommand('COMAND',[VAL])#Can return VAL2

COMMAND_DEF.async                 #If true (def: false), fires async:
                                  #  - exec(EDITOR, OBJ2) does not return anything
                                  #  - fires 'afterCommandExec' with CEVENT.data OBJ:
                                  #     - name 'COMMAND'
                                  #     - command COMMAND
                                  #     - commandData OBJ2
                                  #     - returnValue VAL2
COMMAND_DEF.editorFocus           #If true (def), firing commands gives focus to EDITOR

COMMAND_DEF.contextSensitive      #If false (def: true), COMMAND_DEF.refresh() not fired.
COMMAND_DEF.context               #If true (def), DOM_PATH is passed to COMMAND_DEF.refresh()
COMMAND_DEF.refresh               #Function fired when selection changed. Should call:
(EDITOR, DOM_PATH)                #  - should call COMMAND.setState()
                                  #Fire COMMAND 'refresh'

COMMAND                           #Instance. Has all COMMAND_DEF properties|methods, plus:
                                  #Is an EVENTEMITTER.
COMMAND.[previous]state           #STATE:
                                  #  - CKEDITOR.TRISTATE_DISABLED: disabled
                                  #  - CKEDITOR.TRISTATE_ON|OFF: enabled and active|inactive
                                  #When changed, fires 'state'
COMMAND.setState(STATE)           #
COMMAND.toggleState()             #Toggle between TRISTATE_ON|OFF
COMMAND.disable|enable()          #Toggle between TRISTATE_DISABLED and TRISTATE_ON|OFF
COMMAND_DEF.startDisabled         #If true (def: false), disabled until a selection is being made.

COMMAND.uiItems                   #ARR of associated UI items.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FEATURE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Base interface, usually added to COMMAND, BUTTON or RICHCOMBO
                                  #Goal is augment current FILTER, and check if compatible with it.
                                  #Must always be done, but automatically done by UI.addButton|RichCombo()
FEATURE.name                      #
FEATURE.allowedContent            #
FEATURE.contentForms              #
FEATURE.contentTransformations    #Will use CKEDITOR.filter.allow|addContentForms|addTransformations(...)
FEATURE.requiredContent           #Will use CKEDITOR.filter.check(RULES) to check if feature can be activated

EDITOR|FILTER.add|checkFeature
(FEATURE)                         #Checks if FILTER allows this FEATURE. Returns BOOL
COMMAND.checkAllowed([BOOL])      #Do CKEDITOR.editor.activeFilter.checkFeature(COMMAND), i.e. COMMAND implements FEATURE.
                                  #If BOOL true, no caching.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            PLUGINS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


LOADING ==>                       #Uses:
                                  #  - CONF.plugins "PLUGIN,..." (depends on build)
                                  #  - CONF.extraPlugins "PLUGIN,...": same without override def. CONF.plugins
                                  #  - CONF.removePlugins "PLUGIN,..."
                                  #Loading PLUGIN fires plugins/PLUGIN/plugin.js:
                                  #  - should call CKEDITOR.plugins.add()

CKEDITOR.plugins                  #PLUGINS
PLUGINS.add('PLUGIN', PLUGIN_DEF) #Initialize plugin
PLUGIN_DEF.[before|after]init     #Called once per EDITOR, e.g. calling EDITOR.ui.addButton()
(EDITOR)                          #Fires EDITOR 'pluginsLoaded'
PLUGIN_DEF.onLoad()               #Called once for all EDITORs

PLUGINS.basePath|filename         #dirname|filename
PLUGINS.loaded|registered         #BOOL

PLUGINS.get('NAME')               #
PLUGINS.get[Folder]Path('NAME')   #dirname|filename
STYLSESET.load
('NAME', FUNC(OBJ)[, THIS])       #

PLUGINS.addExternal
('NAME', 'FILE', PLUGIN_DEF_ARR)  #
PLUGINS.externals                 #OBJ (everything registered with addExternal())

PLUGIN_DEF.requires               #Dependencies, as 'PLUGIN,...' or 'PLUGIN'[_ARR]

PLUGIN_DEF.icons                  #'ICON', using plugins/PLUGIN/icons/ICON.png, as 16x16px
PLUGIN_DEF.hidpi                  #If true (def), provides HiDPI under plugins/PLUGIN/icons|images/hidpi/*,
                                  #with e.g. a pixel ratio of 2


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            WIDGET             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'widget' (depends: 'lineutils', 'clipboard')
WIDGETS ==>                       #Plugins that are treated as a single entity in the editor when
                                  #removed|selected|deleted|moved.

CKEDITOR.plugins.widget           #WIDGETS
EDITOR.widgets.instances          #WIDGET_ARR

WIDGETS.add('WIDGET', WIDGET_DEF) #
WIDGET_DEF.upcast(DOM_ELEM)->BOOL #When any DOM_ELEM is created, will make it a WIDGET if true
WIDGET_DEF.init()                 #When widget loaded (i.e. when EDITOR is initialized)




           
   BASIC   
           




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           READONLY            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.setReadOnly(BOOL)          #
EDITOR.readOnly                   #
COMMAND_DEF.readOnly              #If true (def: false), will appear in read-only mode


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             UNDO              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'undo'
COMMAND 'undo|redo'               #Fires 'afterUndo|Redo'
                                  #Assigned automatically to shortcuts and to buttons 'Undo|Redo'
EDITOR.fire('saveSnapshot')       #Programmatically adds an undo step
                                  #Done automatically:
                                  #  - after each 'COMMAND' unless COMMAND_DEF.canUndo false
                                  #  - after DOM editing
EDITOR.fire('updateSnapshot')     #Same but first remove last undo.
EDITOR.fire('[un]lockSnapshot')   #No undos recorded
EDITOR.resetUndo()                #

CONF.undoStackSize                #Def: 20

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             FIND              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'find'
COMMAND 'find'                    #Launch dialog 'Find'
                                  #Done by Button 'Find'
COMMAND 'replace'                 #Launch dialog 'Replace'
                                  #Done by Button 'Replace'

CONF.find_highlight               #STYLE used when highlighting findings


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            NEWPAGE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'newpage'
COMMAND 'newpage'                 #Reset HTML with EDITOR.setData(CONF.newpage_html) (def: '')
                                  #Done by button 'NewPage' (toolbar 'document')




               
   SELECTION   
               




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EDITOR.getSelection()             #Returns DOM_SELECTION
CONF.[un]lockSelection
([DOM_SELECTION])                 #Keeps selection even when editor loses focus.

SELECTION.getStartElement()       #Returns DOM_ELEM


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTALL           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'selectall'
COMMAND 'selectall'               #Select all
                                  #Done by button 'SelectAll' (toolbar 'selection')




               
   CLIPBOARD   
               



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           CLIPBOARD           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'clipboard' (requires: 'dialog')
                                  #Handlers pasted and dropped content.
CONF.clipboard_defaultContentType #If not sure whether 'text' or 'html' (def).
CONF.forcePasteAsPlainText        #If true, forces all pasted content as 'text'.

EDITOR.getClipboardData           #Open window to paste data.
(OBJ, FUNC(OBJ2))                 #OBJ: title STR
                                  #OBJ2: type STR, dataValue STR

EDITOR.on('[afterP|p]aste')       #CEVENT.data:
                                  #  - type STR (e.g. 'html', 'text', 'auto')
                                  #  - dataValue STR
                                  #  - method 'drop|paste'
                                  #  - dataTransfer DATATRANSFER
                                  #  - dontFilter BOOL: if true, does not apply CONF.pasteFilter
EDITOR.on('dragstart|end')        #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
EDITOR.on('drop')                 #CEVENT.data:
                                  #  - $: native event
                                  #  - target DOM_NODE
                                  #  - dataTransfer DATATRANSFER
                                  #  - drag|dropRange DOM_RANGE
                                  #    Can also use CLIPBOARD.getRangeAtDropPosition(EVENT, EDITOR)-> DOM_RANGE
CLIPBOARD.mainPasteEvent          #'[after]paste': which event to prefer listening to with this browser

EDITOR.pasteFilter                #FILTER. 
                                  #Not applied when input comes from CKEditor.
                                  #Def: CONF.pasteFilter:
                                  #  - 'plain-text': will convert to plain text (RULES 'br')
                                  #  - 'semantic-content' (def for Chrome, Safari, Opera): usual HTML tags
                                  #  - RULES (see filters)
                                  #  - null (def for other browsers)

DATATRANSFER                      #Higher-level API for DOM DATATRANSFER
DATATRANSFER.getData('TYPE')      #
DATATRANSFER.setData('TYPE', STR) #
DATATRANSFER.isEmpty()            #
DATATRANSFER.getFile(NUM)         #
DATATRANSFER.getFilesCount()      #

DATATRANSFER.$                    #DOM clipboard event
DATATRANSFER.id                   #
DATATRANSFER.sourceEditor         #EDITOR

CKEDITOR.plugins.clipboard        #CLIPBOARD
CLIPBOARD.canClipboardApiBeTrusted
(DATATRANSFER, EDITOR)            #False if browser does not support 'hmtl' type in DOM clipboard.
CLIPBOARD.isCustomCopyCutSupported#False if browser does not allow using DOM clipboard.
CLIPBOARD.
isCustomDataTypesSupported        #True if browser allows using custom data types in DOM clipboard's getData|setData()
CLIPBOARD.isFileApiSupported      #True if browser supports DOM files.

CLIPBOARD.getDropTarget(EDITOR)   #Returns DOM_OBJ
CLIPBOARD.
preventDefaultDropOnElement
(DOM_OBJ)                         #Prevents dropping on it.

CLIPBOARD.
initDrag|PasteDataTransfer
([DOM_EVENT[, EDITOR]])           #
CLIPBOARD.resetDragDataTransfer   #Programmatically create drag|paste


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           PASTETEXT           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'pastetext' (depends: 'clipboard')
COMMAND 'pastetext'               #Paste as plain text
                                  #Done by button 'PasteText' (toolbar 'clipboard'), or automatically on paste.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         PASTEFROMWORD         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'pastefromword' (depends: 'clipboard')
COMMAND 'pastefromword'           #Paste, with special filtering for Microsoft Word
                                  #Done by button 'PasteFromWord' (toolbar 'clipboard'), or automatically on paste.

CONF.pasteFromWordCleanupFile     #FILE. Module providing MSWord cleanup function
CONF.pasteFromWord
NumberedHeadingsToList            #BOOL (def: false)
CONF.pasteFromWordPromptCleanup   #If true (def: false), shows dialog to say content will be cleaned.
CONF.pasteFromWordRemoveFontStyles#Def: true
CONF.pasteFromWordRemoveStyles    #Def: true




                     
   FONT FORMATTING   
                     




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         BASICSTYLES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'basicstyles'
                                  #Font formatting
CONF.coreStyles_bold|italic|strike#STYLE applied
|subscript|superscript|underline  #Used by button (e.g. 'Bold') in toolbar 'basicstyles', and command (e.g. 'bold')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         REMOVEFORMAT          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'removeformat'
                                  #Remove font formatting
COMMAND 'removeFormat'            #Remove wrapping tags and some HTML attributes.
                                  #Fires 'removeFormatCleanup' with CEVENT.data DOM_ELEM
                                  #Done by button 'RemoveFormat' (toolbar 'cleanup')
CONF.removeFormatTags             #Inline 'TAG,...' to remove (unwrap)
                                  #Def: 'b,big,cite,code,del,dfn,em,font,i,ins,kbd,q,s,samp,small,
                                  #      span,strike,strong,sub,sup,tt,u,var'
CONF.removeFormatAttributes       #HTML 'ATTR,...' to remove
                                  #Def: 'class,style,lang,width,height,align,hspace,valign'
EDITOR.addRemoveFormatFilter
(FUNC(DOM_ELEM)->BOOL)            #If false, do not remove format.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          STYLESCOMBO          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'stylescombo' (depends: 'richcombo')
RICHCOMBO 'Styles'                #Applies a STYLE (toolbar 'styles')
CONF.stylesSet                    #Can be:
                                  #  - 'NAME'
                                  #  - 'NAME:FILE|URL'
                                  #  - false
                                  #  - 'default', i.e. styles.js

CKEDITOR.stylesSet                #STYLESSET
STYLESSET                         #Implements PLUGINS


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       STYLESHEETPARSER        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'stylesheetparser'
                                  #Parse CSS files from CONF.contentsCss in order to define CKEDITOR.styleSet
CONF.stylesheetParser_
skip|validSelectors               #REGEXP (def: /(^body\.|^\.)/i and /\w+\.\w+/)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             FONT              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'font' (depends: 'richcombo')
                                  #Add RICHCOMBO (in toolbar 'styles'):
                                  #  - 'Font': changing font-family
                                  #  - 'FontSize'

CONF.font_names                   #Font families, colon-separated (def: usual ones)
CONF.font_defaultLabel            #What's shown for unknown font families (def: '')
CONF.font_style                   #STYLE applied when picking font family (def: CSS font-family)

CONF.fontSize_sizes               #Font sizes, colon-separated (def: 8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72)
CONF.fontSize_defaultLabel        #(def: '')
CONF.fontSize_style               #STYLE applied when picking a size (def: CSS font-size)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      CKEDITOR-GWF-PLUGIN      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'ckeditor-gwf-plugin' (0.1.1)
                                  #Allow using Google Web Font as CONF.font_names

CONF.gwfplugin.font.label         #Def: 'GoogleWebFonts'
CONF.gwfplugin.ok|cancel          #OK|Cancel buttons message
CONF.gwfplugin.message            #Popup message


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLORBUTTON          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'colorbutton' (depends: 'panelbutton', 'floatpanel')
                                  #Font and background colors
                                  #Buttons 'TextColor|BGColor'
CONF.colorButton_enableMore       #If true (def), shows color picker
CONF.colorButton_colors           #List of colors displayed as 'CSS_COLOR,...'
CONF.
colorButton_foreStyle|backStyle   #STYLE describing how the format is applied (can use "#(color)")


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         TEXTTRANSFORM         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'texttransform' (1.1)
COMMAND 'transformTextToUppercase|#Change case.
Lowercase|Capitalize|Switch'      #Done by button 'TransformTextToUppercase|Lowercase|Capitalize|Switcher'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         LETTERSPACING         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'letterspacing' (0.1.2) (depends: 'richcombo')
RICHCOMBO 'letterspacing'         #Changes CSS letter-spacing (from -10 to 11)




                          
   PARAGRAPH FORMATTING   
                          




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            INDENT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'indent'
COMMAND 'indent|outdent'          #Indent|outdent text.
                                  #Done by button 'Indent|Outdent' (toolbar: 'indent')
CKEDITOR.plugins.indent.*         #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          INDENTBLOCK          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'indentblock' (depends: 'indent')
COMMAND 'indent|outdentblock'     #Indents|outdents paragraph

CONF.indentOffset                 #NUM (def: 4)
CONF.indentUnit                   #STR (def: 'em')
CONF.indentClasses                #'CLASS'_ARR to use instead of CONF.indentOffset|Unit


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            JUSTIFY            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'justify'
COMMAND                           #Justifies text, using CSS text-align or (if defined) adding CSS classes
'justifyleft|center|right|block'  #defined by CONF.justifyClasses 'CLASS'_ARR (4 values).
                                  #Done by button 'JustifyLeft|Right|Center|Block' (in toolbar 'align')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          LINEHEIGHT           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'lineheight' (depends: 'richcombo') (1.0.4)
RICHCOMBO 'lineheight'            #Applies CONF.lineHeight_style (def: line-height: '#(size)'), where #(size) is changed
                                  #by user pick, among CONF.line_height  "CSS;..." (def: 1 to 72)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            FORMAT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'format' (depends: 'richcombo')
                                  #Paragraph formatting, using RICHCOMBO 'Format'
CONF.format_address|div|h1-6|p|pre#STYLE
CONF.format_tags                  #Which ones to use, e.g. 'p;div;h3' (def: all)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          BLOCKQUOTE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'blockquote'
COMMAND 'blockquote'              #Put selection in <blockquote>
                                  #Done by button 'Blockquote' (toolbar 'blocks')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              DIV              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'div' (depends: 'dialog')
COMMAND 'creatediv'               #Open dialog 'creatediv', to put selection in <div>
                                  #Done by button 'CreateDiv' (toolbar 'blocks')
COMMAND 'editdiv'                 #Open dialog 'editdiv', to ...
                                  #Done by contextmenu item in MENUGROUP 'div'
COMMAND 'removediv'               #Remove <div>
                                  #Done by contextmenu item in MENUGROUP 'div'




            
   INSERT   
            




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             LINK              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'link' (depends: 'dialog', 'fakeobjects')

COMMAND 'link'                    #Open dialog 'link', which inserts <a href>
                                  #Done by button 'Link' (toolbar 'links'), shortcut Ctrl-L, double click or
                                  #contextMenu (MENUGROUP 'link')
COMMAND 'unlink'                  #Remove wrapping <a href>
                                  #Done by button 'Unlink' (toolbar 'links') or contextMenu (MENUGROUP 'link')
CONF.linkShowTargetTab            #If true (def), show dialog tab to change 'target', 'onclick'
CONF.linkShowAdvancedTab          #If true (def), show dialog tab to change 'dir', etc.

COMMAND 'anchor'                  #Open dialog 'anchor'
                                  #Done by button 'Anchor' (toolbar 'links'), doubleclick or contextMenu (MENUGROUP 'anchor')
COMMAND 'removeAnchor'            #
                                  #Done by contextMenu (MENUGROUP 'anchor')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOLINK            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'autolink' (depends: 'clipboard')
                                  #Turns pasted URLs into <a>


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        HORIZONTALRULE         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'horizontalrule'
COMMAND 'horizontalrule'          #Inserts <hr>. Done by button 'HorizontalRule' (toolbar: 'insert')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          SPECIALCHAR          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

 
                                 ##Plugin 'specialchar' (depends: 'dialog')
COMMAND 'specialchar'             #Open dialog 'specialchar', to insert chars.
                                  #Done by button 'SpecialChar' (toolbar 'insert')
CONF.specialChars                 #STR_ARR


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             FORMS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'forms' (depends: 'dialog', 'fakeobjects')
COMMAND 'checkbox|
radio|textfield|textarea|select|  #Add an HTML control
[image]button|hiddenfield')       #Done by buttons (toolbar: 'forms') or double click on element
COMMAND 'form'                    #Edit an HTML control
                                  #Dont by contextMenu MENUGROUP 'form'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        HTML5VALIDATION        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'html5validation'
                                  #Form validation


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           TEMPLATES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'templates' (depends: 'dialog')
COMMAND 'templates'               #Open dialog 'templates' that inserts predefined chunks of 'HTML'
                                  #Can replace content if checkbox checked (default state: CONF.templates_replaceContent BOOL
                                  #(def: true))
                                  #Done by button 'templates' (toolbar 'doctools')
CONF.templates_files              #'URL'_ARR of files using CKEDITOR.addTemplates(...) (def: define 'default')
CONF.templates                    #'TEMPLATES,...' to use (def: 'default')

CKEDITOR.addTemplates
('TEMPLATES', TEMPLATES_CONF)     #
TEMPLATES_CONF.imagesPath         #'DIR'
TEMPLATES_CONF.templates          #TEMPLATE_CONF_ARR

TEMPLATE_CONF.title               #STR
TEMPLATE_CONF.description         #STR
TEMPLATE_CONF.image               #'FILE'
TEMPLATE_CONF.html                #'HTML'

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PLACEHOLDER          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'placeholder' (depends: 'widget', 'dialog')
WIDGET 'placeholder'              #Is <span class="cke_placeholder">[[...]]</span> (outputed without wrapping <span>)
                                  #Inserted by button 'CreatePlaceholder' (toolbar 'insert'), launching dialog 'placeholder'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TOKEN             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'token' (1.0) (depends: 'widget', 'dialog')

COMMAND 'token'                   #Opens DIALOG 'token', which inserts WIDGET 'token':
                                  #  <span class="cke_token" name="...">...</span>
                                  #Done by button 'CreateToken' (toolbar 'insert')

CONF.availableTokens              #VAL_ARR, where VAL is ['DISPLAY_VAL', 'OUTPUT_VAL']
CONF.tokenStart|End               #Def: '${' and '}'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           FOOTNOTES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'footnotes' (1.0.9) (depends: jQuery, 'widget')

COMMAND 'footnotes'               #Opens dialog 'footnotesDialog', which inserts footnotes WIDGETs on bottom of page
                                  #Done by button 'Footnotes' (toolbar 'insert')
WIDGET 'footnotes'                #<section class="footnotes">
WIDGET 'footnotemarker'           #<sup data-footnote-id="NUM">

CONF.footnotesTitle               #Def: 'Footnotes'
CONF.footnotesHeaderEls           #['<TAG>...', '</TAG>...'] (def: ['<h2>', '</h2>'])
CONF.footnotesPrefix              #Def: ''




          
   LIST   
          




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          INDENTLIST           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'indentlist' (depends: 'indent')
COMMAND 'indent|outdentlist'      #Indents|outdents <ol|ul>
                                  #Done by shortcuts [Shift-]Tab


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             LIST              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'list' (requires: 'indentlist')
COMMAND 'numbered|bulletedList'   #Insert <ol|ul>
                                  #Done by button 'Numbered|BulletedList' (toolbar 'list')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          LISTSTYLES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'liststyles' (requires 'dialog', 'contextmenu')
COMMAND                           #Adds CSS properties list-style-* to <ol|ul> and HTML attribute start
'numbered|bulletedListStyle'      #Opens dialog 'numbered|bulletedListStyle'
                                  #Done by contextMenu (MENUGROUP 'list')




            
   TABLES   
            




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TABLE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'table' (depends 'dialog')
COMMAND 'table'                   #Opens dialog 'table', which insert a <table>
                                  #Done by button 'Table' (toolbar 'insert')
COMMAND 'tableProperties'         #Opens dialog 'tableProperties', which edits a <table>
                                  #Done by contextMenu (GROUP 'table') or doubleclick
COMMAND 'tableDelete'             #Remove <table>
                                  #Done by contextMenu (GROUP 'table')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          TABLETOOLS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'tabletools' (depends: 'table', 'dialog', 'contextmenu')
COMMAND 'cellProperties'          #Open dialog 'cellProperties', which edit cell properties.
                                  #Done on contextMenu
COMMAND 'row|column|cellDelete|
InsertBefore|InsertAfter')        #Done on contextMenu
COMMAND 'cellMerge[Right|Down]|
[Vertical|Horizontal]Split')      #Done on contextMenu


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          TABLERESIZE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'tableresize' (depends: 'tabletools')
                                  #Resize handle for columns|rows


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          QUICKTABLE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'quicktable' (1.0.6) (depends: 'table', 'panelbutton', 'floatpanel')

COMMAND 'table'                   #Insert <table> with a quicktable, or if clicking 'More' the 'table' dialog.
                                  #Done by Button 'Table' (toolbar 'insert')

INSERTED TABLE ==>                #
CONF.qtBorder                     #CSS border-width (def: '1')
CONF.qtWidth                      #CSS width (def. '500px')
CONF.qtStyle                      #STYLE
CONF.qtClass                      #'CLASS' (def: '')
CONF.qtCellPadding|Spacing        #Def: '1'

PREVIEW TABLE ==>                 #
CONF.qtRows|Columns               #Def: 20
CONF.qtPreviewBorder              #CSS border (def: '4px double black')
CONF.qtPreviewSize                #Cell size (def: '4px')
CONF.qtPreviewBackground          #Cell background-color (def: '#c8def4')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         LAYOUTMANAGER         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'layoutmanager'
                                  #Inserts <table> meant for layout



                
   MULTIMEDIA   
                




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             IMAGE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'image' (depends: 'dialog')
COMMAND 'image'                   #Inserts|edits <img> with dialog 'image'
                                  #Done by button 'Image' (toolbar 'insert'), double click and context menu (group 'image')
CONF.image_prefillDimensions      #If true (def), upload box prefills dimensions.
CONF.image_previewText            #Preview text shown in upload box.
CONF.image_removeLinkByEmptyURL   #If true (def), remove links when URL is ''


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            IMAGE2             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'image2' (depends: 'dialog', 'widget')
                                  #Instering images. By default produces <img>
                                  #Replace "image" plugin. Allows:
                                  #  - captions
                                  #  - resize handler
                                  #  - drag&drop
                                  #By default produces:
                                  #  figure.image
                                  #    img
                                  #    figcaption
COMMAND 'image'                   #Inserts|edits <img> with dialog 'image2'
                                  #Done by button 'Image' (toolbar 'insert'), double click and context menu (group 'image')
CONF.image2_captionedClass        #'CLASS' applied to <figure> (def: 'image')
CONF.image2_alignClasses          #STR_ARR. 3 CSS classes also applied to <figure> when aligned to left|center|right
                                  #Def: use style="float:left|right" and 'text-align: center'
CONF.image2_disableResizer        #If false (def), allow resizing image.
CONF.image2_prefillDimensions     #Like CONF:image_prefillDimensions


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          IMAGEROTATE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'imagerotate' (1.1)
COMMAND 'rotateLeft|Right'        #Rotate selected image (by assigning <img> src="DATA_URI")
                                  #Done by contextMenu on <img> (MENUGROUP 'image')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             CHART             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'chart'
                                  #Insert charts, using chart.js


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            YOUTUBE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'youtube'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          LOCATIONMAP          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'locationmap'
                                  #Inserting Google Maps


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          GOOGLEDOCS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'googledocs'
                                  #Inserting Google Docs


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             AUDIO             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'Audio' (1.0)
COMMAND 'Audio'                   #Opens dialog 'audio' to insert|edit <audio>
                                  #Done by button 'Audio' (toolbar: 'Audio'), doubleclick or contextMenu on <audio> 
                                  #(MENUGROUP 'flash')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             FLASH             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'flash' (depends: 'fakeobjects', 'dialog', 'embed')
                                  #Handles Adobe Flash content
COMMAND 'flash'                   #Launch dialog 'flash', to insert Flash content
                                  #Done by button 'Flash', contextMenu in MENUGROUP 'flash' and doubleclick on Flash content
                                   

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SLIDESHOW           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'slideshow'
                                  #Inserting slideshows



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            SMILEY             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'smiley' (depends: 'dialog')
COMMAND 'smiley'                  #Open dialog 'smiley', which inserts <img> among a choice
                                  #Done by button 'Smiley' (toolbar 'insert')
CONF.smiley_path                  #URL (def: 'BASEPATH/plugins/smiley/images/')
CONF.smiley_images                #'FILE'_ARR
CONF.smiley_descriptions          #STR_ARR
CONF.smiley_columns               #NUM (def: 6)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          FONTAWESOME          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'fontawesome' (1.1)
                                  #Button 'FontAwesome', adds dialog, which allows:
                                  #  - picking font (inserted as WIDGET)
                                  #  - changing CSS color, font-size
                                  #  - adding class 'fa-spin|fw|border|rotate-*|flip-*'
                                  #Filter must not remove empty <span>, e.g. CKEDITOR.dtd.$removeEmpty = false




           
   EMBED   
           




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          FAKEOBJECTS          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

                                 ##Plugin 'fakeobjects'
                                  #Replace content by <img> when not in edit mode
EDITOR.createFakeElement(...)     #
EDITR.createFakeParserElement(...)#
EDITOR.restoreFakeElement(...)    #


																						 /=+===============================+=\
																						/  :                               :  \  
							 														  )==:           EMBEDBASE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'embedbase' (depends: 'widget', 'notificationaggregator')
                                  #Base plugin for "embed[semantic]"
                                  #Use dialog 'embedBase'
CKEDITOR.plugins.embedBase.*      #

  
																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        EMBED[SEMANTIC]        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'embed[semantic]' (depends: 'embedbase')
                                  #Embedded URL content in an <iframe> using Iframely.
                                  #If "semantic", uses oEmbed standard.
                                  #Add 'embed[Semantic]' WIDGET
CONF.embed_provider               
CKEDITOR.plugins.embedBase.       #oEmbed provider (def: "//ckeditor.iframe.key/api/oEmbed={url}&callback={callback}")
baseDefinition.providerUrl        #Can use "{url}" (requested URL) and "{callback}" (JSONP)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOEMBED           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'autoembed' (requires: 'autolink', 'undo') (usually requires also: 'embed', 'embedsemantic')
                                  #Autoembed URLs when pasted (show error when cannot automatically embed)
CONF.autoEmbed_widget             #Plugin "STR,..."[(URL)] to use (def: "embed,embedsemantic")


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            IFRAME             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'iframe' (depends: 'dialog', 'fakeobjects')
COMMAND 'iframe'                  #Adds|edits an <iframe>
                                  #Done by button 'Iframe', double click on it and context menu MENUGROUP 'image'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CODESNIPPET          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

                                  
                                 ##Plugin 'codesnippet' (depends: 'widget', 'dialog')
                                  #Insert code snippets (using highlight.js)
                                  #In 'inline mode', needs to load hightlight.js JavaScript and CSS.
                                  #Dialog 'codeSnippet', button 'codeSnippet' (in 'insert' toolbar), command 'codeSnippet'

CONF.codeSnippet_codeClass        #'CLASS' of <code> (def: 'hljs')
CONF.codeSnippet_languages        #OBJ of programming languages (def: null, i.e. all)
CONF.codeSnippet_theme            #STR color theme (def: 'default')

CONF.codesnippet.
setHighlighter(HIGHLIGHTER)       #Use another highlighter than highlight.js
CKEDITOR.plugins.codesnippet.
hightlighter                      #HIGHLIGHTER


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:       CODESNIPPETGESHI        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'codesnippetgeshi' (depends: 'codesnippet', 'ajax')
                                  #Like 'codesnippet', but uses GeSHI hightlighter (server-side) instead of highlight.js
CONF.codeSnippetGeshi_url         #'URL' (PHP)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CODEMIRROR           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'codemirror'
                                  #Insert code highlighter

p
																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MATHJAX            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'mathjax' (depends: 'widget', 'dialog')
                                  #Inserting TeX WIDGET 'mathjax', done by button '', opening dialog 'mathjax'
CONF.mathJaxClass                 #'CLASS'. Any elements with this CSS class will be converted (def: 'math-tex')
CONF.mathJaxLib                   #MathJax library path
CKEDITOR.plugins.mathjax.*        #Helpers


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        WIDGETBOOTSTRAP        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'widgetbootstrap'
                                  #Inserts Bootstrap widgets




            
   UPLOAD   
            




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SAVE              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'save'
                                  #Only with 'normal' mode, if EDITOR is on a <form>
COMMAND 'save'                    #Fires <form> submit
                                  #Fires 'save'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          FILEBROWSER          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'filebrowser' (depends: 'popup')

CONF.filebrowser[Image|Flash]
Browse|UploadUrl                  #'URL' (def: '')
CONF.filebrowserImageBrowseLinkUrl#'URL' (def: '')

CONF.filebrowserWindowFeatures    #
CONF.filebrowserWindowWidth|Height#Passed to EDITOR.popup() STR, STR2 and STR3


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           FILETOOLS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'filetools'
CKEDITOR.fileTools.*              #

CONF.uploadUrl                    #'URL' (def: '')
CONF.fileTools_defaultFileName    #For files without names, e.g. Base64 pasted in (def: '', i.e. auto)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         UPLOADWIDGET          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'uploadwidget' (depends: 'widget', 'clipboard', 'filetools', 'notificationaggregator')
TODO


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          UPLOADIMAGE          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'uploadimage' (depends: 'uploadwidget')
TODO


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         IMAGEUPLOADER         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'imageuploader'
                                  #Better image uploader




          
   SIZE   
          




CONF.width|height                 #Of the editor.
                                  #'CSS_LENP'|NUM (def: ''|200). Only 'normal mode'.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           AUTOGROW            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'autogrow'
                                  #Adapt height to content. Not needed in 'inline mode'
COMMAND 'autogrow'                #
CONF.autoGrow_min|maxHeight       #NUM (def: 200|0)
CONF.autoGrow_bottomSpace         #NUM (def: 0), space between content and bottom border
CONF.autoGrow_onStartup           #BOOL (def: false), if true, adjust initial height on startup instead of focus.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            RESIZE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'resize'
                                  #Only 'normal mode'
CONF.resize_enabled               #BOOL (def: true). Show resizing handle in bottom right corner.
CONF.resize_max|minHeight|Width   #NUM
CONF.resize_dir                   #'both|vertical|horizontal'

EDITOR.resize                     #  - BOOL: if true, applied to content area, otherwise to entire editor area
(NUM, NUM2[, BOOL[, BOOL2]])      #  - BOOL2: if true, applied to inner area, otherwise to outer area


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           WORDCOUNT           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'wordcount' (0.13) (depends: 'htmlwriter', 'notification', 'undo')
CONF.showParagraphs|WordCount|
CharCount                         #If true, show count on bottom bar (def: true, true, false)
CONF.countSpacesAsChars           #Def: false
CONF.countHTML                    #Def: false
CONF.maxWordCount|CharCount       #Def: -1. Does not allow bigger than this.
                                  #Fires events 'word|charCountLess|GreaterThanMaxLengthEvent' with CEVENT.data: 
                                  #currentLength NUM, maxLength NUM





                
   CORRECTION   
                




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SCAYT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Spell checker as you type. Uses WebSpellChecker.net
                                  #Uses ads (unless purchasing license)
CONF.disableNativeSpellChecker    #If true (def), disable browser's native spell checking.
CONF.scayt_autoStartup            #Def: false

CONF.scayt_sLang                  #Lang among (def. 'en_US')
CONF.scayt_userDictionaryName     #User-defined dictionary

CONF.scayt_contextCommands        #"STR|..." for the context menu options.
                                  #Def: 'ignore|ignoreall|add'
                                  #Also available: 'off|all' and 'option|language|dictionary|about'
CONF.scayt_uiTabs                 #'1|0,1|0,1|0': whether to show 'Options', 'Languages', 'Dictionary' (def: '1,1,1')
CONF.scayt_contextMenuItemsOrder  #Suggestions context menu order. Def: 'suggest|moresuggest|control'
CONF.scayt_moreSuggestions        #'on|off' (def: 'on')

CONF.scayt_minWordLength          #NUM (def: 4)
CONF.scayt_maxSuggestions         #NUM (def: 5)
CONF.scayt_disableOptionsStorage  #STR[_ARR] for the "Options" menu to disable (def: '')
                                  #Available: 'options', 'ignore-all-caps-words', 'ignore-domain-names',
                                  #'ignore-words-with-mixed-cases', 'ignore-words-with-numbers', 'lang', 'all'
CONF.scayt_elementsToIgnore       #'TAG,...' (def: 'style')

CONF.scayt_service
Host|Path|Port|Protocol           #Which endpoint to use (def: 'http://svc.webspellchecker.net/spellcheck31/script/ssrv.cgi')

CONF.scayt_customDictionaryIds    #Custom dictionaries 'ID,...' (only licensed version)
CONF.scayt_customerId             #Customer ID (only licensed version)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              WSC              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                  #Spell checker through a dialog box, using also WebSpellChecker.net.
CONF.wsc_cmd                      #Which tabs is opened by default in dialog box, among 'spell|thes|grammar' (def: 'spell')

CONF.wsc_lang                     #Like CONF.scayt_sLang
CONF.wsc_userDictionaryName       #Like CONF.scayt_userDictionaryName
CONF.wsc_customerDictionaryIds    #Like CONF.scayt_customerDictionaryIds
CONF.wsc_customerId               #Like CONF.scayt_customerId


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          AUTOCORRECT          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Community plugin 'autocorrect' (3.0) (depends: 'menubutton')

COMMAND 'autocorrect'             #Replace sequences of characters by others, as you type.
                                  #Does replacements (if CONF.autocorrect_enabled true (def))::
                                  #  - <-- and -->     ← and →
                                  #  - <-->            ↔
                                  #  - -+ or +-        ±
                                  #  - ~=              ≈
                                  #  - (c), (r), (tm)  ©, ®, ™
                                  #  - (o)             ˚
                                  #  - ...             …
                                  #  - << and >>       « and »
                                  #  - 1/2, 1/4, 3/4   ½, ¼, ¾
                                  #  - URL             <a href="URL"></a> 
                                  #                    (if CONF.autocorrect_recognizeUrls true (def))
                                  #  - --              CONF.autocorrect_dash (def: '–') 
                                  #                    (if CONF.autocorrect_replaceHyphens true (def))
                                  #  - ' and "         CONF.autocorrect_single|doubleQuotes (def: ‘’ and “”)
                                  #                    (if CONF.autocorrect_replaceSingle|DoubleQuotes true (def))
                                  #  - --- or ___      <hr>
                                  #                    (if CONF.autocorrect_createHorizontalRules true (def))
                                  #  - *|+             <ul><li>
                                  #                    (if CONF.autocorrect_formatBulletedLists true (def))
                                  #  - 1.|a.|I.        <ol><li>
                                  #                    (if CONF.autocorrect_formatNumberedLists true (def))
                                  #  - 1st             1st
                                  #                    (if CONF.autocorrect_formatOrdinals true (def))
                                  #  - custom:
                                  #     - if CONF.autocorrect_useReplacementTable true (def)
                                  #     - by augmenting CONF.autocorrect_replacementTable OBJ
                                  #Done by button 'AutoCorrect' or contextMenu (MENUGROUP 'autocorrect')

COMMAND 'toggleAutocorrect'       #Does it as you type
                                  #Done by contextMenu (MENUGROUP 'toggleAutocorrect')

COMMAND 'autocorrectOptions'      #Opens dialog 'autocorrectOptions', to setup options.
                                  #Done by contextMenu (MENUGROUP 'autocorrectOptions')




           
   PRINT   
           




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             PRINT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'print'
COMMAND 'print'                   #Open browser print dialog
                                  #Done by button 'Print' (toolbar 'document')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            PREVIEW            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'preview'
COMMAND 'preview'                 #Open popup with EDITOR.getData()
                                  #Fires 'contentPreview' with CEVENT.data 'HTML'
                                  #Done by button 'Preview' (toolbar 'document')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           PAGEBREAK           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'pagebreak'
COMMAND 'pagebreak'               #Inserts <div>:
                                  #  - meant as a printing break (e.g. use CSS page-break-after: always)
                                  #  - show visual line
                                  #Done by button 'PageBreak' (toolbar 'insert')




          
   A11Y   
          




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           TABINDEX            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONF.tabIndex                     #

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           MAGICLINE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'magicline'
COMMAND 'accessPrevious|NextSpace'#Inserting new lines when it is hard to do so.
                                  #Done by clicking on a red line what appears when needed,
                                  #or when using shortcut CONF.magicline_keystrokeNext|Previous (def: Ctrl-Shift-3|4)

CONF.magicline_color              #'CSS'. Def: "red"
CONF.magicline_everywhere         #If false (def), only shows when needed
CONF.magicline_triggerOffset      #How close to make it appear (def: 30)
CONF.magicline_holdDistance       #How close to catch focus, as percentage of triggerOffset (def: 0.5)
CONF.magicline_tabuList           #Do not show if element has those HTML attributes STR_ARR (def: ['data-widget-wrapper'])


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           A11YHELP            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'a11yhelp' (depends: 'dialog')
                                  #Create command 'a11yhelp', which fires shortcuts dialog 'a11yHelp', which is also shown on Alt+0




                
   DEVELOPERS   
                




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:    SOURCEAREA|SOURCEDIALOG    :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/ 


                                 ##Plugin 'sourcearea|sourcedialog'
COMMAND 'source'                  #Shows HTML source editing, inline. Only for 'normal mode'
                                  #Done by button 'Source' (toolbar 'mode')
COMMAND 'sourcedialog'            #Shows HTML source editing through a dialog 'sourcedialog'.
                                  #Done by button 'Sourcedialog' (toolbar 'mode')

CONF.sourceAreaTabSize            #Def: 4 (tab-size CSS property)
                                  #Only if CONF.dataIndentationChars is '\t'

EDITOR.mode                       #'wysiwyg|source'
COMMAND_DEF.modes                 #Which modes can execute this commands as OBJ.wysiwyg|source 0|1


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           DOCPROPS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'docprops' (depends: 'wysiwygarea', 'dialog', 'colordialog')
COMMAND 'docProps'                #With 'wysiwygarea', allows changing page properties.
                                  #Opens dialog 'docProps'.
                                  #Done by button 'DocProps' (toolbar 'document')


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           DEVTOOLS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'devtools'
                                  #Show extra dev infos about dialogs as popovers
CONF.devtools_styles              #'CSS' to be applied to popovers
CONF.devtools_textCallback(...)   #Text to be shown in popovers


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          SHOWBORDERS          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

    
                                 ##Plugin 'showborders'
COMMAND 'showborders'             #Show outline outside <table> with borders
CONF.startupShowBorders           #If true (def), enabled on startup.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          SHOWBLOCKS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'showblocks'
COMMAND 'showblocks'              #Show paragraphs blocks (with HTML tagname)
                                  #Done by button 'ShowBlocks' (toolbar 'tools')
CONF.startupInlineBlocks          #If true (def: false), enabled on startup.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         ELEMENTSPATH          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


                                 ##Plugin 'elementspath'
                                  #Shows HTML path of focused element in bottom bar.
COMMAND 'elementsPathFocus'       #Gives it the focus (also F11 shortcut)
