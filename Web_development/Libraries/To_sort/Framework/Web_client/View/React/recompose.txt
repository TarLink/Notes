
               
   RECOMPOSE   
               


VERSION ==>                       #0.12.0
                                  #HOC library, i.e. creating wrappers for React types: FUNC(RTYPE)->RTYPE2
                                  #Can require individual functions (like Underscore/Lodash)

CURRYING ==>                      #Most functions can be curried

WRAPPERS ==>                      #All functions except in "Helper" are RTYPE wrappers, i.e. 
                                  #returns another RTYPE2 (HOC, "High order component")
                                  #As such, works well with RECOMPOSE.compose(...)

RECOMPOSE.compose(...)            #Same as _.compose(...) but with more debug info


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            HELPER             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


RECOMPOSE.isClassComponent(RTYPE)
->BOOL                            #

RECOMPOSE.getDisplayName(RTYPE)   #Returns RTYPE.displayName|name or 'Component'
RECOMPOSE.wrapDisplayName
(RTYPE, STR)                      #Returns STR + RECOMPOSE.getDisplayName(RTYPE)

RECOMPOSE.toClass(FUNC())->RTYPE  #Transform a stateless function into a RTYPE
                                  #Can specify FUNC.displayName|name|propTypes|contextTypes|defaultProps


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TYPE              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


RECOMPOSE.renderComponent
('TAG'|RTYPE)                     #Make type 'TAG'|RTYPE

RECOMPOSE.componentFromProp('VAR')#Make type PROPS.VAR 'TAG'|RTYPE


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             PROPS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


RECOMPOSE.renameProp
('VAR', 'VAR2', RTYPE)
RECOMPOSE.renameProps
({ 'VAR': 'VAR2' ... }, RTYPE)    #Make PROPS.VAR -> PROPS.VAR2

RECOMPOSE.flattenProp('VAR',RTYPE)#Make PROPS.VAR.VAR2 -> PROPS.VAR2

RECOMPOSE.mapProps
(FUNC(PROPS)->PROPS2, RTYPE)      #Make PROPS -> PROPS2

RECOMPOSE.mapPropsOnChange        #Same as RECOMPOSE.mapProps() except recomputed on change, i.e.:
('VAR'_ARR, FUNC, RTYPE)          #  - also pass original PROPS (except PROPS.VAR)
                                  #  - recompute PROPS2 if PROPS.VAR changes (shallow comparison in componentWillReceiveProps)
                                  #So 'VAR'_ARR must be the variables used in FUNC

RECOMPOSE.withAttachedProps
(PROPS[(FUNC()->PROPS2)], RTYPE)  #Adds PROPS (PROPS2 is the one passed to it, and has higher priority)

RECOMPOSE.withReducer             #Adds:
('VAR', 'VAR2', RFUNC,            #  - PROPS.VAR: initial value is OBJ
OBJ[(PROPS)], RTYPE)              #  - PROPS.VAR2(ACTION): does PROPS.VAR = RFUNC(PROPS.VAR, ACTION)

RECOMPOSE.withState               #Adds:
('VAR','VAR2',OBJ[(PROPS)], RTYPE)#  - PROPS.VAR: initial value is OBJ
                                  #  - PROPS.VAR2(VAL|FUNC(PROPS.VAR)[, FUNC()]): does PROPS.VAR = VAL|FUNC(PROPS.VAR)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         RCOMP MEMBERS         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

RECOMPOSE.withContext
(OBJ, FUNC()->OBJ, RTYPE)         #Adds childContextTypes OBJ and getChildContext FUNC

RECOMPOSE.defaultProps(OBJ, RTYPE)#Adds defaultProps OBJ

RECOMPOSE.withProps
(FUNC(FUNC()->PROPS2)->PROPS,RTYP)#Similar to RECOMPOSE.defaultProps(...)

RECOMPOSE.setStatic
('VAR', VAL, RTYPE)               #Adds RTYPE.VAR = VAL
RECOMPOSE.setDisplayName
(VAL, RTYPE)                      #Adds RTYPE.displayName = VAL
RECOMPOSE.setPropTypes
(VAL, RTYPE)                      #Adds RTYPE.propTypes = VAL

RECOMPOSE.hoistStatics            #Wraps FUNC so it copies RTYPE attributes to RTYPE2 
(FUNC(RTYPE)->TYPE2)->FUNC        #except React-specific attributes: contextTypes, defaultProps, displayName, mixins, type, etc.
                                  #Note that this function wraps HOC, not RTYPE


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           LIFECYCLE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


RECOMPOSE.lifecycle               #Fires:
(FUNC(), FUNC2(), RTYPE)->RTYPE2  #  - FUNC() during construction
                                  #  - FUNC2() during componentWillUnmount
                                  #RTYPE2.state is passed as RTYPE.props

RECOMPOSE.doOnReceiveProps        #Fires:
(FUNC(PROPS), TYPE)               #  - FUNC(PROPS) called on componentWillMount and componentWillReceiveProps


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:     SHOULDCOMPONENTUPDATE     :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


RECOMPOSE.shouldUpdate
(FUNC(PREV_PROPS,NEXT_PRPS)->BOOL, 
RTYPE)                            #Adds shouldComponentUpdate()->BOOL

RECOMPOSE.pure(RTYPE)             #Adds shouldComponentUpdate() doing a shallow comparison on PROPS

RECOMPOSE.onlyUpdateForKeys       
('VAR'_ARR, RTYPE)                #Adds shouldComponentUpdate() doing a shallow comparison on any PROPS.VAR

RECOMPOSE.onlyUpdateForPropTypes
(RTYPE)                           #Adds shouldComponentUpdate() doing a shallow comparison on any PROPS.VAR from RTYPE.propTypes


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            RENDER             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


RECOMPOSE.nest(RTYPE...)          #Will render as:
                                  #  <RTYPE PROPS> 
                                  #     <RTYPE2 PROPS>
                                  #       ...
                                  #         PROPS.children

RECOMPOSE.createSink(FUNC(PROPS)) #Will render as no HTML but firing FUNC(PROPS) on 'mount' and 'update'

RECOMPOSE.renderNothing()         #Will render as no HTML

RECOMPOSE.branch
(FUNC(PROPS)->BOOL, 
FUNC3(RTYPE)->RTYPE3,   
FUNC4(RTYPE)->RTYPE4,             #Will render as RTYPE3 if BOOL true, RTYPE4 otherwise.
RTYPE)                            #Calculated at construction and componentWillReceiveProps
