
           
   REDUX   
           



VERSION ==>                       #3.0.4

DIFFERENCE WITH FLUX ==>          #STORE:
                                  #  - takes role of Flux DISPATCHER + REDUCESTORE
                                  #     - so single store per app
                                  #     - no DISPATCHER.waitFor()
                                  #No FTYPE/view in core, but can use React-redux


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             STORE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


REDUX.createStore                 #APPSTATE0:
(RFUNC([APPSTAT,]ACTION)->APPSTAT2#  - default APPSTATE
[, APPSTATE0])->STORE             #RFUNC is 'reducer':
                                  #  - called on STORE.dispatch(ACTION), to update APPSTATE
                                  #  - called at init
                                  #  - should be 'pure' (see Flux REDUCESTORE)
STORE.getState()->APPSTATE        #
STORE.dispatch(ACTION)            #Cannot be called from inside STORE's RFUNC. Returns ACTION.
STORE.subscribe(SFUNC())          #Called when STORE.dispatch(ACTION) has been called and APPSTATE changed.
                                  #Returns unsubscribe FUNC()
STORE.replaceReducer(RFUNC)       #


REDUX.combineReducers(OBJ)        #Where OBJ:
                                  #  - KEY RFUNC2()->APPSTAT2
                                  #Returns single RFUNC3()->{ KEY: APPSTATE2 }
                                  #Conventions for RFUNC2:
                                  #  - if unsupported ACTION (including undefined), must return unchanged APPSTATE
                                  #  - must never return undefined


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          MIDDLEWARE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


REDUX.applyMiddleware             #Returns patched REDUX.createStore (specifically STORE.dispatch())
(FUNC(STORE)->FUNC2(FUNC3(ACTION))#  - FUNC() is called during applyMiddleware(). It is a REDUX_MDWR
->FUNC4(ACTION) ...)              #  - FUNC2() is called during CREATESTORE()
(REDUX.createStore)->CREATESTORE  #  - FUNC4() is called during STORE.dispatch(ACTION)
                                  #     - can modify ACTION
                                  #     - must then call FUNC3(ACTION) to pass to next middleware
                                  #     - the last middleware FUNC4 is the actual STORE.dispatch()
                                  #STORE only has members getState() and dispatch(ACTION)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            ACTIONS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


REDUX.bindActionCreators(VAL,FUNC)#VAL:
                                  #  - FUNC2()->ACTION
                                  #  - { KEY: FUNC2()->ACTION ... }
                                  #FUNC is STORE.dispatch()
                                  #It will return VAL, but bind FUNC2() so that it fires STORE.dispatch(ACTION)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             OTHER             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



REDUX.compose(FUNC...)            #Same as FUNC(FUNC2(FUNC3(...)))


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             REACT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



REACT-REDUX ==>                   #Version 4.0.0
                                  #Redux version of FluxContainer:
                                  #  - updates views when store change
                                  #  - should be on 'smart' components (see Flux/React documentation)

<Provider store={STORE}>          #Pass STORE as context to single child.
                                  #Must wrap app.

REACTREDUX.connect                #Wraps RTYPE so that:
(FUNC[, FUNC2][, FUNC3][, OPT])   #  - it updates on STORE change, with FUNC() translating store state into components props ("selector")
(RTYPE)->RTYPE2                   #    to pass down to children (see "Reselect" library)
                                  #  - it passes bound action creators as components props (using FUNC2), to use in the RCOMP
                                  #    (its children should use callbacks to parent)
                                  #Returns RTYPE2:
                                  #  - wraps <RTYPE>:
                                  #     - if OPT.withRef true (def: false), RCOMP2.refs.wrappedInstance or RCOMP2.getWrappedInstance() = RCOMP
                                  #     - RTYPE2.wrappedComponent RTYPE
                                  #  - fires RCOMP2 'update' (hence RCOMP 'update'):
                                  #     - when STORE change: using STORE.subscribe(), if STORE.getState() changed (using ===)
                                  #     - STORE is RCOMP2.props|context.store (e.g. through <Provider>)
                                  #  - RCOMP.props:
                                  #     - PROPS = shallow merge (or FUNC3 taking them as arguments) of:
                                  #        - RCOMP2.props
                                  #        - FUNC_RET = FUNC(STORE.getState(), RCOMP2.props)
                                  #        - FUNC2_RET = FUNC2(STORE.dispatch, RCOMP2.props)
                                  #           - can be OBJ instead, in which case, return bindActionCreators(OBJ, STORE.dispatch)
                                  #           - def: return { dispatch: STORE.dispatch }
                                  #     - PROPS.storeState = STORE.getState()
                                  #     - updated inside shouldComponentUpdate() (hence forceUpdate() does not update it)
                                  #  - optimization if OPT.pure true (def):
                                  #     - should be used according to same conditions as React PURERENDERMIXIN
                                  #     - shouldComponentUpdate() returns false (i.e. RCOMP 'update' not triggered) if PROPS did not change, 
                                  #       i.e. if RCOMP2.props, FUNC_RET and FUNC2_RET did not change (shallow comparison)
                                  #     - only recalculates FUNC[2]() if arguments changed 
                                  #       (shallow comparison for RCOMP2.props, reference comparison for STORE.getState())
