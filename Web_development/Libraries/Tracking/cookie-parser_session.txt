
                           
   COOKIE-PARSER SESSION   
                           


VERSION ==>                   #Node module 1.3.2

COOKIE-PARSER                 #Express MIDWR parsing REQ.cookies and (if 'SECRET'[_ARR]) REQ.secret|signedCookies
(['SECRET'[_ARR]][, OPTS])    #In short: 
                              #  - REQ.cookies|signedCookies should contain COOKIE_OBJ
                              #  - if RES.send(..., {signed: true}), REQ.signedCookies used instead
                              #     - make sure cookie was set by server sharing 'SECRET' (i.e. current one)
                              #OPTS: passed to COOKIE.parse()

REQ.[signedC|c]ookies         #COOKIE_OBJ, using Cookie [C]
                              #Uses JSONCookies(), i.e. values 'j:JSON' -> OBJ
                              #If 'signed', uses signedCookies(..., 'SECRET'[_ARR]), i.e. values 's:VAL.HASH' -> 'VAL' or (if invalid HASH) delete key
REQ.secret                    #'SECRET' (first one if ARR)
                              #Used by RES.cookie(..., {signed: true}) for Set-Cookie: 's:VAL.HASH' [S]

COOKIE-PARSER.JSONCookie      
('j:JSON')->OBJ|undefined     #Returns JSON.parse('JSON'), or undefined if problem
COOKIE-PARSER.JSONCookies(OBJ)
->OBJ                         #Calls JSONCookie() on each OBJ value
COOKIE-PARSER.signedCookie
('s:VAL.HASH', 'SECRET'[_ARR])#Verifies HASH, using any 'SECRET', with COOKIE-SIGNATURE (see its doc)
->'VAL'|false                 #Returns 'VAL' if success, false otherwise
COOKIE-PARSER.signedCookies
(OBJ, 'SECRET'[_ARR])->OBJ    #Calls signedCookie() on each OBJ value. Only keeps values !== false



VERSION ==>                   #1.14.0


EXPRESS-SESSION([OPTS])       #Express MIDWR that parses REQ.session|sessionID|sessionStore
                              #Goal is to use session-specific state OBJ (REQ.session):
                              #  - retrieved using an authenticated cookie (REQ.sessionId)
                              #  - backed by any database (REQ.sessionStore)

REQ.sessionID                 #Value of cookie:
                              #  - name: OPTS.name (def: 'connect.sid')
                              #  - value: OPTS.genid(REQ)->'VAL'
                              #     - def: 24 bits using CRYPTO.randomBytes(), as base64
                              #        - i.e. 50% of 1 collision if 5000 concurrent sessions
                              #  - options:
                              #     - OPTS.cookie OBJ
                              #     - httpOnly: always true
                              #     - secure: 
                              #        - should put true
                              #        - 'auto':
                              #           - true|false if HTTPS
                              #           - if OPTS.proxy true, uses X-Forwarded-Proto [C]
                              #     - maxAge:
                              #        - def: null, i.e. browser-session only
                              #        - Store.touch() updates it, i.e. restore initial maxAge but updated with current time
                              #        - updated at each request (if OPTS.rolling true) or when REQ.session changed (if OPTS.rolling false (def))
                              #Cookie uses REQ.signedCookie:
                              #  - uses OPTS.secret 'SECRET'[_ARR]
                              #     - should be same as REQ.secret
                              #     - if HASH verification fails, recreate a session
                              #  - use COOKIE (see its doc) 
                              #  - does not use COOKIE-PARSER (i.e. not required) but emulates same behavior

REQ.session                   #Any data OBJ for the specific session
                              #Is persisted to store at each request except if it:
                              #  - did not change and OPTS.resave false
                              #  - is new, empty and OPTS.saveUnitialized false
                              #REQ.session 'changed' means JSON hash comparison
                              #OPTS.resave|saveUninitialized must always be defined
                              #When it is empty, what is destroyed in the store depends on OPTS.unset:
                              #  - 'keep' (def): only pointer
                              #  - 'destroy': data as well
REQ.session.cookie            #COOKIE_OBJ
REQ.session.save(FUNC(ERROR)) #Calls STORE.set()
REQ.session.touch()           #Updates expiration
REQ.session.regenerate
(FUNC(ERROR))                 #Calls STORE.regenerate()
REQ.session.destroy(FUNC(ERR))#Deletes REQ.session, then calls STORE.destroy()

REQ.sessionStore              #How REQ.session is persisted to database.
                              #Can be customized with OPTS.store OBJ:
                              #  - must inherit from Store
                              #  - must redefine STORE.all|clear|destroy|get|set|length|touch()
STORE.get(...)                #Get REQ.session
STORE.length(...)             #Gets number of sessions
STORE.all(...)                #Gets all sessions
STORE.set(...)                #Set REQ.session
STORE.touch(...)              #Updates expiration
STORE.createSession(...)      #Restore REQ.session (not for first request)
STORE.destroy(...)            #Deletes REQ.session
STORE.regenerate(...)         #Replaces REQ.session with empty object
STORE.clear(...)              #Deletes all sessions


EXPRESS-SESSION([OBJ])				#Express MIDWR that:
                              #STORE:
                              #  - types:
                              #      - MEMORYSTORE (def):
                              #         - use memory (internal OBJ2) 
                              #         - should be used in dev only, since no durability
                              #      - new (CONNECT-REDIS(EXPRESS-SESSION))(OBJ): (version 2.0.0)
                              #         - use Redis:
                              #            - setex PREFIXsessionID MAXAGE REQ.session_asJSON
                              #               - MAXAGE can be overriden with OBJ.ttl (in sec) (useless)
                              #               - if no MAXAGE, use one day
                              #               - PREFIX is OBJ.prefix (def: "sess:")
                              #            - get|del PREFIXsessionID
                              #         - OBJ:
                              #            - host HOST, port PORT, db NUM, pass PASSWORD
                              #            - or url REDIS_URL
                              #            - client CLIENT: a REDIS CLIENT
                              #            - any PARAM_OBJ to REDIS
                              #      - new (CONNECT-MONGO(EXPRESS-SESSION))(OBJ): (version 0.7.0)
                              #         - use MongoDB, COLL "sessions" (or OBJ.collection STR):
                              #            - with TTL OBJ.ttl NUM (in sec, def: 14 days)
                              #            - must either create TTL index manually or use OBJ.autoRemove "native" (def)
                              #              (create it at startup)
                              #         - OBJ:
                              #            - mongooseConnection ^DB or db ~DB: to reuse a connection
                              #            - url CONN_STR: if not reusing a connection
                              #            - mongoOptions OBJ
                              #            - stringify BOOL: if true (def: false), use JSON.stringify|parse() for REQ.session
                              #              (if contains types not supported by MongoDB)
                              #            - [un]serialize(OBJ)->OBJ: modify REQ.session from|to MongoDB
                              #  - should inherit from a base class and redefine get|set|all|destroy|clear|length, but
                              #    prefer using modules that already do it
                              #  - there is an internal STORE.save() function

COOKIE-SESSION ==>            #Alternative to SESSION that:
                              #  - uses KEYGRIP (rotating secret)
                              #  - doesn't deserialize JSON
                              #Prefer SESSION
