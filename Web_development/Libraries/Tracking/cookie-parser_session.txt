
                           
   COOKIE-PARSER SESSION   
                           


VERSION ==>                   #Node module 1.3.2

COOKIE-PARSER                 #Express MIDWR parsing REQ.cookies and (if 'SECRET'[_ARR]) REQ.secret|signedCookies
(['SECRET'[_ARR]][, OPTS])    #In short: 
                              #  - REQ.cookies|signedCookies should contain COOKIE_OBJ
                              #  - if RES.send(..., {signed: true}), REQ.signedCookies used instead
                              #     - make sure cookie was set by server sharing 'SECRET' (i.e. current one)
                              #OPTS: passed to COOKIE.parse()

REQ.[signedC|c]ookies         #COOKIE_OBJ, using Cookie [C]
                              #Uses JSONCookies(), i.e. values 'j:JSON' -> OBJ
                              #If 'signed', uses signedCookies(..., 'SECRET'[_ARR]), i.e. values 's:VAL.HASH' -> 'VAL' or (if invalid HASH) delete key
REQ.secret                    #'SECRET' (first one if ARR)
                              #Used by RES.cookie(..., {signed: true}) for Set-Cookie: 's:VAL.HASH' [S]

COOKIE-PARSER.JSONCookie      
('j:JSON')->OBJ|undefined     #Returns JSON.parse('JSON'), or undefined if problem
COOKIE-PARSER.JSONCookies(OBJ)
->OBJ                         #Calls JSONCookie() on each OBJ value
COOKIE-PARSER.signedCookie
('s:VAL.HASH', 'SECRET'[_ARR])#Verifies HASH, using any 'SECRET', with COOKIE-SIGNATURE (see its doc)
->'VAL'|false                 #Returns 'VAL' if success, false otherwise
COOKIE-PARSER.signedCookies
(OBJ, 'SECRET'[_ARR])->OBJ    #Calls signedCookie() on each OBJ value. Only keeps values !== false



VERSION ==>                   #1.14.0

EXPRESS-SESSION([OBJ])				#Express MIDWR that:
                              #  - identify user with cookie COOKIENAME=COOKIEID
                              #     - use signedCookies. If not verified, recreate a session.
                              #        - uses OBJ. secret STR (should be same as REQ.secret if COOKIE-PARSER)
                              #     - use httpOnly true
                              #     - others are determined by OBJ.cookie OBJ2 (same as COOKIE):
                              #        - maxAge:
                              #           - reset everytime REQ.session is changed.
                              #             To reset everytime even if not changed, use OBJ.rolling true.
                              #           - default: null, i.e. browser-session only
                              #           - is in ms
                              #        - should put secure true
															#     - COOKIENAME is OBJ.name (def: "connect.sid")
															#     - COOKIEID is generated by OBJ.genid FUNC(REQ) (def: RANDOM_STR)
                              #  - assign:
                              #     - REQ.session = STORE[COOKIEID]
                              #     - REQ.sessionID = COOKIEID
                              #REQ.session is an OBJ but also has:
                              #  - REQ.session.save(): automatically done at end of each request:
                              #     - unless session did not changed (unless OBJ.resave true (def))
                              #     - unless session is empty (unless OBJ.saveUninitialized true (def))
                              #  - REQ.session.destroy()
															#     - actually doesn't erase it (leave it as is) if OBJ.unset "keep" (def), not "destroy"
                              #  - REQ.session.regenerate(): like destroy() but recreate an empty one
                              #  - REQ.session.cookie.expires|maxAge:
                              #     - show how long left
                              #     - can transform to brower-session only by e.g. assigning false to expires
                              #STORE:
                              #  - how REQ.session is stored
                              #  - can be changed with OBJ.store
                              #  - can be retrieved with REQ.sessionStore
                              #  - types:
                              #      - MEMORYSTORE (def):
                              #         - use memory (internal OBJ2) 
                              #         - should be used in dev only, since no durability
                              #      - new (CONNECT-REDIS(EXPRESS-SESSION))(OBJ): (version 2.0.0)
                              #         - use Redis:
                              #            - setex PREFIXsessionID MAXAGE REQ.session_asJSON
                              #               - MAXAGE can be overriden with OBJ.ttl (in sec) (useless)
                              #               - if no MAXAGE, use one day
                              #               - PREFIX is OBJ.prefix (def: "sess:")
                              #            - get|del PREFIXsessionID
                              #         - OBJ:
                              #            - host HOST, port PORT, db NUM, pass PASSWORD
                              #            - or url REDIS_URL
                              #            - client CLIENT: a REDIS CLIENT
                              #            - any PARAM_OBJ to REDIS
                              #      - new (CONNECT-MONGO(EXPRESS-SESSION))(OBJ): (version 0.7.0)
                              #         - use MongoDB, COLL "sessions" (or OBJ.collection STR):
                              #            - with TTL OBJ.ttl NUM (in sec, def: 14 days)
                              #            - must either create TTL index manually or use OBJ.autoRemove "native" (def)
                              #              (create it at startup)
                              #         - OBJ:
                              #            - mongooseConnection ^DB or db ~DB: to reuse a connection
                              #            - url CONN_STR: if not reusing a connection
                              #            - mongoOptions OBJ
                              #            - stringify BOOL: if true (def: false), use JSON.stringify|parse() for REQ.session
                              #              (if contains types not supported by MongoDB)
                              #            - [un]serialize(OBJ)->OBJ: modify REQ.session from|to MongoDB
                              #  - should inherit from a base class and redefine get|set|all|destroy|clear|length, but
                              #    prefer using modules that already do it
                              #  - there is an internal STORE.save() function

COOKIE-SESSION ==>            #Alternative to SESSION that:
                              #  - uses KEYGRIP (rotating secret)
                              #  - doesn't deserialize JSON
                              #Prefer SESSION
