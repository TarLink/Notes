
               
   STYLELINT   
               


VERSION ==>                       #5.1.0
                                  #CSS/Sass/Less linter.

CONFIG ==>                        #Can be:
                                  #  - [../...]./.stylelintrc CONF_FILE:
                                  #     - JSON, YAML or Node.js module (FILE or 'MODULE')
                                  #  - stylelint --config CONF_FILE
                                  #  - package.json stylelint property
CONFIG.extends                    #CONF_FILE[_ARR]: use default. First one has priority.
CONFIG.ignoreFiles                #"GLOB"
                                  #Relative paths to: CONFIG.configBaseDir, config dir or current dir.

RULES ==>                         #Can be:
                                  #  - CONFIG.rules.RULE
                                  #  - /* stylelint-disable [RULE,...] */ to /* stylelint-enable */
                                  #  - /* stylelint-disable-line [RULE,...] */
CONFIG.rules.RULE                 #Can be: RULE_VAL, [RULE_VAL, RULE_OPTS] or null (turn off)
                                  #Def: null for all RULE
                                  #RULE_OPTS:
                                  #  - severity 'warning' or 'error' (def)
                                  #  - message STR: custom error message
                                  #RULE_VAL can be suffixed with -multi|single-line, which means rules only applies on
                                  #multi|single lines.
CONFIG.plugins                    #FILE|'MODULE' defining custom RULE

stylelint [FILE|DIR|"GLOB"]...    #Def: stdin
                                  #Exit codes: 0 (success), 1 (unknown error), 2 (lint error), 78 (config file error), 
                                  #80 (globbing error)
--syntax scss|less|js             #Allows working for Sass, Less or CSS in JavaScript. 
                                  #Might need to install a PostCSS plugin.

--formatter string|json           #
--custom-formatter FILE           #Node.js module exporting a FORMATTER
--quiet                           #Only shows errors
--verbose                         #



ERRORS ==>
color-no-invalid-hex              #BOOL. No syntax error in hex color
string-no-newline                 #BOOL. No unescaped newline inside STR
declaration-block-no-duplicate-
properties                        #BOOL. No duplicate properties
declaration-block-no-shorthand-
property-overrides                #BOOL. No shorthand property after a related longer property, 
                                  #e.g. background after background-repeat

NON-STANDARD ==>
property|value-no-vendor-prefix   #BOOL. Do not use vendor prefixs on PROP|values
function-linear-gradient-no-
nonstandard-direction             #BOOL. Do not use linear-gradient(DIRECTION ...) (use "to DIRECTION" instead)

COLOR STYLE ==>
color-hex-case                    #COLOR case: 'lower|upper'
color-hex-length                  #COLOR: as 'short|long' as possible
color-no-hex                      #BOOL. No hex color
color-named                       #COLOR names: 'always-where-possible|never'

NUMBERS STYLE ==>                 
number-leading-zero               #0.5 (not .5): 'always|never'
number-max-precision              #NUM
number-no-trailing-zeros          #BOOL
number-zero-length-no-unit        #BOOL: unitless 0, for LEN

LENGTH STYLE ==>                  
unit-whitelist|blacklist          #STR_ARR of units to whitelist|blacklist
property-unit-whitelist|blacklist #Same but as { PROP|'PROP_REGEXP': STR_ARR ... }

NEWLINE ==>
block-opening|closing-brace-
newline-after|before              #Newline after|before { or } 'always|never[-single|multi-line]'
declaration-block-single-line-
max-declarations                  #Do not require newline around { } if ruleset has <=NUM rules
block-no-single-line              #BOOL. No single-line rulesets
declaration-block-semicolon-
newline-after|before              #Newline after|before ; 'always|never[-multi-line]'
value-list-comma-newline-           
after|before                      #Newline after|before , in values: 'always|never[-multi-line]'
function-comma-newline-           
after|before                      #Newline after|before , inside functions: 'always|never[-multi-line]'
function-parentheses-newline-
inside                            #Newline after ( and before ) inside functions: 'always|never[-multi-line]'
declaration-colon-newline-after   #Newline after : 'always[-multi-line]'

SPACE ==>
block-opening|closing-brace-
space-after|before                #Space after|before { or } 'always|never[-single|multi-line]'
declaration-colon-space-
after|before                      #Space after|before : 'always|never[-single-line]'
declaration-block-semicolon-
space-after|before                #Space after|before ; 'always|never[-single-line]'
value-list-comma-space-
after|before                      #Space after|before , in values: 'always|never[-single-line]'
function-comma-space-after|before #Space after|before , inside functions: 'always|never[-single-line]'
function-space-newline-inside     #Space after ( and before ) inside functions: 'always|never[-single-line]'
function-whitespace-after         #Space after FUNC(): 'always|never'
function-calc-no-unspaced-operator#BOOL. Space around operators inside calc()
declaration-bang-space-
after|before                      #Space around !: 'always|never'

QUOTES ==>
string-quotes                     #Quotes around STR: 'single|double'
function-url-quotes               #Quotes inside url(): 'single|double|none'
font-family-name-quotes           #Quotes around font-family value:
                                  #  - "single|double-where-required": not around keyword or name that requires escaping
                                  #  - "single|double-where-recommended": not around keyword or name that requires whitespace,
                                  #    non-hyphen-punctuation or digit
                                  #  - "single|double-unless-keyword": not around keyword
                                  #Does not work with Sass/Less/CSS variables

PROPS VALUES ==>
property-value-whitelist|blacklist#{ PROP|'PROP_REGEXP': STR_ARR ... } of values to whitelist|blacklist
font-weight-notation              #Using keywords in font-weight: 'numeric|named-where-possible'
                                  #RULE_OPTS: 
                                  #  - ignore 'relative': ignore lighter|bolder

PROPS ==>
property-whitelist|blacklist      #'PROP'_ARR to whitelist|blacklist
function-whitelist|blacklist      #'FUNC'_ARR to whitelist|blacklist

CLASSNAMES ==>                    #
selector-class-pattern            #

OTHERS ==>                        #
time-no-imperceptible             #BOOL. Disallow animations|transitions under 100ms
custom-property-no-outside-root   #BOOL. Custom variables selector must be :root { ... }
custom-property-pattern           #REGEXP. Custom variables names, without --
declaration-no-important          #BOOL. No !important
declaration-block-properties-order#PROPS order:
                                  #  - 'alphabetical'
                                  #  - ARR of:
                                  #     - GROUP:
                                  #        - properties 'PROP'_ARR
                                  #          PROP will match PROP[-*]
                                  #        - order: whether properties should follow 'PROP'_ARR order: 'strict' (def) or 'flexible'
                                  #        - emptyLineBefore 'always' or 'never' (def)
                                  #     - 'PROP': same as { properties: ['PROP'] }
                                  #When using ARR, unspecified PROP is according to RULE_OPTS.unspecified:
                                  #  - 'ignore': anywhere
                                  #  - 'top|bottom'
                                  #  - 'bottomAlphabetical'
                                  #Ignore Sass/Less/CSS variables and mixins/etc.
declaration-block-
trailing-semicolon                #BOOL. Semicolon for the last rule of a ruleset: 'always|never'
block-no-empty                    #BOOL. No empty blocks
