
               
   STYLELINT   
               


TODO: 
  - NEED TO REORGANIZE RULES
  - CURRENTLY AT https://github.com/stylelint/stylelint/blob/master/docs/user-guide/rules.md#about-rule-names
  - UPDATE CSS DOC WITH NEW LINTING IDEAS
  - CHECK IF CSSLINT STILL MAKES SENSE


VERSION ==>                                      #5.1.0
                                                 #CSS/Sass/Less linter.


CONFIG ==>                                       #Can be:
                                                 #  - [../...]./.stylelintrc CONF_FILE:
                                                 #     - JSON, YAML or Node.js module (FILE or 'MODULE')
                                                 #  - stylelint --config CONF_FILE
                                                 #  - package.json stylelint property
CONFIG.extends                                   #CONF_FILE[_ARR]: use default. First one has priority.
CONFIG.ignoreFiles                               #"GLOB"
                                                 #Relative paths to: CONFIG.configBaseDir, config dir or current dir.

RULES ==>                                        #Can be:
                                                 #  - CONFIG.rules.RULE
                                                 #  - /* stylelint-disable [RULE,...] */ to /* stylelint-enable */
                                                 #  - /* stylelint-disable-line [RULE,...] */
CONFIG.rules.RULE                                #Can be: RULE_VAL, [RULE_VAL, RULE_OPTS] or null (turn off)
                                                 #Def: null for all RULE
                                                 #RULE_OPTS:
                                                 #  - severity 'warning' or 'error' (def)
                                                 #  - message STR: custom error message
                                                 #RULE_VAL can be suffixed with -multi|single-line, which means rules only
                                                 #applies on multi|single lines.
CONFIG.plugins                                   #FILE|'MODULE' defining custom RULE


stylelint [FILE|DIR|"GLOB"]...                   #Def: stdin
                                                 #Exit codes: 0 (success), 1 (unknown error), 2 (lint error), 78 (config file error), 
                                                 #80 (globbing error)
--syntax scss|less|js                            #Allows working with Sass, Less or CSS in JavaScript. 
                                                 #Might need to install a PostCSS plugin.

--formatter string|json                          #
--custom-formatter FILE                          #Node.js module exporting a FORMATTER
--quiet                                          #Only shows errors
--verbose                                        #


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            ERRORS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


no-unsupported-browser-features                  #BOOL. No features unsupported by target browsers.
                                                 #RULE_OPTS:
                                                 #  - browsers BROWSERLIST: see browserlist package to see syntax
                                                 #  - ignore 'FEATURE'_ARR
color-no-invalid-hex                             #BOOL. No syntax error in hex color
string-no-newline                                #BOOL. No unescaped newline inside STR
declaration-block-no-duplicate-properties        #BOOL. No duplicate properties
no-duplicate-selectors                           #BOOL. No duplicate selectors
declaration-block-no-shorthand-property-overrides#BOOL. No shorthand property after a related longer property, 
                                                 #e.g. background after background-repeat
media-feature-no-missing-punctuation             #BOOL. Syntax error in @media
no-unknown-animations                            #BOOL. No @animations pointing to unknown animations


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         NON-STANDARD          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


no-invalid-double-slash-comments                 #BOOL. /* COMMENT */, not // COMMENT, unless using Sass/Less
selector|at-rule|media-feature-name|property|
value-no-vendor-prefix                           #BOOL. Do not use vendor prefixs on SELECTOR|@RULE|FEATURE|PROP|values
function-linear-gradient-no-nonstandard-direction#BOOL. Do not use linear-gradient(DIRECTION ...) (use "to DIRECTION" instead)
no-browser-hacks                                 #BOOL
                                                 #RULE_OPTS:
                                                 #  - browsers BROWSERLIST: see browserlist package to see syntax


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            NEWLINE            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


no-missing-eof-newline                           #BOOL. Newline at end of file
comment-empty-line-before                        #Newline before comment: 'always|never'
selector-list-comma-newline-before|after         #Newline after|before , in selectors: 'always|never[-multi-line]'
block-opening|closing-brace-newline-after|before #Newline after|before { or } 'always|never[-single|multi-line]'
declaration-block-single-line-max-declarations   #Do not require newline around { } if ruleset has <=NUM rules
at-rule-empty-line-before                        #Newline before @RULE: 'always|never'
at-rule-semicolon-newline-before                 #Newline after @RULE: 'always|never'
rule-[non-]nested-empty-line-before|after        #Newline after|before nested|normal selectors: 'always|never[-multi-line]'
block-no-single-line                             #BOOL. No single-line rulesets
declaration-block-semicolon-newline-after|before #Newline after|before ; 'always|never[-multi-line]'
value-list-comma-newline-after|before            #Newline after|before , in values: 'always|never[-multi-line]'
function-comma-newline-after|before              #Newline after|before , inside functions: 'always|never[-multi-line]'
function-parentheses-newline-inside              #Newline after ( and before ) inside functions: 'always|never[-multi-line]'
declaration-colon-newline-after                  #Newline after : 'always[-multi-line]'
media-query-list-comma-newline-after|before      #Newline after|before , in @media: 'always|never[-multi-line]'
max-empty-lines                                  #NUM
declaration-block-trailing-semicolon             #BOOL. Semicolon for the last rule of a ruleset: 'always|never'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         INDENT/WIDTH          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


indentation                                      #Indentation: 'tab'|NUM
                                                 #RULE_OPTS:
                                                 #  - except STR_ARR: do not indent 'block' (ruleset), 'param' (PROP), 'value'
                                                 #  - ignore STR_ARR: same but ignore 
                                                 #  - hierarchicalSelectors BOOL: if true (def: false), should indent a ruleset if
                                                 #    the former ruleset is related, e.g.:
                                                 #     - .CLASS then .CLASS-CLASS2
                                                 #     - SELECTOR then SELECTOR > SELECTOR2
max-line-length                                  #NUM
                                                 #RULE_OPTS:
                                                 #  - ignore STR_ARR: 'non-comments': only apply it to comments, and only to comments on their own line


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             SPACE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


no-eol-whitespace                                #BOOL. No trailing whitespace
comment-whitespace-inside                        #Space inside /* */: 'always|never'
selector-list-comma-space-after|before           #Space after|before , in selectors: 'always|never[-single-line]'
selector-combinator-space-after|before           #Space after|before > + ~ 'always|never'
block-opening|closing-brace-space-after|before   #Space after|before { or } 'always|never[-single|multi-line]'
declaration-colon-space-after|before             #Space after|before : 'always|never[-single-line]'
declaration-block-semicolon-space-after|before   #Space after|before ; 'always|never[-single-line]'
value-list-comma-space-after|before              #Space after|before , in values: 'always|never[-single-line]'
function-comma-space-after|before                #Space after|before , inside functions: 'always|never[-single-line]'
function-space-newline-inside                    #Space after ( and before ) inside functions: 'always|never[-single-line]'
function-whitespace-after                        #Space after FUNC(): 'always|never'
function-calc-no-unspaced-operator               #BOOL. Space around operators inside calc()
declaration-bang-space-after|before              #Space after|before !: 'always|never'
media-query-parentheses-space-inside             #Space after ( and before ) in @media: 'always|never'
media-query-list-comma-space-after|before        #Space after|before , in @media: 'always|never[-single-line]'
media-feature-colon-space-after|before           #Space after|before : in @media: 'always|never'
media-feature-range-operator-space-after|before  #Space after|before < <= > >= in @media: 'always|never'


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           COMMENTS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


stylelint-disable-reason                         #Comment 'always-before|after' /* stylelint-disable */


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           VARIABLES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


custom-property-no-outside-root                  #BOOL. Custom variables must be inside :root { ... }
root-no-standard-properties                      #BOOL. Only custom variables inside :root { ... }
custom-property-pattern                          #REGEXP. Custom variables names, without --


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           SELECTORS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


selector-class-pattern                           #.CLASS REGEXP (without .)
                                                 #RULE_OPTS:
                                                 #  - resolveNestedSelectors BOOL: if true (def: false), resolve &
selector-id-pattern                              #Same for #ID
selector-no-combinator                           #No > + ~ combinators
selector-no-universal                            #No * selectors
selector-no-id                                   #No #ID selectors
selector-no-type                                 #No TAG selectors
selector-type-case                               #TAG selectors case: 'lower|upper'
selector-no-attribute                            #No [ATTR...] selectors
selector-pseudo-element-colon-notation           #::PSEUDO or :PSEUDO: 'single|before'
selector-root-no-composition                     #:root cannot be with other selector
selector-max-specificity                         #Max specificity as 'NUM,NUM2,NUM3'
no-descending-specificity                        #BOOL. If true, related rulesets must start with least specific.
declaration-no-important                         #BOOL. No !important
max-nesting-depth                                #NUM
                                                 #RULE_OPTS:
                                                 #  - ignore STR_ARR: 'at-rules': ignore @RULE { SELECTOR { PROP ... } } but not @RULE { PROP ...}


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             PROPS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


declaration-block-properties-order               #PROPS order:
                                                 #  - 'alphabetical'
                                                 #  - ARR of:
                                                 #     - GROUP:
                                                 #        - properties 'PROP'_ARR
                                                 #          PROP will match PROP[-*]
                                                 #        - order: whether properties should follow 'PROP'_ARR order: 'strict' (def) or 'flexible'
                                                 #        - emptyLineBefore 'always' or 'never' (def)
                                                 #     - 'PROP': same as { properties: ['PROP'] }
                                                 #When using ARR, unspecified PROP is according to RULE_OPTS.unspecified:
                                                 #  - 'ignore': anywhere
                                                 #  - 'top|bottom'
                                                 #  - 'bottomAlphabetical'
                                                 #Ignore Sass/Less/CSS variables and mixins/etc.
block-no-empty                                   #BOOL. No empty blocks
property-whitelist|blacklist                     #'PROP'_ARR to whitelist|blacklist
function-whitelist|blacklist                     #'FUNC'_ARR to whitelist|blacklist


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            VALUES             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


property-value-whitelist|blacklist               #{ PROP|'PROP_REGEXP': STR_ARR ... } of values to whitelist|blacklist
font-weight-notation                             #Using keywords in font-weight: 'numeric|named-where-possible'
                                                 #RULE_OPTS: 
                                                 #  - ignore STR_ARR: 'relative': ignore lighter|bolder
color-hex-case                                   #COLOR case: 'lower|upper'
color-hex-length                                 #COLOR: as 'short|long' as possible
color-no-hex                                     #BOOL. No hex color
color-named                                      #COLOR names: 'always-where-possible|never'
no-indistinguishable-colors                      #BOOL. Disallow very close colors
                                                 #RULE_OPTS:
                                                 #  - threshold 0-100 (def: 3)
                                                 #  - ignore COLOR_ARR: whitelist single color
                                                 #  - whitelist [COLOR,COLOR2]_ARR: whitelist color pairs
number-leading-zero                              #0.5 (not .5): 'always|never'
number-max-precision                             #NUM
number-no-trailing-zeros                         #BOOL
number-zero-length-no-unit                       #BOOL: unitless 0, for LEN
unit-whitelist|blacklist                         #STR_ARR of units to whitelist|blacklist
property-unit-whitelist|blacklist                #Same but as { PROP|'PROP_REGEXP': STR_ARR ... }
time-no-imperceptible                            #BOOL. Disallow animations|transitions under 100ms


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            QUOTES             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


string-quotes                                    #Quotes around STR: 'single|double'
function-url-quotes                              #Quotes inside url(): 'single|double|none'
font-family-name-quotes                          #Quotes around font-family value:
                                                 #  - "single|double-where-required": not around keyword or name that requires escaping
                                                 #  - "single|double-where-recommended": not around keyword or name that requires whitespace,
                                                 #    non-hyphen-punctuation or digit
                                                 #  - "single|double-unless-keyword": not around keyword
                                                 #Does not work with Sass/Less/CSS variables


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            @MEDIA             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


custom-media-pattern                             #@media --MEDIA REGEXP (without --)
