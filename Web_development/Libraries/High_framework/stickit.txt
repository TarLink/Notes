
             
   STICKIT   
             


VERSION ==>                       #0.9.2

VIEW.[un]stickit                  #BIND_OBJ is { SELECTOR: BIND_CONF ... }[()] (def: VIEW.bindings)
([[MODEL, ]BIND_OBJ])             #Sets-up two-way data binding between JQ $(SELECTOR) and MODEL.VAR MVAL:
VIEW.addBinding                   #  - assign JQ.html(MVAL) at init and at "change:VAR" event on MODEL
(MODEL|null, SELECTOR, BIND_CONF) #  - if JQ:
                                  #     - is a form element, i.e. input|select|textarea|contenteditable
                                  #     - updates MVAL:
                                  #        - on BIND_CONF.events STR_ARR (def: ["change","input"])
                                  #        - updates:
                                  #           - checkbox|radio: checked attribute according to INPUT.value, when MVAL must
                                  #             be a STR[_ARR]
                                  #           - select: according to BIND_CONF.selectOptions OBJ:
                                  #              - cannot use BIND_CONF.updateView false
                                  #           - others: INPUT|TEXTAREA.value
                                  #MODEL def: VIEW.model
                                  #SELECTOR can be ":el", i.e. VIEW.$el
                                  #BIND_CONF:
                                  #  - OBJ:
                                  #     - observe "VAR"[_ARR][()]:
                                  #        - use MODEL.VAR
                                  #        - if ARR, must use onGet|onSet()
                                  #     - onGet(VAL, BIND_CONF)->VAL: modifies VAL from MODEL to VIEW
                                  #     - onSet: same for VIEW to MODEL
                                  #     - getVal(JQ, JQEVENT, BIND_CONF)->VAL: how value is retrieved from JQ (def: JQ.val())
                                  #     - update(JQ, VAL, MODEL, BIND_CONF): how value is set on JQ (def: JQ.val(VAL))
                                  #     - updateMethod "FUNC": same but using JQ.FUNC (def: "text")
                                  #     - updateModel|View BOOL[(VAL, JQEVENT, BIND_CONF)]: 
                                  #       if false, MODEL|VIEW is not changed by VIEW|MODEL change
                                  #     - visible BOOL[(VAL, BIND_CONF)]: if true:
                                  #        - updateView def to false
                                  #        - MODEL.VAR must be BOOL, which calls on VIEW:
                                  #           - JQ.show|hide()
                                  #           - or BIND_CONF.visibleFn(JQ, BOOL, BIND_CONF)
                                  #     - escape BOOL[(VAL, BIND_CONF)]: if true, call MODEL.escape() instead of MODEL.get()
                                  #     - setOptions OBJ2: MODEL.set() OBJ2
                                  #     - stickitChange VAL: MODEL.set() OBJ2.stickitChange (def: BIND_CONF)???
                                  #     - afterUpdate(JQ, VAL, BIND_CONF): called after VIEW updated
                                  #     - initialize(JQ, MODEL, BIND_CONF): called after stickit() done
                                  #     - destroy(JQ, MODEL, BIND_CONF)
                                  #  - STR: same as { observe: STR }
                                  #All FUNC above can also be "FUNC", i.e. VIEW.FUNC()
                                  #Must be called once DOM is setup, e.g. at end of VIEW.render()
                                  #unstickit() fires event stickit:unstuck()
