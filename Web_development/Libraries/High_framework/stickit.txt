
             
   STICKIT   
             


VERSION ==>                       #0.9.2

VIEW.bindings                     #{ SELECTOR: CONF ... }[()], def. value of BIND_OBJ
                                  #SELECTOR can be ":el", i.e. VIEW.$el
                                  #CONF is OBJ or STR (same as { observe: STR })
VIEW.[un]stickit                  #
([[MODEL, ]BIND_OBJ])             
VIEW.addBinding                   
(MODEL|null, SELECTOR, CONF) 
                                  #Sets-up two-way data binding between:
                                  #  - JQ $(SELECTOR)
                                  #  - and MODEL.VAR, using MODEL (def: VIEW.model) and CONF.observe "VAR"[_ARR][()]
                                  #     - if ARR, must use CONF.onGet(ARR)->STR and CONF.onSet(STR)->ARR
                                  #To call once DOM is setup, e.g. at end of VIEW.render():
                                  #  - MODEL->VIEW:
                                  #     - listen for MODEL "change:"
                                  #     - CONF.onGet(VAL, CONF)->VAL: modifies VAL before setting
                                  #  - VIEW->MODEL:
                                  #     - calls MODEL.set("VAR", VAL, CONF.setOptions), with CONF.setOptions.stickitChange CONF
                                  #       always set
                                  #     - gets VIEW value with:
                                  #        - JQ.UMETHOD(), with CONF.updateMethod "UMETHOD" (def: "text")
                                  #        - or CONF.getVal(JQ, JQEVENT, CONF)->VAL
                                  #     - CONF.onSet(VAL, CONF)->VAL: modifies VAL before setting
                                  #     - sets VIEW value with:
                                  #        - JQ.UMETHOD(VAL), with CONF.updateMethod "UMETHOD" (def: "text")
                                  #        - or CONF.update(JQ, VAL, MODEL, CONF)
                                  #     - does not do anything if CONF.updateModel BOOL[(VAL, JQEVENT, CONF)]

                                  #CONF:
                                  #     - updateModel|View BOOL[(VAL, JQEVENT, CONF)]: 
                                  #       if false, MODEL|VIEW is not changed by VIEW|MODEL change
                                  #       updateModel true only for forms (see above)
                                  #     - visible BOOL[(VAL, CONF)]: if true:
                                  #        - updateView def to false
                                  #        - MODEL.VAR must be BOOL, which calls on VIEW:
                                  #           - JQ.toggle(BOOL)
                                  #           - or CONF.visibleFn(JQ, BOOL, CONF)
                                  #     - attributes OBJ_ARR:
                                  #        - name "ATTR": binds to VIEW HTML attribute
                                  #        - observe (def: same): like above
                                  #        - onGet: like above
                                  #     - classes { CLASS: "VAR"[_ARR][()] }: same for HTML classes
                                  #     - escape BOOL[(VAL, CONF)]: if true, call MODEL.escape() instead of MODEL.get()
                                  #     - afterUpdate(JQ, VAL, CONF): called after VIEW updated
                                  #     - initialize(JQ, MODEL, CONF): called after stickit() done
                                  #     - destroy(JQ, MODEL, CONF)

                                  #  - assign JQ.html(MVAL) at init and at "change:VAR" event on MODEL
                                  #  - if JQ:
                                  #     - is a form element, i.e. input|select|textarea|contenteditable
                                  #     - updates MVAL:
                                  #        - on CONF.events STR_ARR (def: ["change","input"])
                                  #        - updates:
                                  #           - checkbox|radio: checked attribute according to INPUT.value, when MVAL must
                                  #             be a STR[_ARR]
                                  #              - use updateMethod "val"
                                  #           - select: 
                                  #              - generate options:
                                  #                 - according to CONF.selectOptions S_OBJ:
                                  #                    - collection VARR|VAL[()]:
                                  #                       - VARR is _.get(window,VARR)->VAL
                                  #                       - VAL can be:
                                  #                          - { LABEL: VALUE }
                                  #                          - OBJ_ARR|COLL of { L_VAR: LABEL, V_VAR: VALUE, D_VAR: BOOL }, 
                                  #                            where L_VAR is S_OBJ.labelPath (def: "label")
                                  #                            V_VAR S_OBJ.valuePath (def: "value")
                                  #                            D_VAR S_OBJ.disabledPath (def: "disabled")
                                  #                            When using COLL, listen to COLL add|remove|reset|sort events
                                  #                    - can have <optgroup> with { opt_labels: STR_ARR, STR: VARR|VAL[()] ... }
                                  #                    - defaultOption: same as above, but single element for default choice
                                  #                 - or use data-stickit-bind-val="VALUE" or value="VALUE"
                                  #              - select options according to MVAL STR[_ARR]
                                  #              - cannot use CONF.updateView false
                                  #           - contenteditable: use updateMethod "html"
                                  #           - others: use updateMethod "val"
                                  #All FUNC above can also be "FUNC", i.e. VIEW.FUNC()
Backbone.Stickit.addHandler       
(CONF[_ARR])                      #Define default CONF values, when BIND_OBJ.SELECTOR matches CONF.selector SELECTOR
