
              
   BACKBONE   
              


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             CORE              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Backbone                          #Global object BACKBONE

_                                 #Underscore.
                                  #Some methods are also mixed in:
                                  #  - MODEL: keys|values|pairs|invert|pick|omit()
                                  #  - COLL: forEach|each|map|collect|reduce|foldl|inject|reduceRight|foldr|find|detect| 
                                  #    filter|select|reject|every|all|some|any|contains|include|invoke|max|min|sortBy|groupBy|
                                  #    shuffle|toArray|size|first|head|take|initial|rest|tail|last|without|indexOf|lastIndexOf|
                                  #    isEmpty|chain()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            EVENTS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


BACKBONE.Events                   #EVENTS.
                                  #Makes an OBJ event listener by mixing in, i.e. _.extend(OBJ, EVENTS)

EVENTS.on|once(EVENT_STR,
FUNC(...)[, THIS])                
EVENTS.on|once                    #EVENT_STR can be: 
({ EVENT_STR: FUNC(...) }         #  - a space-delimited list.
[, THIS])                         #  - "all": pass actual EVENT_STR as first arg
EVENTS.off                        #If:
([EVENT_STR[, FUNC[, THIS]]])     #  - EVENT_STR|FUNC null: means any
                                  #  - THIS: if defined, means only when THIS was used in on()
EVENTS.trigger(EVENT_STR[, ...])  #

EVENTS.listenTo[Once](EVENTS2,...)
EVENTS.stopListening              #Like EVENTS2.on|once|off(..., EVENTS), but semantically indicates that EVENTS "eavesdrops" 
([EVENTS2, ]...)                  #on another EVENTS2

CHECK LIST OF EVENTS???

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MODELS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


BACKBONE.Model.extend
(MODEL_ATTR[, CONST_ATTR])        #Returns a MODEL_CONSTRUCTOR.
new MODEL_CONSTRUCTOR             #Returns a MODEL:
(ATTR_OBJ[, OBJ])                 #  - MODEL_ATTR is mixed in every MODEL
                                  #  - MODEL.attributes = ATTR_OBJ
                                  #  - CONST_ATTR is mixed in MODEL_CONSTRUCTOR, i.e. MODEL.constructor
                                  #  - OBJ are options
MODEL.clone()                     #

MODEL.get|escape(VAR_STR)         
MODEL.set(VAR_STR, VAL[, OBJ])    
MODEL.set({ VAR: VAL }[, OBJ])    
MODEL.unset([OBJ])                
MODEL.clear([OBJ])                #Manipulates ATTR_OBJ.
MODEL.has(VAR_STR)                #escape() is with HTML escaping.

MODEL.id                          #MODEL ID.
                                  #Equal to ATTR_OBJ[MODEL_ATTR.idAttribute (def: "id")]
                                  #Should be defined server-side (by MODEL.save()), not client-side (by new MODEL())
MODEL.cid                         #Unique ID assigned by Backbone, useful when MODEL_ID not available.

MODEL.changedAttributes([OBJ])    #Returns part of ATTR_OBJ that has changed since the last MODEL.set(), or false if none.
                                  #Use OBJ to filter???
                                  #Internaly used MODEL.changed, which like MODEL.attributes but keep only track of changes.
MODEL.hasChanged()                #Returns true if MODEL.changedAttributes() empty
MODEL.isNew()                     #Returns true if MODEL.id undefined

MODEL_ATTR.defaults               #OBJ|FUNC()->OBJ, for default ATTR_OBJ values.
                                  #OBJ is reference, FUNC() OBJ per value.

MODEL.toJSON([OBJ])               #Calls JSON.stringify(), but can be overriden.
Backbone.ajax(OBJ)                #Hardlink to $.ajax(OBJ). Can be overriden.
Backbone.sync                     #Does a AJAX request by calling and returning Backbone.ajax(OBJ), with OBJ also having:
(METHOD_STR, MODEL[, OBJ])        #  - url STR + method STR: according to METHOD_STR:
                                  #     - "create": POST   /COLL_NAME
                                  #     - "read"  : GET    /COLL_NAME[/ID]
                                  #     - "update": PUT    /COLL_NAME/ID
                                  #     - "patch" : PATCH  /COLL_NAME/ID
                                  #     - "delete": DELETE /COLL_NAME/ID
                                  #The URL:
                                  #  - "/COLL_NAME" is COLL_ATTR.url STR|FUNC()->STR or (if MODEL outside of a COLL) 
                                  #    MODEL_ATTR.urlRoot STR|FUNC()->STR
                                  #  - "/COLL_NAME/ID" is MODEL_ATTR.url(), which by def. is "/COLL_NAME" + "/" + MODEL.id
                                  #Can be overriden globally, or only for a MODEL by overriding MODEL_ATTR.sync()
                                  #By def:
                                  #  - MODEL is serialize/deserialize as "application/json", using MODEL.toJSON()
                                  #  - only return changed attributes ???
                                  #For older servers, if: 
                                  #  - Backbone.emulateHTTP true, use only GET|POST + HTTP-Method-Override METHOD header
                                  #  - Backbone.emulateHTTP + Backbone.emulateJSON true, use also _method METHOD query param
                                  #  - Backbone.emulateJSON true, send as "application/x-www-form-urlencoded" instead of
                                  #    "application/json"
MODEL.sync(METHOD_STR,MODEL[,OBJ])#Difference???
MODEL.fetch([OBJ])                #Calls and returns MODEL.sync("read")
                                  #OBJ.success|error(MODEL, RES, OBJ)
MODEL.save(...)                   #Calls MODEL.set(...) (???)
                                  #Then calls and returns Backbone.sync(METHOD_STR), where METHOD_STR is:
                                  #  - "create": if MODEL.isNew()
                                  #  - "update": otherwise
                                  #  - "patch": if OBJ.patch true. As opposed to "create|update", only send changed attributes
                                  #    to server
                                  #OBJ.success|error(MODEL, RES, OBJ)
MODEL.destroy([OBJ])              #Calls and returns Backbone.sync("delete")
                                  #Returns false if MODEL.isNew()
                                  #OBJ.success|error(MODEL, RES, OBJ)

MODEL_ATTR.validate(ATTR_OBJ, OBJ)#Can be user-defined. Must return ERROR[_STR] if problem, nothing otherwise.
                                  #Called by MODEL.save() and (if OBJ.validate true) by MODEL.set()
                                  #OBJ is MODEL.save|set() OBJ
                                  #If problem, stops operation and sets MODEL.validationError ERROR[_STR]
MODEL.isValid()                   #Runs MODEL.validate() then returns BOOL.
MODEL_ATTR.parse(RES, OBJ)        #Can be user-defined. Must return modified RES.
                                  #Called by MODEL.fetch|save()


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          COLLECTIONS          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Backbone.Collection.extend        #Returns a COLL, i.e. an array of MODEL:
(COLL_ATTR[, CONST_ATTR])         #  - COLL_ATTR is mixed in COLL
                                  #  - CONST_ATTR is mixed in COLL.constructor
new Backbone.Collection
(ATTR_OBJ_ARR, ...)               #Like Backbone.Collection.extend(...) but add some initial objects.
COLL_ATTR.initialize(???)         #Called at creation

COLL_ATTR.model(ATTR_OBJ[, OBJ])  #Allows COLL.add|create|reset() to use ATTR_OBJ instead of MODEL as argument
                                  #Must return a MODEL
                                  #Is usually a MODEL_CONSTRUCTOR
COLL.models                       #Internal MODEL_ARR

COLL.add(MODEL[_ARR][, OBJ])      #Adds and returns MODEL[_ARR].
                                  #Does not add duplicates (according to MODEL.id), but merge them if OBJ.merge true
                                  #Adds at OBJ.at NUM (def: end)
COLL.push(...)                    #Differences???
COLL.unshift(...)                 #Like COLL.add(...) but at beginning
COLL.remove(MODEL[_ARR][, OBJ])   #Removes and returns MODEL[_ARR]
COLL.pop|shift([OBJ])             #Same but for the last|first MODEL
COLL.reset([...])                 #Removes all models, then (if ...) call COLL.add(...)
COLL.get(VAL)                     #Returns a MODEL, where VAL can be the MODEL.id, MODEL.cid or MODEL itself
COLL.at(NUM)                      #Returns a MODEL
COLL.slice(NUM[, NUM2])           #Same as ARR.slice(...) (including that it returns copy), but for COLL

COLL.toJSON(...)                  #
COLL.sync(...)                    #Same as for MODEL

COLL_ATTR.comparator(...)         #Is a LFUNC or FUNC(VAL, VAL2)->-1|0|1
                                  #If user-defined, keep the collection sorted accordingly when models are changed.
