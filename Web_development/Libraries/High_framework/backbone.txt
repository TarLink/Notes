
              
   BACKBONE   
              


Backbone                          #Global object BACKBONE

BACKBONE.Events                   #EVENTS.
                                  #Makes an OBJ event listener by mixing in, i.e. _.extend(OBJ, EVENTS)

EVENTS.on|once(EVENT_STR,
FUNC(...)[, THIS])                
EVENTS.on|once                    #EVENT_STR can be: 
({ EVENT_STR: FUNC(...) }         #  - a space-delimited list.
[, THIS])                         #  - "all": pass actual EVENT_STR as first arg
EVENTS.off                        #If:
([EVENT_STR[, FUNC[, THIS]]])     #  - EVENT_STR null, means all, except if FUNC or THIS defined
                                  #  - FUNC null, means all
                                  #  - THIS: if defined, means only when THIS was used in on()
EVENTS.trigger(EVENT_STR[, ...])  #

EVENTS.listenTo[Once](EVENTS2,...)#Like EVENTS2.on|once|off(..., EVENTS), but:
EVENTS.stopListening              #  - allows doing EVENTS2.off() on all listener with EVENTS as last arg by doing
([EVENTS2, ]...)                  #    EVENTS.stopListening()
                                  #  - semantically indicates that EVENTS "eavesdrops" on another EVENTS2

CHECK LIST OF EVENTS???


BACKBONE.Model.extend
(MODEL_ATTR[, CONST_ATTR])        #Returns a MODEL_CONSTRUCTOR.
new MODEL_CONSTRUCTOR             #Returns a MODEL:
(ATTR_OBJ[, OBJ])                 #  - MODEL_ATTR is mixed in every MODEL
                                  #  - MODEL.attributes = ATTR_OBJ
                                  #  - CONST_ATTR is mixed in MODEL_CONSTRUCTOR, i.e. MODEL.constructor
                                  #  - OBJ are options
MODEL.get|escape(VAR_STR)         
MODEL.set(VAR_STR, VAL[, OBJ])    
MODEL.set({ VAR: VAL }[, OBJ])    
MODEL.unset([OBJ])                
MODEL.clear([OBJ])                #Manipulates ATTR_OBJ.
MODEL.has(VAR_STR)                #escape() is with HTML escaping.

MODEL.id                          #MODEL_ID.
                                  #Equal to ATTR_OBJ.VAR, according to MODEL_ATTR.idAttribute VAR_STR (def: "id")
MODEL.cid                         #Unique ID assigned by Backbone, useful when MODEL_ID not available.
