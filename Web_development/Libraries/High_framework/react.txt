
           
   REACT   
           


REACT
REACTDOM                          #Two packages (versions 0.14.2)
REACTDOMSERVER                    #Subpackage of REACTDOM, for using in the server

REACT.Component                   #Base RTYPE
RTYPE                             #RELEM's type
RDOM                              #Builtin RTYPE representing an HTML 'TAG'
RELEM                             #Abstracted ELEM (non-instantiated)
RCOMP                             #Abstracted ELEM (instantiated)
CHILD                             #RELEM|STR
REF                               #Instantiation of a RELEM:
                                  #  - if based on RTYPE, RCOMP
                                  #  - if based on 'TAG', ELEM
                                  #  - if stateless component, null

PRODUCTION MODE ==>               #Checks NODE_ENV !== 'production'.
                                  #React uses envify in release files, which replaces NODE_ENV by 'development|production'
                                  #If production:
                                  #  - does not throw nor logs:
                                  #     - with RTYPE_CONF.propTypes
                                  #     - with RCHILDREN.only()

RDOM ==>                          #Builtin RTYPE mimicing usual HTML.
                                  #Allowed HTML tags|attributes are whitelisted, but should cover most standard HTML.
                                  #Some differences:
                                  #  - HTML attributes:
                                  #     - camelcased, except data-*, aria-*
                                  #     - class -> className, html -> htmlFor
                                  #     - new ones:
                                  #        - dangerouslySetInnerHtml="JSON", with OBJ.__html STR: set innerHTML
                                  #        - ref|key: see below
                                  #  - onEvent(REVENT), with REVENT being like EVENT but:
                                  #     - 


REACT.createClass(OBJ)            #Creates and returns a RTYPE
                                  #Bind all OBJ.FUNC's this to current RCOMP
                                  #OBJ is merged into RCOMP
STATELESS COMPONENT ==>           #Can use a FUNC()->RELEM as RTYPE:
                                  #  - differences???
                                  #     - cannot use findDOMNode()

REACT.createElement               #Creates and returns a RELEM
('TAG'|RTYPE[, OBJ][, CHILD...])  #OBJ|CHILD...:
                                  #  - with 'TAG', will become HTML attributes|children
                                  #  - with RTYPE, become RCOMP.props|children
                                  #'TAG': will use corresponding RDOM
REACT.createFactory('TAG'|RTYPE)  #Similar to REACT.createElement.bind(REACT, 'TAG'|RTYPE)
REACT.DOM.TAG(...)                #Same as REACT.createElement('TAG', ...)
REACT.cloneElement                #Creates and returns a RELEM2, cloned from RELEM.
(RELEM[, OBJ][, CHILD...])        #OBJ are shallow merged, CHILD... are replaced.

REACTDOM.render                   #Instantiate RELEM, and replace ELEM's children with it.
(RELEM, ELEM[, FUNC()]            #Returns RELEM's REF (avoid using it)
                                  #Will replace old RELEM with new RELEM2. If:
                                  #  - RELEM === RELEM2: nothing happens
                                  #  - RELEM == RELEM2:
                                  #     - same RTYPE|'TAG'
                                  #     - also done when RCOMP.setState|forceUpdate():
                                  #        - does not fire componentWillReceiveProps()
                                  #        - forceUpdate() also does not fire shouldComponentUpdate()
                                  #        - unless called while an 'update' is already ongoing
                                  #     - fires 'update', i.e. RCOMP (in order):
                                  #        - componentWillReceiveProps(OBJ): 
                                  #           - before assigning props (this.props is still old one)
                                  #           - OBJ is next props
                                  #           - often used to call setState() according to props
                                  #        - shouldComponentUpdate()->BOOL: return false to stop here
                                  #        - componentWillUpdate()
                                  #           - cannot use setState()
                                  #        - render()
                                  #        - componentDidUpdate()
                                  #     - does not create new RCOMP, instead override its props|state with RCOMP2
                                  #  - RELEM != RELEM2:
                                  #     - 'unmount' RELEM, i.e. fires RCOMP:
                                  #        - componentWillUnmount()
                                  #     - 'mount' RELEM2, i.e. fires RCOMP2:
                                  #        - componentWillMount()
                                  #        - render()
                                  #        - componentDidMount()
                                  #Calls FUNC() after all events done.
RCOMP.render()                    #Does the actual DOM manipulation.
                                  #Must return RCOMP's RELEM:
                                  #  - calls REACTDOM.render() on children:
                                  #     - starting with descendants
                                  #     - compare children old RELEM with new RELEM2 according to DOM order
                                  #        - problem:
                                  #           - in lists of similar items, modifications might recreate all items
                                  #             (e.g. prepending, since it compares by DOM order)
                                  #           - this is bad for performance, but also does not retain state in those items
                                  #        - solution: 
                                  #           - can use HTML attribute 'key', which will then be used for comparison
                                  #           - should then be unique ID among siblings
                                  #     - if children are not newly created in render() (e.g. use props.children reference),
                                  #       old RELEM === new RELEM2, so nothing will happen for that child
                                  #        - i.e. RCOMP 'owns' the children it creates in render(), but not the children passed to it
                                  #  - if RDOM, will update DOM, but in an efficient way:
                                  #     - does not update if same
                                  #     - only add|remove attributes if only attributes changed
                                  #  - should not modify state nor read global state nor be async
                                  #    (use componentDidMount|Update() for that)
                                  #Can also return null|false
RCOMP.forceUpdate()               #Forces 'update' (see above) (to avoid)
                                  #Useful when render() depends on state that changed but did not trigger a new render(), e.g.:
                                  #  - RCOMP.state.OBJ.VAR changed, but no setState() was called
                                  #  - DOM element change that cannot be caught with onEvent
RCOMP.isMounted()                 #To use in async operation to make sure RCOMP still exists.
REACTDOM.unmountComponentAtNode   #Inverse of REACTDOM.render(): remove ELEM children (firing 'unmount') then returns true.
(ELEM)                            #If no RCOMP was mounted, does nothing and returns false.

REACTDOMSERVER.renderToString     #Returns RELEM as 'HTML'
(RELEM)                           #Since 'HTML' contains React information, fires client-side REACTDOM.render() will be faster.
REACTDOMSERVR.renderToStaticMarkup
(RELEM)                           #Same but does not set React-specific HTML attributes like 'data-react-id'


RCOMP.displayName                 #JSX tag name, used for debugging.
                                  #Deduced from assigned variable if using JSX transformer.

RCOMP.props                       #HTML attributes as OBJ.
                                  #Readonly (non-configurable, non-writable)
                                  #'Owned' by a parent, i.e. props change when the parent passing them re-rendered children with different props.
RCOMP.getDefaultProps()->OBJ      #Called once per RTYPE (not per RCOMP), 
                                  #then the result OBJ is shallowingly assigned to each new RCOMP.props
RCOMP.setProps|replaceProps(...)  #To avoid. Prefer calling REACTDOM.render() on same node again.

RCOMP.state                       #State OBJ
                                  #'Owned' by RCOMP
                                  #Should never be written to, use setState() instead
RCOMP.getInitialState()->OBJ      #Initial RCOMP.state
                                  #Called before componentWillMount()
RCOMP.setState(OBJ[(OBJ2, OBJ3)]  #Shallow merges into RCOMP.state
[, FUNC()])                       #OBJ2|OBJ3 is current state|props
                                  #Might be performed async or not. FUNC() performed afterwards.
RCOMP.replaceState(...)           #Same but sets instead of merging

RCOMP.refs.REF                    #REF to RCOMP or its children, using HTML attribute ref="REF"
                                  #  - setup by render()???

RCOMP.props.children              #CHILDREN, i.e. CHILD[_ARR] (ARR only if length > 1)
                                  #Should only be manipulated through React.Children RCHILDREN
RCHILDREN.map|forEach
(CHILDREN, FUNC(CHILD)[, THIS])   #
RCHILDREN.count(CHILDREN)         #
RCHILDREN.toArray(CHILDREN)       #Returns CHILD_ARR
RCHILDREN.only(CHILDREN)          #Returns CHILD if CHILDREN contains only one child, and it is a RELEM

RCOMP.mixins                      #OBJ_ARR, where OBJ gets merged into RCOMP.
                                  #If property conflict:
                                  #  - if lifecycle RCOMP.FUNC (e.g. componentWillUpdate, etc.), surcharges instead of
                                  #    overriding it (i.e. called before non-mixin one)
                                  #  - otherwise, throws error

RCOMP.statics                     #OBJ assigned to RTYPE during createClass(), i.e. static methods.


REACT.isValidElement(VAL)         #True if RELEM
REACTDOM.findDOMNode(RCOMP)       #Returns corresponding ELEM (to avoid)
                                  #If RCOMP not mounted, throws exception

TWO-WAY DATA BINDING ==>          #Works by passing FUNC as RTYPE.props


ES6 CLASSES ==>                   #Cannot use:
                                  #  - RCOMP.replaceState|isMounted()


RCOMP.propTypes                   #OBJ.VAR PROP_RULE:
                                  #  - if RTYPE.props.VAR does not satisfy PROP_RULE, it will throw error:
                                  #     - only once for a given RTYPE + VAR + PROP_RULE
                                  #  - use PTYPES.oneOfType|customProp for multiple validations
                                  #PROP_RULE is FUNC(OBJ, 'VAR', 'RTYPE')[->ERROR]
                                  #List of builtin PROP_RULE:
React.PropTypes                   #PTYPES
PTYPES.array|bool|func|           
number|object|string|node|element #Checks type: 'node' is CHILD[_ARR], 'element' RELEM
PTYPES.instanceOf(TYPE)           #
PTYPES.oneOf(VAL_ARR)             #
PTYPES.oneOfType(PROP_RULE_ARR)   #
PTYPES.arrayOf(PROP_RULE)         #
PTYPES.objectOf(PROP_RULE)        #Object values
PTYPES.shape({VAR: PROP_RULE ...})#
PROP_RULE.isRequired              #E.g. PTYPES.bool.isRequired



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:              JSX              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<...>                             #Like HTML but:
                                  #  - inside JavaScript
                                  #  - translated as REACT.createElement(...) by transformers
                                  #  - can use {...}:
                                  #     - instead of a node:
                                  #        - ... last statement must be RELEM|STR[_ARR]
                                  #     - instead of an HTML attribute:
                                  #        - ... last statement must be STR
                                  #        - can spread an OBJ: ...OBJ
