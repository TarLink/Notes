
           
   BABEL   
           


TO DO ==>                         #Options, babelrc, runtime, JSX, plugins, transformers, loose mode

GOAL ==>                          #ES6 -> ES5
                                  #See JavaScript documentation for support (with/without polyfill)

POLYFILL ==>                      #Includes regenerator (for generators) and core.js (other polyfills).
                                  #Install:
                                  #  - browser: browser-polyfill.js
                                  #  - Node: require("babel/polyfill") (done by require("babel/register") and babel-node)

babel [FILE|DIR]                  #Node module binary (version 5.6.4) (def: stdin)
[--out-file|dir FILE2|DIR2]       #Def: output ES5 to stdout
--watch                           #
--source-maps [inline]            #

PLUGINS ==>                       #Use OPT.plugins MODULE_ARR


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            USAGES             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


BABEL-CORE                        #As Node module
BABEL-CORE.transform(STR[, OPT])  #Returns OBJ2:
                                  #  - code STR2
                                  #  - map STR3
                                  #  - ast
BABEL-CORE.transformFile
(FILE[, OPT], FUNC(ERROR, OBJ2))  #
BABEL-CORE.transformFileSync
(FILE[, OPT])->OBJ2               #

babel-node                        #Same as Node REPL, but compiling ES6 first.
                                  #Can use same options as babel + Node REPL

require("babel/register")[(OBJ)]  #Patch Node require() so it uses Babel on *.es6|es|jsx|js, except "node_modules/**" 
                                  #(unless OBJ.ignore false).
                                  #OBJ: same options as above.
                                  #Caches. Can use ENVVAR BABEL_DISABLE_CACHE=1 and BABEL_CACHE_PATH=DIR
                                  #Should not be used in library, as it will patch require() for other libraries too.

BROWSER ==>                       #Load browser.js from NPM module babel-core
                                  #  - should put ES6 in <script type="text/babel|ecmascript-6">
                                  #  - can also use babel.transform(STR[, OPT]).code or babel.run(STR[, OPT])

GULP-BABEL([OPT])                 #Version 5.1.0
                                  #Same options, except:
                                  #  - filename not needed
                                  #  - sourcemaps: need to use SOURCEMAPS.init|write() before|after

grunt-babel                       #Grunt plugin (5.0.1)
                                  #  - TASK "babel"
                                  #  - TARGET src, dest
                                  #  - options OPT

requirejs-babel                   #Version 0.0.6
                                  #Plugin adding "es6!FILE"
                                  #Must use CONFVAR paths.es6 PATH_TO_ES6 and paths.babel PATH_TO_BABEL

babelify[.configure(OPT)]         #Browserify transform (6.1.2)

MOCHA ==>                         #Can use --compilers js:babel/register

karma-babel-preprocessor          #Version 5.2.1
                                  #PLUGIN "babel", CONFIGVAR babelPreprocessor OBJ:
                                  #  - options OPT: same as above
                                  #  - [source]filename(FILE)->STR

BABEL-CONNECT(OBJ2)               #Express MDW (6.0.1) that compile static assets. OBJ2:
                                  #  - options OPT: same as above
                                  #  - src|dest DIR
                                  #  - ignore DIR

JADE-BABEL([OPT])                 #Jade filter (5.0.0), used as :babel


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           POLYFILLS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             CHANGES           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


SYSTEMJS ==>                      #Can be used:
                                  #  - develop-time: must load es6-module-loader-dev.js (after Babel) and sets System.transpiler = "babel"
                                  #  - production: compile to SystemJS with --modules system, then use SystemJS builder

"use strict";                     #Added on top

VAR = function(){...}             #VAR = function VAR(){...}


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MODULES            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


EXPORT/IMPORT ==>                 #Use ES6 syntax but is compiled according to --modules to:
                                  #  - common (def): CommonJS
                                  #  - amd
                                  #  - umd
                                  #  - system: SystemJS (System.register())
                                  #  - ignore: nothing
                                  #  - MODULE: custom
                                  #So must then use the appropriate loader (Browserify, RequireJS, SystemJS, etc.)
