
          
   LESS   
          


VERSION ==>                       #Node binary (2.5.1)

                                  # SELECTOR: e.g. .myclass:hover
                                  # SELECTORS: SELECTOR,...
                                  # RULE: "PROP: VAL", e.g. color: red;
                                  # RULES: RULE...
                                  # #{EXPR} 
                                  # Syntax: arg means argument named $arg, but TYPE means argument of TYPE
                                  # FUNC()
                                  # #MIXIN(): MIXIN as opposed to FUNC()
                                  # ##MIXIN(): MIXIN with a { ... } block (CONTENT)

lessc FILE...                     #Compiles Less to CSS to stdout.

LESS.render
("CSS"[, OBJ], FUNC(ERROR,STR))   #As a Node module.

link(                             #Usage in the browser.
  rel="stylesheet/less"           #Each <link> is compiled independently from the others. 
  type="text/css"                 #Pass options by: 
  href="URL"                      #  - assigning var less = OBJ;
)                                 #  - <link> HTML attribute data-VAR="VAL" (VAR dasherized, VAL JSON'd)
                                  #Less library must be after <link> and options OBJ.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            SYNTAX             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

// COMMENT                        
/* COMMENT */                     #

SELECTORS {                       #  SELECTORS { RULES }
  RULES                           #  SELECTORS SELECTORS2 { RULES2 }
  SELECTORS2 { RULES2 }           #If a SELECTOR2 contains &, & is replaced with SELECTORS and uses instead:
}                                 #  SELECTORS { RULES }
                                  #  SELECTORS2 { RULES2 }

[@media MEDIAQUERY... { 
  RULES1]
  SELECTORS {
    RULES2
    @media MEDIAQUERY2... { 
      RULES3
    }                             #  [@media MEDIAQUERY... { RULES1 }]
  }                               #  [@media MEDIAQUERY...] { SELECTORS { RULES2 } }
}                                 #  [@media MEDIAQUERY...] MEDIAQUERY2... { SELECTORS { RULES3 } }
@OTHER                            #e.g. @keyframe, @font-face, etc.
                                  #Are put out of their parent SELECTOR, without any change.

SELECTOR3 { RULES2 }              #Adds SELECTOR4 { RULES2 } (inheritance), where SELECTOR4 is every SELECTOR3 matching any
SELECTOR:extend(SELECTORS2 [all]) #SELECTOR2, replacing the matching part, where "matching" means:
{ RULES }                         #  - no "all": exact (including same letters)
                                  #  - "all": partial
                                  #SELECTOR3 cannot be a @{VAR}
                                  #If SELECTOR is inside a @media, can only match SELECTOR3 in same @media rule (excluding 
                                  #children ones)
                                  #To do on SELECTORS: use &:extend(SELECTOR2) inside RULES
                                  #Prefer :extend() over simple MIXIN

@import [(WORD[, ...])] "FILE"    #FILE is considered (unless forcing with WORD less|css):
                                  #  - CSS if FILE.css: leaves as is.
                                  #  - otherwise Less, i.e. imported. If no extension, adds .less.
                                  #WORD:
                                  #  - reference: use FILE, but not in final output
                                  #  - inline: really leaves as is, with no CSS parsing (when contains CSS hack)
                                  #  - once(def)|multiple: can output FILE several times
                                  #  - optional: otherwise error when FILE not found

EXPR                              #In any right-side statement:
                                  #  - BOOL: < > >= <= =

~"LESS"                           #Includes as is

PROP+: VAL
PROP+: VAL2                       
PROP+_: VAL                       #Same as (respectively) PROP: VAL, VAL2 or PROP: VAL VAL2
PROP+_: VAL2                      #The first declaration is usually the result of a MIXIN, which then prepends VAL.

@VAR: VAL;                        #Variable definition.
                                  #Lexical scope (local blocks have priority), with variable hoisting.
                                  #When declaring twice, last ones has priority.
@VAR                              #Variable use. 
@{VAR}                            #Is macro, so can be used anywhere, including:
                                  #  - SELECTOR|VAR (use @{VAR} then)
                                  #  - @VAR declaration itself: @@VAR
                                  #  - { RULES }:
                                  #     - must be used as @VAR()
                                  #     - can be MIXIN ARG, i.e. calling MIXIN(@VAR) or MIXIN({ RULES })
                                  #     - @VAR2 declared in RULES cannot be used by caller
                                  #     - scoping rules like MIXIN, except has more priority than caller scope

MIXIN[(ARG;...)][, ...]           #Mixin definition 
[when TEST] { RULES }             #MIXIN can be:
                                  #  - SELECTOR:
                                  #     - often SELECTOR is #ID { SELECTOR { ... } }, to namespace MIXIN, used then as 
                                  #       #ID [>] SELECTOR()
                                  #With (): included in final output
                                  #ARG:
                                  #  - @VAR[: VAL], where VAL is default value
                                  #     - if VAL contains ",", must keep trailing ;
                                  #  - variadic:
                                  #     - last ARG can be (literaly) [@rest]...
                                  #     - RULES can use @arguments, which evaluates to VAL[ ...]
                                  #  - MIXIN can be overloaded, in which case ARG can be VAL (used for overloading).
                                  #@VAR and MIXIN2 declared in MIXIN definition are available to caller:
                                  #  - can act as pseudo return values
                                  #  - have less priority than caller scope, but more than callers parent scope
                                  #TEST is [not] (BOOL) [,|and ...]:
                                  #  - use MIXIN only if BOOL true
                                  #  - BOOL can use ARG @VAR
                                  #  - can be another way to overload, in which case BOOL can be default(), i.e. if 
                                  #    nothing else matches.
                                  #  - if no (), calls MIXIN() at the root right after:
                                  #     - allows conditional CSS: SELECTOR when TEST { ... } or & when TEST { ... }
                                  #       (& meaning "always" when at the root)
                                  #MIXIN can call itself (must use when TEST to avoid infinite loop):
                                  #  - recursion allows looping (e.g. by passing a decrementing @VAR)
MIXIN[(ARG;...)] [!important];    #Mixin use:
                                  #  - replaced by RULES
                                  #  - can add !important to every RULE
                                  #ARG: like for declaration (named parameter), or without "@VAR:" (positional parameter)
                                  #(can be mixed).
                                  
FUNC(...)                         #Replaced by return value. Cannot define new ones (can only use standard ones)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           FUNCTIONS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



color("COLOR")->COLOR             #
