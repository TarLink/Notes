
                         
   BACKBONE-VALIDATION   
                         


VERSION ==>                       #0.11.5
Backbone.Validation               #VALIDATION, client-side
require("backbone-validation")    #VALIDATION, server-side (Node)

MODEL.validation                  #VAL_OBJ[()], where VAL_OBJ is { VARR: RULE }, where RULE:
                                  #  - specifies schema for _.get(MODEL, VARR)
                                  #  - can be:
                                  #     - OBJ:
                                  #        - msg "ERROR"[()]: otherwise use default error messages
                                  #        - fn(VAL, "VARR")->true|"ERROR"
                                  #        - required BOOL
                                  #        - acceptance BOOL: === true|'true'
                                  #        - min|max NUM
                                  #        - range [ MIN, MAX ]
                                  #        - length|minLength|maxLength NUM
                                  #        - rangeLength [ MIN, MAX ]
                                  #        - equalTo VAL
                                  #        - oneOf VAL_ARR
                                  #        - pattern REGEXP|STR, among "number|email|url|digits"
                                  #     - FUNC: same as { fn FUNC }
                                  #FUNC above can also be "FUNC", i.e. MODEL.FUNC
                                  #Can add|overwrite OBJ.VAR with:
                                  #  _.extend(VALIDATION.validators, { VAR: FUNC(VAL, "VARR", VAL???, MODEL)->true|"ERROR" })
                                  #Can add|overwrite pattern STR with:
                                  #  _.extend(VALIDATION.patterns, { STR: REGEXP } )
                                  #  _.extend(VALIDATION.messages, { STR: "ERROR" } )
                                  #Can modify default error messages with:
                                  #  _.extend(VALIDATION.messages, { STR: "ERROR" } ), where "ERROR" can contain:
                                  #    - "{0}": formatted "VARR"
                                  #    - "{1|2}": MIN|MAX
VALIDATION.[un]bind(VIEW[, OBJ])  #Execute the validation.
                                  #Must be called after MODEL initialized, e.g. VIEW.initialize() or onBeforeRender()
                                  #OBJ.model|collection (def: VIEW.model|collection)
                                  #Overrides:
                                  #  - MODEL.validate():
                                  #     - fires events:
                                  #        - validated(BOOL, MODEL, OBJ_ARR), where OBJ_ARR { "VARR": ERROR_STR }
                                  #        - validated:valid(MODEL) or validated:invalid(MODEL, OBJ_ARR)
                                  #  - MODEL.isValid([VAL])->BOOL, or undefined (no validation has occurred)
                                  #    VAL can be:
                                  #     - true: triggers MODEL.validate()
                                  #     - "VARR"[_ARR]: only checks ATTR_OBJ.VARR
                                  #  - MODEL.preValidate({ VARR: VAL }) or ("VARR", VAL): same as isValid() but running after an
                                  #    hypothetical MODEL.set(...)???
                                  #OBJ:
                                  #  - invalid(VIEW, "VARR", ERROR, SELECTOR): by def, adds OBJ.selector="invalid" and
                                  #    data-error="ERROR" to VIEW.$('[name="VARR"]')
                                  #      - OBJ.selector def is "class"
                                  #  - valid(VIEW, "VARR", SELECTOR): by def. do the inverse
                                  #  - forceUpdate BOOL: if true (def: false), does not trigger error event anymore, and let
                                  #    MODEL.set|save|fetch() work even if not valid???
                                  #     - can be also on MODEL.set|save|fetch() OBJ2.forceUpdate
                                  #  - labelFormatter STR, how "VARR" is displayed in error messages???:
                                  #     - "none": does nothing
                                  #     - "sentenceCase": aaBB|aa_bb -> "Aa bb"
                                  #     - "label": use MODEL.labels.VARR
                                  #  - attributes STR_ARR[(VIEW)]|STR:
                                  #     - restrict validation to MODEL.STR
                                  #     - STR will use VALIDATION.attributeLoaders.STR STR_ARR[(VIEW)]:
                                  #        - to register with _.extend(VALIDATION.attributeLoaders, { STR: STR_ARR[(VIEW)] })
                                  #        - def. ones:
                                  #           - "inputNames": VIEW form elements HTML name attributes
_.extend
(MODEL.prototype,VALIDATION.Mixin)#To avoid using VALIDATION.bind()???
VALIDATION.configure(OBJ)         #Same for OBJ.selector|forceUpdate|labelFormatter
_.extend(VALIDATION.callbacks,OBJ)#Same for OBJ.[in]valid()

