
               
   REACT-CSS   
               


Comparison:
  - normal CSS/LESS/SASS:
     - how: compile-time stylesheets
     - source organization: separate CSS files
     - properties/values: static (including LESS/SASS #{EXPR})
     - selectors: any
     - precedence: load order
     - incompatible properties: try in order
     - @keyframes
     - @page
     - @font-face
     - @media
     - reuse code: (LESS/SASS) variables, mixins/functions/structures, @extend
     - existing CSS/LESS/SASS libraries
     - compile step: yes if LESS/SASS
  - react-jss:
     - how: run-time stylesheets
     - source organization: separate (or not) JSS files
     - properties/values: dynamic (JavaScript)
     - selectors: 
        - similar to .CLASS (namespaced)
        - less flexible but simpler/cleaner:
           - bad: 
              - TAG, *, specificiy by number of selector, !important
           - more complicated to write:
              - union of selectors, :not(): can create new class instead
              - ::SELECTOR, :SELECTOR, [ATTR]: use JavaScript logic instead
              - > + ~ space, LESS/SASS nesting: target element directly in JavaScript instead
           - good:
              - forces simpler selection
              - no collision, i.e. cannot overwrite with load order, !important or adding more selectors
     - precedence: explicit in code
     - incompatible properties: try in order
     - @keyframes: ???
     - @page: ???
     - @font-face: ???
     - @media: ???
     - reuse code: use JavaScript instead
     - existing CSS/LESS/SASS libraries: 
        - CSS libraries: need to use class HTML attribute instead
        - LESS/SASS libraries: cannot reuse
     - compile step: no
  - radium:
     - how: inline (HTML attribute "style")
     - source organization: separate (or not) JavaScript files
     - properties/values: dynamic (JavaScript)
     - selectors: similar to #id:
        - similar comments as for react-jss
        - except cannot edit all instances with same CSS at once when live editing in Chrome develop tools
     - precedence: explicit in code
     - incompatible properties: try in order (array)
     - @keyframes: use helper
     - @page: ???
     - @font-face: ???
     - @media: ???
        - does not work on server
     - reuse code: use JavaScript instead
     - existing CSS/LESS/SASS libraries: like react-jss
     - compile step: no
     - might be bad performance:
        - forces CSS engine to recalculate style for each element
        - duplicate CSS across similar elements -> more bytes
        - forces React diff of "style" prop


            
   RADIUM   
            


VERSION ==>                       #0.15.3

RADIUM(CONF)->RADIUM              #
RADIUM(CTYPE)->CTYPE              #Usage
                                  #It works by wrapping RCOMP.render()->VAL and patching VAL

PROPS.style VAL[_ARR]             #Instead of PROPS.style OBJ:
                                  #  - merge VAL_ARR together:
                                  #     - priority to the right.
                                  #     - if VAL not OBJ, ignored
                                  #  - usually come from a shared (e.g. using RCOMP.context) OBJ_OBJ, where the key might come
                                  #    from props
                                  #PROPS.style OBJ has extra ability:
                                  #  - nested { 'SELECTOR': { PROP: VAL ... } } instead of { PROP: VAL ... }
                                  #     - SELECTOR can be:
                                  #         - ':hover|focus|active'
                                  #         - '@media ...': 
                                  #             - uses CONF.matchMedia() (def: WINDOW.matchMedia()) 
                                  #             - might need to be mocked on the server
                                  #  - fallback values (priority to the left): { PROP: ARR } instead of { PROP: VAL }
                                  #  - automatic browser-vendor prefix
                                  #     - can override user-agent (might need to be done on the server) with CONF.userAgent
                                  #Only in CTYPE's children, not CTYPE itself.
                                  #  - if used on several children, they must have PROPS.key|ref

RADIUM.getState
(RCOMP.state, 'KEY|REF'|null,     
':hover|focus|active')->BOOL      #Check if SELECTOR applies

RADIUM.keyframes(OBJ[, 'RCOMP_NAME'])
                                  #Inject a <style> with CSS @keyframes

CONF.plugins
