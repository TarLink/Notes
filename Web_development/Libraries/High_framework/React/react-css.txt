
               
   REACT-CSS   
               


Comparison:
  - normal CSS/LESS/SASS:
     - how: compile-time stylesheets
     - source organization: separate CSS files
     - properties/values: static (including LESS/SASS #{EXPR})
     - selectors: any
     - precedence: load order
     - incompatible properties: try in order
     - @keyframes
     - @page
     - @font-face
     - @media
     - reuse code: (LESS/SASS) variables, mixins/functions/structures, @extend
     - existing CSS/LESS/SASS libraries
     - compile step: yes if LESS/SASS
  - react-jss:
     - how: run-time stylesheets
     - source organization: separate (or not) JSS files
     - properties/values: dynamic (JavaScript)
     - selectors: 
        - similar to .CLASS (namespaced)
        - less flexible but simpler/cleaner:
           - bad: 
              - TAG, *, specificiy by number of selector, !important
           - more complicated to write:
              - union of selectors, :not(): can create new class instead
              - ::SELECTOR, :SELECTOR, [ATTR]: use JavaScript logic instead
              - > + ~ space, LESS/SASS nesting: target element directly in JavaScript instead
           - good:
              - forces simpler selection
              - no collision, i.e. cannot overwrite with load order, !important or adding more selectors
     - precedence: explicit in code
     - incompatible properties: try in order
     - @keyframes|@page|@font-face|@media: ???
     - reuse code: use JavaScript instead
     - existing CSS/LESS/SASS libraries: 
        - CSS libraries: need to use class HTML attribute instead
        - LESS/SASS libraries: cannot reuse
     - compile step: no
  - radium:
     - how: inline (HTML attribute "style")
     - source organization: separate (or not) JavaScript files
     - properties/values: dynamic (JavaScript)
     - selectors: inline, so similar to #id:
        - similar comments as for react-jss
        - except cannot edit all instances with same CSS at once when live editing in Chrome develop tools
     - precedence: explicit in code
     - incompatible properties: try in order (array)
     - @keyframes|@page|@font-face: inject <style> with helper
     - @media: use WINDOW.matchMedia() (needs mock on server)
     - reuse code: use JavaScript instead
     - existing CSS/LESS/SASS libraries: like react-jss
     - compile step: no
     - might be bad performance:
        - forces CSS engine to recalculate style for each element
        - duplicate CSS across similar elements -> more bytes
        - forces React diff of "style" prop


            
   RADIUM   
            


VERSION ==>                       #0.15.3
                                  #Helps using HTML "style" attribute (i.e. using inline CSS approach) in React.

RADIUM(CONF)->RADIUM              #
RADIUM(CTYPE)->CTYPE              #Usage
                                  #It works by wrapping RCOMP.render()->VAL and patching VAL


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             MAIN              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PROPS.style VAL[_ARR]             #Instead of PROPS.style OBJ:
                                  #  - merge VAL_ARR together:
                                  #     - priority to the right.
                                  #     - if VAL not OBJ, ignored
                                  #  - usually come from a shared (e.g. using RCOMP.context) OBJ_OBJ, where the key might come
                                  #    from props
                                  #Only in CTYPE's children, not CTYPE itself:
                                  #  - if used on several children, they must have PROPS.key|ref
                                  #PROPS.style OBJ has extra ability:
                                  #  - ':hover|focus|active': { PROP: VAL ... }
                                  #     - RADIUM.getState(RCOMP.state, 'KEY|REF'|null, ':hover|focus|active')->BOOL:
                                  #       check if SELECTOR applies
                                  #  - '@media ...': { PROP: VAL ... }: 
                                  #      - uses CONF.matchMedia() (def: WINDOW.matchMedia()) 
                                  #      - might need to be mocked on the server
                                  #      - when using @media print: please check online doc
                                  #  - fallback values (priority to the left): { PROP: ARR } instead of { PROP: VAL }
                                  #  - automatic browser-vendor prefix:
                                  #     - can override user-agent (might need to be done on the server) with CONF.userAgent


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             EXTRA             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


<Style>                           #Inject a <style> with CSS. OBJ keys are CSS selectors.
                                  #Media queries must be wrapped in { mediaQueries: { 'MEDIAQUERY' OBJ, ... } }
  rules={OBJ}                     
  scopeSelector="SELECTOR"        #Appended to all selectors.

RADIUM.keyframes                  #Inject a <style> with CSS @keyframes, and returns automatically generated name KEYFRAMES
(OBJ[, 'RCOMP_NAME'])             #'RCOMP_NAME' is used for debugging.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            PLUGINS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONF.plugins                      #ARR of FUNC(OBJ)->OBJ2, where OBJ:
                                  #  - componentName STR
                                  #  - props PROPS
                                  #  - style OBJ
                                  #  - config CONF
                                  #  - getComponentField('ATTR')->VAL: RCOMP HTML attributes
                                  #  - getGlobalState('VAR')->VAL: use Radium global object
                                  #  - getState('VAR'[, 'KEY|REF'])->VAL
                                  #  - setState('VAR', VAL[, 'KEY|REF'])
                                  #  - mergeStyles(VAL_ARR)->OBJ
                                  #And OBJ2 (each optional):
                                  #  - props PROPS
                                  #  - style OBJ
                                  #  - globalState OBJ
                                  #  - componentFields OBJ
                                  #Def do the basic Radium functionalities:
															    #  - RADIUM.Plugins.mergeStyleArray: merge PROPS.style VAL_ARR together
															    #  - RADIUM.Plugins.checkProps: check PROPS.style correctness
															    #  - RADIUM.Plugins.resolveMediaQueries: '@media' SELECTOR
															    #  - RADIUM.Plugins.resolveInteractionStyles: ':hover|focus|active' SELECTOR
															    #  - RADIUM.Plugins.prefix: browser-vendor prefix
															    #  - RADIUM.Plugins.checkProps


																						 /=+==============================a=+=\ 
																						/  :                               :  \  
							 														  )==:          CONVERSION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


css-to-radium                     #CLI (1.0.3) from CSS -> Radium JavaScript
[[--input] FILE.css ...] [FILE.js]          
--quote single|double             #Def: 'single'
--indentSize=NUM                  #Def: tab character



         
   JSS   
         



VERSION ==>                       #3.2.0
                                  #Use JavaScript object to inject <style>, modify inline CSS or output CSS string.

JSS.create()->JSSI                #

JSSI.createStyleSheet             #JSS_OBJ is { SELECTOR: RULES_OBJ ... }:
(JSS_OBJ[, CONF])->SHEET          #  - RULES_OBJ: like CSS accessed in JavaScript (i.e. ELEM.styles RULES_OBJ)
                                  #  - SELECTOR: unless CONF.named false, can only be:
                                  #     - '@media ...'
                                  #     - KEY, which will be converted to a .CLASS namespaced for this JSSI,
                                  #       accessible at SHEET.classes.KEY (e.g. .KEY--jss-ID)
                                  #CONF:
                                  #  - media 'MEDIAQUERY': <style> media HTML attribute
                                  #  - meta OBJ: debug information
                                  #  - link BOOL (def: false): make RULES_OBJ reference to CSSRule, so that it updates
                                  #    <style> when changed (slower)
SHEET.addRules(JSS_OBJ[, CONF])   #
SHEET.addRule                     
(['SELECTOR', ]RULES_OBJ[, CONF]) 
->RULES_OBJ                       #
JSSI.createRule(...)->RULES_OBJ   #Same as SHEET.addRule(...) but without a SHEET
SHEET.getRule('SLCTOR')->RULES_OBJ#

RULES_OBJ.applyTo(ELEM)           #Add to ELEM using ELEM.style
RULES_OBJ.prop('PROP'[, VAL])     #Get/set
RULES_OBJ.toJSON()                #
RULES_OBJ.toString()              #To CSS

SHEET.attach()                    #Inject output CSS as <style> in DOM
SHEET.detach()                    #Cleanup (good idea for performance)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            PLUGINS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JSSI.use(FUNC(RULES_OBJ))         #Plugin declaration
