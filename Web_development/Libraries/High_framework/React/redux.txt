
           
   REDUX   
           



VERSION ==>                       #3.0.4

DIFFERENCE WITH FLUX ==>          #STORE:
                                  #  - takes role of Flux DISPATCHER + REDUCESTORE
                                  #     - so single store per app
                                  #     - no DISPATCHER.waitFor()
                                  #No FTYPE/view in core.


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             STORE             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


REDUX.createStore                 #APPSTATE0:
(RFUNC([APPSTAT,]ACTION)->APPSTAT2#  - default APPSTATE
[, APPSTATE0])->STORE             #RFUNC:
                                  #  - called on STORE.dispatch(ACTION), to update APPSTATE
                                  #  - called at init
                                  #  - should be 'pure' (see Flux REDUCESTORE)
STORE.getState()->APPSTATE        #
STORE.dispatch(ACTION)            #Cannot be called from inside STORE's RFUNC
STORE.subscribe(SFUNC())          #Called when STORE.dispatch(ACTION) has been called and APPSTATE changed.
                                  #Returns unsubscribe FUNC()
STORE.replaceReducer(RFUNC)       #


REDUX.combineReducers(OBJ)        #Where OBJ:
                                  #  - KEY RFUNC2()->APPSTAT2
                                  #Returns single RFUNC3()->{ KEY: APPSTATE2 }
                                  #Conventions for RFUNC2:
                                  #  - if unsupported ACTION (including undefined), must return unchanged APPSTATE
                                  #  - must never return undefined


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          MIDDLEWARE           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


REDUX.applyMiddleware             #Returns patched REDUX.createStore (specifically STORE.dispatch())
(FUNC(STORE)->FUNC2(FUNC3(ACTION))#  - FUNC() is called during applyMiddleware()
->FUNC4(ACTION) ...)              #  - FUNC2() is called during CREATESTORE()
(REDUX.createStore)->CREATESTORE  #  - FUNC4() is called during STORE.dispatch(ACTION)
                                  #     - can modify ACTION
                                  #     - must then call FUNC3(ACTION) to pass to next middleware
                                  #     - the last middleware FUNC4 is the actual STORE.dispatch()
                                  #STORE only has members getState() and dispatch(ACTION)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            ACTIONS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


REDUX.bindActionCreators(VAL,FUNC)#VAL:
                                  #  - FUNC2()->ACTION
                                  #  - { KEY: FUNC2()->ACTION ... }
                                  #FUNC is STORE.dispatch()
                                  #It will return VAL, but bind FUNC2() so that it fires STORE.dispatch(ACTION)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             OTHER             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



REDUX.compose(FUNC...)            #Same as FUNC(FUNC2(FUNC3(...)))


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             REACT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/



REACT-REDUX ==>                   #Version 4.0.0

<Provider store={STORE}>          #Pass STORE as context to single child.
                                  #Must wrap app.

REACTREDUX.connect
(FUNC(STATE[, OBJ])->PROPS
[, FUNC2(OBJ2[, OBJ])]
[, FUNC3(FUNC_RET, FUNC2_RET, 
PARENT_PROPS)->CHILD_PROPS]
[, OPT])(RTYPE)->RTYPE2
                                  #  - FUNC: 
                                  #     - called using RCOMP.store.subscribe(), modifies RCOMP.props (shallow merge)
                                  #     - if OBJ, called during RCOMP.componentWillReceiveProps()???
                                  #  - FUNC2:
                                  #     - OBJ2:
                                  #        - { KEY: FUNC2()->ACTION }:
                                  #           - merges REDUX.bindActionCreators(OBJ2, RCOMP.store.dispatch) inside RCOMP prototype
                                  #        - FUNC(DISPATCH): same but must return already bound OBJ2
                                  #        - def: { dispatch: RCOMP.store.dispatch }
                                  #     - OBJ: like for FUNC???
                                  #  - FUNC3:
                                  #     - changes RCOMP.props according to return values of FUNC and FUNC2, and parent props.
                                  #     - def: shallow merge of the three
                                  #  - OPT:
                                  #     - pure BOOL (def: true)
                                  #
                                  #Returns RTYPE2:
                                  #  - wraps RTYPE:
                                  #     - renders to <RTYPE>
                                  #     - if OPT.withRef true (def: false), RCOMP2.refs.wrappedInstance (or RCOMP2.getWrappedInstance()) = RCOMP
                                  #  - RTYPE2 only passes its state down to RTYPE as props:
                                  #     - state = FUNC3(FUNC_RET, FUNC2_RET, PROPS) (def FUNC3: shallow merge)
                                  #     - state recalculated on shouldComponentUpdate() and construction:
                                  #        - 
                                  #  - RCOMP2.state.storeState = RCOMP.store.getState(), computed:
                                  #     - on componentDidMount()
                                  #     - on store change, using RCOMP.store.subscribe()
                                  #        - will 'update' if RCOMP2.state.storeState change
                                  #        - can check RCOMP.isSubscribed()
RCOMP.store                       #Taken from props.store or context.store (e.g. through <Provider>)
RCOMP.version                     #Incremented each time REACTREDUX.connect() called
