
           
   REDUX   
           



Todo: write about func purity
VERSION ==>                       #3.0.4

DIFFERENCE WITH FLUX ==>          #STORE:
                                  #  - takes role of Flux DISPATCHER + REDUCESTORE
                                  #     - so single store per app
                                  #     - no DISPATCHER.waitFor()
                                  #No FTYPE/view (should use other libraries for it)


REDUX.createStore                 #APPSTATE0:
(RFUNC([APPSTAT,]ACTION)->APPSTAT2#  - default APPSTATE
[, APPSTATE0])->STORE             #RFUNC:
                                  #  - called on STORE.dispatch(ACTION), to update APPSTATE
                                  #  - called at init
STORE.getState()->APPSTATE        #
STORE.dispatch(ACTION)            #Cannot be called from inside STORE's RFUNC
STORE.subscribe(SFUNC())          #Called when STORE.dispatch(ACTION) has been called and APPSTATE changed.
                                  #Returns unsubscribe FUNC()
STORE.replaceReducer(RFUNC)       #


REDUX.combineReducers(OBJ)        #Where OBJ:
                                  #  - KEY RFUNC2()->APPSTAT2
                                  #Returns single RFUNC3()->{ KEY: APPSTATE2 }
                                  #Conventions for RFUNC2:
                                  #  - if unsupported ACTION (including undefined), must return unchanged APPSTATE
                                  #  - must never return undefined


REDUX.applyMiddleware             #Returns patched REDUX.createStore (specifically STORE.dispatch())
(FUNC(STORE)->FUNC2(FUNC3(ACTION))#  - FUNC() is called during applyMiddleware()
->FUNC4(ACTION) ...)              #  - FUNC2() is called during CREATESTORE()
(REDUX.createStore)->CREATESTORE  #  - FUNC4() is called during STORE.dispatch(ACTION)
                                  #     - can modify ACTION
                                  #     - must then call FUNC3(ACTION) to pass to next middleware
                                  #     - the last middleware FUNC4 is the actual STORE.dispatch()
                                  #STORE only has members getState() and dispatch(ACTION)


REDUX.bindActionCreators(VAL,FUNC)#VAL:
                                  #  - FUNC2()->ACTION
                                  #  - { KEY: FUNC2()->ACTION ... }
                                  #FUNC is STORE.dispatch()
                                  #It will return VAL, but bind FUNC2() so that it fires STORE.dispatch(ACTION)


REDUX.compose(FUNC...)            #Same as FUNC(FUNC2(FUNC3(...)))
