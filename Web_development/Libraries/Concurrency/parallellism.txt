
                 
   PARALLELISM   
                 


SISD (single instruction, single data) :
  - schéma normal
SIMD (single instruction, multiple data) :
  - registres-arrays (avec des éléments de types identiques ou non), et des opérations sur ces derniers, dans leur ensemble.
  - permet parallélisme
  - usages :
    - 3d graphics (quaternions)
    - crypto et compression
  - "vectorization optimization" : le fait qu'un compilateur produise de telles instructions. Encore du progrès à faire.
MISD (multiple instruction, single data) : 
  - peu utilisé
MIMD (multiple instruction, multiple data)
  - utilisé par les meilleurs supercomputers

Autres types :
  - Scalar CPU : schéma traditionnel
  - Vector CPU : SIMD
  - Superscalar : fait de pouvoir exécuter plusieurs instructions en même temps, par exemple avec le pipelining

Scalar type : type n'enregistrant qu'une seule valeur (ex : int, float)
Vector type : type enregistrant plusieurs valeurs (ex : arrays, struct, classes)
Array programming: using operations on vector types, i.e. SIMD

Attention à ce qui peut bloquer parallélisme (empêcher le compilateur d'utiliser des opérations parallèles) :
  - action dépendant du résultat d'une autre action
  - mutexs
