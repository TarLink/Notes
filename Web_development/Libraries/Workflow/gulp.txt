
          
   GULP   
          


VERSION ==>                         #Node module (3.8.11)
                                    #Look also at documentation for vinyl, through, event-stream

gulp [TASK...]                      #Look for ./gulpfile.js (Node JavaScript) (or --gulpfile FILE...) and:
                                    #  - run TASK... (déf: "default") defined with GULP.task()
                                    #  - if a GULP.watch() is present, doesn't exit
                                    #    Typically "default" does everything then runs a task "watch" with GULP.watch() to
                                    #    run tasks that doesn't require full rebuild (e.g. running SASS when *.css is changed)
                                    #Only use plugins that goes from input files to output files. For the rest, just use
                                    #command line spawning or Node JavaScript APIs.
--require FILE                      #Do a require(FILE) before reading gulpfile.js
--cwd DIR                           #$PWD used to search and launch the gulpfile.js
--tasks[-simple]                    #Prints tasks first
require("coffee-script/register");
require("./gulpfile.coffee");      ##gulpfile.js definition in order to use gulpfile.coffee instead

gulp-devtools                       #Command line as Node module (0.0.2)
                                    #Must install Chrome extension too.
                                    #Uses ./gulpfile.js (must put module.exports = GULP; in it)
                                    #gulp must be installed globally
                                    #Will allow launching tasks from Devtools tab Gulp. Tasks are executed from same place
                                    #as gulp-devtools, but output is redirected to Devtools.
                                    #Reload only by closing/opening Devtools

GULP-GRUNT(GULP[, OBJ])             #Node module (0.4.1)
                                    #Defines grunt-TASK running Grunt TASK from ./Gruntfile.js
                                    #OBJ members:
                                    #  - base DIR: where Gruntfile.js is
                                    #  - prefix (déf: "grunt-", can be "")

GULP.task(TASK[, TASK2_ARR], FUNC())#Defines a task using Orchestrator (ORCHEST.add(...)), which takes care of dependencies
                                    #TASK2_ARR.
                                    #FUNC can be async by:
                                    #  - passing a callback FUNC2() as argument
                                    #  - returning a STREAM (wait for end event). To do so when using GULP.src()
                                    #  - returning a PROMISE (e.g. Q.defer().promise)
GULP.watch(GPATH[_ARR][, OBJ],      #Fires TASK_ARR|FUNC when GAZE(GPATH[_ARR]) emits events.
TASK_ARR|FUNC(ERROR, WATCHER))      #OBJ is GAZE OBJ.
                                    #OBJ2 has members type EVENT_STR and path STR
GULP-WATCH(GPATH[_ARR][, OBJ],     ##Version 1.0.7
FUNC(IOSTREAM))                    ##Same but:
                                   ##  - returns an IOSTREAM is same as return value of GULP.src().
                                   ##    OBJ also takes same OBJ2 members as GULP.src() and GULP.watch(), allowing it to 
                                   ##    replace GULP.src()
                                   ##    This allows doing tasks on files that changed not all.
                                   ##     - To only target added|changed|deleted files, do:
                                   ##       .pipe(GULP-FILTER(function(VINYLOBJ){ 
                                   ##         return VINYLOBJ.event === "added|changed|deleted";
                                   ##       }))
                                   ##  - Must return IOSTREAM final stream to make FUNC() async (like GULP.task())
                                   ##  - Can do FUNC() for all GPATH, then only when changes happen with:
                                   ##      return GULP.src( GPATH )
                                   ##        .pipe( GULP-WATCH( GPATH, function( IOSTREAM ) { 
                                   ##          return IOSTREAM.pipe(...);
                                   ##        } ) );
                                   ##  - Better output log. 
                                   ##    Can also add OBJ.name which appears in the log as "NAME was FILE" was changed.
                                   ##  - Can also use OBJ.timeout NUM:
                                   ##     - Different from Gaze debounceDelay, which ignores events on same file after NUMms 
                                   ##       first event on that file fired
                                   ##     - OBJ.timeout waits for all changes on GPATH for NUMms until firing FUNC()
                                   ##        - debounceDelay fires at first event, timeout waits
                                   ##        - debounceDelay works only on same file changes, timeout aims at not firing FUNC()
                                   ##          too many times when all files in GPATH are changed at once
                                   ##        - should be combined: low timeout (def: 200), higher debounceDelay (def: 500)
                                   ##  - Can call IOSTREAM.close(). Gets events end, ready (from Gaze), error
                                   ##  - Cannot use TASK_ARR, but can use GULP.start(TASK, FUNC())
GULP-PLUMBER([OBJ])                ##IOSTREAM that creates error event handler OBJ.errorHandler FUNC(ERROR) (def: prints log) 
                                   ##on current IOSTREAM.
                                   ##To use with GULP-WATCH:
                                   ##  GULP-WATCH(...).pipe(GULP-PLUMBER()).pipe(...)
                                   ##Makes GULP-WATCH process not stop on error, and also prints prettier errors logs.
                                   ##Version 0.6.5

GULP.src(GPATH[_ARR][, OBJ2])       #Returns a IOSTREAM in ObjectMode:
                                    #  - each OBJ are the files|directories chosen by GPATH[_ARR]
                                    #  - OBJ are VINYL, where VINYL.contents is BUFFER|null (null for directories)
                                    #  - emits one OBJ by data event
                                    #GPATH[_ARR] uses glob-stream, OBJ2 being same with extra members:
                                    #  - buffer BOOL: if false (déf: true), VINYL.contents is converted to STREAM when
                                    #    it is BUFFER, which allows buffering for large files. However, plugins need to
                                    #    handle STREAM then.
                                    #  - read BOOL: if true, set VINYL.contents to null (faster if content is not needed)
                                    #IOSTREAM is then piped to:
                                    #  - a similar IOSTREAM2 (ObjectMode on VINYL) that transforms input, e.g. as returned by
                                    #    EVENT-STREAM.map(...)
                                    #  - usually Plugins are Node modules FUNC() returning such IOSTREAM2:
                                    #     - should check VINYL.isNull|Buffer|Stream() and maybe VINYL.stat.isFile|Directory()
                                    #Usually at beginning of pipe() chain but can also pipe(GULP.src(...)) to add more files
                                    #along the chain.

GULP.dest(DIR|FUNC(VINYLOBJ)->DIR)  #Returns a IOSTREAM that writes all files|directories to DIR
                                    #Usually at end of pipe() chain.
                                    #To output to console, do instead:
                                    #  .pipe(CONCAT-STREAM(function(val){ console.log(val[0].contents.toString()); }))

gulp-util                           #Node module (2.2.14) useful for Gulp plugins
GUTIL.log(...)                      #Like console.log(...), except appends "[gulp]" and returns GUTIL
GUTIL.colors                        #Link to CHALK.*
this.emit( "error",                 #Emits an ERROR where STR is plugin name, and STR2 error message.
GUTIL.PluginError(STR, STR2) )      #Throw it if it is stopping plugin from working.

GUTIL.replaceExtension(STR, STR2)   #Replace filename extension in STR by STR2 (ex: ".png")
GUTIL.template(...[, OBJ])          #Like __.template(...), except OBJ must have a member file VINYL (so can use file.path
                                    #in template, etc.)

GUTIL.File                          #Link to VINYL
GUTIL.noop()                        #Returns a IOSTREAM that doesn't transform input.
                                    #Useful in IOSTREAM.pipe(BOOL ? IOSTREAM2 : GUTIL.noop())
GUTIL.buffer([FUNC(ERROR,ARR)])     #Same as EVENT-STREAM.wait(...), except returns as ARR with each chunk instead of STR.
                                    #Useful when IOSTREAM is in ObjectMode, e.g. with GULP.src() will have VINYL_ARR

GULP-IF(VAL,STREAM2[,STREAM3])     ##Uses STREAM2 or STREAM3 (def: stream that doesn't do anything) according to VAL:
															     ##  - BOOL
															     ##  - FUNC(VINYLOBJ)->BOOL
															     ##  - REGEXP (on file path)
															     ##  - OBJ.isFile|Directory|BlockDevice|CharacterDevice|SymbolicLink|FIFO|Socket BOOL
                                   ##Version 1.2.4
GULP-IGNORE.include|exclude(VAL)	 ##Include|excludes files from current stream according to VAL (same as GULP-IF() VAL)
                	                 ##Good to do in the middle of the pipeline. In the beginning and for a file path matching, 
                                   ##can just use gulp.src() argument.
                                   ##Version 1.2.0
GULP-FILTER(VAL[, OBJ])            ##Similar to GULP-IGNORE.exclude(VAL) but:
                                   ##  - VAL can be GPATH_STR[_ARR] or FUNC(VINYLOBJ)->BOOL
                                   ##  - Returns RESTORE so can restore files before exclusion with:
                                   ##     - var FILTER = GULP-FILTER(VAL), then:
                                   ##       - .pipe(FILTER.restore()).pipe(...)
                                   ##       - or FILTER.restore({ end: true }).pipe(...)
                                   ##OBJ is minimatch options.
                                   ##Version 1.0.2
GULP-CHANGED(DIR[,OBJ])				     ##Excludes files from current stream that have been modified after DIR files (usually same
                                   ##DIR as GULP.dest(DIR))
															     ##Current stream files and DIR must have same structure, but can change extension by 
                                   ##specifying destination OBJ.extension (e.g. ".js")
                                   ##Version 1.0.0

GULP-DATA(FUNC(VINYL)->VAL)        ##Sets VINYL.data = VAL. 
GULP-DATA                          ##Compatible plugins asking for data as parameters will check VINYL.data first.
(FUNC(VINYL,FUNC2(ERROR, VAL)))    ##Usually VAL will depend on VINYL.filename|contents
                                   ##VAL can be PROMISE
                                   ##Version 1.2.0
