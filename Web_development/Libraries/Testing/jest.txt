
          
   JEST   
          



VERSION ==>                       #0.8.2

GOAL ==>                          #Built on top of Jasmine, whose version depends on JCONF.testRunner or jest --testRunner:
                                  #  - './testRunners/jasmine/jasmine1.js': 1.3.0
                                  #  - './testRunners/jasmine/jasmine2.js': 2.3.4
                                  #Provides:
                                  #  - require() mocking
                                  #  - JASMINE.clock() helpers
                                  #  - conf helpers: filepaths, coverage, globals, preprocessors

INCLUDED BY DEFAULT ==>           #  - JSDOM
                                  #  - [x]pit(...)

jest                              #Instead of jasmine
--watch                           #
--watchExtensions=EXT,...         #Def: 'js'
--json                            #JSON output

      
																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         CONFIGURATION         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JCONF                             #In:
                                  #  - jest --config=PATH
                                  #  - package.json: PACKAGE.jest

JCONF.rootDir                     #'DIR' (def: package.json DIR, or $PWD) used for require() and test files paths
                                  #Can also use '<rootDir>' in other JCONF.*
JCONF.testPathDir                 #'DIR' (def: '<rootDir>')
JCONF.testDirectoryName           #'DIR' (def: '__tests__'). Can have many DIR with that name.
JCONF.testFileExtensions          #STR_ARR (def: ['js'])
JCONF.testPathIgnorePatterns      #STR_ARR (def: ['/node_modules/'])
jest --testPathPattern=REGEXP
JCONF.testPathPattern             #REGEXP
JEST.currentTestPath()->'PATH'    #

jest --bail
JCONF.bail                        #BOOL. Like CONF.stopSpecOnExpectationFailure
jest --verbose
JCONF.verbose                     #BOOL (def: false)

jest --coverage                   #
JCONF.collectCoverage             #BOOL (def: false): code coverage using Istanbul
JCONF.collectCoverageOnlyFrom     #{ VAR: PATH }: code coverage

JCONF.globals                     #{ VAR: VAL }: global vars reinit for each test.
jest --testEnvData="JSON"         #Passed as JEST.getEnvData()

JCONF.scriptPreprocessor          #MODULE for preprocessing files (e.g. Babel)
                                  #Must be OBJ:
                                  #  - process(STR, 'PATH')->STR
JCONF.preprocessorIgnorePatterns  #'REGEXP'_ARR

JCONF.setupEnvScriptFile          #FILE run before each test
JCONF.setupTestFrameworkScriptFile#Same except run after setupEnvScriptFile


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         REQUIRE MOCK          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


require(MODULE)                   #Will:
                                  #  - if MODULE/../.../__mocks__/MODULE_FILENAME exists, use it instead
                                  #      - MODULE2 must use JEST.genMockFromModule(MODULE) instead of require(MODULE)
                                  #  - otherwise, turn all FUNC into a MOCKFUNC instead.
require.requireActual(MODULE)     #Normal require()
JCONF.moduleFileExtensions        #STR_ARR (def: ['js', 'json', 'node']): possible extension of MODULE from require(MODULE)
JCONF.modulePathIgnorePatterns    #DIR_ARR (def: []): do not look in those DIR for require() lookup
JCONF.moduleNameWrapper           #{ 'REGEXP': MODULE2 }: if require(MODULE) totally matches REGEXP, require(MODULE2) instead
JCONF.cacheDirectory              #DIR (def: 'jest-cli/.hash_cache'): where deps info are cached.

JEST.autoMockOff|On()             #Turns on|off all require() mocking
JEST.mock|dontMock(MODULE)        #Turns on|off specific require() mocking
JCONF.unmockedModulePathPatterns  #'REGEXP'_ARR which automatically trigger JEST.dontMock()
JEST.setMock(MODULE, OBJ)         #Make require(MODULE) return OBJ
JEST.genMockFn()->MOCKFUNC        #

MOCKFUNC.mockImpl(FUNC)           #Make MOCKFUNC(...) fire FUNC(...)
MOCKFUNC.mockReturnThis()         #Same as MOCKFUNC.mockImpl(function () { return this; })
MCKFUNC.mockReturnValue[Once](VAL)#Same as MOCKFUNC.mockImpl(function () { [if (!once) { once=true; ]return VAL; } })
                                  #"Once" can be done several times

MOCKFUNC.mock.calls               #ARR_ARR of previous calls arguments
MOCKFUNC.mock.instances           #ARR of previous calls return values
MOCKFUNC.mockClear()              #Clears MOCKFUNC.mock.*

expect(MOCKFUNC).toBeCalled()     #
expect(MKFUNC).toBeCalledWith(...)#
expect(MKFUNC).lastCalledWith(...)#


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          CLOCK MOCK           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


JASMINE.clock.install()           #Automatically run

JEST.runAllTimers()               #Runs JASMINE.clock().tick(NUM) until all setTimeout|setInterval() done, recursively
JEST.runOnlyPendingTimers()       #Same as runAllTimers() but not recursively
JEST.runAllTicks()                #Same as runAllTimers() but for PROCESS.nextTick()
JEST.clearAllTimers()             #Calls all clearTimeout|clearInterval()
