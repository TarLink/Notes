
           
   KARMA   
           


GOAL	==>                     #Automating client-side unit testing (that require loading an HTML page)
                              #Actions:
															#  - starts a server at SERVER_URL:
                              #     - CONFIGVAR hostname (def: localhost) and port (def: 9876) (or karma --port)
			                        #     - Is prefixed by CONFIGVAR urlRoot (def: "/")
                              #  - clients are launched by karma run:
                              #     - binaries ("browsers") are executed and connect to the server
                              #     - they create a HTML page (in an <iframe>) that:
                              #        - loads "frameworks" (e.g. testing frameworks) by including <script>
                              #        - read "included" files (e.g. source+test files) by including <script>
                              #        - redirect output/result to "reporters"
                              #     - if binaries are already launched, just refresh the page
                              #  - files can be:
															#     - watched (e.g. source, test files): changes triggers karma run
															#     - included (e.g. source, test files and libraries): see above.
                              #       Usually Javascript files: HTML runner files of testing are useless since Karma creates 
                              #       the HTML shell in the <iframe> for each specific framework.
                              #       However, can also include HTML pages (use <link rel="import"> on modern browsers)
                              #     - served (e.g. source, test, resource files): hosted on the server at SERVER_URL/base/ 
                              #       so can also include resource files
															#Browsers, frameworks and reporters are available as plugins:	
															#   - must install them as devDependencies
															#   - by def, all karma-* are require()'d, but can use CONFIGVAR plugins MODULE_STR_ARR instead

karma COMMAND [FILE]          #Command line from Node module (0.12.16):
[-- ARGS]		                  #  - Located at node_modules/karma/bin/. 
                              #  - To have globally install npm package karma-cli globally.
															#Uses FILE (def: karma.conf.js), which is a Node module with:
                              #  module.exports = function(CONFIG){CONFIG.set(OBJ)}:
												      #   - can generated with karma init
															#   - OBJ members are CONFIGVAR below
															#   - GPATH use minimatch
															#COMMAND:
															#  - start (def): launches server then (in order of priority):
                              #     - if CONFIGVAR singleRun true (déf: false): karma run then exit code 1|0
                              #       Can also use karma --[no-]single-run
                              #     - if CONFIGVAR autoWatch true (déf): karma run then karma watch
                              #       Can also use karma --[no-]auto-watch
                              #     - otherwise hangs (waits for karma run|watch)
															#  - run: lanches "browsers", "frameworks", etc.
															#    ARGS are passed to CONFIG.args STR_ARR (can only be accessed by plugins)
															#    Can also be set with CONFIGVAR client.args STR_ARR
															#  - watch: use watch feature to do "run" when files change
                              #    Waits CONFIGVAR autoWatchBatchDelay NUM (def: 250ms) to do it in batch.

files			                    #GPATH|OBJ_ARR of files to watch/include/serve. 
                              #Each file is only counted once and in the order of the array (alphabetically for pattern 
                              #matching files). 
                              #If OBJ, it has members:
															#  - pattern GPATH
															#  - watched BOOL (déf: true)
															#  - included BOOL: if true (def) include using <script>, otherwise doesn’t 
                              #    (should use RequireJS).
															#  - served BOOL (déf: true): whether to host under SERVER_URL/base/ 
proxies			                  #{ PATH: URL ...}, makes SERVER_URL/PATH/ point to URL instead (PATH must start with "/")
basePath		                  #For relative path in files and exclude. Def: package.json __dirname

browsers		                  #STR_ARR of "browsers" plugins, i.e. binaries to execute (usually browsers) and connect to 
                              #SERVER_URL:
												      #  - Configuration can be either:
												      #     - CONFIGVAR
															#     - CUSTOMVAR:
                              #        - browsers: [ CUSTOMBROWSER ] instead of BROWSER
                              #        - customLaunchers { CUSTOMBROWSER: { base BROWSER, CUSTOMVAR... } ... } 
															#        - CUSTOMVAR flags STR_ARR: command line options to binary
															#  - Binary is looked up by plugins in usual locations: to override it, use ENVVAR BROWSER_BIN, 
                              #    e.g. CHROME_BIN
                              #Can also use karma --browsers STR_ARR
                              #If several "browsers", "reporters" gets only the aggregated/summed results, with "browsers" 
                              #name of failed results.
															#Available:
		                          ##  - "Safari" (module karma-safari-launcher)
		                          ##  - "Opera" (module karma-opera-launcher)
		                          ##  - "Firefox" (module karma-firefox-launcher)
		                          ##  - "PhantomJS" (module karma-phantomjs-launcher):
                              ##    CUSTOMVAR options { windowName STR, settings OBJ }
														 	##  - "IE" (module karma-ie-launcher): CUSTOMVAR "x-ua-compatible": "IE=EmulateIE8|9"
															##  - "Chrome" (module karma-chrome-launcher): command line --disable-web-security if needed
												      ##  - "BrowserStack" (karma-browserstack-launcher): uses unit testing REST API through 
                              ##    BROWSERSTACK Node module + BrowserStackTunnel:
															##      - CUSTOMVAR os|browser[_version], device
															##      - CONFIGVAR browserStack OBJ:
															##         - username|accessKey STR (def: ENVVAR BROWSER_STACK_USERNAME|ACCESS_KEY)
															##         - retryLimit NUM (def: 3): number of connections retries
															##         - captureTimeout (def: 120): browser idle timeout
															##         - timeout (def: 300): test idle timeout
															##         - build, name, project: like CAPAB_OBJ. 
                              ##           "build" def: ENVVAR [TRAVIS_]BUILD_NUMBER, BUILD_TAG, CIRCLE_BUILD_NUM
                              ##         - startTunnel BOOL (déf: false), tunnelIdentifier (déf: "karma" + random number), 
                              ##           jarFile (or ENVVAR BROWSER_STACK_TUNNEL_JAR)
															##  - "SauceLabs" (karma-sauce-launcher): uses wd.js WD.get() + SauceConnect:
															##      - CUSTOMVAR browserName STR, platform STR, version STR, deviceOrientation STR
															##      - CONFIGVAR sauceLabs OBJ with members:
															##         - username|accessKey STR (def: ENVVAR SAUCE_USERNAME|ACCESS_KEY)
															##         - testName STR
															##         - tags STR_ARR
															##         - startConnect BOOL (déf: true): starts it automatically
                              ##         - tunnelIdentifier STR (for SauceConnect) (déf: "karma" + timestamp)
															##         - build STR (def: ENVVAR [TRAVIS_]BUILD_NUMBER, BUILD_TAG|NUM
															##         - recordVideo|Screenshots BOOL (def: false|true)
                              ##         - options CAPAB_OBJ: except for the ones above
															##      - must use reporter "saucelabs" (module karma-sauce-launcher) in order to update job
                              ##        "passed" BOOL and "custom-data" (with test result)
                              ##      - should increase captureTimeout to 2 minutes
															#   - a PATH to a Bash script, which take SERVER_URL as argument (does not seem to work)
browserDisconnectTolerance	  #If browser disconnects from server because of bad connection, try NUM times more (def: 0) with 
                              #a timeout of CONFIGVAR browserDisconnectTimeout NUM (def: 2000). 
browserNoActivityTimeout      #If browser stays idle for NUM (def: 10000), it will disconnect. 
captureTimeout                #If browser takes more than NUM to connect (def: 60000), it will disconnect. 
                              #Can also use karma --capture-timeout NUM
proxyValidateSSL	            #If false, doesn’t validate SSL certificates.
client: { useIframe }         #If false, disable running the actions in an <iframe> (use a new window instead)

frameworks		                #STR_ARR of plugins performing actions, usually testing or libraries.
                              #They add <script> in the beginning of the HTML page.
                              #Using frameworks plugins for libraries is same as using CONFIGVAR files.
															#Available:
															##  - "jasmine" (module karma-jasmine[@2_0])
															##  - "qunit" (module karma-qunit)
                              ##  - "chai", "mocha" (module karma-chai and karma-mocha):
														  ##     - CONFIGVAR client: { mocha: OBJ }

reporters		                  #STR_ARR of plugins redirecting the HTML page results ("frameworks" results).
                              #Can also use karma --reporters STR_ARR
                              #Reporters don't use logLevel.
															#Available:
															#  - "dots": terminal output, simple dots
															#  - "progress": terminal output, progress bar (best short terminal output)
															## - "spec" (module karma-spec-reporter): Jasmine-like terminal output
                              ## - "mocha" (module karma-mocha-reporter): Mocha-like terminal output 
                              ##   (best long terminal output)
														  ## - "html" (module: karma-htmlfile-reporter) with CONFIGVAR htmlReporter: { outputFile FILE }
                              ##   HTML file showing passed|failed tests
															## - "growl" (module karma-growl-reporter): Growl notifications (whether passes or fails)
                              ##   Must have GNTP server running first.
                              ##Browser console.* is also redirected to terminal if CONFIGVAR client.captureConsole true (déf)
reportSlowerThan	            #Report "frameworks" performing on a file (typically a test file) for more than NUMms (def: 0)
                              #Can also use karma --report-slower-than NUM

loggers		                    #For the Karma server logs (not reporters output). OBJ_ARR same as LOG4JS appenders OBJ3_ARR 
                              #(déf: [{ type: "console", layout: { type: "coloredOutput" } }])
															#Use CONFIGVAR logLevel CONFIG.LOG_DISABLE|ERROR|WARN|INFO|DEBUG (def: LOG_INFO) 
                              #(or karma --log-level disable|error|etc.)

preprocessors		              #{ GPATH: PLUGIN_STR }: process some files with plugins.
                              #Prefer using gulp to do this.
                              #Can use plugin-dependent CONFIGVAR

GULP-KARMA(OBJ)		            #Gulp plugin that executes karma binary
															#OBJ members:
															#  - configFile STR (no déf)
															#  - action STR (def: "run")
															#Failed test emits an error event
