
             
   JASMINE   
             


VERSION ==>                                     #2.0

HOW ==>                                         #In Jasmine source files jasmine/dist/*.zip -> unzip:
                                                #  - Use SpecRunner.html which includes several JavaScript files, but not
                                                #    one called "console.js" (optional)
                                                #  - Must include files to test (after): runtime and specs
                                               ##Plugins are written like this

jasmine-node DIR                               ##Executes specs in DIR/ with Node.js that matches:
                                               ##  - *Spec.js, unless --matchall
                                               ##  - * can be processed further with -m REGEXP_STR
                                               ##Command line (Node module 1.14.3)
                                               ##Use latest version to use Jasmine 2.0 and not 1.3
--verbose                                      ##Show tests and execution time (good)
--autotest                                     ##Keep running, and reexecutes when DIR changes
                                               ##Aditional watched DIR2 can be added with --watch DIR2...
--config ENVVAR VAL                            ##Sets an ENVVAR in PROCESS.env
--[noC|c]olor                                  ##
--growl                                        ##Adds Growl notifications
--junitreport                                  ##Creates output as JUnit XML file in ./reports/ (or --output DIR)
--teamcity                                     ##Outputs as Teamcity commands

minijasminenode FILE...                        ##Same but:  
                                               ##  - use FILE... instead 
                                               ##  - only --verbose and --[noC|c]olor
                                               ##  - can use MINIJASMINENODE in Node, with members:
                                               ##     - addSpecs(FILE_STR)
                                               ##     - addReporter(REPORTER)
                                               ##     - executeSpecs([OBJ]), OBJ having members:
                                               ##        - specs FILE_STR_ARR
                                               ##        - onComplete FUNC(MINIJASMINENODE, LOG_STR)
                                               ##        - isVerbose BOOL
                                               ##        - showColors BOOL
                                               ##        - defaultTimeoutInterval NUM

GULP-JASMINE([OBJ])                            ##gulp plugin (0.2.0)
                                               ##Executes minijasminenode on IOSTREAM, where OBJ are:
                                               ##  - verbose BOOL (déf: false)
                                               ##  - timeout NUM
                                               ##  - reporter REPORTER[_ARR]
                                               ##Careful: runs Jasmine 1.3

[x]describe(STR[, FUNC()])                      #Test suite.
                                                #Can be nested.
                                                #x or not using FUNC() marks it as non-implemented yet.
[given(ARR).]                                  ##Test case.
[x]it(STR[, FUNC([ARG...][, FUNC2()])][, NUM])  #When FUNC2 defined, FUNC() will be async. and only complete once FUNC2() is
                                                #called. Don't wait more than (déf: 5000):
                                                #   - jasmine.DEFAULT_TIMEOUT_INTERVAL (setup in beforeEach())
                                               ##   - for jasmine-node, ENVVAR defaultTimeoutInterval, or NUM
                                                #With given(ARR), pass each elements of ARR in several invocations of 
                                                #FUNC(ARG...):
                                                #  - actually creates a nested describe(STR) with several 
                                                #    it("Variant #NUM <ARG...>")
                                                #  - Use ARR_ARR to pass several ARG...
                                                #  - can only be done if FUNC is defined (but works with xit())
                                               ##  - require all.js (Jasmine data driven tests)
                                               ##    Actually call [x]all(...), but the following patch creates given()
                                               ##    (put in beginning of all.js):
																							 ##      global.given = function(data) {
																							 ##        return {
																							 ##          it: function() {all.call(this, arguments[0], data, arguments[1]);},
																							 ##          xit: function() {xall.call(this, arguments[0], data, arguments[1]);}
																							 ##        }
																							 ##      }

before|afterEach(FUNC([FUNC2]))                 #Fire FUNC() before|after each test case or nested describe().
                                                #FUNC2 is for async (see it()).
this                                            #Is an empty OBJ in it() and before|afterEach(), that can be filled.
                                                #this scope is limited to each it(), but inherited by it() and nested 
                                                #describe() from before|afterEach()
                                                #Async functions cannot use this.

expect(...).not.FUNC(...)                       #Asserts inverse
expect(VAL).toBe(VAL2)                          #Asserts VAL === VAL2
expect(VAL).toEqual(VAL2)                       #Asserts VAL == VAL2.
                                                #For OBJ, compare keys+values by copy, and doesn't compare prototypes.
                                                #This includes DATE, ARRAY, REGEXP
                                                #NaN == NaN.
                                                #Can be extended by defining jasmine.addCustomEqualityTester(FUNC(VAL,VAL2))
                                                #for non-supported types:
                                                #  - FUNC should return true if VAL is same as VAL2, false otherwise, and not
                                                #    return if VAL or VAL2 are not of the right type
                                                #  - should be done in a beforeEach() or outside a test suite
                                               ##jasmine-jquery adds it for JQ
expect(OBJ).toEqual
(jasmine.objectContaining(OBJ2))                #Asserts OBJ2 is at least a subset of OBJ by copy.
expect(VAL).toEqual(jasmine.any(TYPE),TYPE_STR) #Asserts VAL is of TYPE.
expect(ARR).toContain(VAL)                      #Asserts expect(any element of ARR).toEqual(VAL)
expect(VAL).toBeDefined()                       #Asserts typeof VAL !== 'undefined'
expect(VAL).toBeNull()                          #Asserts VAL === null
expect(BOOL).toBeTruthy()                       #Asserts BOOL is true
expect(NUM).toBeLess|GreaterThan(NUM2)          #Asserts NUM < > NUM2
expect(NUM).toBeCloseTo(NUM2, NUM3)             #Asserts NUM == Math.round(NUM2,NUM3)
expect(STR).toMatch(REGEXP)                     #Asserts REGEXP.test(STR)
expect(FUNC).toThrow()                          #Asserts exception throwing

jasmine.addMatchers({                           #Creates expect(VAL).CUSTOM([ARG...]):
  CUSTOM: function(util, testers) {             #  - STR must be "Expected VAL [not] to be ... [ARG...]"
    return {                                    #    Must set with "not" if result.pass is true (error message with not.CUSTOM)
      compare: function(VAL[, ARG...]) {        #    Déf. use CUSTOM by adding space between camelcase.
        return {                                #  - in order to compare like toEqual|Contain(): OBJ|NaN comparison, 
          pass: BOOL                            #    jasmine.any(), jasmine.objectContaining(), addCustomEqualityTester(), use:
          [, message: STR]                      #     - util.equals(VAL, VAL2, testers): VAL == VAL2
        }                                       #     - util.contains(ARR|STR, VAL|STR2, testers): ARG1 contains ARG2
      }                                         #  - can also define negativeCompare FUNC: same as compare, but when 
    }                                           #    not.CUSTOM is used. Optional: by def, just inverse BOOL.
  }                                             #  - Should be in beforeEach()
})                                              
addMatcher( function CUSTOM(OBJ, VAL[, ARG...]))#Shorter version: creates expect(VAL).CUSTOM([ARG...]).
                                                #CUSTOM() must return BOOL.
                                                #OBJ is { equals|contains FUNC(VAL,VAL2) } (see util above)
                                                #Created thanks to following code:
																								#  function addMatcher(matcher) {
																								#    if ( matcher.name == "" ) {
																								#      throw Error("Anonymous function must have a name");
																								#    }
																								#    var matchers = {};
																								#    matchers[matcher.name] = function(utils, testers) {
																								#      return {                                    
																								#        compare: function() {
																								#          var args = Array.prototype.slice.call(arguments, 0);
																								#          args.unshift( { 
																								#            equals: function(expected, actual) {
																								#              return utils.equals(expected, actual, testers);
																								#            },
																								#            contains: function(expected, actual) {
																								#              return utils.contains(expected, actual, testers);
																								#            }
																								#          } );
																								#          return {
																								#            pass: matcher.apply(this, args)
																								#          }
																								#        }                                         
																								#      }                                           
																								#    }                                             
																								#    jasmine.addMatchers(matchers);
																								#  }

spyOn(OBJ, FUNC_STR)                            #Starts spying on OBJ.FUNC(). Returns FUNC.
                                                #When FUNC is fired, it will do an action according to:
                                                #  - FUNC.and.stub(): do nothing (déf)
                                                #  - FUNC.and.callThrough(): normal call
                                                #  - FUNC.and.returnValue(VAL): normal call, but force returning VAL
                                                #  - FUNC.and.callFake(FUNC2): call FUNC2 instead, with same arguments
                                                #  - FUNC.and.throwError(VAL): throw VAL instead
jasmine.createSpy(STR)                          #Starts spying on an anonymous empty FUNC called STR. Returns FUNC.
                                                #Goal is to create a mock when not implemented yet.
jasmine.createSpyObj(STR, STR2_ARR)             #Starts spying on several anonymous empty FUNC called STR2 members of an OBJ 
                                                #called STR. Returns this OBJ.
FUNC.calls.reset()                              #Removes spying
FUNC.and.identity()                             #Returns FUNC_STR

expect(FUNC).toHaveBeenCalled()                 #Asserts spied FUNC has been fired
expect(FUNC).toHaveBeenCalledWith(VAL...)       #Asserts spied FUNC has been called exactly with arguments VAL...
                                                #Same as toEqual(): OBJ|NaN comparison, jasmine.any(), 
                                                #jasmine.objectContaining(), addCustomEqualityTester().
FUNC.calls.any()                                #True if spied FUNC has been fired
FUNC.calls.count()                              #Returns NUM of times FUNC has been fired
FUNC.calls.argsFor(NUM)                         #Returns arguments called for the NUMth time FUNC was fired, as ARR
FUNC.calls.allArgs()                            #Same for all FUNC invocation, as ARR_ARR
FUNC.calls.all()                                #Same but as OBJ_ARR, where OBJ is { object: this, args: ARR }
FUNC.calls.mostRecent()                         #Same but only for the last FUNC invocation, as OBJ
FUNC.calls.first()                              #Same but first invocation

jasmine.clock().[un]install()                   #In before|afterEach(), to mock setTimeout() and setInterval(), which will
                                                #not wait for real time, but for a call to jasmine.clock().tick(NUM), where
                                                #NUM is in ms.
                                                #This makes them sync., not async., which is easier to test.

REPORTER ==>                                    #Output of the test runner
                                                #By déf, includes HtmlReporter and JsApiReporter.
                                                #Can add with jasmine.getEnv().addReporter(new REPORTER([OBJ])), where OBJ
                                                #are the options.
                                                #All fired by jasmine.getEnv().execute(), done automatically by HtmlReporter
                                                #when loading HTML.
                                                #REPORTER is a OBJ with any of those functions:
                                                #  - jasmineStarted FUNC({ totalSpecsDefined UINT })
                                                #  - jasmineDone FUNC()
                                                #  - suiteStarted|Done FUNC(OBJ), with members:
                                                #     - id STR, opaque id
                                                #     - description STR, of describe(STR)
                                                #     - fullName STR: same but for nested describe, concatene parent 
                                                #       STR (separated with " ")
                                                #  - specStarted|Done FUNC(OBJ), with members:
                                                #     - id STR
                                                #     - description|fullName STR: same as above, but for it(STR)
                                                #       (fullName concatene suite fullName)
                                                #     - status STR: "pending|passed|failed", only define for specDone
                                                #     - failedExpectations OBJ_ARR: if status "failed", with members:
                                                #        - actual VAL
                                                #        - expected VAL2 or, if several, ARR_VAL
                                                #        - matcherName STR, e.g. "toEqual"
                                                #        - message STR, e.g. "Expected VAL to equal VAL2"
                                                #        - passed BOOL
                                                #        - stack STR, stack error message
                                                #Other REPORTER have been developed, but not available yet for Jasmine 2.0

jasmine.HtmlReporter                            #REPORTER. Look at boot.js to customize (e.g. do in a <div> instead of <body>)
jasmine.JsApiReporter                           #REPORTER, with options:
                                                #  - timer OBJ, with members:
                                                #     - start FUNC()
                                                #     - elapsed FUNC() returning number of ms
                                                #    Should use new jasmine.Timer
                                                #Seems to assign results and execution time to an OBJ, don't know where.
jasmineRequire.ConsoleReporter()                #REPORTER, with options:
                                                #  - print: FUNC([STR...]), e.g. console.log
                                                #  - timer: like JsApiReporter
                                                #  - showColors BOOL (déf: false)
                                                #  - onComplete FUNC(BOOL): BOOL is if there is any failed test
                                                #Must load console.js.
                                                #Ex: putting in beginning of spec file:
                                                #  jasmine.getEnv().addReporter( new jasmineRequire.ConsoleReporter()
                                                #    ({ print: console.log.bind( console ) }) );

JASMIN-AJAX ==>                                ##Mocks XMLHttpRequest:
                                               ##  - XHR using send() do not send.
                                               ##  - Can retrieve XHR as FAKEXHR
                                               ##  - To send XHR, call either (sync., not async.):
                                               ##     - Before XHR.send(): jasmine.Ajax.stubRequest(URL_STR).andReturn(OBJ) 
                                               ##       with members status, responseText and contentType
                                               ##     - After XHR.send(): FAKEXHR.status(OBJ), with also:
                                               ##        - OBJ has members statusText and responseHeaders
                                               ##        - can change FAKEXHR members.
jasmine.Ajax.[un]install()                     ##In before|afterEach(), sets the mocks
                                               ##Can also use jasmine.Ajax.withMock(FUNC()) in a test case to do 
                                               ##jasmine.Ajax.[un]install() automatically.
FAKEXHR                                        ##Has same members as XHR but:
                                               ##   - can use FAKEXHR.responseTimeout() to fake a timeout after 
                                               ##     jasmine.clock().tick(30000)
                                               ##   - no responseType|XML, statusText nor upload()
                                               ##   - withCredentials is password|username STR
                                               ##   - also with method STR, url STR, requestHeaders OBJ, params OBJ and data()
jasmine.Ajax.requests.first|mostRecent()       ##Gets first|last XHR as FAKEXHR
jasmine.Ajax.requests.at(UINT)                 ##Same for XHR numéro UINT
jasmine.Ajax.requests.count(UINT)              ##Returns number of requests
jasmine.Ajax.requests.filter(ARG)              ##Returns requests whose URL matches ARG, as FAKEXHR_ARR.
                                               ##ARG can be REGEXP, STR (whole URL) or FUNC(FAKEXHR) returning BOOL
jasmine.Ajax.requests.reset()                  ##Cancels all previous requests

JASMIN-JQUERY ==>                              ##JavaScript standalone file. Must include jQuery before.

expect(JQ).toBeVisible|Hidden()                ##Asserts :visible|hidden
expect(JQ).toBeSelected()                      ##Asserts :selected
expect(JQ).toBeChecked()                       ##Asserts :checked
expect(JQ).toBeDisabled()                      ##Asserts :disabled
expect(JQ).toBeFocused()                       ##
expect(JQ).toBeEmpty()                         ##Asserts :empty

expect(JQ).toHaveClass(STR)                    ##Asserts class exists
expect(JQ).toHaveAttr|Prop|Data([VAL])         ##Asserts it exists and, if VAL, it equals VAL.
expect(JQ).toHaveId(NUM)                       ##Asserts id == NUM
expect(JQ).toHaveValue(VAL)                    ##Asserts JQ.val()
expect(JQ).toHaveCss(OBJ)                      ##Asserts CSS values

expect(JQ).toExist()                           ##Asserts there is at least one element
expect(JQ).toBeInDOM()                         ##Asserts JQ is children of main DOCUMENT
expect(JQ).toHaveLength(NUM)                   ##Same for NUM elements
expect(JQ).toHave|ContainHtml(STR|ELEM|JQ)     ##Asserts JQ.html()
expect(JQ).toHave|ContainText(STR)             ##Asserts JQ.text() after trimming
expect(JQ).toContainElement(STR|ELEM|JQ)       ##Asserts contains specified element
expect(JQ).toBeMatchedBy(SELECTOR)             ##Asserts contains an element matching SELECTOR

expect(JQ).toHandle(EVENT_STR)                 ##Asserts an event handler exists
expect(JQ).toHandleWith(EVENT_STR, FUNC)       ##Same for specific FUNC (comparaison by reference)

spyOnEvent(..., EVENT_STR)                     ##Make it possible to use following methods on $(...)
                                               ##Can be reset with spyEvent.reset()
expect(JQ).toHaveBeenTriggered()               ##
expect(JQ).toHaveBeenTriggeredOn(EVENT_STR)    ##
expect(JQ).toHaveBeenTriggeredOnAndWith
(EVENT_STR, ARGS[_ARR])                        ##Also asserts event handler arguments.
expect(JQ).toHaveBeenPrevented()               ##
expect(JQ).toHaveBeenPreventedOn(EVENT_STR)    ##If event handler used event.preventDefault()
expect(JQ).toHaveBeenStopped()                 ##
expect(JQ).toHaveBeenStoppedOn(EVENT_STR)      ##Same for event.stopPropagation()

[appendL|l]oad[Style]Fixtures(FILE_STR...)     ##Appends|replaces content of a container <div id="jasmine-fixtures"> at the 
                                               ##end with HTML|CSS of 
                                               ##./spec/javascript/fixtures (or jasmine.getFixtures().fixturesPath), so it can 
                                               ##be used in $(...): typically top element will have <TAG id="ID"> so can do 
                                               ##$("#ID")
                                               ##For CSS, appends it in a <style>
                                               ##Container is cleaned between tests cases, but AJAX requests are kept as cache,
                                               ##so loadFixtures() will be fast the second time.
                                               ##When using jasmine-ajax, need to preloadFixtures(FILE_STR...) before loading
                                               ##jasmine-ajax: put into cache but does not append to DOM.
                                               ##With Chrome, must launch it with --allow-file-access-from-files
readFixtures(FILE_STR...)                      ##Same but return as STR

sandbox(OBJ)                                   ##Returns JQ with <div id="sandbox"></div> with attributes specified in OBJ
                                               ##(can override id)
