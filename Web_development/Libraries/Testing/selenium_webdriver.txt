
                        
   SELENIUM WEBDRIVER   
                        


SERVER ==>                    #  - specific to one/several browsers or for online services (e.g. SauceLabs)
                              #  - launches browser and controls it using a REST API ("Webdriver wire protocol"):
                              #     - browser must be available locally in $PATH
                              #     - communicates over HTTP with client, so can be in a different place (e.g. SauceLabs or on 
                              #       mobile)
                              #     - to run headlessly (automatic for SauceLabs and PhantomJS), use:
                              #         xvfb-run --server-args="-screen 0, WIDTHxHEIGHTx24" SERVER_COMMAND 
                              #       instead of just SERVER_COMMAND
                              #  - available:
                              #     - selenium-standalone: natively includes ChromeDriver, ghostdriver, FirefoxDriver,
                              #       OperaDriver, InternetExplorerDriver, SafariDriver
                              #        - Node module selenium-standalone installs binary start-selenium, which starts with:
                              #            selenium-standalone install
                              #            selenium-standalone start -- -role hub
                              #     - PhantomJS: phantomjs --webdriver=8080 --webdriver-selenium-grid-hub=http://127.0.0.1:4444
                              #     - ChromeDriver
                              #     - FirefoxDriver 
                              #     - OperaDriver
                              #     - InternetExplorerDriver (Windows only)
                              #     - SafariDriver
                              #     - Appium (iOS/Android native/hybrid/web app)

CLIENT ==>                    #  - a client in a specific language ("webdriver language bindings") communicates with the server
                              #  - Javascript client: selenium-webdriver (official), WebdriverJS or wd 
                              #    (maintained by SauceLabs). This doc is for wd and selenium-webdriver.

MOCHA ==>                     #To use with Mocha:
                              #  - use -t 0
                              #  - make it|before|after[Each]() return BROWSER 
                              #  - use chai-as-promised and CHAI-AS-PROMISED.transferPromiseness
                              #  - only browser.init() once, but refesh page for each test case
                              #Which means:
															#  CHAI-AS-PROMISED.transferPromiseness = WD.transferPromiseness;
															#  var browser = WD.remote(...);
															#  before(function() { return browser.init(...); });
															#  after(function() { return browser.quit(); });
															#  describe(STR, function() {
															#    beforeEach(function() { return browser.get( URL ); });
															#    it( STR, function() { return browser...should.eventually|become(...) });
															#  });


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:     DESIRED CAPABILITIES      :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CAPAB_OBJ ==>                 #Options of webdrivers drivers ("Desired Capabilities"). Possible members are:

ALL ==>                       #
browserName                   #"chrome", "firefox", "phantomjs", "opera", "safari", "internet explorer", "android", "iPhone" 
                              #"iPad"
version                       #STR
platform                      #  - selenium WebDriver: "WINDOWS", "XP", "VISTA", "MAC", "LINUX", "UNIX", "ANDROID"
                              #  - sauceLabs: "Windows NT", "Mac OS X", "Linux" (also sometimes the ones above)

'webdriver.remote.sessionId'  #SESSIONID
javascriptEnabled             #Déf: true
cssSelectorsEnabled           #Déf: true (read-only) (not present on latest iOS)
takesScreenshot               #Déf: true (read-only)

NOT OPERA, SAFARI, IOS ==>    #
handlesAlert                  #Can interact with popups (déf: true, except PhantomJS) (read-only)

NOT OPERA, IE, SAFARI ==>     #
locationContextEnabled        #(déf: true, except PhantomJS and iOS latest versions)
webStorageEnabled             #Can use *LocalStorage* (déf: true, except PhantomJS and iOS latest versions)

NOT OPERA, IE, SAFARI ==>     #
acceptSslCerts                #Accept all SSL certs (déf: true, except PhantomJS)
rotatable                     #Can rotate orientation (déf: true only for Android)
browserConnectionEnabled      #Can get|set browser internet connection (déf: true on Firefox, Android, false on others)
applicationCacheEnabled       #Can interact with application cache (true on Firefox, Android, false on others)

NOT OPERA, ANDROID, SAFARI ==>#
nativeEvents                  #Use native events instead of simulation (false on Firefox, true on others)

NOT OPERA, IE, SAFARI, 
ANDROID ==>                   #
databaseEnabled               #Can interact with IndexedDB (true on Firefox, iOS early versions, false on others)

ONLY PHANTOMJS, OPERA, IE ==> #
proxy                         #Déf PhantomJS: { proxyType: "direct" }
                              #Déf Opera: { proxyType: "UNSPECIFIED", autodetect: false }
                              #Déf IE: { http|sslProxy: "127.0.0.1:4443", proxyType: "manual" }
                              #Other members (at least for Opera): http|ftp|ssl|socks|noProxy, socksUsername|Password,
                              #proxyAutoconfigUrl

ONLY IE ==>                   #
elementScrollBehavior         #Whether to scroll to elements top "0" (déf) or bottom "1"
unexpectedAlertBehavior       #For unhandled alert: "accept", "ignore" or "dismiss" (déf)
ignoreProtectedModeSettings   #Déf: false.
initialBrowserUrl             #Déf: "http://localhost:17643/"
ignoreZoomSettings            #Don't check zoom initial level is 100%. Déf: false.
enablePersistentHover         #Continuously fire mouse events to simulate mouse hovering (Déf: true)
enableElementCacheCleanup     #Déf: true.
requireWindowFocus            #Déf: false.
browserAttachTimeout          #Connection to IE timeout. Déf: 0.
ie.forceCreateProcessApi      #Déf: false.
ie.browserCommandLineSwitches #Command line switches (ie.forceCreateProcessApi must be true) (Déf: "")
ie.ensureCleanSession         #Clears cache, cookies, history, saved form data at init. (Déf: false)
ie.usePerProcessProxy         #Déf: false

ONLY OPERA ==>
opera.binary                  #Déf: "/usr/bin/opera"
opera.launcher                #Déf: "/home/ether/.launcher/launcher-linux-amd64"
opera.runner                  #Déf: "com.opera.core.systems.runner.launcher.OperaLauncherRunner"
opera.arguments.VAR           #Déf: { pd: "/tmp/DIR", debugproxy: "127.0.0.1:12558" }
opera.product                 #Déf: "Opera Desktop"
opera.host                    #Déf: "127.0.0.1"
opera.port                    #Déf: 12558
opera.idle                    #Déf: false
opera.detach                  #Déf: false
opera.autostart               #Déf: true
opera.no_restart              #Déf: false
opera.no_quit                 #Déf: false
opera.backend                 #Déf: "software"
opera.logging.level           #Déf: "INFO"
opera.profile.base64          #Binary as Base64

ONLY CHROME ==>
takesHeapScreenshot           #True all. Only Chrome
chrome                        #{ userDataDir DIR }. Only Chrome

ONLY SAFARI ==>
secureSsl                     #True all.

ONLY IOS LATEST VERSIONS ==>  #
warnings                      #
safari                        #True

ONLY PHANTOMJS ==>
driverName                    #Déf: "ghostdriver". Only PhantomJS
driverVersion                 #Only PhantomJS




																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             WD.JS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


MAIN OBJECTS ==>              #  - WD: require("wd")
                              #  - BROWSER: a connection to the server.
                              #    Can only run a single browser session at once.
                              #    All following methods are BROWSER.*, unless specified otherwise
                              #  - WINDOWH: an id to a WINDOW for a given BROWSER
                              #  - ELEMENT: similar to ELEM|JQ, but different implementation
                              #    To get the underlying ELEM, use getAttribute(...) (notably "outerHTML" and "textContent")
                              #    When BROWER.FUNC([ELEMENT], ...):
                              #      - can also be called either as ELEMENT.FUNC(...) or as BROWSER.FUNC(ELEMENT)
                              #        (not as BROWSER.FUNC())
                              #      - if doesn't say otherwise, returns ELEMENT
                              #Version 0.3.3

METHODS RETURN ==>            #All methods "return VAL..." meaning depends on WD.remote() STR:
                              #  - "async" (déf): returns undefined and use last argument CALLBACK(ERROR, VAL...)
                              #  - "promise": 
                              #     - returns Q PROMISE with state value VAL (ARR if several VAL...), and state rejected if 
                              #       ERROR
                              #     - Can also find link to Q (version 1.0.1) at WD.Q
                              #     - To just get a PROMISE without doing anything, do BROWSER|ELEMENT.noop()
                              #  - "promiseChain" (best): same but:
                              #      - PROMISE.FUNC(VAL) shortcut for PROMISE.then(BROWSER.FUNC(VAL))
                              #      - if VAL is ELEMENT, also shortcut for PROMISE.then(ELEMENT.FUNC(...))
                              #        Can force BROWSER.FUNC() with first argument "<" or ELEMENT.FUNC() with ">"
                              #      - should use CHAI-AS-PROMISED.transferPromiseness = WD.transferPromiseness; with Mocha,
                              #        so BROWSER.should.eventually... returns BROWSER, not CHAIPROMISED
                              #Execution chain stops when a navigation step happens (e.g. clicking on link or going back in
                              #history) but not for AJAX calls (use wait*() then)

WD.remote(OBJ[, STR])		      #Returns a BROWSER. 
                              #OBJ members are same as Node.js URL.format(OBJ) 
                              #Default: http://127.0.0.1:4444/wd/hub
                              #STR: see above
WD.remote(HOSTNAME[, PORT
[, USER[, PASSWORD]]]])	      #Other syntax
WD.remote(STR[ ,STR2])		    #Uses a URL STR like in Node.js URL

status()	                    #Returns OBJ with members:
                              #  - os { arch, name, version }
                              #  - java.version
                              #  - build { revision, time, version }

init([CAPAB_OBJ])			        #Starts session (opens the browser). 
                              #Returns SESSIONID
                              #CAPAB_OBJ are asked to server, just might refuse/not implement. 
quit()		                    #Stops session (closes the browser)
detach()		                  #Detaches from session but does not close it.
attach(SESSIONID)		          #Attaches to session. Returns CAPAB_OBJ
sessions()	                  #Returns SESSION_OBJ_ARR, where SESSION_OBJ has members id SESSIONID and capabilities CAPAB_OBJ
sessionCapabilities()	        #Returns CAPAB_OBJ
getSessionId()		            #Returns SESSIONID

get(URL)		                  #Navigates to URL
[WD.]configureHttp(OBJ)		    #Some config for all BROWSER or one specific BROWSER:
                              #  - timeout (déf: 60000ms): HTTP requests timeout
                              #  - retries (déf: 3)
                              #  - retryDelay (déf: 10ms): between two retries
                              #  - baseUrl (déf: ""): of get(URL)
                              #  - proxy: as in REQUEST
back|forward()	              #History
refresh()                     #
url()		                      #Returns STR

WD.add[Element]Async|Promise  #Create BROWSER|ELEMENT.FUNC_STR(ARGS), firing FUNC(ARGS):
[Chain]Method(FUNC_STR, FUNC) #  - this is BROWSER|ELEMENT
                              #  - For Promise[Chain]:
                              #     - FUNC return VAL -> new PROMISE state value
                              #     - so can also return PROMISE2, e.g. after:
                              #         WD.addPromiseChainMethod(FUNC_STR, function(url){ return this.get(url).title(); })
                              #       BROWSER.FUNC_STR(url) is same as BROWSER.get(url).title()
                              #     - Chain should be used if using WD.remote("promiseChain")
                              #  - For Async: 
                              #     - BROWSER|ELEMENT.FUNC_STR(ARGS) -> FUNC(ARGS)
                              #       FUNC must call callback as last ARG:
                              #         - can use WD.findCallback(arguments)
WD.removeMethod(FUNC_STR,FUNC)#

setImplicitWait|AsyncScript|
PageLoadTimeout(UINT)	        #Set default timeout in ms for searching for elements, for executeAsync() or for loading a page

[safeE|e]xecute[Async]        #Execute Javascript code in the page context. Prefer safe version.
(CODE[, ARGS_ARR])            #Returns the last line executed, as JSON. When returning ELEM, return it as ELEMENT.
                              #"Async" doesn't return anything.
                              #Be careful, webdrivers don't always have all usual the DOM, e.g. no WINDOW.navigator
[safeE|e]val(CODE)		        #Same thing.

newWindow(URL[, NAME])	      #Uses WINDOW.open
                              #Should read CAPAB_OBJ.handlesAlert (read-only) to see if current driver supports handling
                              #popups (PhantomJS doesn't)
windowName()		              #Returns STR of current WINDOW
windowHandle[s]()		          #Returns WINDOWH[_ARR]
close()				                #Closes current WINDOW
window|frame(STR)		          #Changes focus to different WINDOW (WINDOW.name) or <frame>
setWindowSize(WIDTH, HEIGHT, 
WINDOWH)	                    #
getWindowSize([WINDOWH])	    #Returns { height, width } (WINDOW.outerHeight|Width)
setWindowPosition(X,Y,WINDOWH)#
getWindowPosition([WINDOWH])	#Returns { x, y } (WINDOW.screenX|Y)
maximize(WINDOWH)		          #
scroll(X,Y)		                #Does not seem to work with most drivers yet.

allCookies()		              #Returns OBJ_ARR, where OBJ members are name, value, path, domain, secure, expiry
setCookie(OBJ)                #
deleteAllCookies()            #
deleteCookie(STR)             #

takeScreenshot()		          #Returns as base64 PNG STR (needs to append "data:image/png;base64,")
                              #Should read CAPAB_OBJ.takesScreenshot (read-only) to see if current driver supports it.

BROWSER|ELEMENT.elementBy
ClassName|TagName(STR)		    #Returns ELEMENT2
BROWSER|ELEMENT.              #Returns ELEMENT2
elementByCssSelector(STR)		  #Should read CAPAB_OBJ.cssSelectorsEnabled (read-only) to see if current driver supports it.
BROWSER|ELEMENT.
elementById|Name(STR)		      #Returns ELEMENT2
BROWSER|ELEMENT.elementBy
[Partial]LinkText(STR)		    #According to children text nodes (exact or partial nodes). Returns ELEMENT2
BROWSER|ELEMENT.elementByXPath
(STR)			                    #Returns ELEMENT2

BROWSER|ELEMENT.elements*(STR)#Same as BROWSER|ELEMENT.element* but returns ELEMENT2_ARR
BROWSER.element*orNull|
ifExists(STR)		              #Same as BROWSER.element* but returns null|undefined if not found, instead of throwing exception
BROWER.hasElement*(STR)	      #Same as BROWSER.element* but returns BOOL

active()		                  #Returns currently focused ELEMENT

source()		                  #Returns root document HTML code as STR
title()		                    #Returns <title>
getTagName([ELEMENT])		      #Return HTML tag STR
getAttribute([ELEMENT, ]ATTR)	#Returns Javascript attribute value STR (can e.g. be "outerHTML")
getValue([ELEMENT])		        #Same as getAttribute("value")
text([ELEMENT])	              #Same as getAttribute("contentText")
alertText()		                #Same for current popup main element
                              #Same as above for CAPAB_OBJ.handlesAlert
textPresent(STR[, ELEMENT])	  #Returns BOOL
getSize([ELEMENT])		        #Returns { width, height } (ELEM.offsetWidth|Height)
getLocation[InView]([ELEMENT])#Returns { x, y } 
                              #Without InView: ELEM.getBoundingClientRect().left|top
                              #With InView: y is calculated after scrolling to the element.
getComputedCss([ELEMENT, ]
CSS_PROP)		                  #Returns CSS_VAL, like WINDOW.getComputedStyle(ELEM).CSS_PROP

equals([ELEMENT, ]ID)         #Returns true if same element (ID is ELEMENT2.value)

EVENTS ==>                    #PROMISE is resolved once action is done, but page might take time to take effect, so should
                              #use a wait*() after.
ELEMENT.click()               #
clickElement(ELEMENT)         #
click|buttondown|up(NUM)		  #Click on current ELEMENT, NUM is 0 left, 1 middle, 1 right
doubleC|click([ELEMENT])		  #
submit([ELEMENT])             #
type|keys([ELEMENT, ]STR)	    #STR can contain require("lib/special-keys.js") OBJ, e.g. OBJ["Tab"] ("\uE004"), OBJ["Enter"], 
                              #etc.
		                          #With keys() (not type()), ELEMENT has a default value of active()
ELEMENT.sendKeys(STR)		      #Similar
alertKeys(STR)		            #Same for current popup
                              #Should read CAPAB_OBJ.handlesAlert (read-only) to see if current driver supports it.
clear([ELEMENT])		          #Resets a TEXTAREA|INPUT value
accept|dismissAlert()		      #For popups
moveTo([ELEMENT, ]X, Y)	      #Move mouse to ELEMENT, with offset X and Y

isSelected|Enabled|
[Not]Displayed([ELEMENT])	    #Returns BOOL

setLocalStorageKey(VAR, VAL)	#
getLocalStorageKey(VAR)		    #
removeLocalStorageKey(VAR)	  #
clearLocalStorageKey()		    #Should check CAPAB_OBJ.webStorageEnabled (PhantomJS doesn't accept by default)

BROWSER|ELEMENT.sleep(NUM)		#ms
waitFor(ASSERTER,             #ASSERTER is fired every NUM2ms (def: 200) until timeout NUM (def: 1000):
[, NUM[, NUM2]])              #  - is new WD.Asserter(FUNC(BROWSER, FUNC2(ERROR, BOOL, VAL))):
                              #     - FUNC() must call FUNC2() with true when no need to wait anymore, false otherwise.
                              #       VAL is the return value when true. 
                              #     - can return PROMISE instead of using FUNC2
				                      #  - There are some available ASSERTER:
				                      #     - WD.asserters.nonEmptyText: state value is textContent
				                      #     - WD.asserters.textInclude(STR): state value is STR
				                      #     - WD.asserters.is[Not]Displayed
				                      #     - WD.asserters.jsCondition(STR[, BOOL]): use [safeE|e]val (safe if BOOL (déf: false))
waitForElement*(ARGS[, ...])	#Same as waitFor(...) but test existence of element*(ARGS) (except orNull|ifExists()) first,
                              #then executes waitFor(...), but ASSERTER is optional

log(LOGTYPE)		              #Get logs as STR_ARR. Available LOGTYPE can be obtained with logTypes() returning 
                              #["client", "driver", "server", "browser"]
on("status", FUNC(STR))       #Server-related logs
on("command",FUNC(STR, STR2,
OBJ))                         #For each Selenium command: STR is "CALL|RESPONSE", STR2 is commande, OBJ is response


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:      SELENIUM-WEBDRIVER       :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


VERSION ==>                   #Node module (2.42.0)
                              #Documentation not finished, because wd.js is better (almost same functionalities, better
                              #chaining, only compatible with Appium, but no compatible with Protactor)

MAIN OBJECTS ==>              #  - SW: require("selenium-webdriver")
                              #  - BUILDER: creates the WEBDRIVER

METHODS RETURN ==>            #All methods "return VAL..." meaning for FUNC() returns a WPROMISE (Webdriver PROMISE):
                              #  - with VAL as state value
                              #  - If several WPROMISE are ongoing, they are queued. So can't do:
                              #      WEBDRIVER.FUNC().FUNC2()
                              #    But can do:
                              #      WEBDRIVER.FUNC(); WEBDRIVER.FUNC2()
                              #    And it will be queued properly.

WPROMISE.cancel(ERROR)        #Rejects WPROMISE
WPROMISE.then(FUNC(VAL), 
FUNC2(ERROR))
WPROMISE.thenCatch
(FUNC2(ERROR))                #Same as WPROMISE.then(null, FUNC2)
WPROMISE.thenFinally(FUNC())  #
WPROMISE.isPending()          #

SW.promise.defer()            #Returns a WDEFERRED. Implements WPROMISE methods
WDEFERRED.promise             #Returns WPROMISE
WDEFERRED.fulfill|reject(VAL) #
WDEFERRED.removeAll()         #Removes all then() FUNC, FUNC2, etc.

SW.promise.all(WPROMISE_ARR)  #Similar to Q

SW.promise.createFlow(FUNC()) #Creates a CONTROLFLOW, i.e. a chain of PROMISE.
                              #Returns a PROMISE with FUNC() return value as state value.
SW.promise.controlFlow()      #Returns CONTROLFLOW
CONTROLFLOW.on
("uncaugthException", 
FUNC(ERROR))                  #

new require                   #Returns a SERVER, which allows to start Selenium server from Javascript.
("selenium-webdriver/remote").#FILE is the server *.jar file.
SeleniumDriver(FILE, OBJ)     #  - port UINT
                              #  - [jwmA|a]rgs STR_ARR
                              #  - env OBJ
                              #  - stdio: same as Node.js spawn() (déf: "ignore")
SERVER.start()                #Returns server URL
SERVER.stop()                 #
SERVER.kill()                 #As opposed to stop() (which integrates into current PROMISE flow), it kills immediately.
SERVER.address()              #Returns STR
SERVER.isRunning()            #

new SW.Builder()              #Returns a BUILDER (doesn't use PROMISE)
BUILDER.build()               #Returns a WEBDRIVER
BUILDER.withCapabilities
(CAPABILITIES)                #Adds CAPAB_OBJ
BUILDER.getCapabilities()     #
BUILDER.usingServer(URL)      #
BUILDER.getServerUrl()        #
BUILDER.usingSession(SESIONID)#Does not seem to be implemented
BUILDER.getSession()          #

new SW.Capabilities(CAPAB_OBJ)#Returns a CAPABILITIES
CAPABILITIES.get(VAR)         #
CAPABILITIES.set(VAR,VAL)     #
CAPABILITIES.has(VAR)         #
CAPABILITIES.toJSON()         #Returns CAPAB_OBJ
CAPABILITIES.merge(CAPABILIS2)#
SW.Capabilities.android|chrome
|firefox|htmlunit|ie|iphone|
ipad|opera|phantomjs|safari() #Returns CAPABILITIES fulfilling the basic params of those servers.

WEBDRIVER.get(URL)            #
WEBDRIVER.getTitle()          #Returns STR
WEBDRIVER.quit()              #
