
                 
   VERSIONATOR   
                 


VERSIONATOR.create(VERSION_ID)#Returns VERSION. VERSION should be global and recreated at each version bump.
                              #VERSION_ID can be read from package.json
VERSION.middleware            #Express MIDWR (0.5.0) that strips (if present) "/VERSION_ID/" from REQ.url
                              #Should be first MIDWR
VERSION.versionPath(URL[_ARR])#Adds "/VERSION_ID/" as last DIR of URL[_ARR]
                              #URL should not be absolute.

IDEA ==>                      #Goal is to timestamp static assets (unconditional caching):
                              #  - versionPath() needs to be available in RES.locals, and wrap static assets URL from 
                              #    RES.render()
                              #  - client will get URL/VERSION_1/FILE.css, which server responds with URL/FILE.css since it
                              #    is the current VERSION_ID. FILE.css is then used only from browser cache.
                              #  - when new VERSION (must reassign VERSION.middleware|versionPath), clients will get a new 
                              #    URL/VERSION_2/FILE.css which will fetch the new version of FILE instead of using the cache.

VERSIONATOR.createMapFromPath #MAPPEDVERSION is same as VERSION but
(DIR0, FUNC(ERROR, FILEMAP))  #  - uses "/FILE_MD5HASH/" for each file instead of "/VERSION_ID/"
VERSIONATOR.createMapped      #     - as such, changing one file doesn't require the client redownloading everything
(FILEMAP)->MAPPEDVERSION      #     - URL of versionPath() must be relative (starting with "/"), and relative to DIR0
MAPPEDVERSION.middleware      #  - can recreate MAPPEDVERSION on file change event (using another tool like Gaze, Gulp, etc.)     
MAPPEDVERSION.versionPath     #  - can make recreating MAPPEDVERSION faster (don't recalculate hashes of all files) by:    
(URL[_ARR])                   #     - VERSIONATOR.createMapFromPath(DIR, { fileList: URL_ARR }, FUNC(ERROR, FILEMAP))
                              #     - (current) MAPPEDVERSION.modifyMap(FILEMAP)
                              #     - recreate MAPPEDVERSION.middleware|versionPath
