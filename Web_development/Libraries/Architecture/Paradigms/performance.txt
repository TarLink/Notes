
                 
   PERFORMANCE   
                 



COMPLEXITY TRADEOFF ==>           #Optimizing performance usually decrease maintainability
                                  #Ex: loop unrolling

SPACE-TIME TRADEOFF ==> 					#Also called "time-memory tradeoff":
                                  #  - efficiency can often be reduced by using memory, e.g. precalculation
                                  #  - memory can often be reduced by decreasing efficiency, e.g. compression


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          PARALLELISM          :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


CONCURRING PROGRAMMING ==>        #Running several pieces of code at once
                                  #Good for performance but creates synchronization problems
                                  #See concurrency doc

ARRAY PROGRAMMING ==>             #See parallelism doc


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           LESS DATA           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


FLYWEIGHT ==>                     #If several objects share information, sharing that information among them, instead of instantiating in each object.
                                  #Pros: more efficient. Cons: less granularity
                                  #Information can be shared as: 
                                  #  - references stored|shared in each object
                                  #  - function arguments


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         PRECALCULATION        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


OBJECT POOL ==>                   #Efficient initialization (when it is costly):
                                  #  - pool creates objects in advance
                                  #  - new objects are taken from the pool
                                  #  - destroyed objects are returned to the pool for reuse
                                  #There can be a pool size limit

MEMORY POOL ==>                   #Like object pool but for memory allocation

PRECALCULATION ==>                #Precalculating computation-intense, e.g. graphics (alpha, shadows)

LOOKUP TABLE ==>                  #Precalculating a search algorithm, so it is constant time
