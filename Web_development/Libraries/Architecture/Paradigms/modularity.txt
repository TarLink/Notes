
                
   MODULARITY   
                



MODULARITY ==>                    #Dividing into different modules 
                                  #Aims at orthogonality/separation of concern:
                                  #  - between modules: granular, low coupling
                                  #  - inside each module: high cohesion, single responsibility
                                  #Pros:
                                  #  - lower complexity on smaller part:
                                  #     - easier to maintain
                                  #     - easier to scale
                                  #     - easier to extend
                                  #  - improves code reuse
                                  #Cons:
                                  #  - higher overall complexity
                                  #  - less efficient

MODULAR PROGRAMMING ==>           #Features of a language allowing modularity, e.g. Python packages


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           COUPLING            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


GRANULARITY ==>                   #Dividing code into different pieces (modules|packages|components|units):
                                  #Can be: blocks, functions, namespaces, files, directories
                                  #Opposite is monolithic design.

LOOSE|LOW COUPLING ==>            #Also called "law of Demeter", "principle of least knowledge"
                                  #Minimizing knowledge|contract between modules
                                  #I.e. inheritance < composition < aggregation < association


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           COHESION            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


COHESION ==>                      #How related are the parts of a module
                                  #Cohesion reason is: technical < time < data < purpose, i.e. (from lowest to highest):
                                  #  - coincidental: none
                                  #  - logical: same technical nature (e.g. controllers, views)
                                  #  - temporal: happen together at a given time (e.g. init)
                                  #  - procedural: happen always after another
                                  #  - communicational/informational: same data
                                  #  - sequential: procedural + communicational, i.e. pipeline of input/output
                                  #  - functional: same purpose

SINGLE RESPONSIBILITY ==>         #A module must have a single responsibility (i.e. "reason to change")
                                  #"S" of SOLID principles

OBJECT-ORIENTED PROGRAMMING ==>   #See types doc
