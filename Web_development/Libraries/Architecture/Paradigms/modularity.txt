
                
   MODULARITY   
                



MODULARITY ==>                    #Divide into different modules:
                                  #  - granularity: smaller modules
                                  #  - orthogonality / separation of concerns: independant modules
                                  #Pros:
                                  #  - lower complexity on smaller part:
                                  #     - easier to maintain
                                  #     - easier to scale
                                  #  - improves code reuse
                                  #Cons:
                                  #  - higher overall complexity
                                  #  - less efficient

MODULAR PROGRAMMING ==>           #Dividing code into different loosely coupled pieces (modules|packages|components|units):
                                  #  - separate object|functions in separate files|folders
                                  #  - namespacing
                                  #  - encapsulating, abstracting implementation
                                  #Opposite is monolithic design.

LOOSE COOPLING ==>                #Also called "law of Demeter"
                                  #Minimizing knowledge between modules

SINGLE RESPONSIBILITY ==>         #A module|class must have a single responsibility (i.e. "reason to change")
                                  #"S" of SOLID principles

OBJECT-ORIENTED PROGRAMMING ==>   #See OOP doc
