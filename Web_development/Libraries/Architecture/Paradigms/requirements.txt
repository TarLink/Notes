
                  
   REQUIREMENTS   
                  


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             LIST              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Can be:
  - functional (design): what software does
     - execution needs:
        - quality
        - quantity|number (i.e. flexibility)
        - pertinence (i.e. respond precisely to the requirement)
        - cohesion (with rest of system)
  - non-functional, quality attributes (architecture): how software does it
     - execution qualities: runtime, e.g. UX
     - evolution qualities: development-time, e.g. maintainability

Can be:
  - product requirement, i.e. what to build
  - process requirement, i.e. how to build, e.g. cost, tools used, etc.

When categorizing: make it orthogonal, i.e. one can change without changing others


PRODUCT REQUIREMENTS
UX
  (accessibility)
  (usability)
    (ease of use)
    (learnability)
  (design)
  (performance)
    (speed): latency vs throughput
    (efficiency): resource consumption
Flexibility
  (interactivity): richness of input
  (adaptability): different contexts
  (modifiability/customizability): new features added by user
  (evolvability): new features added over time (with no developer time)
Robustness
  (stability)
    (quality): preventing fault
      (testability)
      (configuration management)
    (security): preventing malign fault
    (availability): preventing total fault
      (resilience)
    (reliability): preventing frequent fault
    (compatibility): preventing fault, over versions
    (durability): preventing fault, in time
  (damage control?)
    (recoverability): minimizing fault's damage
    (safety): minimizing fault's damage
    (fault tolerance): minimizing fault's damage
  (problem visibility?)
    (reporting): alerting for fault
    (debuggability): finding fault
Maintainability-related
  (maintainability): ease to keep on offering same features, and fix bugs
  (extensibility): ease to offer new features
  (scalability): ease to increase|decrease demand
Operability
  (deployability/installability)
  (seamlessness/integratibility)
  (administratibility)
  (interoperability/portability)
  (interchangeability / switching cost)
  (supportability)

PROCESS REQUIREMENTS
Social impact
  (legality)
    (compliance)
    (licensing)
  (privacy)
  (environmental|human sustainability)
  (transparency/accountability/inspectability/traceability)
Marketability
  (certification)
  (cost)

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          DEFINITION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


QUALITIES ==>                     #Should be INVEST:
																	#  - Independent: 
                                  #     - from other user stories
                                  #     - if some are tight together, put them as one user story
																	#  - Negotiable: 
                                  #     - can always be changed until start of coding
																	#  - Valuable: 
                                  #     - respond to stakeholders needs
																	#     - imply all stakeholders, i.e. people: using, misusing (enemies), regulating
																	#  - Estimable: 
                                  #     - put resources needed on it (time, price, material, etc.)
																	#  - Small: 
																	#     - not more than a few person-days
																	#     - when specifying, should cover the requirement, not less nor more
																	#  - Testable: 
																	#     - tested by one or several "acceptance tests"
																	#     - documented, traceable
																	#I.e.: valuable, granular (small, independent), easy to plan (can be estimated, tested, changed)

"WHAT TO DO", NOT "HOW TO DO" ==> #  - "what to do" (requirements) should be specified by stakeholders, not developers
																	#  - "how to do" (architecture, design) should be specified by developers, not stakeholders

HIGH-LEVEL FIRST ==>              #In order:
                                  #  - high-level need:
																	#     - guess actual need, i.e. why do you need to do this?
																	#     - first formulated "need" is usually not the real need but a possible answer to it (formulated by stakeholders)
																	#  - lower-level needs (summaries): to fulfill high-level need
																	#  - proposals


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           INCEPTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


INTERVIEWS ==>                    #  - personal
																	#  - in teams: JRD (Joint Requirements Development) sessions


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         FORMALIZATION         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


TYPES ==>                         #From most generic to most explicit:
																	#  - user story:
																	#     - functionalities in natural language, i.e. "In order to BENEFIT as a ROLE, I want FUNCTION"
																	#     - "epic story": group of user stories with same theme
																	#  - ATDD (Acceptance test-driven development):
																	#     - test of requirement in natural language, i.e. several scenarios: title, given/and (precondition), when (action), then (result)
																	#  - use case: 
																	#     - all interactions|actors in formal diagram or prose


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           PROPOSALS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PROPOSALS ==>                     #Negotiable solution to set of requirements: prototype or specification
                                  #Should only be from stakeholder perspective (including specification)

PROTOTYPE ==>                     #Proposal using fast implementation:
																	#  - focus is on stakeholder feedback
																	#  - can enter a review/enhance loop with stakeholder
																	#Completedness:
																	#  - structure only:
																	#     - partial ("sketch")
																	#     - complete ("wireframe"/"blueprint")
																	#  - visual design too ("mockup")
																	#     - low-fidelity
																	#        - should provide visual hints of incomplete visual design, e.g. black&white
																	#     - high-fidelity
																	#  - interaction too (with|without visual design):
																	#     - faked ("pretotype"), i.e. meant to be fast
																	#     - close to real one ("prototype")
																	#Scope:
																	#  - horizontal (the whole thing):
																	#     - broader validation
																	#  - vertical (a specific function): 
																	#     - more precise validation
																	#     - should specify which requirements are addressed
																	#Evolution:
																	#  - close-ended|throwaway|rapid: 
																	#     - not included in final product
																	#     - importance is speed of creation
																	#  - evolutionary|breadboard: 
																	#     - first step of final product
																	#     - importance is possibility to build on it.

SPECIFICATION ==>                 #Proposal in details and in prose, but from stakeholder perspective
																	#     - focus is on ease to implement: solution detailed enough to be used as a test of requirements
