
                  
   REQUIREMENTS   
                  



maintainability vs quality vs (UX+flexibility)
  - maintainability vs UX+flexibility+manageability:
     - on one hand: clean design (abstraction+modularity) -> less flexiblity (information hiding), less efficiency (cost of abstraction|modularity), but more maintainability
     - on the other hand: integration|optimization -> more complexity, but higher efficiency
  - quality vs UX+flexibility:
     - on one hand: quirky
     - on the other hand: boring
  - maintainability vs quality:
     - on one hand: unstable
     - on the other hand: complex piece of art
UX vs flexibility:
  - focused experience vs rich experience
Performance:
  - speed vs memory


Complexity:
  - multiple contexts inside same logic (incoherence)
     - horizontal
     -> put complexity in-between
     -> more maintainability (more isolation) inside each part, lesser maintainability as a whole
         - going too far / too much granularity: functional decomposition
           Lesser maintainability even inside each part, because must use several modules at once for each task|problem
     -> modularity
  - multiple contexts when externally using same logic
     - i.e. harder to modify what's using the logic that the logic itself
     - e.g.:
        - logic consumer is different person that producer (libraries)
        - different modules using same module with different arguments, contexts, environments, etc.
     - vertical
     -> abstract away shared behavior, i.e. put complexity and flexibility downstream
     -> more maintainability upstream, lesser maintainabillity downstream
         - going too far: abstraction inversion (too complex downstream, not flexibile enough upstream)
     -> abstraction

object oriented

SUMMARY ==>                       #Functional vs non-functional (execution vs evolution, product vs process)
                                  #Of non-functional requirements:
                                  #  - UX: 
                                  #     - usability (ease to use, learnability), a11y (i18n), design, performance
                                  #     - manageability: discoverability, deployability (integrability, interoperability), administrability (upgradability), supportability, interchangeability
                                  #  - flexibility: featureful, interactivity, evolvability, configurability, adaptability, modifiability
                                  #  - quality:
                                  #     - stability: testability, security, compatibility, durability, availability, reliability
                                  #     - vulnerability: recoverability, risk, fault tolerance, correctability (debuggability)
                                  #     - monitoring: auditability, reporting
                                  #  - maintainability: operability (transferability), extensibility (portability, reusability), scalability
                                  #  - social impact: privacy, sustainability, transparency
                                  #  - marketability: certification, cost, legality
                                  #Definition: INVEST (Independent, Negotiable, Valuable, Estimable, Small, Testable), "what to do" not "how to do", high-level first
                                  #Stages: 
                                  #  - inception 
                                  #  - formalization: user story, acceptance test, use case
                                  #  - proposals: 
                                  #     - prototype: sketch/wireframe/mockup/pretotype/prototype, horizontal/vertical, rapid/evolutionary
                                  #     - specification



																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             LIST              :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


TYPES ==>                         #Types:
                                  #  - functional (design): what software does
																	#     - implementation needs:
																	#        - quality: UX, robustness
																	#        - quantity|number: flexibility
																	#        - pertinence: respond precisely to the requirement
																	#        - cohesion: with rest of system
																	#  - non-functional, quality attributes (architecture): how software does it
                                  #     - experienced:
																	#        - execution qualities: runtime, e.g. UX, robustness
																	#        - evolution qualities: development-time, e.g. maintainability
                                  #     - can be:
																	#        - product requirement, i.e. what to build, e.g. UX, flexbility, robustness, maintainability, manageability
																	#        - process requirement, i.e. how to build, e.g. social impact, marketability

USER EXPERIENCE (UX) ==>          #Categories:
																	#  - usability: can achieve goal efficiently, i.e. with no obstacles
																	#     - ease of use
																	#     - learnability
																	#  - accessibility: how many different ways to use
																	#     - internationalizability
																	#  - design
																	#  - performance: perceived performance
																	#     - speed: latency vs throughput
																	#     - efficiency: resource consumption
                                  #  - manageability: ease to manage by users. Anything but "using", i.e. any action not related to functionality, i.e. ease to:
																	#     - discoverability: find|discover
																	#     - deployability|installability: install
																	#        - seamlessness|integratibility: install in existing platform
																	#        - interoperability: install in different platforms
																	#     - administrability
																	#        - upgradability: upgrade
																	#     - supportability|serviceability: technical support
																	#     - interchangeability: uninstall, i.e. switching cost

FLEXIBILITY ==>                   #Behavior changes with different conditions, i.e. according to:
                                  #  - featureful: application state (i.e. lot of functional features)
																	#  - interactivity: input
																	#  - evolvability: after each interaction (e.g. AI)
																	#  - configurability: expected context
																	#  - adaptability: unexpected context
																	#  - modifiability|customizability: user additions

QUALITY ==>                       #Preventing faulty execution:
																	#  - stability|robustness:
																	#     - testability
																	#     - security: caused by malice
																	#     - compatibility: caused by implementation changes
																	#     - durability: caused by time
																	#     - availability: total fault
																	#     - reliability: frequent fault
																	#  - vulnerability
																	#     - recoverability: long-term damage (i.e. part cannot be fixed)
																	#     - risk: fault impact (vertical)
																	#     - fault tolerance: fault extent|scope (horizontal)
																	#     - correctability: time|ease to fix
																	#        - debuggability
																	#  - monitoring:
																	#     - auditability: how much is logged|visible
																	#     - reporting: alerting for faults

MAINTAINABILITY ==>               #Ease to manage by developers (i.e. complexity), i.e. ease to:
																	#  - operability: keep on offering same features
																	#     - transferability: operability for new developers
																	#  - extensibility: offer new features
																	#     - portability: support new environments
                                  #     - reusability
																	#  - scalability: increase|decrease demand

SOCIAL IMPACT ==>                 #Categories:
																	#  - privacy
																	#  - environmental|human sustainability
																	#  - transparency|accountability|inspectability|traceability

MARKETABILITY ==>                 #Categories:
																	#  - certification
																	#  - cost
																	#  - legality
																	#     - compliance
																	#     - licensing


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          DEFINITION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


QUALITIES ==>                     #Should be INVEST:
																	#  - Independent: 
                                  #     - from other user stories
                                  #     - if some are tight together, put them as one user story
																	#  - Negotiable: 
                                  #     - can always be changed until start of coding
																	#  - Valuable: 
                                  #     - respond to stakeholders needs
																	#     - imply all stakeholders, i.e. people: using, misusing (enemies), regulating
																	#  - Estimable: 
                                  #     - put resources needed on it (time, price, material, etc.)
																	#  - Small: 
																	#     - not more than a few person-days
																	#     - when specifying, should cover the requirement, not less nor more
																	#  - Testable: 
																	#     - tested by one or several "acceptance tests"
																	#     - documented, traceable
																	#I.e.: valuable, granular (small, independent), easy to plan (can be estimated, tested, changed)

"WHAT TO DO", NOT "HOW TO DO" ==> #  - "what to do" (requirements) should be specified by stakeholders, not developers
																	#  - "how to do" (architecture, design) should be specified by developers, not stakeholders

HIGH-LEVEL FIRST ==>              #In order:
                                  #  - high-level need:
																	#     - guess actual need, i.e. why do you need to do this?
																	#     - first formulated "need" is usually not the real need but a possible answer to it (formulated by stakeholders)
																	#  - lower-level needs (summaries): to fulfill high-level need
																	#  - proposals


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           INCEPTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


INTERVIEWS ==>                    #  - personal
																	#  - in teams: JRD (Joint Requirements Development) sessions


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         FORMALIZATION         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


TYPES ==>                         #From most generic to most explicit:
																	#  - user story:
																	#     - functionalities in natural language, i.e. "In order to BENEFIT as a ROLE, I want FUNCTION"
																	#     - "epic story": group of user stories with same theme
																	#  - acceptance test:
																	#     - test of requirement in natural language, i.e. several scenarios: title, given/and (precondition), when (action), then (result)
                                  #     - used in ATDD (Acceptance test-driven development)
																	#  - use case: 
																	#     - all interactions|actors in formal diagram or prose


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:           PROPOSALS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


PROPOSALS ==>                     #Negotiable solution to set of requirements: prototype or specification
                                  #Should only be from stakeholder perspective (including specification)

PROTOTYPE ==>                     #Proposal using fast implementation:
																	#  - focus is on stakeholder feedback
																	#  - can enter a review/enhance loop with stakeholder
																	#Completedness:
																	#  - structure only:
																	#     - partial ("sketch")
																	#     - complete ("wireframe"/"blueprint")
																	#  - visual design too ("mockup")
																	#     - low-fidelity
																	#        - should provide visual hints of incomplete visual design, e.g. black&white
																	#     - high-fidelity
																	#  - interaction too (with|without visual design):
																	#     - faked ("pretotype"), i.e. meant to be fast
																	#     - close to real one ("prototype")
																	#Scope:
																	#  - horizontal (the whole thing):
																	#     - broader validation
																	#  - vertical (a specific function): 
																	#     - more precise validation
																	#     - should specify which requirements are addressed
																	#Evolution:
																	#  - close-ended|throwaway|rapid: 
																	#     - not included in final product
																	#     - importance is speed of creation
																	#  - evolutionary|breadboard: 
																	#     - first step of final product
																	#     - importance is possibility to build on it.

SPECIFICATION ==>                 #Proposal in details and in prose, but from stakeholder perspective
																	#  - focus is on ease to implement: solution detailed enough to be used as a test of requirements
