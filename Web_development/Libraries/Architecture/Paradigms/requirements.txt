
                  
   REQUIREMENTS   
                  


Requirements:
  - functional (design): what software does
  - non-functional, quality attributes (architecture): how software does it
     - execution qualities: runtime
     - evolution qualities: development-time

EXECUTION QUALITIES
Performance
  (speed): latency, throughput
  (efficiency): resource consumption
Flexibility
  (interactivity): different kind of inputs
  (adaptability): different contexts
  (modifiability/customizability): new features added by user
  (evolvability): new features added over time (with no developer time)
Usability-related
  (accessibility)
  (easiness/learnability)
  (usability)
  (design)
Security
Legality
  (compliance)
  (licensing)
Marketability
  (certification)
Cost/price
Environmental|human sustainability
Privacy
Transparency/accountability/inspectability/traceability

MIX EXECUTION/EVOLUTION QUALITIES
Robustness/stability
  (quality): preventing fault
    (testability)
    (configuration management)
  (availability): preventing total fault
    (resilience)
  (reliability): preventing frequent fault
  (compatibility): preventing fault, over versions
  (durability): preventing fault, in time
  (recoverability): minimizing fault's damage
    (backups)
  (safety): minimizing fault's damage
  (fault tolerance): minimizing fault's damage
  (reporting): alerting for fault
  (debuggability): finding fault

EVOLUTION QUALITIES
Operability
  (deployability/installability)
  (seamlessness/integratibility)
  (administratibility)
  (interoperability/portability)
  (interchangeability / switching cost)
  (supportability)
Maintainability-related
  (maintainability): ease to keep on offering same features, and fix bugs
  (extensibility): ease to offer new features
    (abstraction)
      (functional programming)
    (modularity)
      (object oriented)
      (reusability)
      (orthogonality)
  (scalability): ease to increase|decrease demand
