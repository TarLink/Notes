
                  
   ANTIPATTERNS   
                  


ABSTRACTION_INVERSION   #Replacing low-level interface with higher-level one:
==>                     #  - where higher-level might not always be wanted (too featureful/complex/slow)
                        #  - but without giving possibility/incentives to give the lower-level one.
                        #This may lead to:
                        #  - interface consumers to reimplement the lower-level interface themselves
                        #  - increased complexity of simple interfaces
                        #Ex:
                        #  - reimplementing console.log() with complex solution, where people might want to fire original console.log()
                        #  - C++ functors (use class to reimplement function comportement)

THE BLOB / THE GOD      #Piece of code too big or that do too many different things.
CLASS / WINNEBAGO ==>   #Should be broken down into smaller pieces

LAVA FLOW / DEAD CODE   #Makes understanding code harder, and waste memory.
==>                     #Should be cleaned up, or better not put there in the first place:
                        #  - do not implement things that "might one day" be used

FUNCTIONAL DECOMPOSITION#Inverse of God class: 
==>                     #  - not using classes to gather logic of same concern.
                        #  - instead using many mini-classes, often with only one public
                        #    member (a method)
                        #Makes OOP actually procedural.

SPAGHETTI CODE ==>      #Complicated data flow:
                        #  - physical-wise: in many files
                        #  - logical-wise: go back and forth in same functions
