
           
   TYPES   
           



BY LANGUAGE ==>                   #  +-----------------------------+------------+----------+----------+-------------+
																	#  |           LANGAGE           |  CHECKING  | EXPLICIT |  SAFETY  | DEFINITION  |                                             
																	#  +-----------------------------+------------+----------+----------+-------------+
																	#  |            ASM x86          |    none    |  strong  |  unsafe  |  structural |
																	#  |             PHP             |  dynamic   |   weak   |   safe   |   none      |
																	#  |           JavaScript        |  dynamic   |   weak   |   safe   |  structural |
																	#  |            Python           |  dynamic   |  strong  |   safe   |  structural |
																	#  |             Ruby            |  dynamic   |  strong  |   safe   |  structural |
																	#  |             Perl            |  dynamic   |   weak   |   safe   |  nominative |
																	#  |              C              |   static   |   weak   |  unsafe  |  nominative |
																	#  |             BASIC           |   static   |   weak   |   safe   |  nominative |
																	#  |             C++             |   static   |  strong  |  unsafe  |  nominative |
																	#  |              C#             |   static   |  strong  |  middle  |  nominative |
																	#  |             Java            |   static   |  strong  |   safe   |  nominative |
																	#  |            FORTRAN          |   static   |  strong  |   safe   |  nominative |
																	#  |            Pascal           |   static   |  strong  |   safe   |  nominative |
																	#  +-----------------------------+------------+----------+----------+-------------+


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          DEFINITION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


TYPE DEFINITION ==>               #A type is a name associated with a structure.
                                  #Type identity can depend on:
                                  #  - the structure (structural), i.e. two names pointing to same structure are same type
                                  #  - the name (nominative), i.e. two names pointing to same structure are different types

TYPE INFERENCE VS MANIFEST TYPING 
  ==>                             #Whether type must be explicit during variable definition

WEAKLY VS STRONGLY TYPED ==>      #Whether type must be explicit during typecasting


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            SAFETY             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


TYPE SAFETY ==>                   #Robustness of a typing system. Includes type checking, strongly typed, memory safery, type punning, etc.

TYPE CHECKING ==>                 #Type checking (type conformity between argument and parameter) can be done:
                                  #  - compile-time ("static")
                        					#     - more robust
                        					#     - more performant: not done runtime, and more optimizations
                        					#     - usually compiled languages
                                  #  - runtime ("dynamic")
                        					#     - more flexible (can create types runtime, simpler metaprogramming)
                        					#     - no compile-time required
                        					#     - usually scripted languages

TYPE PUNNING ==>        					#Low-level typecasting.
                                  #E.g.:
                                  #  - retrieving sign bit of a float
                                  #  - C union typecasting, depending on machine-level byte-wise disposition

MEMORY SAFETY ==>       					#Checking for problems like array overflow or wrong pointer dereferencing


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          RESOLUTION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NAME RESOLUTION ==>               #Associating identifier with a value
                                  #Can be according to (in order):
                                  #  - namespaces
                                  #  - scope (name binding): compile-time (static|early) or runtime (dynamic|late|virtual)
                                  #  - polymorphism (dispatch): compile-time (static) or runtime (dynamic)
                                  #Tradeoff between robust|performant and flexibility

SCOPE ==>                         #Scope: environment (set of variables) available in a given block
                                  #Depends on which context (current code position) is used:
                                  #  - static|lexical scoping: 
                                  #     - uses lexical context (position in source code)
                                  #     - compile-time
                                  #     - e.g. in which block a function was defined
                                  #     - more modular (e.g. easier to isolate scopes)
                                  #  - dynamic scoping: 
                                  #     - uses execution|runtime|calling context (position in call stack)
                                  #     - run-time
                                  #     - e.g. from which block a function was fired
                                  #     - more flexible
                                  #Level (what "blocks" means): 
                                  #  - expression, block, function, file, module, global
                                  #Parent evironment can be inherited: 
                                  #  - by value or by reference
                                  #Masking|shadowing:
                                  #  - when current scope override some variables from parent


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:        OBJECT-ORIENTED        :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


OBJECT-ORIENTED PROGRAMMING ==>   #Using:
                                  #  - objects
                                  #  - subtyping (inheritance)

OBJECT ==>                        #Complex type combining data and methods of same concern:
                                  #  - goal is modularity
                                  #Type definition can be:
                                  #  - class-based: separate definition and instances
                                  #  - prototype-based: only instances
