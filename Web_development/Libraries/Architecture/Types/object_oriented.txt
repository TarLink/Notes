
                     
   OBJECT_ORIENTED   
                     



OBJECT ==>                        #Complex type combining data and methods of same concern
                                  #Provides:
                                  #  - modularity: cohesion, namespacing
                                  #  - abstraction: encapsulation, i.e. exposing a limited set of an object
                                  #Type definition can be:
                                  #  - class-based: separate definition and instances
                                  #  - prototype-based: only instances

METHODS ==>                       #Functions of an object
                                  #Can use "this", first implicit argument for convenience

RELATIONSHIPS ==>                 #Relationship between objects, from more to less coupled:
                                  #  - inheritance: "is a", i.e. at least similar as parent
                                  #  - coercion: "is like a"
                                  #  - composition: "owns a":
                                  #     - exclusivity: only one owner
                                  #     - ownership: destroyed when owner is
                                  #     - containment|container: owning several objects of similar|same type
                                  #  - aggregation: "has a", i.e. exclusivity but no ownership
                                  #  - association: "uses a", i.e. no exclusivity nor ownership
                                  #Prefer looser relationships, as it provides modularity. 
                                  #E.g. "composition over inheritance": only inheritance if behavorial subtyping, i.e. child is conceptually a subset:
                                  #  - only adds to its parent: subtitutable (see below), does not encapsulate parent's interface
                                  #  - same domain
                                  #Recursion: referring to itself, directly or indirectly

LISKOV SUBSTITUTION PRINCIPLE ==> #Also called LSP, substitutability, "inheritance semantics":
                                  #A parent should be substitutable by its child, i.e. the child:
                                  #  - does not add preconditions, exceptions, time complexity
                                  #  - does not remove postconditions, side effects
                                  #  - keep invariants, side effects
                                  #As such children should tend towards looser input, stricter output
                                  #When a parent takes as argument and returns a polymorphic TYPE, the child:
                                  #  - must take a contravariant TYPE as argument, i.e. TYPE or a parent of it, so it only removes preconditions
                                  #  - must return a covariant TYPE, i.e. TYPE or a child of it, so it only adds postconditions
                                  #"L" of SOLID principles
