
                 
   INHERITANCE   
                 

superclass              
base class
parent class            #Classe parente
subclass
derived class
child class             #Classe enfante

PROBLEME DE             #  - Le multiple héritage est complexe, voire
L'INHERITANCE ==>       #    impossible si l'on veut faire hériter de deux 
                        #    superclasses "soeurs" (définissant plusieurs mêmes
                        #    méthodes et/ou data), par exemple un Individu
                        #    héritant de deux jobs Plombier et Facteur, ayant
                        #    chacun une CLASSDT Salaire
                        #  - la hierarchie est statique et ne peut être
                        #    modifiée en runtime

COMPOSITION ==>         #Alternative à l'inhéritance : avoir des classes 
                        #(souvent pointeurs) contenues dans d'autres classes.
                        #Permet de résoudre les problèmes ci-dessus :
                        #  - avec des pointeurs de classe, peut donc modifier
                        #    la hierarchie
                        #  - résout les problèmes d'héritage multiples
                        #Les arrays, containers, linked lists, trees, etc.
                        #sont des compositions.
                        #Ne pas invoquer les CLASSFK des classes contenues
                        #directement via :
                        #  - CLASS1_VAR.CLASS2.VAR.CLASS2FK()
                        #Mais via une CLASSFK dans la classe englobante :
                        #  - CLASS1_VAR.CLASS1FK()
                        #invoquant elle-même : 
                        #  - [this->]CLASS2_VAR.CLASS2FK()
                        #("law of Demeter")

DIFFERENCE COMPOSITON   #Une composition est une classe qui crée et détruit 
ET AGREGATION ==>       #tous ses membres avec elle. 
                        #Une agrégation non.
                        #Ainsi, une composition contient des VAR, ou des ADR 
                        #dont elle alloue/enlève de la mémoire dynamique 
                        #automatiquement lors de sa construction/destruction. 
                        #Une agrégation contient quant à elle des pointeurs ou 
                        #des références vers des CLASSDT qu'elle n'alloue/
                        #enlève pas automatiquement à sa création/destruction : 
                        #ainsi, ils sont créés/détruits indépendament de la 
                        #création/destruction de la classe. Elles sont 
                        #potentiellement plus dangereux, et moins POO.

NOMINAL VS STRUCTURAL   #Une classe est enfante d'une autre si :
SUBTYPING ==>           #  - elle est déclarée nominalement comme telle (ex : 
                        #    C++ via ": [public] CLASS") (nominal subtyping)
                        #  - elle a une structure compatible avec elle, et peut
                        #    être son enfant (structural subtyping) (templates
                        #    sont proches de cette idée)


LISKOV SUBSTITUTION PRINCIPLE ==> #Also called LSP, substitutability
                                  #A parent should be substitutable by its child, i.e. the child:
                                  #  - does not add preconditions, exceptions, time complexity
                                  #  - does not remove postconditions, side effects
                                  #  - keep invariants, side effects
                                  #As such children should tend towards looser input, stricter output
                                  #When a parent takes as argument and returns a polymorphic TYPE, the child:
                                  #  - must take a contravariant TYPE as argument, i.e. TYPE or a parent of it, so it only removes preconditions
                                  #  - must return a covariant TYPE, i.e. TYPE or a child of it, so it only adds postconditions
                                  #"L" of SOLID principles
