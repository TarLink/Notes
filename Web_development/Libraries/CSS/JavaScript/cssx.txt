
          
   CSSX   
          


VERSION ==>                       #5.2.0
                                  #Needs DOM (including fake one)

CSSX(['ID'])->SHEET               #Def 'ID': '_cssxNUM' (incremental NUM)
CSSX.getStylesheets()->SHEET_ARR  #
CSSX.getCSS()->'CSS'              #For all SHEET
CSSX.clear()                      #Removes all SHEET

CSSX.minify(BOOL)                 #Minify CSS (def: true)
CSSX.nextTick(BOOL)               #Wait for requestAnimationFrame() to set <style> (def: true) for:
                                  #  - SHEET.update()
                                  #  - SHEET.compile(), but not compileImmediate()

SHEET.add(CSSX_OBJ)->RULES[_ARR]  #
SHEET|RULES.update(CSSXOBJ)
->RULES[_ARR]                     #
SHEET.rules()->RULES_ARR          #
SHEET.compile[Immediate]()        #Inject <style id="ID">
                                  #Called by SHEET.add() if CSSX.domChanges(BOOL) true (def)
SHEET.getCSS()->'CSS'             #
SHEET.id()->'ID'                  #
SHEET.clear()                     #Removes all RULES

SHEET.scope('SELECTOR')           #Prepends all selectors with 'SELECTOR' + ' '
RULES.descendant(CSSX_OBJ)->RULES2#Same as SHEET.add(CSSX_OBJ), but prepends all selectors with parent selector + ' '
RULES.nested(CSSX_OBJ)->RULES2    #Same as RULES.descendant() except use Sass-like nesting
                                  #Useful to output Sass-like syntax, or to support @RULE nesting

SHEET.define
('MIXIN', FUNC(VAL)->OBJ)         #Allow using { MIXIN: VAL } in CSSX_OBJ, where output OBJ will be merged in { ... }
CSSX.plugins(PLUGIN_ARR)


<style> ... CSS ... </style>      #Transpiled to CSSX_OBJ (JSS compatible???)
                                  #CSS can be just the { PROP ... } without SELECTOR
                                  #Can embed JavaScript using {{ EXPR }} or <% EXPR %>
CSSX-TRANSPILER('JS'[,OPTS])->'JS'#Transpile CSSX
                                  #OPTS:
                                  #  - minified BOOL
                                  #  - compact BOOL
                                  #  - concise BOOL
                                  #  - quotes BOOL
CSSX-TRANSPILER.ast('JS')->OBJ    #Returns AST
CSSX-TRANSPILER.reset()           #


CSSX: any standard syntax, including nesting
CSSX_OBJ
JSS_OBJ:
  - no nesting
  - SELECTOR only .CLASS and @media
