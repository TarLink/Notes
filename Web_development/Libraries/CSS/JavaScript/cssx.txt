
          
   CSSX   
          


VERSION ==>                       #5.2.0

CSSX(['ID'])->CSSXSHEET           #
CSSX.getStylesheets()
->CSSXSHEET_ARR                   #
CSSX.getCSS()->'CSS'              #For all CSSXSHEET
CSSX.clear()                      #Removes all CSSXSHEET

CSSX.minify(BOOL)                 #Minify CSS (def: true)
CSSX.nextTick(BOOL)               #Wait for requestAnimationFrame() to set <style> (def: true) for:
                                  #  - CSSXSHEET.update()
                                  #  - CSSXSHEET.compile(), but not compileImmediate()

CSSXSHEET.add(CSSX_OBJ)    
->CSSXRULE[_ARR]                  #
CSSXSHEET|CSSXRULE.update(CSSXOBJ)    
->CSSXRULE[_ARR]                  #
CSSXSHEET.rules()->CSSXRULE_ARR   #
CSSXSHEET.compile[Immediate]()    #Inject <style id="ID">
                                  #Called by CSSXSHEET.add() if CSSX.domChanges(BOOL) true (def)
CSSXSHEET.getCSS()->'CSS'         #
CSSXSHEET.id()->'ID'              #
CSSXSHEET.clear()                 #Removes all CSSXRULE

CSSXSHEET.scope('SELECTOR')       #Prepends all selectors with 'SELECTOR' + ' '
CSSXRULE.descendant(CSSX_OBJ)     
->CSSXRULE2                       #Same as CSSXSHEET.add(CSSX_OBJ), but prepends all selectors with parent selector + ' '
CSSXRULE.nested(CSSX_OBJ)         #Same as CSSXRULE.descendant() except use Sass-like nesting
->CSSXRULE2                       #Useful to output Sass-like syntax, or to support @RULE nesting

CSSXSHEET.define                  
('MIXIN', FUNC(VAL)->OBJ)         #Allow using { MIXIN: VAL } in CSSX_OBJ, where output OBJ will be merged in { ... }
CSSX.plugins(PLUGIN_ARR)


<style> ... CSS ... </style>      #Transpiled to CSSX_OBJ (JSS compatible???)
                                  #CSS can be just the { PROP ... } without SELECTOR
                                  #Can embed JavaScript using {{ EXPR }} or <% EXPR %>
CSSX-TRANSPILER('JS'[,OPTS])->'JS'#Transpile CSSX
                                  #OPTS:
                                  #  - minified BOOL
                                  #  - compact BOOL
                                  #  - concise BOOL
                                  #  - quotes BOOL
CSSX-TRANSPILER.ast('JS')->OBJ    #Returns AST
CSSX-TRANSPILER.reset()           #


CSSX: any standard syntax, including nesting
CSSX_OBJ
