
             
   POSTCSS   
             


VERSION ==>                       #5.0.19

CONFIG ==>                        #Can be:  
                                  #  - postcss --config CONF_FILE
                                  #  - postcss --PLUGIN.option PLUGIN_OPTS
CONF_FILE                         #JSON or Node module exporting CONF_OBJ 
CONF_OBJ.PLUGIN                   #PLUGIN_OPTS
CONF_OBJ.OPT                      #Like postcss --OPT


postcss [FILE|DIR...]             #Def: stdin
                                  #Version 2.5.1
--output FILE                     #Def: stdout
--dir DIR                         #
--replace                         #Replace input file

--use PLUGIN ...                  #
--local-plugins                   #Require PLUGIN from $PWD, as opposed to DIR where PostCSS is installed

--watch                           #

--syntax SYNTAX ???
--parser PARSER ???
--stringifier FORMATTER ??

--[no-]map [FILE]                 #Sourcemaps (def: inline)
--[no-]map.inline                 #Inline sourcemaps (def: true)
--[no-]map.annotation 'FILE'      #Sourcemap output
--[no-]map.prev 'FILE'            #Sourcemaps from a previous compilation step, e.g. Sess/Less
                                  #Def: automatically detects it
--[no-]map.sourcesContent         #Sets sourcemap origin (def: true)


POSTCSS-JS.sync(PLUGIN_ARR)->FUNC(CSS_OBJ)->CSS_OBJ ???

PROCESSOR.version                 #STR

POSTCSS([PLUGIN_ARR])->PROCESSOR
POSTCSS.plugin(???)
PROCESSOR.use(PLUGIN())->PROCESSOR ???
PROCESSOR.plugins

POSTCSS.parse('CSS', OBJ)->ROOT   #OBJ:
                                  #  - from 'FILE'
                                  #  - map: inline BOOL, annotation 'FILE'|BOOL, prev 'FILE'|BOOL, sourcesContent BOOL


PROCESSOR.process                 #CONF_OBJ also has:
('CSS'|RESULT, CONF_OBJ)          #  - from 'FILE'
->LAZYRESULT                      #  - to 'FILE'
                                  #  - [syntax.]parser()???
                                  #  - [syntax.]stringifier()???
                                  #  - map: same as POSTCSS.parse()

LAZYRESULT

RESULT.warnings()->WARNING_ARR    #
RESULT.messages                   #WARNING_ARR

POSTCSS.root|atRule|rule|decl|
comment(NODE_PROPS)->ROOT|ATRULE|
RULE|DECLARATION|COMMENT          #Creates new NODE

POSTCSS.vendor                    #VENDOR
VENDOR.prefix('PROP')             #Returns prefix, e.g. '-moz-'
VENDOR.unprefixed('PROP')         #Returns without prefix

POSTCSS.list                      #LIST, which [de]compose space|comma-separated PROP VAL
LIST.space('VAL  ...')->VAL_ARR   #
LIST.space('VAL, ...')->VAL_ARR   #

NODE                              #
NODE_PROPS                        #Plain OBJ with attributes specific to a NODE|CONTAINER subtype, e.g. name|params for ATRULE
NODE.type                         #'root|atrule|rule|decl|comment'
NODE.source                       #Location from input file (for sourcemaps) as OBJ:
                                  #  - input INPUT
                                  #  - start|end: line|column NUM
                                  #Will be null when creating new NODE from scratch. Should then take a NODE with source and
                                  #either copy its NODE.source or clone it.
NODE.raws                         #OBJ:
                                  #  - before|after STR: whitespaces and browser hacks before|after NODE
                                  #  - between STR: anything in-between
                                  #  - semicolon BOOL: true if last child has it
                                  #  (ATRULE)
                                  #  - afterName STR: whitespaces between @RULE and VAL
                                  #  (COMMENT)
                                  #  - before|after STR: whitespaces between /* */ and COMMENT
                                  #  (DECLARATION)
                                  #  - important STR
NODE.raw(???): ???
NODE.toString([FUNC(NODE)->'CSS'])
->'CSS'                           #

NODE.root()->ROOT                 #
NODE.parent                       #NODE|null
NODE.prev|next()->NODE|undefined  #Siblings

NODE.moveTo(CONTAINER)            #
NODE.moveBefore|After(NODE2)      #
NODE.remove()                     #
NODE.replaceWith(NODE2...)        #
NODE.clone([OBJ])->NODE2          #OBJ is assigned to NODE2
NODE.cloneBefore|After([OBJ])     #Clone then inserts before|after

NODE.error('REASON'[, OBJ])       #OBJ:
->CSSSYNTAXERR                    #  - plugin 'PLUGIN' (def: set automatically)
                                  #  - word STR: highlight this word
                                  #  - index NUM: highlight this character
NODE.warn(RESULT, 'REASON'[, OBJ])#Same OBJ as NODE.error()
                                  #Adds a WARNING to RESULT.messages

CONTAINER                         #NODE that contain other NODE
CONTAINER.nodes                   #NODE_ARR
CONTAINER.first|last              #NODE
CONTAINER.index(NODE)->NUM        #

CONTAINER.every|some(FUNC)        #Same as CONTAINER.nodes.every|some(FUNC)
CONTAINER.each(FUNC)              #Same as CONTAINER.nodes.each(FUNC) except:
                                  #  - can return false to stop iteration
                                  #  - safe if mutation children during iteration
CONTAINER.walk(FUNC(NODE, NUM))   #Like CONTAINER.each() but iterates over descendants
CONTAINER.walkDecls|              #Like CONTAINER.walk() but:
AtRules|Rules|Comments            #  - filters only DECLARATION|ATRULE|RULE|COMMENT
([STR|REGEXP, ]FUNC(NODE, NUM))   #  - filters according to STR|REGEXP:
                                  #     - used to match DECLARATION property name, ATRULE name or RULE selector
                                  #     - not used for COMMENT
CONTAINER.replaceValues           #Replace childrent DECLARATION values.
(STR|REGEXP[, OBJ], STR2[(...)])  #STR2(...) gets same arguments as STR.replace(...)
                                  #OBJ:
                                  #  - props 'PROP'_ARR: only for those properties
                                  #  - fast 'STR': does indexOf(STR) before performing REGEXP.test(), just can be performance
                                  #    boost

CONTAINER.prepend|append          #NODE_VAL can be:
(NODE_VAL[_ARR]...)               #  - NODE
                                  #  - NODE_PROPS
                                  #  - 'CSS' (slower)
CONTAINER.insertBefore|After
(NODE|NUM, NODE_VAL)              #
CONTAINER.removeChild(NODE|NUM)   #
CONTAINER.removeAll()             #

ROOT                              #CSS file, as CONTAINER
ROOT.toResult(OBJ)->RESULT        #OBJ: same as POSTCSS.parse()

ATRULE                            #'@RULE VAL... [{ ... }]', as CONTAINER
                                  #{ ... } are children
ATRULE.name                       #'RULE'
ATRULE.params                     #'VAL...'

RULE                              #'SELECTORS { ... }', as CONTAINER
                                  #{ ... } are children
RULE.selector                     #'SELECTORS'
RULE.selectors                    #'SELECTOR'_ARR

DECLARATION                       #'PROP: VAL', as NODE
DECLARATION.prop                  #'PROP'
DECLARATION.value                 #'VAL'
DECLARATION.important             #BOOL

COMMENT                           #'/* COMMENT */', as NODE
COMMENT.text                      #'COMMENT'

INPUT                             #CSS input source
INPUT.file                        #'FILE'. Requires OBJ.from to be defined
INPUT.id                          #Automatic 'ID'
INPUT.from                        #INPUT.file or, if unset, INPUT.id
INPUT.origin(LINE, COL)           #Returns position in original input source as OBJ: file STR, line|column NUM
INPUT.map                         #Sourcemap (using mozilla source-map module)

CSSSYNTAXERR                      #Error message. Child of ERROR
CSSSYNTAXERR.message              #'[PLUGIN:]FILE:LINE:COL: REASON'
CSSSYNTAXERR.plugin               #'PLUGIN'
CSSSYNTAXERR.file                 #'FILE'. Requires OBJ.from to be defined
CSSSYNTAXERR.line|column          #NUM
                                  #Can use previous sourcemap (see --map.prev)
CSSSYNTAXERR.reason               #'REASON'
CSSSYNTAXERR.input                #INPUT
CSSSYNTAXERR.source               #'CSS' of the source
CSSYNTAXERR.showSourceCode([BOOL])#Returns STR showing source code that failed
                                  #BOOL is color output (def: process.stdout.isTTY and process.env.NODE_DISABLE_COLORS)
                                  #Empty if map.inline true and map.sourceContent false

WARNING                           #Warning message
WARNING.toString()->STR           #Like CSSSYNTAXERR.message
WARNING.plugin|file|line|column   #Like CSSSYNTAXERR
WARNING.text                      #Like CSSSYNTAXERR.reason
WARNING.node                      #NODE
WARNING.type                      #STR. Custom identifier for this type of warning
WARNING.browsers                  #???
