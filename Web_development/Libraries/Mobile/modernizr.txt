
               
   MODERNIZR   
               


PRINCIPE ==>                                    #  - Shim  add an unsupported API feature with plugin
                                                #  - Polyfill: JavaScript shim. e.g. add unsupported property by IE
                                                #  - Fallback: 
                                                #     - instead of polyfill, add a simplified version of the feature
                                                #     - e.g. several CSS properties after another (ones not understood do not
                                                #       crash the engine)
                                                #     - only polyfill if important: best UX, but slower

FEATURE ==>                                     #Are only tested. For polyfills, see Modernizr wiki page.
                                               ##Are documented as Modernizr "FEATURE" (IE<=NUM) in HTML/CSS/DOM documentation.

MODERNIZR ==>                                   #Version just before 3.0.0
                                                #Can download custom builds. Default build includes html5shiv
                                                #At loadtime:
                                                #  - tests each FEATURE, by checking properties/methods, and not userAgent
                                                #    (unreliable)
                                                #  - adds the following:
<html class="[no-]FEATURE">                     #For CSS selectors.
                                                #For FEATURE "js", it needs to be added in <html> : <html class="no-js">???
Modernize.FEATURE[.SUBFEATURE]                  #BOOL. For JavaScript
 
Modernizr.load(OBJ[_ARR])                       #Loads conditionally "FILE|URL". Deprecated. OBJ:
                                                #  - test BOOL (usually MODERNIZR.FEATURE[.SUBFEATURE])
                                                #  - yep|nope|both|load "FILE|URL"[_ARR]:
                                                #     - according to BOOL (both === load)
                                                #     - "FILE|URL" is JavaScript|CSS
                                                #  - complete()|callback("FILE|URL", BOOL): when done (files are loaded async)
                                                #OBJ can also be "FILE|URL" ==> { both "FILE|URL" }
                                                #Each OBJ is processed after another, async.

Modernizr.addTest("feature", BOOL[()])          #Create own FEATURE
Modernizr.addTest({ feature: BOOL[()] })        #Possible BOOL tests:
                                                #  - !!OBJ
                                                #  - OBJ && ( VAR in OBJ ) or VAR in createElement("TAG")
                                                #  - Modernizr.test[All]Props("cssProp")->BOOL: if only prefixed version
                                                #    exists, returns true if "AllProps"
                                                #  - Modernizr.hasEvent("EVENT", OBJ)->BOOL: can OBJ.addEventListener("EVENT")
Modernizr.testStyles("CSS", FUNC(ELEM, "CSS")   #Creates an ELEM <div id="modernizr"> with "CSS", containing NUM (def: 0) 
[, NUM[, "ID"_ARR]])                            #<div id="ID"> children.
                  
Modernizr.prefixed("jsOrCssProp"[, OBJ[, VAL]]) #Returns [PREFIX]STR for current browser (can be no PREFIX) (e.g. MozSTR), or
                                                #false if cannot find it.
                                                #If OBJ, look as OBJ property.
                                                #If VAL:
                                                #  - false: returns "jsOrCssProp", not OBJ.jsOrCssProp
                                                #  - VAL: returns OBJ.jsOrCssProp.bind(VAL)
