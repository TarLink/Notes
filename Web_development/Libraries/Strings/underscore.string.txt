
                       
   UNDERSCORE.STRING   
                       


require												#Usually assigned to variable named _s
("underscore.string")    			#Can be used without Underscore/Lodash but can integrate: 
                              #  _.mixin(_s.exports().mixin({ reverse: _s.reverse, include: _s.include })
                              #Then:
                              #  - can use _ instead of _s
                              #  - can chain: _(STR).FUNC().FUNC2()...
															#Version 2.4.0
															
_s.sprintf(STR[, VAL...])			#STR format: similar to C sprintf()
_s.numberFormat								#Returns as STR3. NUM2 are number of decimals (def: 0), STR decimal separator (def: "."), 
(NUM[, NUM2[, STR[, STR2]]])	#STR2 thousands separator (def: ",")
_s.toNumber(NUM_STR[, NUM2])	#Returns as NUM3, with NUM2 decimals (def: 0), or NaN if can't.
_s.pad(STR,NUM[,STR2[,STR3]])	#Adds STR2 (single chars) to STR3 "left|side|both" (def: "left") until length is NUM chars.
_s.[l][r]pad(...)							#Same with different default STR3

_s.strLeft|Right[Back]				#Returns part of STR after|before first|last (according to "Back") occurence of STR2 from 
(STR,	STR2)										#Left|Right

_s.insert(STR, NUM, STR2)			#Inserts STR2 at position NUM inside STR
_s.splice(STR, NUM, NUM2,STR2)#Same but first remove first NUM2 chars from position NUM.
_s.include(STR, STR2)					#True if STR2 is inside STR
_s.starts|endsWith(STR, STR2)	#
_s.count(STR, STR2)						#Returns how many times STR2 is inside STR
_s.levenshtein(STR, STR2)			#Returns NUM

_s.swapCase(STR)							#
_s.capitalize(STR)						#Uppercase for first letter of STR
_s.titleize(STR)							#Uppercase for first letter of each word
_s.camelize(STR)							#Removes dashes/underscores/whitespaces and put next letter uppercase.
_s.dasherize(STR)							#Inverse.
_s.classify(STR)							#Same with all but [[:alnum:]], and first letter is also put uppercase.
_s.underscored(STR)						#Inverse.
_s.humanize(STR)							#Like classify() + camelize() + put spaces between words, then capitalize() + trim()
_s.slugify(STR)								#Replace any non [[:alnum:]] with -

_s.repeat(STR, NUM)						#Returns STR NUM times as single STR2
_s.surround(STR, STR2)				#Returns STR + STR2 + STR
_s.quote(STR[, STR2])					#Same with def: '"'
_s.unquote(STR[, STR2])				#Inverse
_s.join(STR, STR2...)					#Returns as single STR3 with STR2 joined with STR
_s.toSentence[Serial]					#Returns as single STR3 with STR2 as delimiter (def: ", ") and STR3 as final one (def: " and ")
(ARR[, STR[, STR2]])					#If "Serial", final delimiter is STR2 + STR3
_s.words(STR[, REGEXP])				#Returns as STR2_ARR according to delimiter REGEXP (def: /\s+/)
_s.chop(STR, NUM)							#Returns as STR2_ARR, where each STR2 has size NUM
_s.chars(STR)									#Same as _s.chop(STR,1)
_s.[l|r]trim(STR[, STR2])			#Def STR2 is " \t\n"
_s.truncate(STR, NUM[, STR2])	#Can append STR2 if truncated (will not be beyond NUM chars)
_s.prune(STR, NUM[, STR2])		#Same but with STR2 def to "..."

_s.reverse(STR)								#

_s.toBoolean(STR							
[,STR|REGEXP[_ARR2]]				  #Returns true if matching first part (def: ["true","TRUE","1"]), false if second (def: ["false",
[,STR|REGEXP[_ARR3]])			    #"FALSE","0"]), undefined otherwise.
_s.isBlank(STR)								#True if whitespace or ""
_s.clean(STR)									#Compress whitespaces into one
_s.lines(STR)									#Returns number of lines (according to newlines).

_s.[un]escapeHTML(STR)				#Converts to|from HTML encoding
_s.stripTags(STR)							#Removes all HTML tags, but not their content.

_s.succ(STR)									#Returns next letter|number.
_s.naturalCmp(STR, STR2)			#Sort first part of STR as string, then if it continues as number sort rest as number.
