
            
   MOMENT   
            


VERSION ==>                       #2.10.3
                                  #Node or browser.

MOMENT                            #require("moment") or global variable moment

MDATE_FORMAT                      #STR with sequences:
                                  #  - X|x: Unix time (s|ms)
                                  #  - YY[YY]: year
                                  #  - Q: year quarter (1-4)
                                  #  - M[M]: month number
                                  #  + Mo: month number, ordinal
                                  #  - MMM[M]: month name (local)
                                  #  - w[w]|W[W]: week of year (local|ISO)
                                  #  + wo|Wo: week of year, ordinal (local|ISO)
                                  #  - DDD[D]: day of year
                                  #  + DDDo: day oy year, ordinal
                                  #  - D[D]: day of month
                                  #  + Do: day of month, ordinal
                                  #  + d: day of week number 
                                  #  + do: day of week, ordinal
                                  #  + dd[d[d]]: day of week
                                  #  - e|E: day of week number (local|ISO)
                                  #  - H[H]: 24 hour time
                                  #  - h[h]: 12 hour time
                                  #  - a|A: am|pm or AM|PM
                                  #  - m[m]: minutes
                                  #  - s[s]: secs
                                  #  - S[S[S]]: 10[0[0]]th of secs
                                  #  - Z[Z]: UTC offset
                                  #Also (all local):
                                  #  + LT[S]: time [with seconds]
                                  #  + L|l: date, as numbers
                                  #  + LL|ll: date
                                  #  + LLL|lll: date+time
                                  #  + LLLL|llll: date+time+weekday
                                  #Any other:
                                  #  - ignored, means just "any single character"
                                  #  + if [...]: not ignored
                                  #+ means only for output, not input.
                                  #Can also be MOMENT.ISO_8601, i.e. YYYY-MM-DD[THH:MM:SSZ]
                                  #For input, use defaults: current for date, 0 for time.
MDATE_OBJ                         #OBJ:
                                  #  - y[ear[s]] NUM
                                  #  - M|month[s] NUM
                                  #  - d[ay[s]]date NUM
                                  #  - h[our[s]] NUM
                                  #  - m[inute[s]] NUM
                                  #  - s[econd[s]] NUM
                                  #  - ms|millisecond[s] NUM
MDATE_VAR[s]                      #Any of long form MDATE_OBJ keys [with s]
MDATE                             #NUM (Unix time), with extra OBJ properties
                                  #Check instanceof:
                                  #  - MDATE: MOMENT.isMoment(MDATE)
                                  #  - DATE: MOMENT.isDate(DATE)

MOMENT([DATE])->MDATE             #Def: new Date
MOMENT(NUM)->MDATE                #Unix time (ms)
MOMENT.unix(NUM)->MDATE           #Unix time (s)
MOMENT(NUM_ARR)->MDATE            #Same as MOMENT(new Date(NUM...))
MOMENT(STR)->MDATE                #Same as MOMENT(new Date(STR)). Prefer using MOMENT(STR, MDATE_FORMAT)
MOMENT(STR, MDATE_FORMAT[_ARR]    #If BOOL false (def), might strip beginning|end to conform MDATE_FORMAT
[, "LANG"][, BOOL])->MDATE        #ARR means several possibilities.
MOMENT(MDATE_OBJ)->MDATE          #
MOMENT(MDATE)->MDATE2     
MDATE.clone()->MDATE2             #

MOMENT.utc(...)                   #Same as MOMENT(...) but with UTC by def.
MDATE.utc|local()->MDATE2         #Make def UTC or local (def: local)
MDATE.utcOffset([NUM|STR])        #Gets/sets UTC offset
MDATE.isDST[Shifted]()->BOOL      #

MDATE.format([MDATE_FORMAT])->STR #Def: MOMENT.defaultFormat, i.e. "YYYY-MM-DDTHH:mm:ssZ"
MDATE.toJSON|toISOString()->STR   #Same but with ISO_8601

MDATE.from|to(...[, BOOL])->STR   #Returns how much time between MDATE and MOMENT(...) (or inverse), as human-friendly STR. 
                                  #If true, without "ago"
MDATE.fromNow|toNow([BOOL])->STR  #Same as MDATE.from(MOMENT(), BOOL)
MDATE.calendar([MDATE2])->STR     #Similar to from[Now]() but shows as "Yesterday", etc.
MDATE.diff                        
(...[, MDATE_VARs[, BOOL]])       #Similar, but as NUM (or if true DOUBLE). If no MDATE_VARs: Unix time (ms)

MOMENT.duration(NUM, MDATE_VAR)
MOMENT.duration(MDATE_OBJ)        #Returns MDURATION
MOMENT.duration(STR)              #STR is e.g. "HH:MM"
MDURATION.humanize()->STR         #
MDURATION.MDATE_VARs()->NUM       
MDURATION.get(MDATE_VARs)->NUM    #
MDURATION.toJSON()->STR           #ISO_8601
MDURATION.add|substract(...)      #Adds|substracts MOMENT.duration(...)

MDATE.year[s]|quarter|month[s]|
[iso]week[s]|dayOfYear|           #Get/sets. Note:
[week|isoWeek]day[s]|date[s]|     #  - date: date of month
hour[s]|minute[s]|second[s]|      #  - day: day of week, e.g.: 3 (next Wed), -3 (last Wed), -10 (before-last Wed)
millisecond[s]([NUM|STR])         #  - weekday: same but locale
MDATE.get(STR)
MDATE.set(STR, NUM|STR2)          #Same
MDATE.valueOf|unix()              #Gets Unix time (ms|s)
MDATE.toDate()->DATE              #
MDATE.toArray()->NUM_ARR          #

MDATE.daysInMonth()->NUM          #
MDATE.isLeapYear()->BOOL          #

MDATE.max|min(MDATE...)           #Returns most distant MDATE
MDATE.substract|add(...)->MDATE   #... can be:
                                  #  - NUM MDATE_VARs
                                  #  - MDATE_OBJ
MDATE.startOf|endOf(MDATE_VAR)
->MDATE                           #

MDATE.isValid()->BOOL             #If invalid, is formatted as "Invalid date"
MDATE.invalidAt()                 #What's invalid: 0 (year), 1 (month), 2 (day), 3 (hour), 4 (minute), 5 (second), 6 (ms)

MDATE.isBefore|Same|After
(...[, MDATE_VAR])->BOOL          #Compare with MOMENT(...)
MDATE.isBetween
(..., ...[, MDATE_VAR])->BOOL     #

MOMENT|MDATE.locale("LANG"[_ARR])
MOMENT|MDATE.locale()->"LANG"     #Gets/sets locale. If wrong, keeps same one.
MOMENT.locale("LANG", OBJ)        #Define/override locale information. OBJ contains names of months, orders, etc. See online doc.
                                  #Automatically loads:
                                  #  - Node.js: ./moment-root/locale/LANG.js
                                  #    (UMD module returning MOMENT.defineLocale("LANG", OBJ))
                                  #  - Browser: include the file
MOMENT.months|weekdays
[Short|Min|Parse]([NUM])          #Returns local names STR[_ARR]
MOMENT.longDateFormat()
MOMENT.isPM()
MOMENT.meridiem()
MOMENT.calendar|relativeTime|
pastFuture()
MOMENT.ordinal()
MOMENT.preparse()
MOMENT.postFormat()
MOMENT.weeks()
MOMENT.invalidDate()
MOMENT.firstDayOfWeek|Year()      #Other local information

MDATE.range(MDATE2, MDATE3)      ##Returns MRANGE
                                 ##Package moment-range (1.0.9)
