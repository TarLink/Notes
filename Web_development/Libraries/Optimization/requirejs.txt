
               
   REQUIREJS   
               


VERSION ==>                       #2.1.17

GOAL ==>                          #See UMD documentation file

<script src="require.js"          #Loads require.js (synchronously), then MAINFILE (async.).
data-main="MAINFILE">             #Implies <script async> so cannot assume that rest of page has access to MDL:
                                  #  - if rest of page (other <script>, including inline) need to use require(), should not
                                  #    use data-main nor async.
                                  #  - but at best, should not put any other <script>

require(PATH_ARR, FUNC([MDL...])) #Loads all MDL from PATH_ARR (managing dependencies order) then fires FUNC()
require(PATH)->MDL                #Must be in a define() FUNC, with "require" and PATH as dependencies.
define([["MDL_ID", ]PATH_ARR,]    #Same as require(...) but also define a new MDL2, i.e. FUNC return value, must be an OBJ
FUNC([MDL...]))                   #If cannot use define() (e.g. external libraries), must use CONFVAR shim.PATH OBJ|ARR:
                                  #  - exports "VAR": variable to export as MDL (relative to WINDOW)
                                  #  - deps PATH_ARR, init([MDL2...]): like define()
                                  #  - ARR means { deps ARR }.
                                  #    Not compatible with CONFVAR paths.SUBDIR STR_ARR (as opposed to STR) or errbacks???
                                  #Should not change global variable.
                                  #Should define() only once per file (unless using "MDL_ID")
define([..., ]MDL)                #Same as define(..., FUNC()->MDL)
define(["MDL_ID, "]               #Alternate syntax (arguments must be exactly like this), which allows using:
FUNC(require, exports, module))   #  - require(PATH)->MDL
                                  #  - or defining [module.]exports as MDL

CIRCULAR DEPENDENCIES ==>         #Must use require(PATH)->MDL or [module.]exports as MDL

CONFVAR                           #Set up by either:
                                  #  - require.config(OBJ), which must be in beginning of MAINFILE, or before loading it
                                  #  - var require = OBJ, which must be before loading require.js

PATH                              #  - ending ".js" is optional
                                  #  - relative paths resolved to:
                                  #     - $PWD
                                  #     - CONFVAR baseUrl:
                                  #        - def. is the DIR of:
                                  #           - MAINFILE if data-main="MAINFILE" is used
                                  #           - the HTML page loading requireJS otherwise
                                  #        - cannot be a different domain if using "text!" plugins and not using r.js
                                  #  - with CONFVAR paths.SUBDIR STR[_ARR], if SUBDIR === [parent DIR of] PATH:
                                  #     - matching part will be substituted by STR
                                  #     - if STR is absolute, baseUrl is prepended
                                  #     - if ARR, tries each one after another (last ones being fallbacks)
                                  #  - "MDL_ID":
                                  #     - must use CONFVAR bundles.PATH "MDL_ID"_ARR, which will load PATH when requiring
                                  #       any "MDL_ID", with PATH being the file which define() it.
                                  #     - should be avoided
                                  #Possible organization:
                                  #  - baseUrl "js/lib/"
                                  #  - CONFVAR paths.app "../app"
                                  #  - then:
                                  #     - js/      MAINFILE and require.js
                                  #     - js/lib/  libraries (PATH "*")
                                  #     - js/app/  user code (PATH "app/*")
                                  #It is best if PATH files don't have version in filename.
require.toUrl(PATH)               #Returns PATH relative to baseUrl.
                                  #Must be in a define() FUNC, with "require" and PATH as dependencies.
