
               
   REQUIREJS   
               


VERSION ==>                       #2.1.1
                                  #This documentation is not finished (use Browserify instead)

GOAL ==>                          #  - Load libraries only when and if needed
                                  #  - Not managing manually the <script> order.
                                  #  - Being able to use several Javascript files while still deploying with only one big
                                  #    minimized Javascript file.

<script src="require.js"          #Loads require.js (synchronously), then MAINFILE (async.)
data-main="MAINFILE">             #Should not put any other <script>

require(PATH_ARR,                 #Loads all files in PATH_ARR (actually adds <script> tags), then fires FUNC()
FUNC([MODULE...]))                #Dependencies order is automatically managed.
                                  #Files should export a OBJ|FUNC called MODULE:
                                  #  - by wrapping with define()
                                  #  - or using shim ENVVAR { PATH: OBJ }, where OBJ has members:
                                  #      - exports OBJ|FUNC_STR: variable to export as MODULE (mandatory)
                                  #      - deps PATH_ARR: dependencies
                                  #      - init FUNC([MODULE2...]): called after loading dependencies
define([PATH_ARR,]                #FUNC should return a OBJ|FUNC MODULE
MODULE|FUNC([MODULE2...]))        #Can have its own dependencies with PATH_ARR and MODULE2...
                                  #FUNC should not change global variable.
                                  #Instead of passing MODULE as argument, can also declare require.js as dependency PATH:
                                  #  define([ "require", PATH ], function(require) { 
                                  #    var MODULE = require(PATH);
                                  #  });
                                  #This also allow to use require.toUrl(PATH), which returns PATH relative to baseUrl

require.config(OBJ)               #OBJ has members ENVVAR (others are specified elsewhere):
                                  #  - 
                                  #Must be put in beginning of MAINFILE
PATH ==>                          #If PATH is relative and does not end with .js: 
                                  #  - .js will be appended 
                                  #  - if starts with ".|..":
                                  #     - looked up relatively to current file
                                  #     - MODULE must be loaded by require() as a MODULE2 (see above)
                                  #  - otherwise:
                                  #     - it will be looked up in DIR ENVVAR baseUrl, which by déf. is the DIR of:
                                  #        - MAINFILE if data-main="MAINFILE" is used
                                  #        - the HTML page loading require.js otherwise
                                  #     - if PATH first DIR(s) or whole PATH matches SUBDIR in ENVVAR paths { SUBDIR: STR ...}:
                                  #        - matching part will be substituted by STR
                                  #        - if STR is absolute, baseUrl is also substituted
                                  #Best is to use js/lib/ as baseUrl and { app: "../app" } as paths and put:
                                  #  - js/: MAINFILE and require.js
                                  #  - js/lib/*: libraries (PATH "*")
                                  #  - js/app/*: user code (PATH "app/*")
                                  #It is best if PATH files don't have version in filename.
