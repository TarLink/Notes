
                
   BROWSERIFY   
                


VERSION ==>                       #Node module (4.1.5)

browserify [-r] FILE[:NAME]...    #Returns JavaScript code that executes all FILE (like if they were concatenated), except
                                  #FILE can contain require(STR) like Node.js:
                                  #  - use same algorithm, so can use Node.js modules in browser.
                                  #    package.json of modules can have those fields:
                                  #      - "browser":
                                  #         - like "main" but used only in Browserify
                                  #         - can also be a { REQUIRED_FILE: SERVED_FILE ... } instead of main entry
                                  #      - "browserify": { "transform": MODULE_ARR }: applies transform MODULE_ARR when this
                                  #         module is being required
                                  #  - normal scripts should be rewritten as Node.js modules so they can be required()
                                  #  - can require Node built-in modules (using a browser shim):
                                  #     - global, __filename|dirname, process and buffer are already required by default
                                  #     - differences:
                                  #        - no IO, so no MODULE, READLINE, REPL, TTY, FS, CHILD_PROCESS, CLUSTER, 
                                  #          DGRAM, NET, TLS, DNS
                                  #        - Error is DOM Error, not NODE
                                  #        - clear|setTimeout|Interval like DOM, clear|setImmediate not existing
                                  #        - EVENTS = EVENTS.EventEmitter
                                  #        - BUFFER: no .isEncoding(), .isBuffer(), .concat()
                                  #        - DOMAIN: no members()
                                  #        - HTTP[S]: no createServer() (only client-side)
                                  #        - PROCESS: only nextTick()
                                  #        - CRYPTO: only randomBytes(), createHmac() and createHash()
                                  #        - OS: limited:
                                  #           - no cpus(), hostname(), uptime(), loadavg(), *mem(), networkInterfaces()
                                  #           - arch() -> "javascript", type() -> "Browser", platform() -> "browser",
                                  #             release() -> user agent
                                  #Output code:
                                  #  - is typically included in a single <script src="bundle.js"></script>
                                  #  - can be minified
                                  #If -r, instead of executing code, bundle will define code so that require(NAME) (déf: FILE)
                                  #executes FILE (and returns its module.exports)
-o FILE                           #Output (déf: stdout)
--debug                           #Adds a source map at end of the file as Data URI
--standalone STR                  #Uses a UMD wrapper, with root.STR for global variables.
--ignore GEXP                     #Replace dependencies by empty stub {}
--exclude GEXP                    #Removes a dependency
--transform MODULE                #Be MODULE a FUNC(IOSTREAM) -> IOSTREAM2, transform all require(...) using this FUNC()
                                  #Pass arguments as [ VAL --VAR ... ]
--command MODULE                  #Same but use a command line taking from stdin and outputting to stdout instead
--plugin MODULE                   #Same as transform but as a FUNC(BUNDLE, OBJ) -> BUNDLE
--noparse=FILE                    #Speed up building FILE, but it must not have any require()

BROWSERIFY(ISTRM|PATH[_ARR][,OBJ])#Returns a BUNDLE, for the files specified by ISTREAM|PATH[_ARR] or OBJ.entries PATH[_ARR]
                                  #OBJ members are:
                                  #  - basedir DIR: $PWD used for relative paths. Necessary for ISTREAM[_ARR]
                                  #  - noParse BOOL: like browserify --noparse
                                  #  - extensions STR_ARR: files used by require() lookup (déf: [ ".js", ".json" ])
                                  #With Gulp, do BROWSERIFY(PATH).bundle(...).pipe(VINYL-SOURCE-STREAM(PATH)), then continue
                                  #the Gulp chain.
BUNDLE.add(ISTRM|PATH[_ARR][,OBJ])#Adds files
BUNDLE.bundle([OBJ                #Returns as IOSTREAM
[, FUNC(ERROR, BUFFER)]])         #Can get the results when available also with FUNC()
                                  #OBJ members are:
                                  #  - debug BOOL: like browserify --debug
                                  #  - standalone STR: like browserify --standalone STR
BUNDLE.transform([OBJ, ]          #Like browserify --transform MODULE
FUNC|MODULE)                      #If OBJ.global is true, do it not only on first-level require(), but also dependencies
                                  #require()
BUNDLE.plugin(FUNC|MODULE[, OBJ]) #Like browserify --bundle MODULE. Must be called before .bundle()

watchify ...                      #Node module (3.2.3). 
                                  #Like browserify ... but:
                                  #  - watch mode
                                  #  - extra options:
--verbose                         #
--delay NUM                       #Throttle "update" event
--ignore-watch=GLOB               #Def: "**/node_modules/**"
--poll=NUM                        #In ms, instead of default event triggering.
WATCHIFY(BROWSERIFY(...)[, OBJ])  #Fires events:
                                  #  - update(BUNDLE_ID_ARR): should then call BUNDLE.bundle()
                                  #  - time(NUM): how many ms it took to bundle
                                  #  - bytes(NUM): same for bundle size
                                  #  - log(STR): same as log string

beefy                             #Similar but hosts on a local server
budo                              #Same but also works with LiveReload

browserify-middleware             #Express MDW doing BROWSERIFY() on static JavaScript assets

debowerify                        #Node module (0.7.1)
                                  #Transform allowing require() on Bower packages
deglobalify                       #Node module (0.2.0)
                                  #Transform allowing require(..., ARR) on traditional scripts (global objects)
deamdify                          #Node module (0.1.1)
                                  #Transform allowing require(...) on AMD modules

EXORCIST(PATH[,STR[,STR2[,PAT2]]])#Node module (0.4.0)
                                  #Transform qui extrait la source map créée par --debug vers un fichier PATH.
                                  #  - STR et STR2: changer sourceUrl et sourceRoot.
                                  #  - PATH2: baseURL for relative paths
                                  #Can fire event missing-map()
                                  #Can also use command line exorcist PATH [-u STR] [-r STR2] [-b PATH2]
                                  #With Gulp, do .pipe(VINYL-TRANSFORM(EXORCIST(...)))
