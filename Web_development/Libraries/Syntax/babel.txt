
           
   BABEL   
           



GOAL ==>                          #ES6 -> ES5
                                  #Version 6.13.2
                                  #See JavaScript documentation for support (with/without polyfill)

POLYFILL ==>                      #Includes regenerator (for generators) and core.js (other polyfills).
                                  #Install:
                                  #  - browser: browser-polyfill.js
                                  #  - Node: require("babel/polyfill") (done by require("babel/register") and babel-node)

RUNTIME ==>                       #Helper functions (not polyfills) as a package.
                                  #Without it, the same helpers will be output once for each file.
                                  #This also make polyfill use the package namespace instead of patching global object.
                                  #Install:
                                  #  - babel-runtime: contains the helpers, so production dependency
                                  #  - babel-plugin-transform-plugin: does the transformation, so development dependency only
                                  #babel-runtime holds them, babel-plugin-transform-plugin adds the import statement in the output.
                                  #Does not support RequireJS


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            OPTIONS            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


OPT                               #Can be:
                                  #  - babel command line
                                  #  - ./.babelrc (or OPT.babelrc PATH) JSON file
                                  #  - package.json babel OPT
                                  #  - any other documented below

BABEL_ENV                         #If set, will use OPT.env.VAL as additional options.
                                  #Def: NODE_ENV, or 'production'

babel [FILE|DIR]                  #Node module binary (def: stdin)
[--out-file|dir FILE2|DIR2]       #Def: output ES5 to stdout
--watch                           #
--skip-initial-build              #With --watch, do not build before watching

--source-maps [inline|both]       #
--input-source-map PATH           #
--source-map-target PATH          #
--source-file-name PATH           #
--source-root DIR                 #
--filename-relative DIR           #

--only|ignore GLOB                #Files to whitelist|blacklist
                                  #Can also use .babelignore (same syntax as .gitignore)

--filename STR                    #File used in debug
--highlight-code                  #(def: true): use colors in debug

--auxiliary-comment-before|after 
  STR                             #Comment added before any helper line of code, e.g. 'istanbul ignore next'

--comments BOOL                   
--should-print-comment
  (COMMENT)->BOOL                 #If false, remove comments
--compact BOOL                    #Minify whitespaces. Def: 'auto', e.g. true if input >100KB


PLUGINS ==>                       #Use OPT:
                                  #  - plugins MODULE_ARR
                                  #    MODULE can be 'MODULE' or ['MODULE', PLUGIN_OPT]
                                  #  - presets MODULE_ARR: 
                                  #     - same but 'MODULE' are list of plugins, among 'es2015', 'es2016' and 'react' (only include JSX and Flow things)

babel-doctor                      #CLI that shows if there is anything wrong with current setup


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            USAGES             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


BABEL-CORE                        #As Node module
BABEL-CORE.transform(STR[, OPT])  #Returns OBJ2:
                                  #  - code STR2 (unless OPT.code false)
                                  #  - map STR3
                                  #  - ast (unless OPT.ast false)
BABEL-CORE.transformFile
(FILE[, OPT], FUNC(ERROR, OBJ2))  #
BABEL-CORE.transformFileSync
(FILE[, OPT])->OBJ2               #

babel-node                        #Same as Node REPL, but compiling ES6 first.
                                  #Can use same options as babel + Node REPL

require("babel/register")[(OBJ)]  #Patch Node require() so it uses Babel on *.es6|es|jsx|js, except "node_modules/**" 
                                  #(unless OBJ.ignore false).
                                  #OBJ: same options as above.
                                  #Caches. Can use ENVVAR BABEL_DISABLE_CACHE=1 and BABEL_CACHE_PATH=DIR
                                  #Should not be used in library, as it will patch require() for other libraries too.

BROWSER ==>                       #Load browser.js from NPM module babel-core
                                  #  - should put ES6 in <script type="text/babel|ecmascript-6">
                                  #  - can also use babel.transform(STR[, OPT]).code or babel.run(STR[, OPT])

GULP-BABEL([OPT])                 #Version 5.1.0
                                  #Same options, except:
                                  #  - filename not needed
                                  #  - sourcemaps: need to use SOURCEMAPS.init|write() before|after

grunt-babel                       #Grunt plugin (5.0.1)
                                  #  - TASK "babel"
                                  #  - TARGET src, dest
                                  #  - options OPT

requirejs-babel                   #Version 0.0.6
                                  #Plugin adding "es6!FILE"
                                  #Must use CONFVAR paths.es6 PATH_TO_ES6 and paths.babel PATH_TO_BABEL

babelify[.configure(OPT)]         #Browserify transform (6.1.2)

MOCHA ==>                         #Can use --compilers js:babel/register

karma-babel-preprocessor          #Version 5.2.1
                                  #PLUGIN "babel", CONFIGVAR babelPreprocessor OBJ:
                                  #  - options OPT: same as above
                                  #  - [source]filename(FILE)->STR

BABEL-CONNECT(OBJ2)               #Express MDW (6.0.1) that compile static assets. OBJ2:
                                  #  - options OPT: same as above
                                  #  - src|dest DIR
                                  #  - ignore DIR

JADE-BABEL([OPT])                 #Jade filter (5.0.0), used as :babel


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            NON-ES6            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


NON-ES6 ==>                       #The following changes are also done by default, even though it is not ES6 transformation.


"use strict";                     #Added on top

VAR = function(){...}             #VAR = function VAR(){...}

FLOW ==>                          #Remove annotations (when using correct plugins)

JSX ==>                           #To JavaScript (when using correct plugins)

SYSTEMJS ==>                      #Can be used:
                                  #  - develop-time: must load es6-module-loader-dev.js (after Babel) and sets System.transpiler = "babel"
                                  #  - production: compile to SystemJS with --modules system, then use SystemJS builder

EXPORT/IMPORT ==>                 #Use ES6 syntax but is compiled according to PLUGINS loaded:
                                  #  - common (def): CommonJS
                                  #  - amd
                                  #  - umd
                                  #  - system: SystemJS (System.register())
                                  #  - ignore: nothing
                                  #  - MODULE: custom
                                  #So must then use the appropriate loader (Browserify, RequireJS, SystemJS, etc.)
                                  #Also uses OPT:
                                  #  - moduleRoot STR: prefixing module name in 'amd'
                                  #  - modulesIds BOOL: if true, add module names in definitions
                                  #  - moduleId MODULE or getModuleId('MODULE')->MODULE: custom module name
                                  #  - resolveModuleSource(FILE, FILENAME)->FILE: calls when using import 'FILE'
                                  #  - keepModuleIdExtensions BOOL: keep file extensions in MODULE

process.env.NODE_ENV              #Transformed to current value. 
                                  #Plugin 'transform-inline-environment-variables'
