
           
   SOLID   
           


MODULARITY ==>                    #Goals are to increase:
                                  #  - granularity: decomposing a system into smaller modules
                                  #  - orthogonality: modifying a module does not modify others
                                  #  - scalability: how easy to extend a system

SINGLE RESPONSIBILITY ==>         #A module|class must have a single responsibility (i.e. "reason to change")
                                  #"S" of SOLID principles

LOOSE COOPLING ==>                #Also called "law of Demeter"
                                  #Minimizing knowledge between modules

OPEN/CLOSE PRINCIPLE ==>          #Interfaces should encourage being extended, as opposed to being modified.
                                  #E.g. by using polymorphism
                                  #"O" of SOLID principles

LISKOV SUBSTITUTION PRINCIPLE ==> #Also called LSP, substitutability
                                  #A parent should be substitutable by its child, i.e. the child (see "design by contract"):
                                  #  - does not add preconditions, exceptions, time complexity
                                  #  - does not remove postconditions, side effects
                                  #  - keep invariants, side effects
                                  #As such children should tend towards looser input, stricter output
                                  #When a parent takes as argument and returns a polymorphic TYPE, the child:
                                  #  - must take a contravariant TYPE as argument, i.e. TYPE or a parent of it, so it only removes preconditions
                                  #  - must return a covariant TYPE, i.e. TYPE or a child of it, so it only adds postconditions

INTERFACE-SEGREGATION ==>         #Minimizing interface size

DEPENDENCY INVERSION ==>          #Modules should only used other modules through those modules interfaces

ADAPTER PATTERN ==>               #Interface shared by several modules, i.e. abstracting their differences
                                  #Interface can be interacting with the modules through:
                                  #  - composition ("object adapter")
                                  #  - inheritance ("class adapter")
