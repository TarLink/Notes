
              
   PASSPORT   
              


PASSPORT                      #Node module (0.2.0) for authentication on Express. Uses plugins called strategies.
                              #Most providers should be used with their plugins: Google, Facebook, Twitter, Dropbox, Salesforce
                              #GitHub, LinkedIn, Instagram, MailChimp, Windows Live, YouTube, etc.

EXAMPLE ==>                   #  PASSPORT.use( new STRATEGY() );
                              #  PASSPORT.serializeUser( FUNC(...) );
                              #  PASSPORT.deserializeUser( FUNC(...) );
                              #  APP.use( EXPRESS-SESSION(...) )
                              #     .use( PASSPORT.initialize() )
                              #     .use( PASSPORT.session() )
                              #     .get( LOGIN_PATH, PASSPORT.authenticate(STRATEGY), MIDWR_FUNC(...) )
                              #     .get( PROTECTED_PATH, function(req, res) { if ( req.isAuthenticated() ) { ... } } )
                              #         //PROTECTED_PATH only if non stateless authentication


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             MAIN              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


PASSPORT.initialize([OBJ])    #Express MIDWR that must be loaded:
                              #  - before any other PASSPORT.* calls, except PASSPORT.use|[de]serializeUser()
                              #  - after REQ.session is created (if available)
                              #Uses REQ._passport to store variables
                              #OBJ:
                              #  - userProperty VAR_STR: to use another variable than REQ.user

REQ.user                      #Set when authentication succeeded. Only for internal use, prefer REQ.is[Un]authenticated()
REQ.is[Un]authenticated()     #Checks if authenticated (by checking if REQ.user exists)
REQ.login(USERVAL[, PP_OBJ],  #Assigns REQ.user = USERVAL, used by this.success(). 
FUNC(ERROR))                  #Prefer using PASSPORT.authenticate() directly.
REQ.logout()                  #Erases REQ.user, effectively logging out current user.

PASSPORT.use                  #Registers STRATEGY_STR (def: STRATEGY.name) as alias to STRATEGY.
([STRATEGY_STR, ]STRATEGY)    #Should use aliases if different STRATEGY from the same constructors (e.g. a STRATEGY that
                              #implements several authentication methods, or an authentication and authorization method).
                              
STRATEGY                      #Authentication method, that should derive from base class PASSPORT-STRATEGY (even if doesn't 
                              #add anything).
STRATEGY.authenticate         #Method to implement to create a custom STRATEGY.
(REQ[, PP_OBJ])               #Notify PASSPORT.authenticate state, according to REQ, by firing a this.*() method:
                              #  - good authentication: this.success(USERVAL[, OBJ2]):
                              #     - OBJ2.type|message overrides REQ.flash(...) if PP_OBJ.successFlash
                              #     - OBJ2.message overrides for REQ.session.messages if PP_OBJ.successMessage
                              #  - bad authentication: this.fail([STR, ]NUM):
                              #     - NUM is status code (def: 401), STR Header WWW-Authenticate [S] value
                              #  - server side error: this.error(ERROR)
                              #  - authentication not relevant: this.pass()
                              #  - redirection: this.redirect(URL[, NUM]) (def: 302)
                              #PP_OBJ are same as PASSPORT.authenticate(), and can implement custom options.
STRATEGY.name                 #STRATEGY_STR, usually NAME in PASSPORT-NAME

PASSPORT.authenticate         #Express MIDWR that fires STRATEGY.authenticate(REQ, PP_OBJ) (usually in a route)
(STRATEGY_STR[_ARR][, PP_OBJ])#According to REQ, can either:
                              #  - good authentication:
                              #     - assign REQ.user = USERVAL then calls NEXT()
                              #     - if PP_OBJ.successRedirect[ToOrRedirect] URL:
                              #        - fires RES.redirect(URL) instead of calling NEXT()
                              #        - if "ToOrRedirect" and REQ.session.returnTo URL2, uses URL2 instead (and delete it)
                              #  - bad authentication:
                              #     - Sends 401 (or other status code) with Header WWW-Authenticate (usually)
                              #     - if PP_OBJ.failWithError true, fires NEXT(ERROR) instead
                              #  - server side error: NEXT(ERROR)
                              #  - authentication not relevant: NEXT()
                              #  - redirection: RES.redirect(URL, NUM)
                              #If several STRATEGY_ARR, means "any of them can work".
                              #Login action vs login action:
                              #  - if stateless authentication (e.g. token-based), use only login action, no login check
                              #  - otherwise:
                              #     - login action: use PASSPORT.authenticate()
                              #     - login check: 
                              #        - use REQ.isAuthenticated() (redirect to login page if not).
                              #        - requires using REQ.session (must be available):
                              #           - PP_OBJ.session must be true (def): should put to false if token-based
                              #           - must call MIDWR PASSPORT.session() right after PASSPORT.initialize():
                              #              - REQ.login() creates copy of REQ.user at REQ.session.passport.user
                              #              - REQ.logout() erases both
                              #              - Express MIDWR PASSPORT.session() retrieves REQ.user = REQ.session.passport.user
                              #           - REQ.user USERVAL <-> REQ.session.passport.user USERVAL2: 
                              #              - must register transform functions (mandatory) (can register several) with:
                              #                  PASSPORT.[de]serializeUser
                              #                  (FUNC([REQ, ]USERVAL|USERVAL2, FUNC2(ERROR, USRVAL2|USRVAL)))
                              #                Goal is when USERVAL is too big, to keep REQ.session small
                              #                Any ERROR is passed as NEXT(ERROR)
                              #PP_OBJ:
                              #  - success|failureFlash true|STR: fires REQ.flash("success|error", STR) (see CONNECT-FLASH)
                              #    If true, onlye does something is OBJ2 in STRATEGY this.success|fail()
                              #  - success|failureMessage true|STR: adds STR to REQ.session.messages STR_ARR
PASSPORT.authorize(...)       #Like PASSPORT.authenticate(...) but:
                              #  - assigns REQ.account = USERVAL instead of REQ.user.
                              #    Goal is to get information USERVAL after authentication happened.
                              #  - As such, doesn't use session, PP_OBJ.successRedirect[ToOrRedirect] nor PP_OBJ.authInfo
REQ.authInfo                  #If PP_OBJ.authInfo true, assigns REQ.authInfo = VAL, from this.success(USERVAL, VAL)
                              #Allows strategy to pass extra info (beyond REQ.user) after authentication.
                              #OBJ2 can be transformed using chain of transform functions to register with:
                              #  PASSPORT.transformAuthInfo(FUNC(VAL, FUNC2(ERROR, VAL)))

CHAI.use
(CHAI-PASSPORT-STRATEGY)      #Mock STRATEGY to test STRATEGY without requiring running EXPRESS.
CHAI.passport.use(STRATEGY)   #Returns MOCKEDSTRATEGY. All methods except authenticate() returns it, so can chain.
MOCKEDSTRATEGY.success|fail|
redirect|pass|error(FUNC(...))#Setup mocked handlers fired by STRATEGY this.*(...)
MOCKEDSTRATEGY.               #Setup mocked REQ (by def. only members method "GET", url "/" and headers {})
req(FUNC(REQ[, FUNC2()])      #Uses FUNC2() if async.
MOCKEDSTRATEGY
.authenticate([PP_OBJ])       #Calls STRATEGY.authenticate(REQ, PP_OBJ) with mocked REQ and authentication handlers


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          STRATEGIES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


new PASSPORT-ANONYMOUS()      #STRATEGY that just call this.pass() (1.0.1)
                              #Goal is to put as last one in STRATEGY_ARR, so that unauthenticated requests are allowed, 
                              #but MIDWR can check whether REQ.is[Un]authenticated()

new PASSPORT-LOCAL            #STRATEGY (1.0.0) that checks a USERNAME and PASSWORD passed as POST|GET variables:
([OBJ, ]FUNC([REQ, ]          #  - USERNAME = REQ.body|query[OBJ.usernameField] (def: "username")
USERNAME_STR, PASSWORD_STR,   #  - Same for PASSWORD (def OBJ.passwordField: "password")
FUNC2(ERROR, USERVAL, OBJ2))) #  - OBJ.username|passwordField can go deeper in REQ.body|query OBJ2, 
                              #    e.g. "username[subfield][subsubfield]"
                              #  - REQ.body must be available if REQ.body used (see BODY-PARSER)
                              #Fires:
                              #  - this.fail(OBJ3, 400) if no USERNAME or PASSWORD found (before FUNC2()), or if == "":
                              #     - OBJ3 is { message: OBJ.badRequestMessage } (def: "Missing credentials")
                              #  - this.fail(OBJ2) if !USERVAL
                              #  - this.success(USERVAL, OBJ2) otherwise
                              #  - this.error(ERROR) if ERROR
                              #To use REQ, must OBJ.passReqToCallback true
                             ##Can use PASSPORT-LOCAL-MONGOOSE to store on MongoDB and handle hashing and extra infos
                             ##(when logged in), attemps limits (see online doc).
new                           #Same thing (0.0.3) except:
PASSPORT-LOCALAPIKEY.Strategy #  - can use HTTP header too
                              #  - use OBJ.apiKeyField (body|query) or OBJ.apiKeyHeader
                              #  - use only KEY_STR instead of USERNAME_STR, PASSWORD_STR
                              #  - instead of this.fail(OBJ3, 400), does this.fail(ERROR)
                              
new PASPORT-HTTP.BasicStrategy#STRATEGY for HTTP Basic Authentication.
([OBJ, ]FUNC([REQ, ]          #Fires:
USERNAME_STR, PASSWORD_STR,   #  - this.fail('Basic realm="REALM"', 401) (first round of HTTP Authentication Basic) if:
FUNC2(ERROR, USERVAL)))       #      - no Authorization: Basic [C]
                              #      - username or password is empty  
                              #      - !USERVAL
                              #    REALM is OBJ.realm (def: "Users")
                              #  - this.fail(400) if Authorization [C] header is malformed
                              #  - this.success(USERVAL) if USERVAL
                              #  - this.error(ERROR) if ERROR)
                              #To use REQ, must OBJ.passReqToCallback true
                              #STRATEGY.name is "basic"
                              
new PASSPORT-HTTP.            #STRATEGY for HTTP Digest Authentication.
DigestStrategy([OBJ,]FNC(USER,#FUNC() retrieves USERVAL and PASSWORD, then checks HASH(PASSWORD) == Authorization: response [C]
FUNC3(ERROR,USERVAL,PASSWORD))#PASSWORD is either plaintext PASSWORD_STR or { ha1: MD5(USERNAME:REALM:PASSWORD) } 
[,FUNC2(OBJ,FNC4(EROR,BOOL))])#(prefer to avoid storing plaintext passwords).
                              #Fires:
                              #  - this.fail('Digest VAR="VAL" ...', 401) (first round of HTTP Authentication Digest) if:
                              #      - no Authorization: Digest [C]
                              #      - no Authorization: username
                              #      - !USERVAL
                              #      - Wrong password
                              #    Where VAR="VAL" (all optional but realm):
                              #      - realm: OBJ.realm STR (def: "Users")
                              #      - nonce: 32 random alnum (use Math.random())
                              #      - algorithm: OBJ.algorithm STR (def: "MD5")
                              #      - qop: OBJ.qop STR[_ARR] ("auth-int" not implemented)
                              #      - domain: OBJ.domain STR[_ARR]
                              #      - opaque: OBJ.opaque STR
                              #  - this.fail(400) if:
                              #      - Authorization [C] header is malformed
                              #      - Authorization: uri != REQ.url
                              #  - this.error(ERROR): if ERROR
                              #  - this.success(USERVAL): if USERVAL, and Authorization: response [C] = HASH(PASSWORD)
                              #If FUNC2(OBJ, FUNC4(BOOL)):
                              #  - verify nonces are ok, with OBJ members: nonce, cnonce, nc, opaque:
                              #     - should check nonce is same as what was sent
                              #     - should check if nc > 1, that it is incrementing and using the same cnonce
                              #  - must fire FUNC4(true) if ok
                              #If SSL, can probably skip FUNC2() and only set OBJ.realm
                              #STRATEGY.name is "digest"

new PASSPORT-HTTP-BEARER      #Same as PASSPORT-LOCAL but uses TOKEN instead of USERNAME+PASSWORD, where TOKEN is 
([OBJ, ]FUNC([REQ, ]TOKEN,    #Authorization: TOKEN [C] or access_token in REQ.query|body (if REQ.body exists, must be OBJ).
FUNC2(ERROR, USERVAL, OBJ2))  #Also:
                              #  - this.fail(400) if malformed
                              #  - this.fail('Bearer VAR="VAL"') if authorization problem:
                              #     - realm="OBJ.realm" (def: "Users")
                              #     - scope="OBJ.scope" (optional)
                              #     - error="invalid_token" error_description="OBJ2.message" (second-round only)
