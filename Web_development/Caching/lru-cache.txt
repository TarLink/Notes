
               
   LRU-CACHE   
               


VERSION ==>                       #2.5.0
                                  #Is a Node module

LRU([OBJ])                        #Returns a LRUCACHE (last recently used).
                                  #Options are:
                                  #  - max NUM (déf: Infinity)
                                  #  - maxAge NUM (in ms, déf: null)
                                  #  - stale BOOL (déf: false): if true, getting an item over maxAge will return it, then
                                  #    set it to undefined. Otherwise, set it to undefined, then return undefined
                                  #  - length FUNC(VAL): number of spaces taken by each VAL. By def., always returns 1.
                                  #    Only calculates the first time each given key is used.
                                  #  - dispose FUNC(KEY_STR, VAL): fired each time a VAL is being set/reset, except when set
                                  #    the first time for each given key
                                  #    Called before set/reset, so to put it back, use nextTick()

LRUCACHE.get(KEY_STR)             #
LRUCACHE.set(KEY_STR, VAL)        #Returns true if went through
LRUCACHE.peek(KEY_STR)            #Like get() but doesn't update the recently used-ness
LRUCACHE.del(KEY_STR)
LRUCACHE.reset()

LRUCACHE.has(KEY_STR)             #Doesn't update the recently used-ness
LRUCACHE.keys|values()            #Returns an ARR
LRUCACHE.forEach(
FUNC(VAL,KEY_STR,LRUCACHE)[, OBJ])#Most recently used items first. OBJ is this (déf: LRUCACHE)
