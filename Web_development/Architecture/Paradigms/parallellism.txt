
                 
   PARALLELISM   
                 


GOAL ==>                          #Performance
                                  #Often used with math-heavy computing, e.g. 3D graphics (quaternions), crypto, compression

FLYNN'S TAXINOMY ==>              #Level of parallelism:
                                  #  - SISD (single instruction, single data): usual scheme
                                  #  - SIMD (single instruction, multiple data)
                                  #  - MISD (multiple instruction, single data): not often used
                                  #  - MIMD (multiple instruction, multiple data): used by supercomputers

ARRAY PROGRAMMING ==>             #I.e. SIMD|MIMD
                                  #Using vector types and operations
                                  #Requires vector|array CPU (as opposed to scalar CPU)
                                  #  - "vectorization optimization": making language compile to SIMD CPU instructions

SUPERSCALAR ==>                   #I.e. MISD|MIMD
                                  #Single clock cycle can perform several different instructions

PIPELINING ==>                    #Dividing instruction into subparts, and executing them not necessarily sequentially
                                  #Often used with superscalar CPU
                                  #Classical RISC pipeline:
                                  #  - instruction fetch (IF): get instruction from cache
                                  #  - instruction decode (ID): parse instruction
                                  #  - execute (EX): computation
                                  #  - memory access (MEM)
                                  #  - writeback (WB): write result to register

OUT-OF-ORDER EXECUTION ==>        #When CPU fetches memory (i.e. address operands) async (queueing) instead of sync (waiting)
