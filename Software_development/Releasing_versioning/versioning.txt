
                
   VERSIONING   
                

V.|:X[.Y]][+opt][-Z]    #  - V est le major release number, signifie backward-incompatible changes
[word]                  #  - X est le minor release number, signifie backward-compatible new features
                        #  - Y est la revision/bugfix number, signifie backward-compatible bugfixes
                        #  - Z est le build, différents builds faits, pas forcément stable et pas mis à dispo du public, 
                        #    contrairement à la release. Pas dévoilée sinon.
                        #    Contrairement aux autres, doit commencer à 1 non 0
                        #    Ex: -alpha.1
                        #  - opt indique build metadata/options
                        #  - word désigne la plateforme cible
                        #For 0.* version, the major release number if the second one, etc.
                        #Semantic versioning ("semver"): using V.X.Y[...] with exactly meaning above.

AUTRE VERSIONING ==>    #  - Utiliser timestamp, par exemple 20120302, ou Ubuntu 11.10
                        #  - associer des mots, plus marketing

bêta                   #Un logiciel bêta doit être < 1.0
BUILDS ==>              #Autre définition de bêta :
                        #  - une pre-alpha est avant la production du code (recherche)
                        #  - un premier build est une alpha (developer testing)
                        #  - puis bêta (community testing),
                        #  - puis plusieurs release candidates (rc)
                        #  - jusqu'à l'incrémentation du revision number (r)
                        #Auquel cas -Z est parfois remplacé par a1, b2, (b3...) rc3, rc4, etc.

PLUSIEURS TIMELINES ==> #Il est possible de maintenir plusieurs versions plus ou moins stable :
                        #  - par exemple une très stable n'étant modifiée que lors d'une release considérée très stable ; une
                        #    moins stable s'incrémentant toujours ; etc.

BACKPORT ==>            #Par opposition aux ajouts de fonctionnalité, les bugfixes peuvent/doivent faire l'objet de backports :
                        #proposer un patch appliquables aux versions antérieures également, et à appliquer à toutes les
                        #"timelines" maintenues officiellement.
