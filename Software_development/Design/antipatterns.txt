
                  
   ANTIPATTERNS   
                  


ABSTRACTION_INVERSION   #Une INTERFACE implémente une FONCTION, mais la rend
==>                     #disponible que via une FONCTION_ENGLOBANTE qui rajoute
                        #des choses.
                        #Une SUBCLASSE désire utiliser la FONCTION seule et non
                        #la FONCTION_ENGLOBANTE, et donc la réimplémente dans
                        #sa propre interface. Cette nouvelle fonction appelle
                        #donc la FONCTION_ENGLOBANTE qui rappelle la FONCTION
                        #première, entraînant un gâchis de ressources et de 
                        #code.
                        #Exemple : fonctor en C++, nécessite création d'une
                        #          classe, pour réimplémenter le comportement
                        #          d'une fonction.

THE BLOB / THE GOD      #Piece of code too big or that do too many different things.
CLASS / WINNEBAGO ==>   #Should be broken down into smaller pieces

LAVA FLOW / DEAD CODE   #Makes understanding code harder, and waste memory.
==>                     #Should be cleaned up, or better not put there in the first place:
                        #  - do not implement things that "might one day" be used

FUNCTIONAL DECOMPOSITION#Inverse of God class: 
==>                     #  - not using classes to gather logic of same concern.
                        #  - instead using many mini-classes
                        #Makes OOP actually procedural.

SPAGHETTI CODE ==>      #Complicated data flow:
                        #  - physical-wise: in many files
                        #  - logical-wise: go back and forth in same functions
