
            
   TRAVIS   
            


WHAT IT DOES ==>              #At every push received and pull requests, do a build:
                              #  - git clone --depth=50 --branch=LBRANCH REPO DIR, cd DIR, git checkout -qf COMMIT
                              #  - do several jobs, according to the build matrix
                              #     - each job run script at every STEP
                              #  - goal is:
                              #     - continuous integration (should merge topic branches several times a day, fast releases)
                              #     - continuous deployment (every merge -> release)
                              #Clients:
                              #  - Web app: https://travis-ci.org/USER/REPO
                              #  - Command line: travis.rb
                              #  - Wall: http://williamdurand.fr/TravisLight, http://egeloen.fr/travis-wall
                              #  - Mobile app: Mantis-CI (iPhone), Jarvis (iPad), Siren of shame
                              #    (iPhone, Android phone, Android tablet, with Gamification)
                              #  - Desktop notifications: BuildNotify (Linux), CCMenu (OSX), CCTray (Windows)
                              #  - Browser plugin: My Travis (Chrome)
                              #  - Tron CI: scheduled builds
                              #Can test without push by going to GitHub REPO > Settings > Webhooks > Test service

STEPS ==>                     #  - before_install: 
                              #     - e.g. apt-get update -qq
                              #  - install: 
                              #     - e.g. apt-get install -qq (not apt-get upgrade)
                              #  - before_script: 
                              #     - e.g. additional manual install (compiling from source), starts database|server|daemon, 
                              #       config
                              #  - script: 
                              #     - e.g. npm test
                              #  - after_success: 
                              #     - e.g. deploying
                              #  - after_failure: 
                              #     - e.g. notifications
                              #  - after_script
                              #  - before|after_deploy
                              #Notes:
                              #  - STEP with exit code != 0:
                              #     - *install, before_script: job is errored, stops job
                              #     - script: job is failed, doesn't stop job
                              #     - others: doesn't do anything
                              #     - job errored|failed marks the whole build as such
                              #        - unless TRAVISCONF.matrix.allow_failures MATRIX_OBJ_ARR
                              #        - if TRAVISCONF.matrix.fast_finish true, build marked as finished even if allowed 
                              #          failured not finished
                              #     - can use set -ev in Bash scripts:
                              #        - -e: exit 1 if any commands exit code != 0 
                              #        - -v: prints read line (verbose)
                              #  - all STEP are concatenated in one Bash script, so should not use "exit" in STEP STR, but
                              #    can use it in FILE if STEP "./FILE"
                              #  - must use sudo for privileges (don't require password typing), e.g. apt-get
                              #  - can print log on purpose

.travis.yml                   #TRAVISCONF
                              #Can be validated with lint.travis-ci.org
                              #Should be at root of REPO:
                              #  - language STR: node_js, c, cpp
                              #  - STEP BASH_COMMAND_STR[_ARR] (if "STR;STR2", only does STR)
                              #  - env.global|matrix STR_ARR "ENVVAR=VAL ...": global doesn't generate new row for build matrix
                              #  - git.submodules BOOL (def: true): automatically init and update git submodules if .gitmodules
                              #  - addons.hosts HOSTNAME_ARR: for custom host names
                              #Language-specific:
                              #  - node_js:
                              #     - node_js STR_ARR, among "v0.6|8|10|11" (use latest, e.g. 0.10.x)
                              #     - def STEP:
                              #        - install: npm install (-S -D assumed)
                              #        - script: npm test
                              #  - c|cpp:
                              #     - compiler STR_ARR, among "gcc" or "clang"
                              #     - def STEP:
                              #        - script: ./configure && make && make test

BUILD MATRIX ==>              #Runs several jobs by build according to the build matrix:
                              #  - MATRIX_OBJ: 
                              #     - params in TRAVISCONF specifying important configuration: runtime version (e.g. node_js),
                              #       ENVVARs (env), others for some language
                              #     - do one job for each params combination
                              #     - TRAVISCONF.matrix:
                              #        - exclude MATRIX_OBJ
                              #        - include: MATRIX_OBJ. Adds a specific combination to original MATRIX_OBJ 
                              #          (if there is one)
                              #  - can be used with different ENVVAR to speed up builds (more concurrent jobs), usually using
                              #    ENVVAR TEST_SUITE (e.g. "units", "integration", "e2e") or TEST_FOLDER DIR
                              #  - each job times out at 50mins, or no log output in 10mins

CHOOSING WHICH COMMITS ==>    #Can build only for specific:
                              #  - commits: skip if commit message includes "[ci skip]"
                              #  - branches:
                              #     - TRAVISCONF.branches.only|except LBRANCH_STR|REGEXP[_ARR]: 
                              #        - whitelist|blacklist (can't use both)
                              #        - gh-pages only included if only

ENVIRONMENT ==>               #Builds in a VM:
                              #  - Preserves no state between builds
                              #  - Ubuntu 12.04 LTS Server Edition 64 bits, 3GB RAM, CPU 1.5 cores
                              #  - IPv6, localhost works
                              #  - programs:
                              #     - git, imagemagick
                              #     - gcc, clang, make, autotools, cmake, scons 
                              #     - curl, wget, openssl, rsync 
                              #     - go, python, ruby, java, node
                              #     - mysql, postgresql, sqlite, mongodb, redis, riak, cassandra, neo4j, elasticsearch, couchdb
                              #     - rabbitmq, zeromq
                              #     - phantomjs, xvfb
                              #     - others: check /usr/bin and /bin to make sure it is not there before installing

ENVVAR ==>                    #  - always:
                              #     - CI|TRAVIS|CONTINOUS_INTEGRATION true
                              #     - LANG|LC_ALL en_US.UTF-8
                              #     - RAILS|RACK|MERB_ENV test
                              #     - TRAVIS_NODE|GO|JDK|OTP|PERL|PHP|PYTHON|RUBY|SCALA_VERSION
                              #     - PATH include ./node_modules/bin
                              #  - git:
                              #     - TRAVIS_REPO_SLUG: USER/REPO
                              #     - TRAVIS_BRANCH: LBRANCH (for pull requests, target branch)
                              #     - TRAVIS_TAG: TAG
                              #     - TRAVIS_COMMIT: COMMIT
                              #     - TRAVIS_COMMIT_RANGE: COMMI2...COMMIT
                              #     - TRAVIS_PULL_REQUEST: pull request id, or false
                              #  - Build|job:
                              #     - TRAVIS_BUILD_DIR: from git clone REPO DIR
                              #     - TRAVIS_BUILD|JOB_ID|NUMBER
                              #     - TRAVIS_TEST_RESULT: used in after_success|failure|script STEP

SERVICES ==>                  #TRAVISCONF.services STR[_ARR]: 
                              #  - automatically starts a database server at before_install STEP
                              #  - Types:
                              #     - postgresql: 
                              #        - can use psql, with user postgres
                              #        - can use PostGIS
                              #        - must use:
                              #           - TRAVISCONF.addons.postgresql "9.1|2|3"
                              #           - before_script STEP: creating a database with psql -c "create database DATABASE;"
                              #     - redis-server: runs on localhost

NOTIFICATIONS ==>             #TRAVISCONF.notifications (according to build status failure|success):
                              #  - email:
                              #     - recipients EMAIL[_ARR]|false
                              #     - on_success|failure: always|never|change (def: on_success change, on_failure always)
                              #  - webhooks:
                              #     - urls URL[_ARR]: POST - URL:
                              #        - JSON with all info
                              #        - Authorization: token TOKEN [C], where TOKEN is SHA2(GITHUB_USER, REPO, TRAVIS_TOKN)
                              #     - on_success|failure (see above)
                              #     - on_start BOOL (def: false)
                              #  - irc
                              #  - campfire|flowdock|hipchat|sqwiggle|slack

SAUCELABS ==>                 #TRAVISCONF.addons.sauce_connect
                              #  - username|access_key: 
                              #     - or just sauce_connect: true, then using ENVVAR SAUCE_USERNAME|ACCESS_KEY
                              #     - ACCESS_KEY should be encrypted (so cannot use for pull requests)
                              #     - CAPAB_OBJ:
                              #        - tunnel-identifier: TRAVIS_JOB_NUMBER
                              #        - build: TRAVIS_BUILD_NUMBER
                              #        - tags: TRAVIS_*_VERSION, CI
                              #Only to launch Sauce Connect, not Sauce Labs

CONTINOUS DEPLOYMENT ==>      #TRAVISCONF.deploy OBJ_ARR:
                              #  - automatic deploy if success
                              #  - OBJ: 
                              #     - provider PROVIDER_STR
                              #     - on (conditional deploy): 
                              #        - repo USER/REPO
                              #        - branch LBRANCH (def: app-*, master) or all_branches true
                              #        - node|jdk|perl|php|python|ruby|scala|go VERSION[_ARR]
                              #        - condition BASH_COMMAND_STR
                              #        - tags true: only when TAG is applied (only if all_branches true)
                              #     - skip_cleanup false: don't cleanup files
                              #  - other options depend on PROVIDER:
                              #     - npm:
                              #        - email EMAIL
                              #        - api_key API_KEY (use npm login)
                              #     - releases (GitHub)
                              #        - api-key OAUTH_TOKEN: with [public_]repo scope
                              #        - username|password STR: alternative (prefer OAuth)
                              #        - file FILE[_ARR]

PRIVATE TOKENS ==>            #Uses Travis command line:
                              #  - travis login [--github-token OAUTH_TOKEN]: must be done first
                              #     - travis logout
                              #  - travis encrypt STR [--add TRAVISCONF.VAR.VAR2 [--override]]: 
                              #     - encrypts with auto-generated RSA from user account.
                              #     - Can then put encrypted STR2 as { secure: STR2 } instead of STR anywhere in .travis.yml
                              #     - Not available for pull requests.
                              #     - Sets ENVVAR TRAVIS_SECURE_ENV_VARS true if secure envvar are available.
                              #     - --split: when receiving several STR... by stdin
                              #  - travis encrypt-file FILE: 
                              #     - same for file. 
                              #     - Could also travis encrypt PASSWORD, then decrypt in before_script STEP
                              #  - travis pubkey [-r USER/REPO] [--pem] [--fingerprint]: retrieves personal public key

https://travis-ci.org/        #Status image. Def LBRANCH is latest build's
USER/REPO.svg[?branch=LBRANCH]#Should link to https://travis-ci.org/USER/REPO[?branch=LBRANCH]

PRO ==>                       #Can:
                              #  - add private GitHub repos 
                              #  - cache dependencies (so no need to always run install STEP)

REST API                      #Requests:
                              #  - domain https://api.travis.org/
                              #  - User-Agent [C], Accept: application/vnd.travis-ci.2+json [C]
                              #  - Authorization: token TOKEN:
                              #     - POST - /auth/github:
                              #        - github_token: GITHUB_OAUTH_TOKEN: scopes "read:org", "user:email", 
                              #          "repo_deployment", "repo:status", "write:repo_hook"
                              #        -> access_token: TOKEN
                              #Resources: 
                              #  - accounts
                              #  - users:
                              #     - permissions
                              #  - builds
                              #     - commits
                              #  - jobs:
                              #     - annotations
                              #  - repos:
                              #     - branches
                              #     - caches
                              #     - key
                              #     - settings
                              #        - sshkey
                              #     - envvar
                              #  - logs
                              #  - requests
                              #  - hooks
                              #  - broadcasts
                              #  - lint
                              #Methods: 
                              #  - GET|POST|PUT|PATCH|DELETE /RESOURCES[/ID]

travis                        #Command line client
