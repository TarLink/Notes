
             
   PARSING   
             


Goal is STR/serialized -> OBJ/deserialized (AST, Abtract Syntax Tree)

Types:
  - lexer/tokenizer/lexical analysis: break STR into tokens
  - parser/syntax analysis: add meaning/information to tokens

Formal language:
  - letters: possible token
  - words/well-formed-formulas: several tokens
  - alphabet: set of possible letters
  - language: set of possible words
     - expressed using grammar, i.e. set of rules:
        - rule: turn a possible combination of words into higher-level ones
        - set of words on the left side (higher-level) are "non-terminal words", all other are terminal

Type of grammar:
  - context-free grammar: rules have:
     - left-side: single non-terminal word
     - right-side: 0+ [non-]terminal words
  - context-sensitive grammars: rules have:
     - left|right-side: 0+ [non-]terminal words
  - unrestricted grammar
