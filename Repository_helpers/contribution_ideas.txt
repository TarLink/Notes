
                   
   CONTRIB_IDEAS   
                   


  - REST API framework, based on Mongoose (doing what the OTaC API does)
  - cloning Jasper, but open source
  - my own awesome-analytics
  - simple CSS in JavaScript: just import CSS string then use Handlebars them inject as <style>
     - or manipulating CSS variables from within JavaScript
  - PostCSS polyfills for next CSS features
  - Video analytics (unless already done):
     - record all HTML5 video events
     - nice data visualization


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        SESSION REPLAY         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


  - Better session recorder:
     - better alternative to session replays tools like inspectlet, mouseflow, sessioncam
     - they work by recording few UI events, then replaying them on a still server-side-generated webpage screenshot
     - different approach:
        - record HTML+CSS:
           - how:
              - either poll for snapshots
              - or listen to MutationObserver DOM events, and record increment in a smart way
           - problems:
              - need to simulate browser (SauceLabs, etc.) to get real picture
              - what about links? they need to be fetched right away
           - benefit: work with single-page-applications, i.e. JavaScript that changes HTML+CSS
        - record all DOM events, not only click and scroll
        - need to figure out how to replay embedded elements, i.e. <audio>, <video>, <canvas>
        - record user ID/profile (need to check legality of this)
           - can also integrate with CRM
        - not recording sensitive information
        - events on native apps
        - events on IoT
        - allow debugging recording's DOM with devtools
        - send custom OBJ to every call, e.g. summarizing JavaScript state
     - like the other approaches:
        - record page change (including HTML5 history)
        - record general analytics (e.g. user agent) to be able to filter recording/visualization
        - computation/visualization:
           - heatmaps, for each DOM event and their computation, with overlay on site
           - overlay on site with max scrolling
           - form controls interaction
           - funnels
           - computed events (e.g. pageview->click), with overlay on site
           - comments on recording
           - search bar
        - export to video
        - REST API
        - integrations to push content to analytics, A/B testing tools, voice of customer
        - integrations to put snippet to CMS, etc.
        - whitelist pages to record
        - performance: only record a sample of visits, realtime, requests queueing/batch, rate customization, 
        - adminitration: many sites, permissions
     - business approach:
        - open-source code
        - storing and generating replays: SaaS
License:
  - figure out what are my goals
  - find best license combinations

Market research:
  - competitors:
     - features
        - including how capture is done
     - license
     - pricing
     - volume (e.g. number of users, website traffic)
     - marketing communication/strategy
     - clients (industries)
     - team size and roles

Ideas:
  - only show interaction on specific page or element or screen region
  - heatmaps on specific element, wherever it was in the screen region
  - UX research tools features?
     - could be browser extension
     - but then shouldn't it use webrtc screen capture?

Goal:
  - to capture user experience
  - possible uses:
     - debugging
     - sales
     - UX research

Features:
  - to capture user experience:
     - replay fidelity
        - including touch UX
     - enriched UX:
        - flagged events
        - form control interaction
     - data visualization
        - replay
        - heatmap
        - form analytics
        - crosstabulation with agent/session properties
  - without deteriorating it:
     - client performance
     - privacy
     - security
  - programmer-friendly:
     - open source
     - programmer-friendly (e.g. REST API)
     - integrations

DOM element variation:
  - always unique vs often same
  - big vs small region
  - big change (whole children different) vs small change (add one specific child)
  - same DOM element but in a different place, or wrapped

Same DOM element but different CSS because:
  - slightly different attributes
  - different children
  - variation of another DOM element changing this element's:
     - intrisic CSS
     - place in the flow
  - different matching CSS media query

Same DOM element but different signature although CSS same

Idea (heatmaps):
  - use filters:
     - on the state:
        - DOM element: present, HTML/CSS properties
        - user agent (width|height, etc.)
        - URL
        - etc.
     - which updates:
        - DOM: show most common snapshot
           - definition of "common": most individual DOM elements (according to signature) shared by other snapshots
        - events used for heatmap
  - event targeting:
     - on DOM element, wherever it is on the page
     - use percentage positioning, inside the DOM element box
     - need good signature: even if different children, or slightly different parent (wrapping), or slightly different HTML attributes

Idea (session replay):
  - polls to log state (including all DOM)
     - optimization: use recursive hash to not send same part of DOM twice
  - log events, with their target signature and position inside target

Idea (form analytics):
  - can be retrieved from events


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           AUTOREST            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Principle of autorest:
  - easy: 
     - fast|easy to deploy and maintain
     - declarative
     - convention over configuration
  - flexible:
     - agnostic to:
        - database (SQL, document-oriented, key-value store, realtime)
        - ORM itself (Waterline, etc.)
        - declarative file (Swagger, API blueprint, RAML)
        - protocol (HTTP, WebSocket)
        - input|output format (JSON, YAML, XML, HTML)
        - IDL (REST, GraphQL, JSON-RPC)
        - framework (Express, Koa, restify)
        - programming language (JavaScript, Go, etc.): do core in Node.js and only allow limited flexibility in programming languages, i.e. must be based on that core? E.g. for validation layer, do not pass raw request|response but abstracted function with abstracted input
        - each layer (validation, authorization, etc.) is wrapped by abstraction layer to allow for different core modules
        - logging
        - monitoring
     - modular, pluggable
     - does not dictate usage or semantics
  - open:
     - standard-driven
     - open-source
