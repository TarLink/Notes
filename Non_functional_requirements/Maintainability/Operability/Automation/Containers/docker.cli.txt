
            
   DOCKER   
            


docker inspect IMAGE
docker inspect CONTAINER
docker network inspect NETWORK
docker volume inspect VOLUME_NAME

docker node inspect NODE|self...
docker service inspect SERVICE...
docker inspect TASK

Restructure so that --flag and HOSTCONF.*, etc. are on the same "block" (i.e. get same description)



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            VERSION            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


VERSION ==>                       #1.12.3

docker version                    #Prints current client|server version

SYSINFO."Server Version"          #

IMAGEINFO.DockerVersion           #The image was created with



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           NOTATION            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


ID                                #Can always be shortened

GOTMP                             #Go template, taking an OBJ as input
                                  #Has extra available FUNC:
                                  #  - join ARR
                                  #  - json VAL
                                  #  - lower|upper|title STR
                                  #  - split STR "CHAR"


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        BEST PRACTICES         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


MEMORY AND SWAP ACCOUTING ==>     #  - must be enabled on the OS: performance impact, but better OS memory management
                                  #  - see online doc for how to enable it

CONTAINERS BEST PRACTICES ==>     #Containers should:
                                  #  - make it easy to scale:
                                  #     - be ephemeral, i.e. can be immediately stopped at any time
                                  #  - keep it small:
                                  #     - only include necessary packages
                                  #     - limit number of layers
                                  #  - decouple:
                                  #     - only one purpose/process per container


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          MAIN FILES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCKERDIR                         #Runtime directory for docker with notably:
                                  #  - containers/CONTAINER_ID/:
                                  #     - log files
                                  #     - config, including routing
                                  #  - images/
                                  #  - volumes/: data volumes
                                  #  - swarm/: swarm state
                                  #  - tmp/: can choose different dir with ENVVAR DOCKER_TMPDIR
                                  #Def: /var/lib/docker/
dockerd ...
--exec-root DOCKERDIR             #For container state
-g DOCKERDIR
--graph DOCKERDIR                 #For images
SYSINFO."Docker Root Dir"         #

DOCKERPIDFILE                     #PID of dockerd. Def: /var/run/docker.pid
dockerd ...
-p PIDFILE
--pidfile PIDFILE                 #

                                  
DOCKERHOME                        #~/.docker/
docker ...  
--config=DOCKERHOME [COMMAND]     #Overrides
                                  #If COMMAND, only overrides for docker COMMAND
DOCKER_CONFIG                     #ENVVAR to override DOCKERHOME

DOCKERCONF                        #Either:
                                  #  - docker --config=FILE
                                  #  - DOCKERHOME/config.json


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              OCI              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


OCI ==>                           #Docker is built on top of "Open containers", using containerd
dockerd ...
--containerd FILE                 #Path to containerd socket
--default-runtime NAME            #OCI-compatible runtime (like runC)
                                  #Can also:
                                  #  - use DOCKERCONF.default-runtime NAME
                                  #  - see with SYSINFO."Default runtime"
--add-runtime NAME=PATH           #Adds OCI-compatible runtime
                                  #Can also use DOCKERCONF.runtimes.NAME:
                                  #  - path PATH
                                  #  - runtimeArgs STR_ARR
--exec-opt VAR=VAL                #Options passed to OCI runtime, e.g.
                                  #  - native.cgroupdriver systemd or cgroupfs (def)
                                  #     - can be seen with SYSINFO."Cgroup driver"

docker create ...
--runtime NAME                    #
SYSINFO.Runtimes                  #
HOSTCONF.Runtime                  #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              OS               :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


OS ==>                            #Built on top of LXC, so only run on Linux
                                  #However, on Mac or Windows, installation tools create virtual machine (using Hyper-V)


docker create ...
--sysctl VAR=VAL                  #Linux kernel options (using sysctl)


SYSINFO."Kernel Version"          #
SYSINFO."Operating System"        #
SYSINFO.OSType                    
IMAGEINFO.Os                      #E.g. linux
SYSINFO.Architecture              
IMAGEINFO.Architecture            #E.g. x86_64


HOSTINFO.ConsoleSize              #[NUM, NUM2]. Only for Windows


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            SERVER             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CLIENT-SERVICE ARCHITECTURE ==>   #Client is connected to server (daemon)
                                  #Server can bind to (according to -H):
                                  #  - unix:///PATH: Unix socket (def):
                                  #     - owned by dockerd --group|-G GROUP (def: 'docker') if it exists, "root" (avoid) otherwise
                                  #        - i.e. "docker" group user will have full dockerd access
                                  #  - tcp://HOST[:PORT][/PATH]: TCP:
                                  #     - usually port 2375 if no TLS, 2376 if TLS
                                  #     - PATH will be prepended to all requests
                                  #  - fd://[NUM]: systemd socker
                                  #Def: unix:///var/run/docker.sock
                                  #Server must be run as root (see below)
dockerd|docker ...
-H ...                            #Address server listens to, or client connects to
--host ...                        #Can be used multiple times
DOCKER_HOST                       #ENVVAR to override host


DOCKERCONF.HttpHeaders.VAR        #HTTP header named VAR, value VAL, to add, i.e. always sent by client to server


SERVER                            #Theoritically a server has a name (def: "docker") and a SERVER_ID (def: random)
                                  #I do not know how to set name though
SYSINFO.Name                      #
SYSINFO.ID                        #


dockerd                           #Starts server
                                  #Can change binary path with ENVVAR DOCKERD
                                  #There is support for:
                                  #  - SysVInit: e.g. start (once) with: sudo service docker start
                                  #  - systemd: e.g. start (at each boot) with: sudo systemctl enable docker
                                  #  - upstart
DOCKER_OPTS                       #Extra flags passed to dockerd
--config-file DOCKEDCONF          #JSON config file (def: /etc/docker/daemon.json) to pass extra flags to dockerd
                                  #Cannot be in conflict with options passed on the CLI
                                  #Flags that can appear several times use plural name, e.g. --label STR -> "labels" STR_ARR
                                  #Can be reloaded by sending SIGHUP to dockerd:
                                  #  - only for --debug, --labels, --live-restore, --max-concurrent-* and 


/etc/default/docker               #File read when using SysVInit or upstart, usually setting ENVVAR


MULTIPLE SERVERS ==>              #To run multiple servers on a single host, must be separated from each other using these
                                  #options (documented elsewhere in this doc):
                                  #  - --bridge, --host, --iptables, --tls*: for networks
                                  #  - --exec-root, --graph, --pidfile: for filesystem
                                  #  - --config-file: for config


dockerd ...
--api-cors-header STR             #Sets Access-Control-Allow-Origin [S] (def: no CORS enabled), so that client can be on different host than server


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           REST API            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



DOCKER_API_VERSION                #ENVVAR to specify which version to use (def: latest)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           DEBUGGING           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


dockerd|docker ...
-D
--debug                           #
-l STR
--log-level=STR                   #
SYSINFO."Debug mode client|server"#

SIGUSR1                           #When sent to server, current stack traces will be logged


docker info                       #Prints SYSINFO
SYSINFO                           #System info. Attributes are documented in this doc

DOCKER_NOWARN_KERNEL_VERSION      #ENVVAR to remove warning when Linux kernel version is not compatible



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           BUILDING            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


IMAGE/CONTAINERS ==>              #Are basically a tree of files, with metadata (e.g. COMMANDs)
                                  #Image/containers are basically the same except:
                                  #  - order: container is last layer, images all others
                                  #  - write operations:
                                  #     - when writing to a file, use first layer (starting with container) where this file exists
                                  #     - container is read-write, i.e. normal operation
                                  #     - images are read-only, copy-on-write: copy the file (applying modification to it) to topmost layer (i.e. container)
                                  #  - git commit transform container into image

IMAGE                             #Stateless filesystem snapshot, with metadata
                                  #IMAGE from Docker Hub.
                                  #Pulled unless cached
                                  #Is either:
                                  #  - IMAGE_ID:
                                  #     - SHA256 content hash
                                  #  - [HOSTNAME/][REPO_USER/]IMAGE_NAME[:TAG][@sha256:HASH]:
                                  #     - def HOSTNAME: registry-1.docker.io
                                  #     - REPO_USER (if push|pull, def: docker): see Docker Hub
                                  #     - IMAGE_NAME: [[:alnum:]._-]
                                  #     - def TAG: latest
                                  #     - HASH: content hash

BUILD LAYERS ==>                  #Works in layers:
                                  #  - each layer only contains modification from parent image
                                  #  - parent images are read-only, shared by reference
                                  #     - uses "storage drivers" (see above)
                                  #  - layers are images or containers
                                  #Each Dockerfile instruction (docker build) or commit (docker commit) creates a new layer:
                                  #  - intermediate IMAGE are removed at the end:
                                  #     - unless docker build --rm=false
                                  #     - can force with docker build --force-rm
                                  #  - each layer creates a new shell, e.g. $PWD will be reset 
                                  #     - should limit number of layers, i.e. combine instructions as much as possible
                                  #  - max 127 layers
                                  #  - prefer Dockerfile over commit

BUILD CACHE ==>                   #Each layer + next instruction is cached:
                                  #  - by def reused if matched
                                  #  - specified in output log "Using cache"
                                  #Invalidates cache:
                                  #  - ADD|COPY of new|newer files
                                  #     - i.e. should be as late as possible, in order to invalidate fewer cache
                                  #  - ARG with different value
                                  #Does not invalidate cache:
                                  #  - COMMANDs, even if takes input from some global/changing state (e.g. apt-get update)
                                  #  - this can create problem, but can be disabled with docker build --no-cache


docker history IMAGE              #Show all IMAGE layers: 
                                  #  - IMAGE_ID (might be <missing> if removed, e.g. intermediary)
                                  #  - ctime
                                  #  - change: Dockerfile instruction, docker commit change, etc.
                                  #  - size
                                  #  - comment: see --message COMMIT_MESSAGE
--no-trunc                        #Do not truncate IMAGE_ID nor change
-q
--quiet                           #Only print IMAGE_ID
-H false
--human false                     #Do not show human-friendly size

IMAGEINFO.Container               #CONTAINER_ID of the container this IMAGE was created from, i.e. container created from parent image
IMAGEINFO.ContainerConfig         #CONTAINERINFO.Config of IMAGEINFO.Container
IMAGEINFO.RootFS                  #List of layers


docker commit CONTAINER [IMAGE]   #Creates a new (or copies to an) IMAGE, from an existing CONTAINER
-c COMMAND
--change COMMAND                  #Execute Dockerfile command
-p false                          #Do not temporaly pause the CONTAINER (if it's running).
--pause false                     #Pausing is done to avoid data corruption while docker commit is ongoing


docker diff CONTAINER             #Prints difference between a CONTAINER and its IMAGE, i.e. what would be committed by docker commit
                                  #Prints as A|C|D PATH (add|changed|deleted)


docker build DIR|URI|-            #Creates an IMAGE from a DIR with a Dockerfile inside.
                                  #URI can be:
                                  #  - Dockerfile
                                  #  - DIR
                                  #  - .tar[.xz|bz2|gz] archive
                                  #  - Git repo URI[#TAG|BRANCH|HASH_ID][:SUBPATH]: using git clone --depth 1 --recursive
                                  #- is stdin:
                                  #  - must be a Dockerfile
                                  #  - can be compressed with .tar[.xz|bz2|gz]
                                  #Non-0 exit code if fails
-f DOCKERFILE                     
--file DOCKERFILE                 #
-q
--quiet                           #


docker import FILE|URI|- [IMAGE]  #Create an IMAGE from a set of files, i.e. directory, archived in a .tar file. 
                                  #Prints IMAGE_ID
                                  #FILE|URI|-: like docker build
                                  #If IMAGE, will call docker tag NEW_IMAGE IMAGE
                                  #See also docker export
-c COMMAND
--change COMMAND                  #Like docker commit


docker load                       #Create an IMAGE from a serialized IMAGE.tar (created by docker save)
                                  #Input is stdin, or -i|--input FILE.tar
-q
--quiet                           #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          DOCKERFILE           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCKERFILE                        #Main configuration file, with commands below
                                  #Def: BUILD_DIR/Dockerfile, or docker build -f DOCKERFILE
                                  #Can concanate several Dockerfiles into one


# COMMENT                         #

# escape=CHAR                     #Changes escape character (def: \)
                                  #Can use escaped newlines, and should use them to sort long list alphabetically (e.g.  packages)
                                  #Must be at top of file, before any instruction, comment or blank line


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            IMAGES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



docker rmi IMAGE                  #Deletes an IMAGE
-f
--force                           #Deletes even if there are related containers
--no-prune                        #Do not delete parents without tags


docker images [IMAGE]             #Prints images with information (one line per image+tag combination):
                                  #  - IMAGE (repository)
                                  #  - tag
                                  #  - sha256 checksum (if --digests)
                                  #  - image ID (truncated unless --no-trunc)
                                  #  - ctime
                                  #  - size
-a
--all                             #Prints all (do not hide intermediate images)
-q
--quiet                           #Only show image ID
--filter VAR=VAL                  #VAR:
                                  #  - dangling BOOL: true means no tag, and not intermediary image
                                  #  - label VAR[=VAL]
                                  #  - before|since IMAGE: using ctime
--format GOTMP                    #Input is OBJ:
                                  #  - Repository IMAGE
                                  #  - Tag
                                  #  - Digest
                                  #  - ID IMAGE_ID
                                  #  - CreatedSince|At
                                  #  - Size
                                  #Def is DOCKERCONF.imagesFormat "GOTMP"

SYSINFO.Images                    #NUM
IMAGEINFO.Id                      #IMAGE_ID
IMAGEINFO.Config.Image            #IMAGE_ID
IMAGEINFO.Parent                  #IMAGE_ID or "" (if none)
IMAGEINFO.RepoDigests             #sha256 checksum
IMAGEINFO.Created                 #"DATE"
IMAGEINFO.[Virtual]Size           #NUM

docker inspect IMAGE...           #Prints IMAGEINFO, i.e. debug information, as JSON
-f GOTMP
--format GOTMP                    #
--type image|container|task       #If there is ambiguity


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TAGS              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker tag IMAGE IMAGE2           #Make IMAGE2 a link to IMAGE, i.e.:
                                  #  - IMAGE_ID IMAGE_NAME: gives a name
                                  #  - IMAGE IMAGE:TAG: create tag
                                  #  - IMAGE REPO_USER/IMAGE_NAME: associate with a repository
docker build ...
-t IMAGE2                         
--tag IMAGE2                      #Performs docker tag IMAGE_ID IMAGE2 after creating IMAGE


IMAGEINFO.RepoTags                #"TAG"_ARR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           COMMANDS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


COMMAND                           #Means a CLI command, either:
                                  #  - same syntax as in a CLI
                                  #     - run with /bin/sh -c, i.e. subcommand (unless COMMAND is "exec ...")
                                  #        - subcommands are not terminated when parent is (e.g. with docker stop)
                                  #        - can be changed with SHELL ["COMMAND",...]
                                  #     - only uses escape character for escaped newlines
                                  #  - as JSON array ["STR",...]
                                  #     - run with exec, i.e. same shell (not subcommand)
                                  #     - does not do shell expansion (e.g. $VAR)
                                  #     - preferred
                                  #Different timing:
                                  #  - build-time: during docker build, e.g. RUN
                                  #  - runtime: during docker exec, e.g. "default command|argument" (ENTRYPOINT|CMD)

RUN COMMAND                       #Dockerfile instruction. Run command

ENTRYPOINT COMMAND                #Dockerfile instruction. If COMMAND uses:
                                  #  - CLI syntax: like CMD
                                  #  - JSON array syntax: sets default command, that can take args
                                  #Only last ENTRYPOINT will be used.
                                  #At least one CMD or ENTRYPOINT required per Dockerfile
docker create ...
--entrypoint COMMAND              #Overrides|specifies ENTRYPOINT (+ related CMD)
IMAGEINFO.Config.Entrypoint       #

CMD COMMAND                       #Dockerfile instruction. If ENTRYPOINT was:
                                  #  - not called before: sets default command, that cannot take args. 
                                  #  - called before: 
                                  #     - sets default args
                                  #     - both ENTRYPOINT and CMD must use JSON array syntax
                                  #Only last CMD will be used.
                                  #At least one CMD or ENTRYPOINT required per Dockerfile
IMAGEINFO.Config.Cmd              #STR_ARR (includes args)


docker exec CONTAINER COMMAND     
 [ARGS...]                        #See below


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            ENVVAR             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


$VAR                              #Expands in Dockerfile. Defined by ENV or ARG
${VAR}                            #Should not be used for confidential information, as docker history shows it
${VAR:-VAL}
${VAR:+VAL}                       #Like in Bash


ENV VAR VAL                       #Dockerfile instruction. Sets ENVVAR
                                  #E.g. to append to $PATH
ENV VAR=VAL ...                   #Can be used as $VAR in following instructions, except:
                                  #  - COMMAND-related: CMD, RUN, ENTRYPOINT, SHELL, HEALTHCHECK
                                  #  - ARG
                                  #  - MAINTAINER
                                  #The first form does not parse/expanse VAL
docker create ...
-e ENVVAR=VAL
--env ENVVAR=VAL                  #Overrides|specifies ENV
--env-file FILE                   #Same with newline-separated ENVVAR=VAL file

IMAGEINFO.Config.ENV              #STR_ARR


ARG VAR[=VAL]                     #Dockerfile instruction. Like ENV, but as build argument, using docker build --build-arg VAR=VAL
                                  #VAL is default value
                                  #Information is not persisted in final built IMAGE. If needs to persist, can put ARG variable inside an ENV
docker build ...
--build-arg VAR=VAL               #Provides ARG


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          FILESYSTEM           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


BUILD CONTEXT ==>                 #Directories:
                                  #  - BUILD_DIR: 
                                  #     - specified by docker build
                                  #     - if targetting a Dockerfile directly (e.g. using stdin), no BUILD_DIR
                                  #  - CONTEXT_DIR: temporary, copied from BUILD_DIR
                                  #  - IMAGE_DIR: when image is created
                                  #CONTEXT_DIR:
                                  #  - sent by client to server:
                                  #     - should keep it minimal
                                  #  - can be used by Dockerfile instructions: COPY|ADD, COMMANDs
                                  #     - path resolution:
                                  #        - absolute path: relative to CONTEXT_DIR
                                  #        - relative path: 
                                  #           - relative to current dir, which is initially CONTEXT_DIR
                                  #           - can be changed by WORKDIR (see below)
                                  #  - copied from BUILD_DIR:
                                  #     - minus files matching BUILD_DIR/.dockerignore:
                                  #        - recommended
                                  #        - newline-separated, similar to .gitignore
                                  #        - # COMMENT, first line only
                                  #        - globbing: * ? ** !


WORKDIR DIR                       #Dockerfile instruction. Changes $PWD in CONTEXT_DIR for following instructions
                                  #DIR created with mkdir -p if not existing
                                  #Prefer over "cd"
                                  #Avoid relative DIR
                                  #Def: /
docker create ...
-w DIR
--workdir DIR                     #Overrides|specifies WORKDIR

IMAGEINFO.Config.WorkingDir       #


ONBUILD [...]                     #Dockerfile instruction. Same as ... but delayed: 
                                  #  - fired when another Dockerfile calls FROM for this image
                                  #  - only for direct children, not grandchildren
                                  #Allows using CONTEXTDIR of downstream image
                                  #Can see list of delayed instructions with docker inspect ("OnBuild")
IMAGEINFO.Config.OnBuild          #OBJ

COPY|ADD SRC... DEST              #Dockerfile instruction. Copy files from CONTEXT_DIR to IMAGE_DIR
COPY|ADD ["SRC",..., "DEST"]      #SRC:
                                  #  - can contain globbing * ?
                                  #  - cannot be outside of CONTEXT_DIR
                                  #DEST:
                                  #  - must include trailing / if want to copy inside DIR
                                  #  - if not existing, is created using mkdir -p
                                  #New files/directories created with dockerd user/group (permission-wise)
                                  #ADD has extra features:
                                  #  - SRC can be URL
                                  #  - SRC can be a *.tar (unless it is a URL), which is unpacked

docker cp                         #Copy files recursively:
[CONTAINER:]PATH [CONTAINER:]PATH2#  - permissions are kept
                                  #  - user|group owner is container's user (if in container), current user|group (otherwise)
                                  #CONTAINER must be specified in one (and only one) of either source|dest
                                  #PATH can be - for stdin, which can be .tar archive
                                  #PATH in containers is relative to BUILD_DIR
-L
--follow-link                     #Follow symlinks, i.e. copy symlink target, not symlink itself


docker export CONTAINER           #Same as docker cp CONTAINER:/ stdout except it:
                                  #  - must be redirected, or use -o|--output FILE
                                  #  - is .tar compressed
                                  #See also docker import

docker save IMAGE...              #Similar as docker export, but for an IMAGE
                                  #As opposed to docker export, includes all IMAGE information and metadata, not only set of files


docker create ...
--read-only                       #Mount main partition as readonly
HOSTCONF.ReadonlyRootfs           #BOOL


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:     ISOLATION/NAMESPACES      :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker build|create ...
--isolation STR                   #Underlying isolation technology among:
                                  #  - process: OCI
                                  #  - hyperv: Hyper-V (virtual machines)
                                  #  - default (def): "process" on Linux, "hyperv" on Windows
HOSTCONF.Isolation                #


FILESYSTEM ==>                    #Container cannot read nor write parent filesystem
                                  #Can remove filesystem isolation for specific directory/files with volumes or --device


PROCESS ==>                       #Each container uses its own "PID namespace", i.e. process list specific to that container:
                                  #  - cannot see parent's
                                  #  - each container starts with PID 1
docker create ...
--pid STR                         #Set container's PID namespace:
                                  #  - "host": same as host's (i.e. no isolation)
                                  #  - "container:CONTAINER": same as another container
                                  #Def: new one
HOSTINFO.PidMode                  #
CONTAINERINFO.State.Pid           #


IPC ==>                           #Each container uses its own "IPC namespace", i.e. list of semaphores, queues and shared memory segments
docker create ...
--ipc STR                         #Same value as --pid
HOSTCONF.IpcMode                  #


NETWORK ==>                       #Each container uses its own:
                                  #  - network interfaces ("network namespace"):
                                  #     - see --network "host" to remove isolation
                                  #  - "UTS namespace", i.e. its own hostname
NETWORKSET.SandboxID|Key          #Network namespace information
docker create ...
--uts STR                         #Set container's UTS namespace:
                                  #  - "host": same as host's (i.e. no isolation)
HOSTCONF.UTSMode                  #


USERS/GROUPS ==>                  #"User namespaces": each container uses its own list of users/groups:
                                  #  - i.e. container root user does not have to map to host's root user
                                  #  - /etc/subuid and /etc/subgid show sub-users|groups that current user|group can create as
                                  #    newline-delimited ranges: USER|GROUP:MIN_ID:MAX_ID
                                  #Disabled by default
                                  #Conflicts with docker create:
                                  #  - --pid|network host
                                  #  - --privileged, unless --userns host
                                  #  - --read-only
dockerd ...
--userns-remap                    #Enables user namespaces
 [USER|UID[:GROUP|GID]]           #Uses specified host's USER. Def: USER "dockremap", which is created if not existing
docker create ...                 #Same value as --pid
--userns STR                      #Using --userns host nullifies --userns-remap
HOSTCONF.UsernsMode               #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            LIMITS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker create|build ...
--ulimit NAME=NUM[:NUM2]          #Sets ulimit.
                                  #NUM is soft limit, NUM2 hard limit.
HOSTCONF.Ulimits                  #
dockerd ...
--default-ulimit ...              #Default for docker create --ulimit

docker create ...
--pids-limit NUM                  #Max number of processes (e.g. prevent fork bombs)
                                  #ulimit -u is per user (across containers), which this is per container
HOSTCONF.PidsLimit                #


CONTROL GROUPS ==>                #Ensures for each process (i.e. container), at kernel level:
                                  #  - resource (e.g. CPU, memory, I/O) limiting
                                  #  - resource prioritization, e.g. one container should get more CPU
                                  #  - logging/monitoring #  - freezing processes
                                  #Security-wise: this mitigates DDoS, etc.
                                  #Can be hierarchical
                                  #Limitations:
                                  #  - automatically creates a control group
                                  #     - --cgroup-parent uses a specific control group instead
                                  #  - NUM can be -1, i.e. infinity (usually def)

dockerd ...                       #Assigns a specific control group to the container. 
docker create|build ...           #If /CGROUP, is under root cgroup. If CGROUP, is under daemon cgroup
--cgroup-parent CGROUP            #Def: /docker for fs cgroup, system.slice for systemd cgroup
HOSTCONF.Cgroup[Parent]           #

docker create|build ...
-m NUM[b|k|m|g]
--memory=NUM[b|k|m|g]             #Memory hard limit. Min: 4M.
--memory-swap=NUM[b|k|m|g]        #Memory + Swap hard limit
                                  #Def: double of --memory
                                  #When set, --memory must be set
docker create ...
--memory-reservation=NUM[b|k|m|g] #Memory soft limit (i.e. only hint, but not enforce limit)
                                  #If 0 (def), same as --memory
--kernel-memory=NUM[b|k|m|g]      #Memory hard limit, but only the one used by kernel (includes sockets buffer, process stack, slabs).
                                  #Min: 4M.
                                  #When set, --memory must be set
--oom-kill-disable=BOOL           #Enable OOM killer (def: true)
                                  #OOM (out-of-memory) killer: 
                                  #  - kernel terminates a process (here the container) that requested memory while none is either available or above memory hard limit
                                  #  - disabling OOM killer for the container does not disable host's OOM killer
                                  #     - i.e. it might dangerously force killing host's system processes, unless --memory is set
--oom-score-adj=-1000-1000        #Sets OOM preference, i.e. container with lower preference will be first to be OOM killed
                                  #Can be set with dockerd as well
--memory-swappiness=0-100         #How much memory pages should be swapped to cache (as opposed to not cached)
                                  #Def: from host, usually 60
                                  #0: no swap, i.e. bad latency (cannot read any cache), but better throughput (no writing caching)
                                  #100: always swap, i.e. inverse
SYSINFO."Total Memory"            #Available on the host.
HOSTCONF.Memory                   #
HOSTCONF.MemorySwap               #
HOSTCONF.MemoryReservation        #
HOSTCONF.KernelMemory             #
HOSTCONF.OomKillDisable           #
HOSTCONF.OomScoreAdj              #
HOSTCONF.MemorySwappiness         #

docker create|build ...
-c NUM 
--cpu-shares=NUM                  #CPU shares:
                                  #  - relative weight between containers
                                  #     - e.g. containers with twice more than other containers get twice more CPU
                                  #     - distributed among running containers, i.e. idle containers are ignored
                                  #  - def: 1024. Min: 2.
--cpu-period=NUM                  #Similar to CPU shared but from an OS process scheduler perspective:
--cpu-quota=NUM                   #  - --cpu-period is scheduler frequency (in ms, def: 100)
                                  #  - CPU shares is --cpu-quota / --cpu-period (def: same as 1 / number of containers)
                                  #Wheras --cpu-shares distribute CPU between containers, --cpu-period|quota limits host's CPU to each container
--cpuset-cpus=RANGE               #Only allow specific CPUs, as RANGE of index, e.g. 0-3 or 0,2
--cpuset-mems=RANGE               #Same for memory nodes (MEMs), which is only used on NUMA systems
SYSINFO.CPUs                      #Available on the host. NUM
HOSTCONF.CpuShares                #
HOSTCONF.CpuPeriod                #
HOSTCONF.CpuQuota                 #
HOSTCONF.CpuCount|Percent         #Calculated from HOSTCONF.Cpu*. Windows only.
HOSTCONF.CpusetCpus               #
HOSTCONF.CpusetMems               #

docker create ...
--blkio-weight=10-1000            #Block IO weight:
                                  #  - relative weight between containers, i.e. like --cpu-shares but for I/O
                                  #  - only for direct block IO (not buffered block IO)
                                  #Def: 500
--blkio-weight-device=
 DEVICE_PATH:10-1000              #Same but for a specific device, e.g. /dev/sda
--device-read|write-bps=
 DEVICE_PATH:NUM[kb|mb|gb]        #Limit read|write rate from a device, as byte/sec
--device-read|write-iops=
 DEVICE_PATH:NUM                  #Same but as operation/sec
--io-maxbandwidth NUM
--io-maxiops NUM                  #System partition IO limits (Windows only)
HOSTCONF.BlkioWeight              #
HOSTCONF.BlkioWeightDevice        #
HOSTCONF.BlkioRead|WriteBps       #
HOSTCONF.BlkioRead|WriteIops      #
HOSTCONF.IoMaximumBandwidth       #
HOSTCONF.IoMaximumIops            #
HOSTCONF.DiskQuota                #

docker create|build ...
--shm-size=NUM[b|k|m|g]           #Size of /dev/shm (device that can be mounted as tmpfs, i.e. like /tmp but for IPC)
                                  #Def: 64MB
HOSTCONF.ShmSize                  #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             USERS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DAEMON USER ==>                   #Server must be run as root (see below), so must be sure to protect "docker" group

SYSINFO.Username                  #


CONTAINER USER ==>                #Different from host's:
                                  #  - containers uses "user namespaces" (see above)
                                  #Containers usually do not require root access:
                                  #  - default user is root
                                  #  - so should use unprivileged user (see USER above)
                                  #Containers are always unprivileged:
                                  #  - can do apt-get install -y
                                  #  - but apt-get upgrade will fail on some core packages
                                  #  - apt-get update:
                                  #     - on its own, creates cache problems (avoid)
                                  #     - creates non-predictability unless pinning version, e.g. apt-get install -y PACKAGE=VERSION
                                  #     - recommended: apt-get update && apt-get install + version pinning && rm -rf /var/lib/apt/lists/*

USER STR                          #Dockerfile instruction. Sets current user, used:
                                  #  - in following instructions, e.g. COMMANDs
                                  #  - runtime, i.e. docker exec
docker create|exec ...
-u USER|UID[:GROUP|GID]
--user USER|UID[:GROUP|GID]       #

IMAGEINFO.Config.User             #


CONTAINER GROUP ==>               #
docker create ...
--group-add GROUP                 #Add GROUP to container's user's groups
HOSTCONF.GroupAdd                 #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           SECURITY            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CONTAINER CAPABILITIES ==>        #Capabilities are kernel features available to container's control group.
                                  #Most capabilities are disabled by default
                                  #See online doc for list of capabilities
docker create ...                 #Add|remove capabilities
--cap-add|drop VAL                #Can be ALL, for all capabilities but MKNOD
HOSTCONF.CapAdd|CapDrop           #
docker create|exec ...
--privileged                      #Add most capabilities
HOSTCONF.Privileged               #


docker create ...
--security-opt="no-new-privileges"#Do not allow adding privileges, e.g. through sudo


dockerd ...
--selinux-enabled                 #Enable SELinux
docker create ...
--security-opt=
 "label=user|role|type|level:VAL"
--security-opt="label=disable"    #SELinux options
CONTAINERINFO.
 MountLabel|ProcessLabel          #

docker create ...
--security-opt="apparmor=PROFILE" #Apparmor options
CONTAINERINFO.AppArmorProfile     #

docker create ...
--security-opt=
 "seccomp=unconfined"             
--security-opt="seccomp=PROFILE"  #Seccomp options

SYSINFO."Security options"        #
HOSTCONF.SecurityOpt              #STR_ARR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          HEALTHCHECK          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


HEALTHCHECK [--OPT] CMD COMMAND   #Dockerfile instruction. Adds a "health status" to a CONTAINER, in addition to its running status:
                                  #  - checked by COMMAND at regular intervals
                                  #  - COMMAND exit code must be 0 (success) or 1 (failure)
                                  #  - COMMAND stdout|stderr will be kept in logs
                                  #Can be inspected with:
                                  #  - docker inspect, ps, etc.
                                  #  - health_status event (with "docker events")
                                  #Used by:
                                  #  - swarm (to maintain number of replicas)
                                  #Only last HEALTHCHECK will be used
--interval=NUM                    #Def: 30 (in secs)
--timeout=NUM                     #Def: 30 (in secs)
--retries=NUM                     #Def: 3

docker create ...
--no-healtcheck                   #Overrides HEALTHCHECK
--health-cmd CMD
--health-interval NUM
--health-timeout NUM
--health-retries NUM              #Overrides|specifies HEALTHCHECK


dockerd ...
--cluster-opts                    #Frequency of healthchecks to nodes, in overlay network
 discovery.heartbeat=NUM          #In secs, def: 20 
--cluster-opts discovery.ttl=NUM  #How long before a node is considered unhealthy by healthcheck, in overlay network
                                  #In secs, def: 60


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             EXIT              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker create ...
--stop-signal SIGNAL_NAME         #Signal to stop container (def: SIGTERM)
--restart STR                     #What happens when container exits:
                                  #  - "no" (def): nothing
                                  #  - "always": restarts
                                  #  - "on-failure[:NUM]": restarts if exit code non-0, with NUM max retries (def: unlim)
                                  #  - "unless-stopped": restarts unless explicitely stopped by admin
                                  #Restarts use exponential delay
                                  #Should not be used if a process manager is used, e.g. systemd, forever or pm2
HOSTCONF.RestartPolicy.Name       #
HOSTCONF.RestartPolicy.
 MaximumRetryCount                #

docker run ...
--rm                              #When exiting, remove:
                                  #  - volumes, except if specific VOLUME_NAME was given
                                  #  - container filesystem
                                  #Pros: clean up space
                                  #Cons: cannot inspect them after container exit (for debugging)
                                  #Cannot be used with --detach
HOSTCONF.AutoRemove               #BOOL


docker exec EXIT CODE ==>         #Is:
                                  #  - 125: dockerd error
                                  #  - 126: cannot run COMMAND
                                  #  - 127: cannot find COMMAND
                                  #  - otherwise: COMMAND exit code
DOCKERINFO.State.ExitCode         #
DOCKERINFO.State.Error            #


dockerd ...
--live-restore                    #Do not shut down containers if server goes down
                                  #Server must be restarted with same options
                                  #While down, clients will buffer communication to server until limit (def: 64K)
                                  #Not compatible with swarm mode


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        STREAMS/SIGNALS        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker exec ...
-d                                #Run in the background of current terminal
--detach                          #Returns container ID
                                  #Container exits when COMMAND exits
--detach-keys "KEY,..."           #Sequence of keys to put currently foreground container to background
                                  #Def: "ctrl-p,ctrl-q"
                                  #Can also use DOCKERCONF.detachKeys STR

docker create|exec ...
-t
--tty                             #Allocate a pseudo-TTY. Required if starting interactive shell
IMAGEINFO.Config.Tty              #BOOL
-i
--interactive                     #Keep stdin opened even if --detach. Should be used for interactive shells
IMAGEINFO.Config.OpenStdin        #BOOL
IMAGEINFO.Config.StdinOnce        #Like --interactive, but close stdin after the last client closes.
                                  #Can only be set through REST API

docker create ...
-a stdin|stdout|stderr            #Redirects COMMAND's standard streams to|from current process|terminal
--attach stdin|stdout|stderr      #Can be done several time. Def: all
IMAGEINFO.Config.
 AttachStdin|Stdout|Stderr        #BOOL

docker attach CONTAINER           #Bring container foreground, either:
                                  #  - it is in background in current terminal|process
                                  #  - it is running in another terminal|process, e.g. several terminals can attach to same container
--no-stdin                        #Brings stdout|stderr in foreground, but not stdin
--detach-keys                     #Like docker exec


docker run|attach ...
--sig-proxy=false                 #Do not redirect all signals from current process|terminal to the container it runs

STOPSIGNAL SIG_NAME|NUM           #Dockerfile instruction. Sets signal sent to container to terminate it (def: SIGKILL)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        CONTAINER CRUD         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CONTAINER                         #Running instance of an image
                                  #Is either:
                                  #  - CONTAINER_ID UUID
                                  #  - CONTAINER_NAME


docker create IMAGE               #Does:
 [COMMAND [ARGS...]]              #  - if does not exist locally, docker pull IMAGE
                                  #  - creates a container, using IMAGE

--name CONTAINER_NAME             #Def: random
--cidfile FILE                    #Write CONTAINER_ID to FILE
HOSTCONF.ContainerIDFile          #


docker rename CONTAINER CONTAINER2#


docker update CONTAINER...        #


docker rm CONTAINER               #Deletes a CONTAINER
-f
--force                           #Deletes even if running


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        CONTAINER STATE        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker exec CONTAINER COMMAND     #Run COMMAND from within the container (def: container's default command/arguments)
 [ARGS...]                        #CONTAINER must be running

CONTAINERINFO.Path                #COMMAND
CONTAINERINFO.Args                #"ARG"_ARR
CONTAINERINFO.ExecIDs             #Linux kernel syscall "exec" IDs


docker run IMAGE [...]            #Does:
                                  #  - docker create IMAGE
                                  #  - docker start CONTAINER
                                  #  - docker exec CONTAINER ...
                                  #Shares all options from docker create+exec, plus extra, following.


docker stop|restart CONTAINER...  #Stops a running CONTAINER
                                  #If restart, runs docker start right after
-t INT
--time INT                        #How long to wait (in secs, def: 10)


docker start CONTAINER...         #Runs a stopped CONTAINER


docker kill CONTAINER... ???


docker pause CONTAINER... ???


docker unpause CONTAINER... ???


docker wait CONTAINER... ???


CONTAINERINFO.State.Status        #Can be:
                                  #  - created
                                  #  - running
                                  #  - exited [+ status code, time], dead
                                  #  - restarting|paused
CONTAINERINFO.Running|Paused|
 Restarting|OOMKilled|Dead        #BOOL
SYSINFO.Containers.
 Running|Paused|Stopped           #NUM
CONTAINERINFO.RestartCount        #NUM
CONTAINERINFO.StartedAt|FinishedAt#"DATE"


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        CONTAINER STATS        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker ps                         #Prints containers with information:
                                  #  - CONTAINER_ID (truncated unless --no-trunc)
                                  #  - CONTAINER_NAME
                                  #  - IMAGE_NAME
                                  #  - IMAGE command
                                  #  - ctime
                                  #  - status: see above
                                  #  - ports forwarding
                                  #    Can also use: docker port CONTAINER [HOST_PORT]
                                  #  - size (real, virtual): only if -s/--size
-a                                
--all                             #Prints all (not only currently running)
-n [INT]
--last [INT]
-l
--latest                          #Only prints INT (def: 1) latest ran
-q
--quiet                           #Only show container ID
--format GOTMP                    #Def is DOCKERCONF.psFormat "GOTMP"

CONTAINERINFO.Id                  #CONTAINER_ID
CONTAINERINFO.Name                #CONTAINER_NAME
CONTAINERINFO.Image               #IMAGE_ID
CONTAINERINFO.Created             #"DATE"
CONTAINERINFO.HostConfig          #HOSTCONF


docker top CONTAINER              #Prints running processes of a container: UID, PID, parent PID, time, command, TTY, etc.


docker stats CONTAINER...         #Prints runtime metrics of containers: CPU, Memory, I/O


docker inspect CONTAINER...       #Prints CONTAINERINFO. Same options as docker inspect IMAGE
CONTAINERINFO                     #Debug information, as JSON
CONTAINERINFO.Config              #Same attributes as IMAGEINFO.Config


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           NETWORKS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Look again at "Network configuration" Docker documentation???

dockerd ...
--default-gateway[-v6] IP         #Daemon's (not NETWORK) gateway IP


NETWORK                           #Is a set of network-related settings/resources (ports, etc.)
                                  #Can be the ID (can be truncated) or name
                                  #Default:
                                  #  - three available: none, host, bridge
                                  #  - bridge is the default associated NETWORK
                                  #Containers can:
                                  #  - be associated with several networks

DRIVER                            #Can be bridge, macvlan or overlay

BRIDGE ==>                        #Single-host inter-container communication, with single gateway
                                  #Hosts uses ethernet interface:
                                  #  - docker0 is used for the default bridge interface
                                  #  - automatically creates gateway (external single IP for the subnet)
                                  #Container uses ethernet interface:
                                  #  - called eth0, or docker network create ... -o "com.docker.network.bridge.name=NAME"
                                  #  - uses one IP among host's single subnet
                                  #     - def: automatic, with 2^16 possible IP addresses
dockerd ...
-b INTERFACE
--bridge INTERFACE                #Instead of docker0. Can be "none" (e.g. if NETWORK bridge is not used)
NETWORKSET.Bridge                 #
--bip CIDR                        #Sets docker0's IP and netmask
--fixed-cidr[-v6] CIDR            #Sets docker0's subnet

MACVLAN ==>                       #Similar to bridge, but different design, which is more performant and simpler
                                  #  - while in bridge, containers have their own interface and MAC, in macvlan, they use sub-interfaces of the host's interface
                                  #Containers must use same interface as host:
                                  #  - specified with NETWORK option parent=INTERFACE

OVERLAY ==>                       #Multi-host inter-container communication, with single gateway ("advertiser")
                                  #  - connected together using a key-value store
                                  #  - hosts must have unique hostnames
                                  #Key-value store:
                                  #  - supported: consul, etcd, zookeeper
                                  #  - must open ports 4789 (UDP) and 7946 (TCP/UDP)
                                  #Can have multiple subnets (by specifying several --subnet)
                                  #OPT:
                                  #  - encrypted: use IPSec (port 50 must be opened)
                                  #With swarm:
                                  #  - does not need key-value store
                                  #  - can be assigned to SERVICE, which will be applied to every node using the SERVICE
dockerd ...
--cluster-opts kv.path=PATH       #Namespace to prepends to all keys in key-value store
                                  #Def: docker/nodes
--cluster-store PROVIDER://URL    #
--cluster-advertise IP:PORT       #Advertiser
--cluster-store-opts 
 OPT_VAR=OPT_VAL,...              #


docker network create NETWORK_NAME#Creates NETWORK
NETWORKINFO.Id
NETWORKSSET.NetworkID             #NETWORK_ID
NETWORKINFO|CSET.Name             #NETWORK_NAME
-d DRIVER
--driver DRIVER                   #Def: bridge
NETWORKINFO.Driver                #
-o VAL                            #DRIVER-specific options
--opt VAL                         #DRIVER name is included in VAL
                                  #Note:
                                  #  - those options are for new NETWORK, not default ones
                                  #  - there usually are corresponding flags for default NETWORK
                                  #     - e.g. --ip-masq is for default bridge NETWORK, -o "com.docker.network.bridge.enable_ip_masquerade" for custom ones
NETWORKINFO.Options               #
--internal                        #No external access
NETWORKINFO.Internal              #BOOL
--ipv6                            #Allows IPv6
NETWORKINFO.EnableIPv6            #BOOL
--subnet=IP/MASK                  #Specifies subnet (instead of default)
--gateway=IP                      #Specifies gateway (instead of default)
NETWORKS[S]ET.[IPv6]Gateway       #
--ip-range=IP/MASK                #Specifies IP range, i.e. subset of subnet from which containers IPs will be picked (def: whole subnet)
--aux-address="VAR=IP"            #Specifies secondary address
NETWRKSET.SecondaryIP[v6]Addresses#

dockerd ...
--ipv6                            #Like docker network create ...

docker network create ...
-o "com.docker.network.bridge.
 enable_ip_masquerade"  
dockerd ...                       #Enable IP masquerading, i.e. containers do not have to have a public IP to communicate outside of NETWORK: 
--ip-masq                         #they will use host's IP instead
--ip-forward                      #Enable IP forwarning

docker network create ...
-o "com.docker.network.
 driver.mtu=NUM"
dockerd ...
--mtu NUM                         #Set the containers network MTU (max packet size) (def: 1500)

docker network create ...
-o "com.docker.network.bridge.
 enable_icc=BOOL"
dockerd ...
--icc BOOL                        #Enable|disable communication between containers


docker network rm NETWORK         #


docker network connect NETWORK
 CONTAINER                        #Associate a CONTAINER to a NETWORK
NETWORKINFO.Containers.CONTAINR_ID#NETWORKCSET
docker network connect ...
--ip[6] IP                        
docker create ...
--ip[6] IP                        #Specifies Ethernet interface's IP (instead of random one from subnet)
NETWORKS[S]ET.IPAddress           #
NETWORKCSET.IPv4|6Address         #
NETWORKS[S]ET.IPPrefixLen         #
NETWORKS[S]ET.GlobalIPv6Address   #
NETWORKS[S]ET.GlobalIPv6PrefixLen #
--link-local-ip IP                #Same for link local IP
NETWORKSET.LinkLocalIPv6Address   #
NETWORKSET.LinkLocalIPv6PrefixLen #
--mac-address STR                 #Same for MAC address
                                  #Incompatible with --network host|CONTAINER
NETWORK[S|C]SET.MacAddress        #
-h HOST                           #Specifies hostname (see UTS namespace above)
--hostname HOST                   #Incompatible with --network CONTAINER
                                  #Uses /etc/hostname
IMAGEINFO.Config.Hostname         #
CONTAINERINFO.HostnamePath        #Host's path to container's /etc/hostname

NETWORKSSET.IPAMConfig            
NETWORKINFO.IPAM                  #OBJ

docker create ...
--network STR                     #Associate to network STR:
                                  #  - none: no networking
                                  #  - host: 
                                  #     - same as host's
                                  #     - i.e. less isolation (insecure) but much faster
                                  #  - CONTAINER: same as container's
                                  #  - bridge: create and use new NETWORK of type "bridge"
                                  #  - NETWORK: use existing one
HOSTCONF.NetworkMode              #


docker network disconnect NETWORK
 CONTAINER                        #Dissociate a CONTAINER to a NETWORK
-f
--force                           #Even if running container


docker network ls                 #Prints available networks: ID, name, driver, scope
-q
--quiet                           #Only show IDs
--no-trunc                        #Do not truncate IDs


docker network inspect NETWORK    #Prints verbose debug information, as NETWORKINFO
CONTAINERINFO.NetworkSettings     #NETWORKSET
CONTAINERINFO.Networks.NETWORK    #NETWORKSSET

ENDPOINT ==>                      #Connection of a CONTAINER to a NETWORK
NETWORK[S|C]SET.EndpointID        #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              DNS              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DNS ==>                           #When inter-container communication is possible, can use DNS names, within same NETWORK:
                                  #  - CONTAINER_NAME:
                                  #     - providing it is not the default bridge NETWORK
                                  #  - DNS_ALIAS: see below

docker network connect ...
--link CONTAINER2:DNS_ALIAS
docker create 
--link CONTAINER2:DNS_ALIAS       #One CONTAINER defines DNS_ALIAS to refer to another CONTAINER2
HOSTCONF|NETWORKSSET.Links        #STR_ARR

docker network connect ...        #One CONTAINER2 tells any other CONTAINER the DNS_ALIAS to refer to itself
--alias DNS_ALIAS                 #Several containers can have same DNS_ALIAS:
docker create ...                 #  - only one will be targeted (always the same, i.e. the first one)
--network-alias DNS_ALIAS         #  - others behave as passive failover
NETWORKSSET.Aliases               #STR_ARR

IMAGEINFO.Config.Domainname       #

docker create ...                 #Appends STR to /etc/hosts
--add-host=STR                    #Incompatible with --network CONTAINER
CONTAINERINFO.HostsPath           #Host's path to container's /etc/hosts
HOSTCONF.ExtraHosts               #STR_ARR


DNS SERVER ==>                    #By default, same as host's, but can alternative specify DNS server:
                                  #  - with the following options, which update /etc/resolve.conf
                                  #  - incompatible with --network CONTAINER
docker create ...
dockerd ...
--dns IP                          #
--dns-search DOMAIN               #
--dns-opt OPT                     #
CONTAINERINFO.ResolveConfPath     #Host's path to container's /etc/resolve.conf
HOSTCONF.Dns[Search|Opt]          #STR_ARR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             PORTS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


PORT FORWARDING ==>               #Only works with default NETWORK
                                  #This works with Docker appending rules to iptables
dockerd ...
--iptables=false                  #Do not allow Docker to modify iptables, i.e. must manually modify it to get port forwarding working
--userland-proxy=false            #Disable using hairpin NAT when modifying iptables
NETWORKSET.HairpinMode            #BOOL


docker create ...
-p [HOST_IP:][HOST_PORT:]         #Forward ports
 CONTAINER_PORT[/PROTO]           #*_PORT can be a range of ports instead (def: ephemeral port range, i.e. 32768-61000)
                                  #HOST_IP (def: see all)
                                  #  - can change default with: docker network create ... -o "com.docker.network.bridge.host_binding_ipv4=HOST_IP" or dockerd ... --ip HOST_IP
                                  #PROTO: upd|tcp (def: any)
-P                                
--publish-all                     #Forward any exposed CONTAINER_PORT to a random HOST_PORT (ephemeral port range)
HOSTCONF.PublishAllPorts          #BOOL

EXPOSE PORT ...                   #Dockerfile instruction. Expose port, for docker create -P
docker create ...
--expose PORT                     #Overrides|specifies EXPOSE


HOSTCONF.PortBindings             #{ CONTAINER_PORT/PROTO: OBJ_ARR }, with OBJ: { HostPort: HOST_PORT }
NETWORKSET.Ports                  #OBJ


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              TLS              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


dockerd|docker ...                #dockerd is for client to authenticate server, docker is inverse
                                  #Should run on port 2376 (instead of default 2375)
--tls                             #Uses TLS for self
--tlsverify                       #Uses TLS for self and other endpoint
                                  #Can also use ENVVAR DOCKER_TLS_VERIFY=1
--tlscacert=FILE                  #Def: public CA list
--tlscert=FILE                    #
--tlskey=FILE                     #

DOCKER_CERT_PATH                  #ENVVAR to override certificates|keys directory


dockerd ...
--cluster-opts kv.cacertfile|
 certfile|keyfile=PATH            #For TLS, with overlay network


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         DATA VOLUMES          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DATA VOLUME ==>                   #Container directory that is connected to host, i.e.:
                                  #  - synced (bidirectional) with a directory of the host
                                  #     - must ensure that operations are atomic (to avoid filesystem conflicts)
                                  #     - several containers can share same host directory, by specifying same HOST_DIR (absolute path or VOLUME_NAME)
                                  #  - not saved in images nor container layers
                                  #     - should be used for any data not meant to be persisted in an image, e.g. temp runtime data
                                  #  - faster performance because do not use storage driver
                                  #HOST_DIR can be:
                                  #  - absolute path: 
                                  #     - specific path, random VOLUME_NAME
                                  #     - cannot be manipulated with "docker volume"
                                  #     - called "bind mount"
                                  #     - can create portability problem (path must exist)
                                  #  - [[:alnum:]_.-] VOLUME_NAME: random path (e.g. somewhere in DOCKERDIR), specific VOLUME_NAME
                                  #  - nothing: random path, random VOLUME_NAME
                                  #CONTAINER_DIR: absolute path
                                  #Instead of DIR can also be FILE:
                                  #  - similar to hardlink
                                  #  - but inode must not changed (e.g. mv, sed -i, vim)
DATA VOLUME DRIVER ==>            #Plugin for specific filesystems (e.g. over the network)
                                  #Def: "local"


docker create ...
-v [HOST_DIR:]CONTAINER_DIR[:OPT] #Creates data volume.
--volume ...                      #OPT:
                                  #  - ro|rw (def: rw): read-only|write (in container, not in host)
                                  #Can be done several times
--volume-driver=DRIVER            #
--volumes-from CONTAINER          #Uses same -v configuration as CONTAINER
HOSTCONF.Binds                    #STR_ARR (using same format as --volume STR)
HOSTCONF.VolumeDriver             
VOLUMEINFO|MOUNTINFO.Driver       #DRIVER
HOSTCONF.VolumesFrom              #CONTAINER
VOLUMEINFO|MOUNTINFO.
 Mountpoint|Source                #HOST_DIR
MOUNTINFO.Destination             #CONTAINER_DIR
MOUNTINFO.Mode                    #'OPT,...'
MOUNTINFO.RW                      #BOOL
VOLUMEINFO.Status                 #OBJ of DRIVER-specific parameters
MOUNTINFO.Propagation             #How volume is mounted with "mount", among "[r]private", "[r]shared" or "[r]slave"


docker rm
-v
--volumes                         #Removes volumes as well


docker volume create              #Creates data volume
--name VOLUME_NAME                #
VOLUMEINFO|MOUNTINFO.Name         #VOLUME_ID

docker volume create ...
-d DRIVER
--driver DRIVER                   #
-o OPT=VAL
--opt OPT=VAL                     #Driver-specific options

VOLUME CONTAINER_DIR ...          #Dockerfile instruction
VOLUME ["CONTAINER_DIR",...]      #Similar to -v CONTAINER_DIR with docker create, but build-time


docker volume rm VOLUME_NAME      #


docker volume ls                  #Prints available volumes: DRIVER, VOLUME_NAME
-q
--quiet                           #Only prints names


docker volume inspect VOLUME_NAME #Prints verbose debug information, as VOLUMEINFO

IMAGEINFO.Config.Volumes          #{ CONTAINER_DIR: OBJ ... }
CONTAINERINFO.Mounts              #MOUNTINFO_ARR


docker service create
--mount ATTR=VAL                  #Uses a data volume in a SERVICE. ATTR are:
                                  #  - type volume (def) + src VOLUME_NAME
                                  #  - type bind + src HOST_DIR
                                  #  - dst CONTAINER_DIR
                                  #  - volume-driver DRIVER
                                  #  - volume-opt OPT=VAL
                                  #  - readonly


docker create ...
--tmpfs CONTAINER_DIR[:OPT]       #Similar to data volumes, but with a tmpfs partition (i.e. uses RAM not host's filesystem)
                                  #OPT are mount options, e.g. rw, noexec, nosuid or size


docker create ...
--device=                         #Similar to volumes, but for devices (e.g. /dev/sda)
 HOST_PATH:CONTAINER_PATH[:OPT]   #OPT (def: 'rwm') are:
                                  #  - 'r' (read)
                                  #  - 'w' (write)
                                  #  - 'm' (mknod), i.e. create /dev/*
HOSTCONF.Devices                  #STR_ARR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        STORAGE DRIVER         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


STORAGE DRIVER ==>                #Filesystem, handling image/container layers
                                  #Def: AUFS
                                  #Is mounted on an existing filesystem, "backing" (i.e. DOCKERDIR's)
dockerd                           #Store driver are per daemon. Can be inspected with docker info
--storage-driver=DRIVER           #Among: overlay2, aufs, btrfs, devicemapper, vfs, zfs
DOCKER_DRIVER                     #ENVVAR to override storage DRIVER
dockerd, docker create ...
--storage-opt VAR=VAL             #DRIVER-specific options

SYSINFO."Storage Driver"          
IMAGEINFO|CONTAINERINF.GraphDriver#Several info, including currently selected DRIVER and its options
CONTAINERINFO.Driver              #DRIVER


CHOICE ==>                        #In summary:
                                  #  - AUFS: def, good for general purpose or many containers, bad if big files or lots of write
                                  #  - OverlayFS: similar to AUFS but faster and less stable
                                  #  - ZFS: good if many containers, less stable
                                  #  - BTRFS: good for pools of images, bad if many containers or many small/sequential writes
                                  #  - DeviceMapper: good for big files, bad if many containers
                                  #  - VFS: debugging only
AUFS ==>                          #Only with backing filesystem ext4, XFS or ZFS
                                  #Some Linux distributions do not include AUFS support, because not in Linux kernel
                                  #Features:
                                  #  - good memory use. Fast container startup. I.e.:
                                  #     - good if many containers, e.g. PaaS or general purpose
                                  #  - file-level copy-on-write (CoW) i.e. store entire files, not file diffs, i.e.:
                                  #     - bad for big files
                                  #     - bad if lots of write, because slow CoW
                                  #  - some kernel syscalls are unsupported, which might cause problems:
                                  #     - "rename": copy and unlink instead, i.e. different inode
                                  #     - "open": open("FILE", O_RDONLY) (no CoW) then open("FILE", O_RDWR) (CoW) point to different files
                                  #Union filesystem (union mount, merging layers directories)
OVERLAYFS ==>                     #Only with backing filesystem ext4 or XFS
                                  #Seen as successor of AUFS, but not completely stable yet
                                  #Union filesystem
                                  #Similar features than AUFS, but faster
ZFS ==>                           #Only with backing filesystem ZFS
                                  #Not completely stable
                                  #Features:
                                  #  - good memory use, i.e.:
                                  #     - good if many containers, e.g. PaaS
                                  #  - bad RAM usage
                                  #Storage options: see online doc
BTRFS ==>                         #Only with backing filesystem BTRFS
                                  #Features:
                                  #  - good overall performance
                                  #     - good for pools of images
                                  #  - good support for SSD drives
                                  #  - no page (i.e. part of a file) caching, i.e.:
                                  #     - bad for many containers, e.g. PaaS
                                  #  - writes can increase memory usage and fragmentation quite a lot, i.e.:
                                  #     - bad if many small writes (including changing containers running states)
                                  #  - use journaling, i.e.
                                  #     - bad performance if writes are sequential
                                  #Storage options:
                                  #  - min_space NUM[K|M|G]: minimum subvolume size
DEVICEMAPPER ==>                  #Only with backing filesystem direct-lvm
                                  #Features:
                                  #  - works with 64KB blocks not files
                                  #     - i.e. good for big files, bad for small files
                                  #  - not memory efficient
                                  #     - bad for many containers, e.g. PaaS
                                  #Storage options: see online doc
VFS ==>                           #Only for debugging


RAMDISK ==>                       #Not a STORAGE driver, but a filesystem type similar to tmpfs
                                  #When used, need to set ENVVAR DOCKER_RAMDISK


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            LOGGING            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


LOGDRIVER                         #Logging driver. Can be:
                                  #  - none: no logging
                                  #  - json-file (def): JSON appended to file
                                  #  - syslog
                                  #  - journald
                                  #  - awslogs: 
                                  #     - AWS Cloudwatch, using CreateLogStream() and PutLogEvents()
                                  #     - must provide AWS credentials to dockerd using ENVVAR
                                  #  - gcplogs (Google cloud)
                                  #  - splunk
                                  #  - etwlogs (Windows)
                                  #  - gelf (Graylog, logstash)
                                  #  - fluentd
                                  #LOGDRIVER options:
                                  #  - json-file, syslog, others:
                                  #     - labels VAR,...
                                  #        - if a container has LABEL VAR, adds it (and its value) to every log
                                  #     - env VAR,...
                                  #        - same for ENVVAR
                                  #     - tag GOTMP:
                                  #        - how CONTAINER_ID is printed (def: first 12 chars)
                                  #        - with OBJ: ID (first 12 chars), FullID, Name, Image[Full]ID|Name, DaemonName
                                  #  - json-file:
                                  #     - max-size NUM[k|m|g]: log rotation
                                  #     - max-file NUM: log rotation
                                  #  - awslogs:
                                  #     - awslogs-region REGION
                                  #     - awslogs-group STR
                                  #     - awslogs-stream STR
                                  #  - others: see online doc

docker create ...                 #
dockerd ...                       #
--log-driver LOGDRIVER            #Sets LOGDRIVER
--log-opt VAR=VAL                 #LOGDRIVER options
                                  #Can be done several times

SYSINFO."Logging Driver"          #Current LOGDRIVER and its options
HOSTCONF.LogConfig.Type           #LOGDRIVER
HOSTCONF.LogConfig.Config         #OBJ
CONTAINERINFO.LogPath             #

dockerd ...
--raw-logs                        #Do not use colors


docker logs CONTAINER             #Prints logs of a container (i.e. stdout/stderr)
                                  #Only available for LOGDRIVER json-file and journald

-t
--timestamps                      #Print timestamps too
--details                         #Verbose

--tail NUM                        #Only last NUM lines
--since DATE[TIME]                #
-f
--follow                          #Pipe input, i.e. does not end


docker events                     #Prints stream of realtime events coming from server:
                                  #  - as TIMESTAMP TYPE EVENT ID (ARGS)
                                  #Available TYPE + EVENT:
                                  #  - container
                                  #     - create|destroy, exec_create|detach|start, commit, update, rename, export
                                  #     - start, restart, stop, pause, unpause
                                  #     - health_status, oom, kill, die
                                  #     - attach|detach
                                  #     - copy
                                  #     - resize, top
                                  #  - image: delete, pull|push, tag|untag, import|load|save,
                                  #  - volume: create|destroy, mount|unmount
                                  #  - network: create|destroy, connect|disconnect
                                  #  - daemon: reload
                                  #  - plugin: install|remove, enable|disable
--since|until DATE                #If does not include current moment, is one-time (as opposed to realtime)
                                  #DATE can be:
                                  #  - NUM (Epoch in secs)
                                  #  - 'YYYY-MM-DD[THH:MM:SS[TZ]]'
                                  #  - Go duration strings, i.e. [NUMh][NUMm][NUMs]
--filter VAR=VAL                  #VAR:
                                  #  - type TYPE
                                  #  - event EVENT
                                  #  - image|container|volume|network|daemon|plugin IMAGE|CONTAINER|VOLUME|NETWORK|DAEMON|PLUGIN
                                  #  - label VAR[=VAL]
                                  #Can be done several times: or'd if same VAR, and'd otherwise


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           METADATA            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


LABEL ==>                         #Metadata on images, containers, daemons, volumes, networks, swarm nodes or swarm services
                                  #Can be viewed with docker inspect


LABEL VAR="VAL" ...               #Dockerfile instruction
                                  #Sets labels (metadata). Can override.
                                  #It is recommended to do one pair per line (using trailing newlines)
docker create ...
-l VAR="VAL"
--label VAR[=VAL]                 #Sets labels
--label-file FILE                 #Same from newline-delimited file, which can include # COMMENTS

docker volume|network|service 
 create, dockerd, docker build ...
--label VAR[=VAL]                 #Sets labels
SYSINFO.Labels                    #Of dockerd
VOLUMEINFO|NETWORKINFO.Labels     #

docker node|service update ...
--label-add VAR[=VAL]             #Sets labels
--label-rm VAR                    #Unsets labels

IMAGEINFO.Config.Labels.VAR       #VAL


MAINTAINER NAME <EMAIL>           #Dockerfile instruction. Metadata about author
docker commit ...
-a AUTHOR
--author AUTHOR                   #
IMAGEINFO.Author                  

docker commit|import ...
-m COMMIT_MESSAGE
--message COMMIT_MESSAGE          #
IMAGEINFO.Comment                 #COMMIT_MESSAGE



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           REGISTRY            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



GOAL ==>                          #Repository (similar to GitHub) of Docker images
                                  #Can create/edit via website.

docker login [HOSTNAME]           #Authenticate to Docker Hub from CLI
                                  #Used when trying to push to repo
                                  #Save credentials at DOCKERCONF.auths.URL.auth "HASH"
-p PASSWORD
--password PASSWORD
-u USER
--user USER                       #Def: use interactive prompt


docker logout [HOSTNAME]          #


docker push IMAGE                 #Push IMAGE to associated repo. IMAGE must include "REPO_USER/"


docker pull IMAGE                 #Pull IMAGE from associate repo. IMAGE must include "REPO_USER/"
-a
--all-tags                        #Pull all related tags as well

FROM IMAGE                        #Dockerfile instruction. Pull another IMAGE, and use it as base
                                  #Must be first instruction. Mandatory.
                                  #Can be done several times (will merge several IMAGEs) but should avoid
                                  #Prefer Docker official images
                                  #"scratch" is special IMAGE, most minimal possible
docker build ...
--pull                            #Never use cache


dockerd ...
--max-concurrent-downloads|uploads
 NUM                              #Max parallel HTTP requests with docker pull|push


docker search STR                 #Searches DockerHub, and prints results: name, description, stars, 
--limit NUM                       #
--no-trunc                        #Do not truncate description


DEFAULT REGISTRY ==>              #Is Docker Hub, maintained by Docker
                                  #Can customize with:
                                  #  - dockerd --registry-mirror HOSTNAME
                                  #  - using HOSTNAME in docker login, etc.
SYSINFO.Registry                  #


dockerd ...
--insecure-registry HOST[:PORT]   #Must be used when custom registry does not use TLS, or HOSTNAME/ca.crt not available
SYSINFO."Insecure registries"     #

dockerd ...
--disable-legacy-registry         #Do not allow custom registries with old versions of registry protocol


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         CONTENT TRUST         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



CONTENT TRUST ==>                 #Verifying Docker registry (like Docker Hub) images tags (i.e. their connection to hash content) with TLS signatures ("trusted images")
                                  #  - for docker push|pull and docker build|create
                                  #  - bypassed if IMAGE contains HASH
                                  #  - bypassed if no TAG (except for pull, which uses "latest" by default)
                                  #  - signing is automatically done by docker
                                  #     - creates keys in DOCKERHOME/trust/
                                  #     - passphrases can be provided in interactive shell or using ENVVAR DOCKER_CONTENT_TRUST_ROOT|REPOSITORY_PASSPHRASE
DOCKER_CONTENT_TRUST=1            #ENVVAR that must be enabled
docker push|pull|build|create
--disable-content-trust           #

DOCKER_CONTENT_TRUST_SERVER       #ENVVAR to override URL


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             SWARM             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SWARM ==>                         #Cluster of nodes
                                  #Does: load balancing, high availability, basic orchestration


docker swarm init                 #Starts a new single-node swarm
                                  #Current node will be a leader manager
                                  #Fires docker swarm join-token worker

--advertise-addr IP               #Each manager has an advertised IP for:
                                  #  - external, load-balanced communication to the swarm
                                  #  - communicating to manager for orchestration purpose
                                  #By def:
                                  #  - dockerd --swarm-default-advertise-addr IP
                                  #  - def: main IP address and port 2377

--force-new-cluster               #Forces even if there is currently one
                                  #Useful when quorum was lost, and needs to reboot swarm without losing information like services, tasks, nodes


docker swarm update               #Sets swarm options.
                                  #Same options as docker swarm init except:
                                  #  - no --advertise|listen-addr, --force-new-cluster


SWARM_TOKEN                       #Confidential token specific to a swarm, allowing nodes to join it
                                  #There is one for workers, and one for managers
                                  #Can be rotated


docker swarm join HOST:PORT       #Make current node a worker node of a swarm
                                  #HOST is leader's
                                  #PORT is usually 2377
--token SWARM_TOKEN               #


docker swarm join-token           
 worker|manager                   #Prints SWARM_TOKEN and instructions on how to use docker swarm join
-q
--quiet                           #Only prints token
--rotate                          #Changes SWARM_TOKEN


docker swarm leave                #Inverse of docker swarm join. Must be worker node


VOLUMEINFO|NETWORKINFO.Scope      #Whether a VOLUME|NETWORK is available in whole swarm ("global") or only on one node ("local", def)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          SWARM NODE           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


NODE ==>                          #Is a dockerd server
                                  #Can be:
                                  #  - manager: 
                                  #     - manages workers:
                                  #        - orchestration
                                  #        - assigning tasks to nodes
                                  #     - managers must be connected to each other, to be able to tell each others' state:
                                  #        - must use datastore for this, if it is multi-host
                                  #  - worker: 
                                  #     - execute a task
                                  #     - managers are also workers:
                                  #        - unless availability is "drained"
                                  #        - should use resource constraints to ensure tasks do not keep manager so busy it cannot do orchestration
                                  #Leader:
                                  #  - single manager that execute operations
                                  #     - other managers only forward to leader
                                  #  - election/quorum:
                                  #     - other managers only purpose is to possibly be elected to leader:
                                  #        - more increase fault tolerance
                                  #        - but more decrease performance
                                  #     - triggered when leader is down
                                  #        - uses a raft consensus determines a new leader, i.e. (n/2)+1 majority
                                  #        - for it to work, there should be odd number of managers
                                  #     - also used on add|remove nodes or swarm updates
                                  #  - swarm is down when there is less than (n-1)/2 (because election cannot happen)
                                  #     - "down" means there is no leader, i.e.:
                                  #        - cannot manage workers (assigning tasks, orchestration)
                                  #        - but workers keep running
                                  #Those ports must be opened:
                                  #  - 2377 (TCP): orchestration
                                  #  - 7946 (TCP+UDP): inter-nodes orchestration
                                  #  - 4789 (TCP+UDP): overlay network


docker node promote|demote NODE...#Sets NODE to manager or worker

docker node update NODE           #Sets nodes properties
--role worker|manager             #Same as docker node promote|demote
SYSINFO.Swarm."Is Manager"        #BOOL
SYSINFO.Swarm.Managers            #NUM
NODEINFO.Spec.Role                #

docker node update ...
--availability STR                #Can be:
                                  #  - active: running, can get new tasks
                                  #  - pause: running, cannot get new tasks
                                  #  - drain: 
                                  #     - not running, cannot get new tasks
                                  #     - when switching, currently running tasks are transfered to other nodes
NODEINFO.Spec.Availability        #



docker node rm NODE...            #
--force                           #Forces even if availability is "active"


docker node ls                    #List available nodes
-q
--quiet                           #Only prints IDs
NODEINFO.ID                       #NODE_ID
SYSINFO.Swarm.NodeID              #
SYSINFO.Swarm.Nodes               #NUM
NODEINFO.CreatedAt|UpdatedAt      #"DATE"


docker node inspect NODE|self...  #Print debug information, as NODEINFO



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         SWARM SERVICE         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SERVICE ==>                       #Template of a task, i.e. an IMAGE + COMMAND + configuration (e.g. number of containers)

SERVICE                           #Either SERVICE_ID (can be truncated) or SERVICE_NAME


docker service create IMAGE       
 [COMMAND [ARGS...]]              #Creates a swarm service, and launches containers on available nodes to support it (if replicas > 0)

-e
--env
-l
--label
--log-driver
--log-opt
--network
-p
--publish
-u
--user
-w
--workdir                         #Like docker create

--name SERVICE_NAME               #

--replicas NUM                    #Number of tasks (i.e. containers) (def: 0), running same IMAGE in parallel
                                  #Will be enforced, e.g. new tasks will be started if one task terminates or fails healthchecks
                                  #Will be balanced:
                                  #  - try to maintain about the same number of tasks per node
                                  #  - only do so when starting new tasks, i.e. does not rebalance tasks when starting new nodes
--mode replicated|global          #If global (def: replicated), --replicas NUM is "1 per node"
                                  #Good for services that must be run on every node, usually not main task, e.g. monitoring

--update-delay TIME               #Delay between updates (docker service update)
                                  #TIME is [NUMh][NUMm][NUMs]
--update-parallelism              #Apply updates to all nodes at same time (as opposed to def serial)
--update-failure pause|continue   #When an update on a single node fails, pauses (def) updates on all nodes
                                  #Running docker service update will restart node


docker service rm SERVICE...      #Removes SERVICE


docker service update SERVICE     #Sets SERVICE options.
                                  #Same options as docker service create but:
                                  #  - --env|label|publish|container-label|mount -> --env|label|publish|container-label|constraint|mount-add|rm
                                  #  - IMAGE [COMMAND [ARGS...]] -> --image IMAGE, --args ...
                                  #  - no --network
                                  #It will restart containers:
                                  #  - for rolling updates, see --update-delay|parallelism


docker service scale SERVIC=NUM...#Changes number of containers, e.g. to scale up|down or to stop
                                  #Same as updating --replicas


docker service ls                 #Prints all SERVICE
-q
--quiet                           #Only print SERVICE_ID


docker service inspect SERVICE... #Gives debug information about SERVICE

docker inspect SERVICE...         #SERVICEINFO. Same options as docker inspect IMAGE
SERVICEINFO                       #Debug information, as JSON


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          SWARM TASK           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TASK ==>                          #Task:
                                  #  - a CONTAINER execution
                                  #  - once assigned, cannot move to another node
                                  #  - automatically load balanced between nodes

TASK                              #Either TASK_ID or TASK_NAME


docker inspect TASK               #Show debugging info, as TASKINFO

docker node ps NODE|self          
docker service ps SERVICE         #Show tasks for that SERVICE|NODE: TASK_ID, TASK_NAME, IMAGE, current|desired state, NODE, errors
TASKINFO.ServiceID                #SERVICE_ID
TASKINFO.ID                       #TASK_ID
TASKINFO.NodeID                   #NODE_ID
TASKINFO.Status.State             #Current state
TASKINFO.DesiredState             #Desired state
TASKINFO.CreatedAt|UpdatedAt      #"DATE"


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            PLUGINS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker plugin ...                 #New system replacing DRIVERs (e.g. for volumes, networks, storage, logging), but still experimental

dockerd ...
--authorization-plugin            #

SYSINFO.Plugins.TYPE              #General information


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        DOCKER COMPOSE         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



docker deploy


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         DOCKER CLOUD          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCKER CLOUD ???

docker stack config
docker stack deploy
docker stack rm
docker stack services
docker stack tasks
