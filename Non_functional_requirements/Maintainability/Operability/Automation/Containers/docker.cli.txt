
            
   DOCKER   
            



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         DOCKER ENGINE         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/

VERSION ==>                       #1.12.2

docker deamon:
  - binds to Unix socket:
     - owned by "docker" group if it exists, "root" (avoid) otherwise

Start deaemon:
  - once: sudo service docker start
  - all the time: sudo systemctl enable docker

Memory and swap accouting:
  - must be enabled on the OS: performance impact, but better OS memory management
  - see online doc for how to enable it

IMAGE                             #Stateless filesystem snapshot, with metadata
                                  #IMAGE from Docker Hub.
                                  #Pulled unless cached
                                  #Is either:
                                  #  - IMAGE_ID (can be shortened)
                                  #  - [HOSTNAME/][REPO_USER/]IMAGE_NAME[:TAG]:
                                  #     - def HOSTNAME: registry-1.docker.io
                                  #     - REPO_USER (if push|pull, def: docker): see Docker Hub
                                  #     - IMAGE_NAME: [[:alnum:]._-]
                                  #     - def TAG: latest
CONTAINER                         #Running instance of an image
                                  #Is either:
                                  #  - CONTAINER_ID (can be shortened)
                                  #  - CONTAINER_NAME

/var/lib/docker/                  #Runtime directory for docker with notably:
                                  #  - containers/CONTAINER_ID/:
                                  #     - log files
                                  #     - config, including routing
                                  #  - images/



docker version                    #Prints current version


docker build DIR|URL              #Creates an IMAGE from a DIR with a Dockerfile inside
-f DOCKERFILE                     #Def: DIR/Dockerfile
-t IMAGE                          #


docker rmi IMAGE                  #Deletes an IMAGE
-f
--force                           #Deletes even if there are related containers
--no-prune                        #Do not delete parents without tags


docker tag IMAGE IMAGE2           #Make IMAGE2 a link to IMAGE, i.e.:
                                  #  - IMAGE_ID IMAGE_NAME: gives a name
                                  #  - IMAGE IMAGE:TAG: create tag
                                  #  - IMAGE REPO_USER/IMAGE_NAME: associate with a repository


docker run IMAGE                  #Does:
 [COMMAND [ARGS...]]              #  - if does not exist locally, docker pull IMAGE
                                  #  - creates and run a container, using IMAGE
                                  #  - run COMMAND from within the container (def: container's default command)
-t
--tty                             #Allocate a pseudo-TTY. Required if starting interactive shell
-i
--interactive                     #Redirect container input from current terminal's


docker rm CONTAINER               #Deletes a CONTAINER
-f
--force                           #Deletes even if running


docker images                     #Prints images with information (one line per image+tag combination):
                                  #  - IMAGE (repository)
                                  #  - tag
                                  #  - sha256 checksum (if --digests)
                                  #  - image ID (truncated unless --no-trunc)
                                  #  - ctime
                                  #  - size
-a
--all                             #Prints all (do not hide intermediate images, i.e. currently building images)
-q
--quiet                           #Only show image ID


docker ps                         #Prints containers with information:
                                  #  - container ID (truncated unless --no-trunc)
                                  #  - container names
                                  #  - IMAGE name
                                  #  - IMAGE command
                                  #  - ctime
                                  #  - status: exited (+ status code, time)
                                  #  - ports
                                  #  - size (real, virtual): only if -s/--size
-a                                
--all                             #Prints all (not only currently running)
-n [INT]
--last [INT]
-l
--latest                          #Only prints INT (def: 1) latest ran
-q
--quiet                           #Only show container ID


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          DOCKERFILE           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


FILESYSTEM ==>                    #/ is image root

/Dockerfile                       #Main configuration file, with following commands

FROM IMAGE                        #Pull another IMAGE

COMMAND                           #Means a CLI command, either:
                                  #  - same syntax as in a CLI
                                  #    Run with /bin/sh -c
                                  #  - as array of words ["STR",...]
                                  #    Run with exec, i.e. new environment

RUN COMMAND                       #Run command

ENTRYPOINT COMMAND                #If COMMAND uses:
                                  #  - array of words: like CMD
                                  #  - CLI syntax: sets default command, that can take args.

CMD COMMAND                       #If ENTRYPOINT was:
                                  #  - not called before: sets default command, that cannot take args. 
                                  #  - called before: sets default args.
                                  #Only last CMD will be used.

ENV VAR VAL                       #Sets ENVVAR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          DOCKER HUB           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


GOAL ==>                          #Repository (similar to GitHub) of Docker images
                                  #Can create/edit via website.

docker login [HOSTNAME]           #Authenticate to Docker Hub from CLI
                                  #Used when trying to push to repo
-p PASSWORD
--password PASSWORD
-u USER
--user USER                       #Def: use interactive prompt


docker push IMAGE                 #Push IMAGE to associated repo. IMAGE must include "REPO_USER/"

docker pull IMAGE                 #Pull IMAGE from associate repo. IMAGE must include "REPO_USER/"
-a
--all-tags                        #Pull all related tags as well
