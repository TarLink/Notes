
            
   DOCKER   
            



                   
   DOCKER ENGINE   
                   



VERSION ==>                       #1.12.2

docker version                    #Prints current version

Look again at "Network configuration" Docker documentation???


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           CONCEPTS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


IMAGE                             #Stateless filesystem snapshot, with metadata
                                  #IMAGE from Docker Hub.
                                  #Pulled unless cached
                                  #Is either:
                                  #  - IMAGE_ID:
                                  #     - can be shortened
                                  #     - SHA256 content hash
                                  #  - [HOSTNAME/][REPO_USER/]IMAGE_NAME[:TAG]:
                                  #     - def HOSTNAME: registry-1.docker.io
                                  #     - REPO_USER (if push|pull, def: docker): see Docker Hub
                                  #     - IMAGE_NAME: [[:alnum:]._-]
                                  #     - def TAG: latest
CONTAINER                         #Running instance of an image
                                  #Is either:
                                  #  - CONTAINER_ID:
                                  #     - can be shortened
                                  #     - UUID
                                  #  - CONTAINER_NAME

CONTAINERS BEST PRACTICES ==>     #Containers should:
                                  #  - make it easy to scale:
                                  #     - be ephemeral, i.e. can be immediately stopped at any time
                                  #  - keep it small:
                                  #     - only include necessary packages
                                  #     - limit number of layers
                                  #  - decouple:
                                  #     - only one purpose/process per container

GOTMP                             #Go template, taking an OBJ as input
                                  #Has extra available FUNC:
                                  #  - join ARR
                                  #  - json VAL
                                  #  - lower|upper|title STR
                                  #  - split STR "CHAR"


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          MAIN FILES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DOCKERDIR                         #Runtime directory for docker with notably:
                                  #  - containers/CONTAINER_ID/:
                                  #     - log files
                                  #     - config, including routing
                                  #  - images/
                                  #  - volumes/: data volumes
                                  #Def: /var/lib/docker/                  
                                  
DOCKERCONF                        #Either:
                                  #  - docker --config=FILE
                                  #  - ~/.docker/config.json


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            DAEMON             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker daemon/server:
  - binds to Unix socket:
     - owned by "docker" group if it exists, "root" (avoid) otherwise
  - client is connected to daemon (client-server architecture)

dockerd                           #Starts server
                                  #Can change binary path with ENVVAR DOCKERD
                                  #There is support for:
                                  #  - SysVInit: e.g. start (once) with: sudo service docker start
                                  #  - systemd: e.g. start (at each boot) with: sudo systemctl enable docker
                                  #  - upstart
-H PROTO://HOST[:PORT]
--host PROTO://HOST[:PORT]        #Address server listens to (def: /var/run/docker.sock)
--tls=true                        #Enables TLS
--tlscert=PATH                    #
--tlskey=PATH                     #
-D
--debug=true                      #
--live-restore                    #Do not shut down containers if server goes down
                                  #Server must be restarted with same options
                                  #While down, clients will buffer communication to server until limit (def: 64K)
                                  #Not compatible with swarm mode

/etc/default/docker               #File read when using SysVInit or upstart, usually setting ENVVAR
DOCKER_OPTS                       #Extra flags passed to dockerd

SIGUSR1                           #When sent to server, current stack traces will be logged

docker events ???

docker info ???

                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         OPTIMIZATION          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


Memory and swap accouting:
  - must be enabled on the OS: performance impact, but better OS memory management
  - see online doc for how to enable it



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           BUILDING            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


IMAGE/CONTAINERS ==>              #Are basically a tree of files, with metadata (e.g. COMMANDs)
                                  #Image/containers are basically the same except:
                                  #  - order: container is last layer, images all others
                                  #  - write operations:
                                  #     - when writing to a file, use first layer (starting with container) where this file exists
                                  #     - container is read-write, i.e. normal operation
                                  #     - images are read-only, copy-on-write: copy the file (applying modification to it) to topmost layer (i.e. container)
                                  #  - git commit transform container into image

BUILD LAYERS ==>                  #Works in layers:
                                  #  - each layer only contains modification from parent image
                                  #  - parent images are read-only, shared by reference
                                  #     - uses "storage drivers" (see above)
                                  #  - layers are images or containers
                                  #Each Dockerfile instruction (docker build) or commit (docker commit) creates a new layer:
                                  #  - intermediate IMAGE are removed at the end
                                  #  - each layer creates a new shell, e.g. $PWD will be reset 
                                  #     - should limit number of layers, i.e. combine instructions as much as possible
                                  #  - max 127 layers

BUILD CONTEXT ==>                 #Directories:
                                  #  - BUILD_DIR: specified by docker build
                                  #  - CONTEXT_DIR: temporary, copied from BUILD_DIR
                                  #  - IMAGE_DIR: when image is created
                                  #CONTEXT_DIR:
                                  #  - sent by client to server:
                                  #     - should keep it minimal
                                  #  - can be used by Dockerfile instructions: COPY|ADD, COMMANDs
                                  #     - path resolution:
                                  #        - absolute path: relative to CONTEXT_DIR
                                  #        - relative path: 
                                  #           - relative to current dir, which is initially CONTEXT_DIR
                                  #           - can be changed by WORKDIR (see below)
                                  #  - copied from BUILD_DIR:
                                  #     - minus files matching BUILD_DIR/.dockerignore:
                                  #        - recommended
                                  #        - newline-separated, similar to .gitignore
                                  #        - # COMMENT, first line only
                                  #        - globbing: * ? ** !

BUILD CACHE ==>                   #Each layer + next instruction is cached:
                                  #  - by def reused if matched
                                  #  - specified in output log "Using cache"
                                  #Invalidates cache:
                                  #  - ADD|COPY of new|newer files
                                  #     - i.e. should be as late as possible, in order to invalidate fewer cache
                                  #  - ARG with different value
                                  #Does not invalidate cache:
                                  #  - COMMANDs, even if takes input from some global/changing state (e.g. apt-get update)
                                  #  - this can create problem, but can be disabled with docker build --no-cache

PERMISSIONS ==>                   #Default user is dockerd's, but can change with USER
                                  #Containers are always unprivileged:
                                  #  - can do apt-get install -y
                                  #  - but apt-get upgrade will fail on some core packages
                                  #  - apt-get update:
                                  #     - on its own, creates cache problems (avoid)
                                  #     - creates non-predictability unless pinning version, e.g. apt-get install -y PACKAGE=VERSION
                                  #     - recommended: apt-get update && apt-get install + version pinning && rm -rf /var/lib/apt/lists/*

docker build DIR|URL              #URL is Git repo
                                  #Builds an IMAGE using a DOCKERFILE


DOCKERFILE                        #Main configuration file, with commands below
                                  #Def: BUILD_DIR/Dockerfile, or docker build -f DOCKERFILE
                                  #Can concanate several Dockerfiles into one


# COMMENT                         #

# escape=CHAR                     #Changes escape character (def: \)
                                  #Can use escaped newlines, and should use them to sort long list alphabetically (e.g.  packages)
                                  #Must be at top of file, before any instruction, comment or blank line


FROM IMAGE                        #Pull another IMAGE, and use it as base
                                  #Must be first instruction. Mandatory.
                                  #Can be done several times (will merge several IMAGEs) but should avoid
                                  #Prefer Docker official images
                                  #"scratch" is special IMAGE, most minimal possible


COMMAND                           #Means a CLI command, either:
                                  #  - same syntax as in a CLI
                                  #     - run with /bin/sh -c, i.e. subcommand (unless COMMAND is "exec ...")
                                  #        - subcommands are not terminated when parent is (e.g. with docker stop)
                                  #        - can be changed with SHELL ["COMMAND",...]
                                  #     - only uses escape character for escaped newlines
                                  #  - as JSON array ["STR",...]
                                  #     - run with exec, i.e. same shell (not subcommand)
                                  #     - does not do shell expansion (e.g. $VAR)
                                  #     - preferred
                                  #Different timing:
                                  #  - build-time: during docker build, e.g. RUN
                                  #  - runtime: during docker exec, e.g. "default command/argument" (ENTRYPOINT|CMD)

RUN COMMAND                       #Run command

ENTRYPOINT COMMAND                #If COMMAND uses:
                                  #  - CLI syntax: like CMD
                                  #  - JSON array syntax: sets default command, that can take args
                                  #Only last ENTRYPOINT will be used.
                                  #At least one CMD or ENTRYPOINT required per Dockerfile

CMD COMMAND                       #If ENTRYPOINT was:
                                  #  - not called before: sets default command, that cannot take args. 
                                  #  - called before: 
                                  #     - sets default args
                                  #     - both ENTRYPOINT and CMD must use JSON array syntax
                                  #Only last CMD will be used.
                                  #At least one CMD or ENTRYPOINT required per Dockerfile

HEALTHCHECK [--OPT] CMD COMMAND   #Adds a "health status" to a CONTAINER, in addition to its running status:
                                  #  - checked by COMMAND at regular intervals
                                  #  - COMMAND exit code must be 0 (success) or 1 (failure)
                                  #  - COMMAND stdout|stderr will be kept in logs
                                  #Can be inspected with:
                                  #  - docker inspect, ps, etc.
                                  #  - health_status event (with "docker events")
                                  #Only last HEALTHCHECK will be used
--interval=NUM                    #Def: 30 (in secs)
--timeout=NUM                     #Def: 30 (in secs)
--retries=NUM                     #Def: 3

ONBUILD [...]                     #Same as ... but delayed: 
                                  #  - fired when another Dockerfile calls FROM for this image
                                  #  - only for direct children, not grandchildren
                                  #Allows using CONTEXTDIR of downstream image
                                  #Can see list of delayed instructions with docker inspect ("OnBuild")


$VAR                              #Expands. Defined by ENV or ARG
${VAR}                            #Should not be used for confidential information, as docker history shows it
${VAR:-VAL}
${VAR:+VAL}                       #Like in Bash

ENV VAR VAL                       #Sets ENVVAR
                                  #E.g. to append to $PATH
ENV VAR=VAL ...                   #Can be used in following instructions, except:
                                  #  - COMMAND-related: CMD, RUN, ENTRYPOINT, SHELL, HEALTHCHECK
                                  #  - ARG
                                  #  - MAINTAINER
                                  #The first form does not parse/expanse VAL

ARG VAR[=VAL]                     #Like ENV, but as build argument, i.e. docker build --build-arg VAR=VAL
                                  #VAL is default value
                                  #Information is not persisted in final built IMAGE. If needs to persist, can put ARG variable inside an ENV


USER STR                          #Sets current user, used:
                                  #  - in following instructions, e.g. COMMANDs
                                  #  - runtime, i.e. docker exec

WORKDIR DIR                       #Changes $PWD in CONTEXT_DIR for following instructions
                                  #DIR created with mkdir -p if not existing
                                  #Prefer over "cd"
                                  #Avoid relative DIR

LABEL VAR="VAL" ...               #See below

MAINTAINER NAME <EMAIL>           #Metadata about author


COPY|ADD SRC... DEST              #Copy files from CONTEXT_DIR to IMAGE_DIR
COPY|ADD ["SRC",..., "DEST"]      #SRC:
                                  #  - can contain globbing * ?
                                  #  - cannot be outside of CONTEXT_DIR
                                  #DEST:
                                  #  - must include trailing / if want to copy inside DIR
                                  #  - if not existing, is created using mkdir -p
                                  #New files/directories created with dockerd user/group (permission-wise)
                                  #ADD has extra features:
                                  #  - SRC can be URL
                                  #  - SRC can be a *.tar (unless it is a URL), which is unpacked

EXPOSE PORT ...                   #Expose port, for docker create -P (see above)
                                  #Can also use docker create --export PORT

VOLUME ...                        #See above

STOPSIGNAL SIG_NAME|NUM           #Sets signal sent to container to terminate it (def: SIGKILL)



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            IMAGES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker commit CONTAINER [IMAGE]   #Creates a new (or copies to an) IMAGE, from an existing CONTAINER
-a AUTHOR
--author AUTHOR                   #
-m COMMIT_MESSAGE
--message COMMIT_MESSAGE          #
-c COMMAND
--change COMMAND                  #Execute Dockerfile command


docker build DIR|URL              #Creates an IMAGE from a DIR with a Dockerfile inside
                                  #See Dockerfile for more info
-f DOCKERFILE                     
--no-cache                        #See Dockerfile
-t IMAGE                          #See below


docker diff CONTAINER ???

docker history IMAGE ???


docker rmi IMAGE                  #Deletes an IMAGE
-f
--force                           #Deletes even if there are related containers
--no-prune                        #Do not delete parents without tags


docker tag IMAGE IMAGE2           #Make IMAGE2 a link to IMAGE, i.e.:
                                  #  - IMAGE_ID IMAGE_NAME: gives a name
                                  #  - IMAGE IMAGE:TAG: create tag
                                  #  - IMAGE REPO_USER/IMAGE_NAME: associate with a repository
docker build -t IMAGE2            #Performs docker tag IMAGE_ID IMAGE2 after creating IMAGE



docker images                     #Prints images with information (one line per image+tag combination):
                                  #  - IMAGE (repository)
                                  #  - tag
                                  #  - sha256 checksum (if --digests)
                                  #  - image ID (truncated unless --no-trunc)
                                  #  - ctime
                                  #  - size
-a
--all                             #Prints all (do not hide intermediate images)
-q
--quiet                           #Only show image ID
--format GOTMP                    #Input is OBJ:
                                  #  - Repository IMAGE
                                  #  - Tag
                                  #  - Digest
                                  #  - ID IMAGE_ID
                                  #  - CreatedSince|At
                                  #  - Size



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        CONTAINER CRUD         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



docker create IMAGE               #Does:
 [COMMAND [ARGS...]]              #  - if does not exist locally, docker pull IMAGE
                                  #  - creates a container, using IMAGE
-t
--tty                             #Allocate a pseudo-TTY. Required if starting interactive shell
-i
--interactive                     #Redirect container input from current terminal's
--restart STR                     #What happens when container exits:
                                  #  - "no" (def): nothing
                                  #  - "always": restarts
                                  #  - "on-failure[:NUM]": restarts if exit code non-0, with NUM max retries (def: unlim)
                                  #  - "unless-stopped": restarts unless explicitely stopped by admin
                                  #Restarts use exponential delay
                                  #Should not be used if a process manager is used, e.g. systemd, forever or pm2

--name CONTAINER_NAME             #Def: random


docker rename CONTAINER CONTAINER2#


docker update CONTAINER...        #


docker rm CONTAINER               #Deletes a CONTAINER
-f
--force                           #Deletes even if running


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:       CONTAINER RUNNING       :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker exec CONTAINER COMMAND     
 [ARGS...]                        #Run COMMAND from within the container (def: container's default command/arguments)
-d                                #Run in the background of current terminal
--detach                          #Returns container ID
--detach-keys                     #???
--privileged                      
-i
--interactive                     
-t
--tty
-u USER
--user USER                       #Like docker create

docker run IMAGE [...]            #Does:
                                  #  - docker create IMAGE
                                  #  - docker exec CONTAINER ...
                                  #Shares all options from docker create+exec, plus extra, following.
--sig-proxy                       #???
--rm                              #???

docker attach CONTAINER ???


docker stop|restart CONTAINER...  #Stops a running CONTAINER
                                  #If restart, runs docker start right after
-t INT
--time INT                        #How long to wait (in secs, def: 10)


docker start CONTAINER...         #Runs a stopped CONTAINER


docker kill CONTAINER... ???


docker pause CONTAINER... ???


docker unpause CONTAINER... ???


docker wait CONTAINER... ???

                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        CONTAINER STATS        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker ps                         #Prints containers with information:
                                  #  - container ID (truncated unless --no-trunc)
                                  #  - container names
                                  #  - IMAGE name
                                  #  - IMAGE command
                                  #  - ctime
                                  #  - status: exited (+ status code, time)
                                  #  - ports forwarding
                                  #    Can also use: docker port CONTAINER [HOST_PORT]
                                  #  - size (real, virtual): only if -s/--size
-a                                
--all                             #Prints all (not only currently running)
-n [INT]
--last [INT]
-l
--latest                          #Only prints INT (def: 1) latest ran
-q
--quiet                           #Only show container ID


docker top CONTAINER              #Prints running processes of a container: UID, PID, parent PID, time, command, TTY, etc.


docker stats CONTAINER...         #Prints runtime metrics of containers: CPU, Memory, I/O


docker inspect 
 CONTAINER|IMAGE|TASK             #Prints verbose debug information, as JSON


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           NETWORKS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


NETWORK                           #Is a set of network-related settings/resources (ports, etc.)
                                  #Can be the ID (can be truncated) or name
                                  #Can be of type (DRIVER):
                                  #  - null: 
                                  #     - no networking
                                  #  - host: 
                                  #     - uses host's network interfaces
                                  #  - bridge: 
                                  #     - single-host inter-container communication, with external interface outside of host
                                  #        - using container IP address, not host
                                  #        - must belong to same NETWORK
                                  #     - hosts uses docker0 interface:
                                  #        - by default, ethernet
                                  #        - automatically creates gateway (external single IP for the subnet)
                                  #     - container uses eth0 interface:
                                  #        - uses one IP among host's subnet
                                  #           - only one subnet
                                  #           - def: automatic, with 2^16 possible IP addresses
                                  #  - macvlan:
                                  #     - similar to bridge, but different design, which is more performant and simpler
                                  #        - while in bridge, containers have their own interface and MAC, in macvlan, they use sub-interfaces of the host's interface
                                  #     - containers must use same interface as host:
                                  #        - specified with NETWORK option parent=INTERFACE
                                  #  - overlay:
                                  #     - multi-host inter-container communication, with external interface outside of host ("advertiser")
                                  #        - connected together using a key-value store
                                  #        - hosts must have unique hostnames
                                  #     - key-value store:
                                  #        - supported: consul, etcd, zookeeper
                                  #        - must open ports 4789 (UDP) and 7946 (TCP/UDP)
                                  #     - daemond:
                                  #        - --cluster-store=PROVIDER://URL
                                  #        - --cluster-advertise=IP:PORT (advertiser)
                                  #        - --cluster-opts=OPT_VAR-OPT_VAL,... (e.g. SLL options)
                                  #     - can have multiple subnets (by specifying several --subnet)
                                  #Default:
                                  #  - three available: none (DRIVER null), host, bridge
                                  #  - bridge is the default associated NETWORK
                                  #Containers can:
                                  #  - be associated with several networks
                                  #When inter-container communication is possible, can use DNS names, within same NETWORK:
                                  #  - CONTAINER_NAME, providing it is not the default bridge NETWORK
                                  #  - DNS_ALIAS using:
                                  #     - docker network connect --link CONTAINER2:DNS_ALIAS or docker create --link CONTAINER2:DNS_ALIAS
                                  #        - i.e. one CONTAINER defined how to refer to one CONTAINER2
                                  #     - docker network connect --alias DNS_ALIAS or docker create --network-alias DNS_ALIAS
                                  #        - i.e. one CONTAINER2 tells any other CONTAINER how refer to it
                                  #        - several containers can have same DNS_ALIAS:
                                  #           - only one will be targeted (always the same, i.e. the first one)
                                  #           - others behave as passive failover
                                  #  - uses /etc/resolve.conf
                                  #     - can alternative specify DNS server with docker create flags:
                                  #        --dns=[IP,...]
                                  #        --dns-search=DOMAIN,...
                                  #        --dns-opt=OPT,...


docker network create NETWORK_NAME#Creates NETWORK
-d DRIVER
--driver DRIVER                   #Def: bridge
-o VAL                            #DRIVER-specific options
--opt VAL                         #DRIVER name is included in VAL
--internal                        #No external access
--ipv6                            #Allows IPv6
--subnet=IP/MASK                  #Specifies subnet (instead of default)
--gateway=IP                      #Specifies gateway (instead of default)
--ip-range=IP/MASK                #Specifies IP range, i.e. subset of subnet from which containers IPs will be picked (def: whole subnet)
--aux-address="VAR=IP"            #Specifies secondary address
-o "com.docker.network.bridge.
 name=NAME"                       #Bridge name to be used when creating the Linux bridge
-o "com.docker.network.bridge.
 enable_ip_masquerade"  
--ip-masq                         #Enable IP masquerading
-o "com.docker.network.bridge.
 enable_icc=BOOL"
--icc                             #Enable or Disable Inter Container Connectivity
-o "com.docker.network.bridge.
 host_binding_ipv4=IP"
--ip IP                           #Default IP when binding container ports
-o "com.docker.network.
 driver.mtu=NUM"
--mtu NUM                         #Set the containers network MTU


docker network rm NETWORK         #


docker network connect NETWORK
 CONTAINER                        #Associate a CONTAINER to a NETWORK
--ip[6] IP                        #Specifies IP (instead of random one from subnet)

docker run ...
--ip[6] IP                        #Specifies IP (instead of random one from subnet)


docker network disconnect NETWORK
 CONTAINER                        #Dissociate a CONTAINER to a NETWORK
-f
--force                           #Even if running container


docker network ls                 #Prints available networks: ID, name, driver, scope
-q
--quiet                           #Only show IDs
--no-trunc                        #Do not truncate IDs


docker network inspect NETWORK    #Prints verbose debug information, as JSON


docker create IMAGE
--network NETWORK                 #Associate to NETWORK
-p [HOST_INTERFACE:][HOST_PORT]:  #Forward ports
 CONTAINER_PORT[/PROTO]           #HOST_PORT can be a range of ports instead (def: ephemeral port range, i.e. 32768-61000)
                                  #HOST_INTERFACE (def: all)
                                  #PROTO: upd|tcp (def: any)
-P                                #Forward any exposed CONTAINER_PORT to a random HOST_PORT (ephemeral port range)
--publish-all                     #See EXPOSE instruction


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         DATA VOLUMES          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


DATA VOLUME ==>                   #Container directory that is connected to host, i.e.:
                                  #  - synced (bidirectional) with a directory of the host
                                  #     - must ensure that operations are atomic (to avoid filesystem conflicts)
                                  #     - several containers can share same host directory, by specifying same HOST_DIR (absolute path or VOLUME_NAME)
                                  #  - not saved in images nor container layers
                                  #     - should be used for any data not meant to be persisted in an image, e.g. temp runtime data
                                  #  - faster performance because do not use storage driver
                                  #HOST_DIR can be:
                                  #  - absolute path: 
                                  #     - specific path, random VOLUME_NAME
                                  #     - cannot be manipulated with "docker volume"
                                  #  - [[:alnum:]_.-] VOLUME_NAME: random path (e.g. somewhere in DOCKERDIR), specific VOLUME_NAME
                                  #  - nothing: random path, random VOLUME_NAME
                                  #CONTAINER_DIR: absolute path
                                  #Instead of DIR can also be FILE:
                                  #  - similar to hardlink
                                  #  - but inode must not changed (e.g. mv, sed -i, vim)
DATA VOLUME DRIVER ==>            #Plugin for specific filesystems (e.g. over the network)
                                  #Def: "local"


docker run 
-v [HOST_DIR:]CONTAINER_DIR[:OPT] #Creates data volume.
                                  #OPT:
                                  #  - ro: read-only (in container, not in host)
                                  #Can be done several times
--volume-driver=DRIVER            #
--volumes-from CONTAINER          #Uses same -v configuration as CONTAINER


docker rm
-v
--volumes                         #Removes volumes as well


docker volume create              #Creates data volume
-d DRIVER
--driver DRIVER                   #
-o OPT
--opt OPT                         #Driver-specific options
--name VOLUME_NAME                #

VOLUME CONTAINER_DIR ...          #Dockerfile instruction
VOLUME ["CONTAINER_DIR",...]      #Similar to -v CONTAINER_DIR with docker run, but build-time

docker volume rm VOLUME_NAME      #


docker volume ls                  #Prints available volumes: DRIVER, VOLUME_NAME
-q
--quiet                           #Only prints names


docker volume inspect VOLUME_NAME #Prints verbose debug information, as JSON


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        STORAGE DRIVER         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


STORAGE DRIVER ==>                #Filesystem, handling image/container layers
                                  #Def: AUFS
                                  #Is mounted on an existing filesystem, "backing" (i.e. DOCKERDIR's)
dockerd                           #Store driver are per daemon. Can be inspected with docker info
--storage-driver=DRIVER           #Among: overlay2, aufs, btrfs, devicemapper, vfs, zfs

CHOICE ==>                        #In summary:
                                  #  - AUFS: def, good for general purpose or many containers, bad if big files or lots of write
                                  #  - OverlayFS: similar to AUFS but faster and less stable
                                  #  - ZFS: good for many containers, less stable
                                  #  - BTRFS: good for pools of images, bad if many containers or many small/sequential writes
                                  #  - DeviceMapper: good for big files, bad if many containers
                                  #  - VFS: debugging only
AUFS ==>                          #Only with backing filesystem ext4, XFS or ZFS
                                  #Some Linux distributions do not include AUFS support, because not in Linux kernel
                                  #Features:
                                  #  - good memory use. Fast container startup. I.e.:
                                  #     - good if many containers, e.g. PaaS or general purpose
                                  #  - file-level copy-on-write (CoW) i.e. store entire files, not file diffs, i.e.:
                                  #     - bad for big files
                                  #     - bad if lots of write, because slow CoW
                                  #  - some kernel syscalls are unsupported, which might cause problems:
                                  #     - "rename": copy and unlink instead, i.e. different inode
                                  #     - "open": open("FILE", O_RDONLY) (no CoW) then open("FILE", O_RDWR) (CoW) point to different files
                                  #Union filesystem (union mount, merging layers directories)
OVERLAYFS ==>                     #Only with backing filesystem ext4 or XFS
                                  #Seen as successor of AUFS, but not completely stable yet
                                  #Union filesystem
                                  #Similar features than AUFS, but faster
ZFS ==>                           #Only with backing filesystem ZFS
                                  #Not completely stable
                                  #Features:
                                  #  - good memory use, i.e.:
                                  #     - good if many containers, e.g. PaaS
                                  #  - bad RAM usage
BTRFS ==>                         #Only with backing filesystem BTRFS
                                  #Features:
                                  #  - good overall performance
                                  #     - good for pools of images
                                  #  - good support for SSD drives
                                  #  - no page (i.e. part of a file) caching, i.e.:
                                  #     - bad for many containers, e.g. PaaS
                                  #  - writes can increase memory usage and fragmentation quite a lot, i.e.:
                                  #     - bad if many small writes (including changing containers running states)
                                  #  - use journaling, i.e.
                                  #     - bad performance if writes are sequential
DEVICEMAPPER ==>                  #Only with backing filesystem direct-lvm
                                  #Features:
                                  #  - works with 64KB blocks not files
                                  #     - i.e. good for big files, bad for small files
                                  #  - not memory efficient
                                  #     - bad for many containers, e.g. PaaS
VFS ==>                           #Only for debugging


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            LOGGING            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


LOGDRIVER                         #Logging driver. Can be:
                                  #  - none: no logging
                                  #  - json-file (def): JSON appended to file
                                  #  - syslog
                                  #  - journald
                                  #  - awslogs: 
                                  #     - AWS Cloudwatch, using CreateLogStream() and PutLogEvents()
                                  #     - must provide AWS credentials to dockerd using ENVVAR
                                  #  - gcplogs (Google cloud)
                                  #  - splunk
                                  #  - etwlogs (Windows)
                                  #  - gelf (Graylog, logstash)
                                  #  - fluentd
                                  #LOGDRIVER options:
                                  #  - json-file, syslog, others:
                                  #     - labels VAR,...
                                  #        - if a container has LABEL VAR, adds it (and its value) to every log
                                  #     - env VAR,...
                                  #        - same for ENVVAR
                                  #     - tag GOTMP:
                                  #        - how CONTAINER_ID is printed (def: first 12 chars)
                                  #        - with OBJ: ID (first 12 chars), FullID, Name, Image[Full]ID|Name, DaemonName
                                  #  - json-file:
                                  #     - max-size NUM[k|m|g]: log rotation
                                  #     - max-file NUM: log rotation
                                  #  - awslogs:
                                  #     - awslogs-region REGION
                                  #     - awslogs-group STR
                                  #     - awslogs-stream STR
                                  #  - others: see online doc

docker create ...                 #
--log-driver LOGDRIVER            #Sets LOGDRIVER
--log-opt VAR=VAL                 #LOGDRIVER options
                                  #Can be done several times


docker logs CONTAINER             #Prints logs of a container (i.e. stdout/stderr)
                                  #Only available for LOGDRIVER json-file and journald
-t
--timestamps                      #Print timestamps too
--details                         #Verbose
-f
--follow                          #Pipe input, i.e. does not end
--tail NUM                        #Only last NUM lines
--since DATE[TIME]                #


                                  
                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          FILESYSTEM           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


docker cp 
[CONTAINER:]PATH [CONTAINER:]PATH2#PATH can be - for stdin

docker export CONTAINER ???       

docker import FILE|URL [IMAGE]    #FILE|URL can be - for stdin

docker load ???

docker save IMAGE... ???


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            LABELS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


LABEL ==>                         #Metadata on images, containers, daemons, volumes, networks, swarm nodes or swarm services
                                  #Can be viewed with docker inspect

LABEL VAR="VAL" ...               #Dockerfile instruction
                                  #Sets labels (metadata). Can override.
                                  #It is recommended to do one pair per line (using trailing newlines)
docker create ...
-l VAR="VAL"
--label VAR[=VAL]                 #Sets labels
--label-file FILE                 #Same from newline-delimited file, which can include # COMMENTS

docker volume|network|servive 
 create ...
--label VAR[=VAL]                 #Sets labels

dockerd ...
--label=[VAR[=VAL],...]           #Sets labels

docker node|service update ...
--label-add VAR[=VAL]             #Sets labels
--label-rm VAR                    #Unsets labels


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          DOCKER HUB           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


GOAL ==>                          #Repository (similar to GitHub) of Docker images
                                  #Can create/edit via website.

docker login [HOSTNAME]           #Authenticate to Docker Hub from CLI
                                  #Used when trying to push to repo
                                  #Save credentials at DOCKERCONF.auths.URL.auth "HASH"
-p PASSWORD
--password PASSWORD
-u USER
--user USER                       #Def: use interactive prompt


docker logout [HOSTNAME]          #


docker push IMAGE                 #Push IMAGE to associated repo. IMAGE must include "REPO_USER/"


docker pull IMAGE                 #Pull IMAGE from associate repo. IMAGE must include "REPO_USER/"
-a
--all-tags                        #Pull all related tags as well


docker search STR                 #Searches DockerHub, and prints results: name, description, stars, 
--limit NUM                       #
--no-trunc                        #Do not truncate description


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         DOCKER SWARM          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


See:???
  - https://docs.docker.com/engine/userguide/networking/, Docker Swarm part
  - https://docs.docker.com/engine/userguide/networking/get-started-overlay/, whole thing
  - https://docs.docker.com/engine/userguide/networking/overlay-security-model/

CONCEPTS ==>                      #A "swarm" is a cluster of "nodes":
                                  #  - dockerd server
                                  #  - can be:
                                  #     - manager: manages workers:
                                  #        - orchestration: only one manager is elected to do this ("leader")
                                  #        - assigning "tasks"
                                  #           - i.e. CONTAINER execution
                                  #           - a "service" is the template of a task, i.e. an IMAGE + COMMAND
                                  #           - once assigned, cannot move to another node
                                  #           - automatically load balanced between nodes
                                  #     - worker: execute a task
                                  #     - can be both
                                  #Those ports must be opened:
                                  #  - 2377 (TCP): orchestration
                                  #  - 7946 (TCP+UDP): inter-nodes orchestration
                                  #  - 4789 (TCP+UDP): overlay network
                                  #  - 50 (TCP): if --opt encrypted (uses IPSec)

docker swarm init                 #Starts a new swarm
                                  #Current node will be a leader
                                  #Fires docker swarm join-token worker
--advertise-addr IP               #External, load-balanced IP of the swarm
                                  #Also used by other nodes to communicate to manager

docker swarm join HOST:PORT       #Make current node a worker node of a swarm
                                  #HOST is leader's
                                  #PORT is usually 2377
--token SWARM_TOKEN               #

docker swarm join-token           
 worker|manager                   #Prints SWARM_TOKEN and instructions on how to use docker swarm join

docker swarm update ???

docker swarm leave ???



docker node promote|demote NODE... ???

docker node update NODE ???

docker node rm NODE... ???

docker node ls ???

docker node ps NODE|self ???

docker node inspect NODE|self...



docker service create IMAGE [COMMAND [ARGS...]] ???

docker service update SERVICE ???

docker service rm SERVICE... ???

docker service scale SERVICE=REPLICA... ???

docker service ps SERVICE ???

docker service ls ???

docker service inspect SERVICE... ???

