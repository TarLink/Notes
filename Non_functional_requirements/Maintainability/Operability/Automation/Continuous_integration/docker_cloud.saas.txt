
                  
   DOCKER_CLOUD   
                  



Continuous deployment:
  - price/plans: like Docker Hub, i.e. must pay for private repos and more parallel builds

Other features: 
  - email/slack notifications on build failures

Docker Hub:
  - can do basic Docker Hub features

Nodes:
  - actual hosts from cloud providers
  - can provision instances
  - deploy stack to instances

Stack:
  - is a Docker compose file:
     - can be manipulated with CLI: docker stack deploy|config|rm|services|tasks
     - only trimmed down version of CPSCONF, and CPSCONF.image required

Not from compose:
  - container_name, depends_on, tmpfs, entrypoint, env_file, extends, external_links, logging, log_driver, log_opt, networks,
    stop_signal, ulimits, volume_driver, cpu_quota, ipc, shm_size
New name from compose:
  - docker-compose run --rm -> CONF.autodestroy "always", "no" or "on-success"
  - network_mode -> net
  - "scale" -> target_num_containers NUM
New attributes not in compose:
  - build -> only image (required)
  - nickname STR: only used in GUI
  - deployment_strategy: where to place new tasks (similar to Swarm "task mode")
     - empties_node: node with fewest containers
     - high_availability: node with fewest containers of that SERVICE
     - every_node: 1 per node. Cannot scale (since 1 is max and min)
  - autoredeploy BOOL: continuous deployment, i.e. redeploy when image changes in registry
  - sequential_deployment BOOL (def: false): similar to Swarm "update parallelism"
  - roles global: add ENVVAR DOCKERCLOUD_AUTH to the container, which is HTTP Authenticate credentials to Docker cloud REST API

Gives DNS names linking to:
  - to either: NODE (machine), SERVICE (Docker compose SERVICE) or CONTAINER (Docker container)
  - hostname:
     - sub-host:
        - DOCKERCLOUD_NODE_HOSTNAME: HOST_UUID
        - DOCKERCLOUD_SERVICE_HOSTNAME: SERVICE_NAME
        - DOCKERCLOUD_CONTAINER_HOSTNAME: SERVICE_NAME_NUM
     - full host:
        - DOCKERCLOUD_NODE_FQDN: HOSTNAME.node.dockerapp.io
        - DOCKERCLOUD_SERVICE_FQDN: HOSTNAME.STACK.SERVICE_ID.svc.dockerapp.io
        - DOCKERCLOUD_CONTAINER_FQDN: HOSTNAME.STACK.CONTAINER_ID.cont.dockerapp.io
  - path:
     - DOCKERCLOUD_NODE_API_URI: /api/infra/v1/USER/node/HOST_UUID
     - DOCKERCLOUD_SERVICE|CONTAINER_API_URI: /api/app/v1/USER/service|container/SERVICE|CONTAINER_ID/
  - domain name:
     - DOCKERCLOUD_REST_HOST: https://cloud.docker.com
     - DOCKERCLOUS_STREAM_HOST: wss://ws.cloud.docker.com
     - DOCKERCLOUD_IP_ADDRESS
  - URL:
     - DOCKERCLOUD_NODE|SERVICE|CONTAINER_API_URL: https://cloud.docker.com/ + path

GUI to SSH into container

Can upgrade dockerd version on each node

docker login                      #Must be logged in, or pass ENVVAR DOCKERCLOUD_USER|PASS




docker-cloud repository register  #Add custom repository
-u USER
--username USER
-p PASSWORD
--password PASSWORD               #Custom repo credential


docker-cloud repository update RPO#Same options as docker-cloud repository register


docker-cloud repository ls        #


docker-cloud repository rm REPO   #


docker-cloud repository inspect 
 REPO                             #






docker-cloud nodecluster create 
 NODECLUSTER_NAME PROVIDER REGION 
 INSTANCE_TYPE                    #
--disk NUM                        #Main partition size, in GB (def: 60)
--aws-vpc-id VPC_ID
--aws-vpc-subnet SUBNET
--aws-vpc-security-group
--aws-iam-instance-profile-name 
 IAM_INSTANCE_PROFILE_NAME        #AWS options


docker-cloud nodecluster rm
 NODECLUSTER...                   #


docker-cloud nodecluster ls       #Show: NODECLUSTER_NAME|ID, REGION, NODETYPE, ctime, status, current|target number of nodes


docker-cloud nodecluster provider #List all possible provider


docker-cloud nodecluster nodetype #List all provider's available NODETYPE
-p PROVIDER
--provider PROVIDER               #
-r REGION
--region REGION                   #


docker-cloud nodecluster region   #List all provider's available regions
-p PROVIDER
--provider PROVIDER               #


docker-cloud nodecluster az       #List added provider's available Availablity zones


docker-cloud nodecluster inspect 
 NODECLUSTER...                   #




docker-cloud node byo             #Add node


docker-cloud node ls              #Show: NODE_ID, URL, mtime, status, NODECLUSTER


docker-cloud node inspect 
 NODE_ID...                       #


docker-cloud node upgrade 
 NODE_ID...                       #Upgrade dockerd


docker-cloud node rm NODE_ID...   #




docker-cloud stack create         #
-n STACK_NAME
--name STACK_NAME                 #
-f STACK_FILE
--file STACK_FILE                 #


docker-cloud stack update STACK_ID#Same options as docker-cloud stack create, except --name


docker-cloud stack terminate 
 STACK_ID...                      #Removes


docker-cloud stack export STACK_ID#Outputs STACK_FILE
-f STACK_FILE
--file STACK_FILE                 #


docker-cloud stack ls             #Show: STACK_NAME, STACK_ID, status, mtime, deletion time


docker-cloud stack inspect 
 STACK_ID...                      #







docker-cloud service create 
 IMAGE_NAME                       #
-n SERVICE_NAME
--name SERVICE_NAME               #
--cpushares
--memory
--privileged
-r
--run-command
--entrypoint
-p
--publish
--expose
-e
--env
--env-file
--link-service
--autodestroy
--autoredeploy
--autorestart
--role
--sequential
-v
--volume
--volumes-from
--deployment-strategy
--net NET
--pid PID                         #Same options as STACK_FILE


docker-cloud service set SERVICE  #Updates. Same options as create, except: --image IMAGE_NAME, and no --name


docker-cloud service env 
 add|ls|rm|set|update             #Updates ENVVAR


docker-cloud service terminate 
 SERVICE...                       #Removes


docker-cloud service ps           #Lists. Shows: SERVICE_NAME|ID, status, number of containers, IMAGE, mtime, DNS, STACK
--stack STACK                     #
--status STATUS                   #



docker-cloud service inspect
 SERVICE...                       #




docker-cloud container terminate
 CONTAINER...                     #Removes


docker-cloud container ps         #Lists. Show: CONTAINER_NAME|ID, status, IMAGE, COMMAND, exit code, mtime, URL, NODE, STACK
--service SERVICE                 #
--status STATUS                   #
--no-trunc                        #



docker-cloud container inspect 
 CONTAINER...                     #




docker-cloud [container] exec 
 CONTAINER ...                    #Similar to docker exec ...

docker-cloud service|container 
 logs SERVICE|CONTAINER...        #Similar to docker logs but potentially for several containers
-f
--follow
-t NUM
--tail NUM                        #Like docker logs



docker-cloud events               #Similar to docker events, but for docker-clou



docker-cloud 
 stack|service|container
 start|stop 
 STACK|SERVICE|CONTAINER...       #Start|stop [all] SERVICE


docker-cloud 
 stack|service|container
 redeploy 
 STACK|SERVICE|CONTAINER...       #Restart [all] SERVICE
--not-reuse-volumes               #Do not reuse data volumes


docker-cloud [stack] up ...       #Same as docker-cloud stack create + start
docker-cloud [service] run ...    #Same as docker-cloud service create + start




docker-cloud nodecluster 
 create|update ...
docker-cloud service create|update
-t NUM
--target-num-nodes NUM            #

docker-cloud service scale 
 SERVICE... NUM                   #



docker-cloud nodecluster 
 create|update ...
docker-cloud service create
--tag TAG


docker-cloud nodecluster create|rm
docker-cloud node upgrade|rm ...          
docker-cloud stack create|update|terminate
docker-cloud stack|service|container start|stop|redeploy
docker-cloud service|container create|set|terminate
--sync                            #Make command synchronous


docker-cloud repository|
 nodecluster|node|stack ls        
docker-cloud nodecluster 
 provider|region|az               
docker-cloud service|container ps #
-q
--quiet                           #
