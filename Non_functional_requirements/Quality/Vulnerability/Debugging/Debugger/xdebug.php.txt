
            
   XDEBUG   
            


VERSION ==>                       #2.5.0 (supports PHP 7.1.0)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        CONSOLE LOGGING        :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


[xdebug_]var_dump(VAL)            #Enhanced version

xdebug.cli_color                  #CONFVAR NUM. Whether to color output: 0 (def) (none), 1 (in tty), 2 (always)
xdebug.overload_var_dump          #CONFVAR NUM. Whether to patch var_dump() with xdebug_var_dump(): 0 (no) or 1|2 (yes)
                                  #If 2 (def), also prepends __FILENAME__:__LINE__
xdebug.var_display_max_depth      #CONFVAR NUM. Max OBJ|ARR depth (def: 3). -1 for unlim
xdebug.var_display_max_children   #CONFVAR NUM. Max OBJ|ARR members max length (def: 128). -1 for unlim
xdebug.var_display_max_data       #CONFVAR NUM. Max STR display max length (def: 512). -1 for unlim

xdebug_debug_zval[_stdout]('VAR') #Prints info about $VAR: refcount, whether reference, type, length, value
                                  #"_stdout" prints directly to stdout, even when using web server API layer, but does not seem to work in console


xdebug_dump.VAR VAR2,...          #CONFVAR STR. Superglobals, printed:
                                  #  - with xdebug_dump_superglobals()
                                  #  - on notice or uncaught exceptions:
                                  #     - if CONFVAR xdebug.dump_globals 1 (def)
                                  #     - only the first time, if CONFVAR xdebug.dump_once 1 (def)
                                  #Prints only variable name (not value) if undefined and CONFVAR xdebug.dump_undefined 0 (def)
                                  #For $GLOBALS["VAR"]["VAR2"], where VAR2 can be * for all


xdebug_get_declared_vars()->ARR   #Returns current scope variables.
                                  #Must set CONFVAR xdebug.collect_vars to 1 (def: 0)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         STACK TRACES          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


AUTOMATICALLY PRINTED ==>         #On notices or uncaught exceptions
xdebug.show_exception_trace       #If 1 (def: 0), prints stack traces on [un]caught exceptions
xdebug.show_error_trace           #If 1 (def: 0), prints stack traces on [un]caught exceptions|errors

xdebug.collect_params             #CONFVAR. What to print about current function parameters:
                                  #  - 0 (def): nothing
                                  #  - 1: type + arity
                                  #  - 2: type + arity + extra info as tooltip (not in CLI)
                                  #  - 3: type + arity + content
                                  #  - 4: type + arity + content + variable name
                                  #  - 5: serialize()'d
xdebug.collect_return             #CONFVAR 0|1 (def: 1). Whether to print return value
xdebug.collect_includes           #CONFVAR 0|1 (def: 1). Whether to print filenames of included files

xdebug.show_local_vars            #CONFVAR 0|1 (def: 0). Also show current scope variables in stack traces
xdebug.show_mem_delta             #CONFVAR 0|1 (def: 0). Also show memory usage in stack traces

xdebug.file_link_format           #CONFVAR STR. How filename + line number are formatted, using %f and %l escape sequences.
                                  #Used with IDEs that would parse special format as a hyperlink to specific place in the code.
xdebug.manual_url                 #CONFVAR STR (def: 'http://www.php.net'). Base URL to manual pages links present in some notice messages

xdebug_get_function_stack()->ARR  #Stack trace, as ARR_ARR2:
                                  #  - file STR
                                  #  - line NUM
                                  #  - class STR
                                  #  - function STR
                                  #  - params ARR3
xdebug_print_function_stack       #Print stack trace in user-friendly format with: 
([STR[, NUM]])                    #  - file, line, class, function, params
                                  #  - execution time
                                  #  - amount of memory
                                  #There is also header (unless NUM 1), which can include STR if specified
xdebug_get_stack_depth()->NUM     #I.e. Stack trace length (0 for top-level)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:        FUNCTION TRACE         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


xdebug_start_trace(['FILE'[,NUM]])#Function tracing, i.e. information on each function call|return|exit: format identifier|name, stack depth, 
xdebug_stop_trace()               #type (function call|return|exit), timestamp, memory usage, return value, stack trace
                                  #Writes it to 'FILE':
                                  #  - def DIR: CONFVAR xdebug.trace_output_dir (def: /tmp)
                                  #  - def FILENAME: CONFVAR xdebug.trace_output_name STR (def: 'trace.%c') + '.xt'
                                  #     - can contain escape sequence (see online doc)
                                  #NUM are bitwise options (all off by def):
                                  #  - XDEBUG_TRACE_APPEND: like xdebug.trace_options 1
                                  #  - XDEBUG_TRACE_COMPUTERIZED|HTML: like xdebug.trace_format 1|2
                                  #  - XDEBUG_TRACE_NAKED_FILENAME: does not append ".xt" to 'FILE'
xdebug_get_tracefile_name()->'FIL'#

xdebug.trace_format               #CONFVAR NUM. How function tracing looks like among:
                                  #  - 0 (def): human-friendly CLI
                                  #  - 1: parse-friendly CLI
                                  #  - 2: HTML
xdebug.trace_options              #CONFVAR NUM. If 1 (def: 0), append instead of overwrite file

xdebug.auto_trace                 #CONFVAR NUM. If 1 (def: 0), does xdebug_start_trace() at beginning of script
xdebug.trace_enable_trigger       #CONFVAR NUM. If 1 (def: 0), does xdebug_start_trace() by setting query variable, request body variable or cookie XDEBUG_TRACE
                                  #XDEBUG_TRACE must have value set to xdebug.trace_enable_trigger_value CONFVAR STR (def: "", i.e. any)
  

                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:         CALL WATCHING         :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


xdebug_start_function_monitor
('[CLASS::]FUNC'_ARR)
xdebug_stop_function_monitor()    #Specifies functions to print with xdebug_get_monitored_functions()
xdebug_get_monitored_functions()  #Returns ARR of when the functions were called:
->ARR                             #  - function STR
                                  #  - filename STR
                                  #  - lineno NUM
