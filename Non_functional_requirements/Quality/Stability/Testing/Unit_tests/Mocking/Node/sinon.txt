
           
   SINON   
           


SINON ==>                     #Node/AMD/global (1.15.0)

IN SHORT ==>                  #Does:
                              #  - spies, to test how event handlers got called
                              #  - stubs, to mock functions
                              #  - mock timers (setTimeout|Interval(), Date())
                              #  - mock XHR calls (with predefined fake server responses)

sinon.sandbox.create()        #Returns a SANDBOX, which is like SINON (except no test|createStubInstance())
SANDBOX.reset()               #Fire all SPYFUNC.reset()
SANDBOX.restore()             #Fire all *.restore() (removing all mocks, stubs, spies, etc.)
MOCHA-SINON ==>               #For tests (1.1.4) (global/Node/not-AMD):
                              #  - automatically calls sinon.sandbox.create|restore() in before|after[Each]() blocks
                              #  - must then only use this.sinon.* instead of sinon.* and automatically cleans up
                              #  - must be loaded|required after sinon
                              #There is also SINON.test(FUNC()) that does the same for only test function, and using this.*
                              #instead of this.sinon.*

SVAL                          #Means either:
                              #  - a VAL which will be compared for equality
                              #  - a SINONMATCH, i.e. SINON.match(FUNC(VAL2) -> BOOL[, STR]) which will test conformance
                              #    (STR is error message if used in assertions)
SINONMATCH.and|or(SINONMATCH2)#Returns SINONMATCH3
                              #Already-made SINONMATCH are available:
SINON.match.any               #Always true
SINON.match.defined           #Not null|undefined
SINON.match.typeof(STR)       #typeof
SINON.match.instanceOf(FUNC)  #TYPE
SINON.match.number|string|
object|func|array|regexp|date #Checks type
SINON.match.truthy|falsy      #Falsy is NUM 0, STR "", BOOL false. OBJ always truthy
SINON.match.same(VAL)         #=== VAL
SINON.match(VAL)              #== VAL
SINON.match(STR|REGEXP)       #typeof "string", and partially matches STR|REGEXP
SINON.match(OBJ)              #Partially matches properties+values of OBJ
SINON.match.has[Own]
(VAR[, VAL])                  #Same for one specific property+value, and can only check own members (non-inherited)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             SPIES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SINON.spy([OBJ, FUNC_STR])    #Transform OBJ.FUNC to a SPYFUNC, and returns it (so either spy|original func can be called)
SINON.spy([FUNC])             #If FUNC (déf: anonymous empty function), does not modify FUNC, but return a copy as SPYFUNC.
                              #(which means SPYFUNC must be called, not original function)
SPYFUNC.restore()             #Transform back to original FUNC (for OBJ.FUNC)
SPYFUNC.reset()               #Doesn't transform back, but erase memory of previous calls.

SPYFUNC.callCount             #NUM
SPYFUNC.called                #callCount >= 1
SPYFNC.calledOnce|Twice|Thrice#callCount == 1|2|3
SPYFUNC.calledBefore|After
(SPYFUNC2)                    #True if first call of SPYFUNC before|after SPYFUNC2
SPYFNC.[alwaysC|c]alledOn(OBJ)#True if at least once|always fired with OBJ as this
SPYFNC.[alwaysR|r]eturned(VAL)#True if returned VAL at least once|always. If OBJ, do deep comparison with ==
SPYFUNC.calledWithNew()       #True if fired as new SPYFUNC
SPYFUNC|SPYCALL.
[alwaysT|t]hrew([VAL|STR])    #True if threw at least once|always. STR is ERROR.type.
SPYFUNC|SPYCALL.
[always|neverC|c]alledWith    #True if fired at least once|always with at least|exactly those arguments. 
[Exactly|Match](SVAL...)      #With "Match": automatically wrap SVAL with SINON.match(VAL)

SPYFUNC.withArgs(SVAL...).VAR #Same as SPYFUNC.VAR but only inspects calls made with arguments SVAL... 
SPYFUNC.getCall(UINT)         #Returns SPYCALL. Avoid if any previous call doesn’t matter.
SPYFUNC.first|second|third|
lastCall                      #Same as SPYFUNC.getCall(1|2|3|last)
SPYCALL.[notC|c]alledOn|
calledWithExactly|Match|
threw(...)                    #Same as above but for this specific call
SPYCALL.thisValue             #this OBJ
SPYCALL.args                  #VAL_ARR
SPYCALL.exception             #Exception thrown VAL_ARR (or undefined)
SPYCALL.returnValue           #Return value
SPYFUNC.thisValues|args|
exceptions|returnValues       #Same but as ARR

SPYFUNC.printf(STR[, VAL...]) #Printf using formatting STR, with possible: "%n" (FUNC_STR), "%c" (SPYFUNC.callCount in word),
                              #"%C" (string representation of calls), "%t" (calls this), "%NUM" (VAL...), "%*" (all VAL...)

SINON.assert.*                #Assertions functions (see online doc). 
                              #Prefer using SINON-CHAI (Node module 2.5.0) below
                              #There is also jasmine-sinon for Jasmine
SHOULD_SPYFUNC.[have.been.]
called[Once|Twice|Thrice]     #
SHOULD_SPYFUNC.[have.been.]
callCount(NUM)                #
SHOULD_SPYFUNC.[have.been.]
calledBefore|After(SPYFUNC2)  #
SHOULD_SPYFUNC.[have.been.]
[always.]calledWithNew        #
SHOULD_SPYFUNC.[have.been.]
[always.]calledOn(OBJ)        #
SHOULD_SPYFUNC.[have.been.]
[always.]calledWith
[Exactly|Match](VAL...)       #
SHOULD_SPYFUNC.[have.been.]
[always.]returned(VAL)        #
SHOULD_SPYFUNC.[have.been.]
[always.]thrown([ERROR|STR])  #

                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             STUBS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


STUB                          #SPYFUNC (inherit all its members) which behavior can be manipulated.
SINON.stub([OBJ[, FUNC_STR    #Transform [OBJ.]FUNC (def: anonymous empty function) to a STUB, replace it with FUNC2 (if 
[, FUNC2]]])                  #present) and returns it. If no FUNC_STR, replace all OBJ methods (try to avoid).
SINON.createStubInstance(TYPE)#Same for a function TYPE
SINON.wrapMethod
([OBJ[, "FUNC"[, OBJ2]]])     #Same for getters/setters defined with Object.defineProperty(OBJ, "FUNC", OBJ2)

STUB.onCall(UINT)...          #Like STUB.withArgs(...) but for the number of the call not its arguments. 
STB.onFirst|Second|ThirdCall()#

STUB.returns(VAL)             #Make function return VAL
STUB.returnsThis()            #Make function return this
STUB.returnsArg(UINT)         #Make function return arguments[UINT]

STUB.throws([STR|ERROR])      #Make function throw (STR is ERROR.type)

STUB.call[s]Arg               #Make function fire arguments[UINT]([VAL...]): 
[On][With][Async]             #  - "On": with this OBJ
(UINT[, OBJ][, VAL...])       #  - "With" + VAL...: with those arguments
                              #  - If "s", for future calls. If no "s", fire all previous calls in order.
                              #  - If "Async", doesn’t block (doesn’t work with "s")
STUB.yield[s][On][Async]
([[OBJ, ]VAL...])             #Same as STUB.callsArg(0, ...)
STUB.yieldsRight(...)         #Same for last arg
STUB.yield[s]To[On][Async]
(FUNC_STR[[, OBJ], VAL...])   #Same but use first ARG.FUNC() instead of first ARG()


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            CLOCKS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SINON.useFakeTimers           #Mocks set|clearTimeout|Immediate|Interval(), requestAnimationFrame() and Date() so they are 
([DATE, ][STR...])            #synchronous and can be advanced with CLOCK.tick(NUM) (milliseconds) (returns current number 
                              #of ticks).
                              #DATE is now by def.
                              #STR allow mocking only some methods: "set|clearTimeout|Interval", "Date", etc.
                              #Returns CLOCK
CLOCK.restore()               #

LOLEX ==>                     #Node/AMD/global (1.3.1) with only the CLOCK functionality. Instead of useFakeTimers(), use:
                              #  - does not mock: lolex.createClock([DATE])->CLOCK
                              #  - mocks: lolex.install([GLOBAL_OBJ[, DATE[, STR...]]])->CLOCK and CLOCK.uninstall()
                              #Also mocks new DATE(), and setting system time with CLOCK.setSystemTime(DATE)


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:              XHR              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SINON.useFakeXMLHttpRequest() #Mocks XHR (client-side): requests are not actually sent. Returns FAKEXHR
FAKEXHR.restore()             #
FAKEXHR.addFilter             #Don’t mock request made to native XHR.open(METHOD, URL, ASYNC, USERNAME, PASSWORD) (FUNC(...) 
(FUNC(...)->BOOL)             #has same args) if returns true and FAKEXHR.useFilters is true (def: false)
                              #Does't seem to work.

FAKEXHR.onCreate =            #When a request is sent. Must set up REQUEST then use REQUEST.respond(...)
FUNC(REQUEST)                 #REQUEST inherit from real XHR

REQUEST.url                   #
REQUEST.method                #
REQUEST.requestHeaders        #OBJ
REQUEST.requestBody           #STR
REQUEST.username|password     #
REQUEST.async                 #BOOL

REQUEST.status                #NUM
REQUEST.statusText            #STR
REQUEST.response[Text]        #STR
REQUEST.responseXML           #DOCUMENT
REQUEST.respond(UINT, OBJ,STR)#Respond to a request. UINT is response code, OBJ is headers, STR is response.
REQUEST.getResponseHeader
(VAR_STR)                     #
REQUEST.setResponseHeader
(VAR_STR, VAL)                #
REQUST.getAllResponseHeaders()#
REQUEST.setResponseBody(STR)  #
REQUEST.autoRespond           #If true, respond after REQUEST.autoRespondAfter (def: 10)


SINON.fakeServer[WithClock].  #Calls SINON.useFakeXMLHttpRequest() then returns FAKESERVER, which is a higher-level API for 
create()                      #the same purpose.
                              #Use "WithClock" if using useFakeTimers()
FAKESERVER.restore()          #

FAKESERVER.respondWith        #Do REQUEST.respond() to requests whose path (starting with "/" after domain name) matches 
([[METHOD,]URLSTR|REGEXP,]VAL)#METHOD and URL (totally if STR, partially if REGEXP) according to VAL:
                              #  - FUNC(REQUEST): must call REQUEST.respond()
                              #    If REGEXP, also pass parenthesis groups as additional ARGS_STR...
                              #  - [ UINT, OBJ, STR ]: call REQUEST.respond(...)
                              #  - STR: same as [ 200, {}, STR ]
                              #REQUEST not matching anything will get [ 404, {}, "" ]
                              #Responses are queued until FAKESERVER.respond() is called.
                              #Must be called before actual requests.
FAKESERVER.autoRespond        #If true, respond after FAKESERVER.autoRespondAfter (def: 10)
FAKESERVER.respondImmediately #If true, respond after 0ms
