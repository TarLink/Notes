																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            ROUTING            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

SUMMARY ==> 
  - appRoutes: user-change, URL+MDL_FUNC
  - MDL.router.execute(): programatic, MDL_FUNC
  - Flow.RouteTo.location(): programatic, URL
  - <a href="">: do nothing, but should setup VIEW.triggers eventually calling programatic change

Flow.router                                           // Root MDL.router, with no appRoutes nor MDL_FUNC

MDL.Router = Flow.Routers.AppRouter.extend
({ appRoutes: { "PATH[:VAR|*VAR]": "MDL_FUNC" } });   // When URL user-change: fires MDL_FUNC([VAR...])

routes = Flow.RouteTo.compileRoutables(MDL.Router);   // routes is { MDL_FUNC: PATH }
MDL.RouteTo = { "ROUTE": FUNC(...)->PATH };           // using routes.MDL_FUNC
Flow.RouteTo.addRouteDefinitions(MDL.RouteTo);        // Adds Flow.RouteTo.ROUTE(...)->PATH, used by Flow.RouteTo.location|navigate()

MDL.Controller = Flow.Controllers.Controller.extend({ "MDL_FUNC"(...) });
                                                      // Can add access: MDL_FUNC"_ARR, to allow public access
Flow.addInitializer(function () {
  MDL.controller = new MDL.Controller();
  MDL.router = new MDL.Router({ controller: MDL.controller });
});

MDL.router.execute("MDL_FUNC"[, ...]): calls MDL_FUNC(...)
Flow.RouteTo.location|navigate("ROUTE"[, ...]): 
  - changes URL path to Flow.RouteTo.ROUTE(...)->PATH (navigates also fires URL user-change)
  - camelcase -> dasherized

<a href="URL">:
  - URL should use routeTo.ROUTE([...])->PATH (template helper)
  - if external website: use data-bypass
  - otherwise, will not do anything by itself, but should set up VIEW.triggers["click a.SELECTOR"] "MDL:SUBMDL:ACTION"
    with then VIEW.on("MDL:SUBMDL:ACTION", Flow.execute("MDL:SUBMDL:ACTION"))

Flow.redirect([PATH[, BOOL]]): user change URL to "[/app]PATH" (/app if true)
Flow.reload(): user reload URL


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BASICS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


  - module                                        var MDL = Flow.module("MDL")
  - routing         modules/MDL/MDL.js            MDL.Router|router + comm (out, exp)
  - controller      modules/MDL/controller.js     MDL.Controller|controller, defining MDL_FUNC
                                                  MDL_FUNC often fires either:
                                                    - REGION.show(new MDL.*View(...))
                                                    - this.ensureView(REGION, VIEW_CTOR)
                                                  Using new Flow.Entities.MODEL(OBJ)
  - models          entities/MODEL/MODEL.js       Flow.Entities.MODEL = RelationalModel|SimpleModel.extend(OBJ)
  - views           modules/MDL/views/VIEW.js     MDL.VIEWView = Flow.Views.BASEVIEW.extend(OBJ), with OBJ.template requireJS of "tpl!PATH_TO_TEMPLATE"
  - templates       modules/MDL/templates/*.html                            

  - comm (out, exp)                               Flow|Agreement.execute|request("EVENT", ...)[->VAL]
                                                  "EVENT" is "MDL:SUBMDL:ACTION"
  - comm (in, exp)                                Flow|Agreement.commands|reqres.setHandler("EVENT", FUNC(...)[->VAL]):
                                                  Usually calls MDL_FUNC(), and (if ACTION "show") Flow.RouteTo.location()
  - comm (out, imp)                               Flow.on("EVENT", FUNC(...))
  - comm (in, imp)                                Flow.trigger("EVENT", ...)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             VIEWS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


MVIEW OBJ:
  - template requireJS("tpl!PATH")
  - className STR
  - ui OBJ
  - events|triggers."EVENT SELECTOR" "MDL_FUNC|MDL:SUBMDL:ACTION":
     - events usually handled as view functions, doing DOM manipulation
     - triggers usually handled in controller, as VIEW.on("MDL:SUBMDL:ACTION"), doing logic, e.g. calling MDL_EVENT
  - modelEvents|collectionEvents
  - bindings.SELECTOR "VARR": Stickit maintaining MODEL.VARR <-> SELECTOR
     - must use this.stickit() at end of onRender()
     - if populated MODEL with bindings, must use MODELbindings instead of bindings then this.stickit(MODEL, MODELbindings)
  - behaviors.BEHAVIOR OBJ: merge with Flow.addBehavior("BEHAVIOR", MBEHAVIOR)

new MVIEW() OBJ.model|collection (unless simple one)

MBEHAVIOR:
  - "DisableInputZoom": all inputs on focus, disable zoom
  - "FeedbackButton": button that shows feedback while loading, after calling VIEW.triggerMethod("feedback:button:request", XHR)
  - "ActionButton": similar but legacy

BASEVIEW:
  - Flow.Views.ItemView|CollectionView|CompositeView: same as Marionette, with template helpers
  - Flow.Views.EmptyView: 
     - can use <%=text%> (from ..emptyViewText)
     - template is ..emptyViewTemplate (def: "<%=text%>")
     - adds ..emptyViewTagName|ClassName

MCOLLVIEW:
  - MCOLLVIEW..displayLimit NUM: max children rendered
  - ..childViewOptions -> ..extraChildViewOptions (gets OBJ.index NUM)
  - respect COLL order

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MODELS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


MODEL:
  - Stickit:
     - any(data-editable="true"): updates with html() on change|input|cut|paste
     - redactor-editor: updates with html()
     - input(type="number"): NUM in model
     - input(type="checkbox|radio", [data-off-]value="YES|NO")
     - abbr(data-type="timeago-date|textdays-date|moment-date"): with a DATE in model
     - a(data-type="href"): updates href
     - special handling for Select2, Typeahead
     - CONF.getFormat[(VAL, CONF)] (MODEL->VIEW): 
        - "ssn|orgnr": "-"
        - "days|months": "NUM days|months"
        - "country": country code -> name
     - CONF.setFormat "float|int|string"
  - empty("VAR"): like has("VAR") but also trims
  - lastChanged(): MODEL.get("updated|created")
  - events:
     - triggerAggregated("EVENT"): like trigger("EVENT"), but only can one at a time
     - [attributes]events[Once]."[ATTR] EVENT ..." "FUNC" (for COLL too)
  - server:
     - fetch|patch|etc.(): proxied through Flow.ajax.ajax(), so can OBJ.messageContainer|ignoredStatusCodes
     - doRequest(XHR, FUNC(RESP, STATUS, XHR_RESP)->VAL, FUNC2(RESP, STATUS, ERROR)->VAL2)->PROMISE, wrap PROMISe so it resolves
       with VAL, XHR_RESP, and rejected with XHR_RESP, VAL2
     - EntityHandlers.getModel(MODEL, OBJ): like fetch(OBJ), but returns as PROMISE resolved with MODEL, RESP or rejected with RESP
     - debounceFetch(NUM[, OBJ])->PROMISe: like fetch(OBJ) but with debounce
     - patch(LFUNC[, OBJ]): like save(OBJ) with OBJ.patch true, but sends with HTTP header X-Method-Overrides instead of HTTP method
     - URL:
        - MODEL.urlRoot + COLL.url Flow.config.api.* (COLL URL)
        - All can use "<VAR>" then must use STR.replace("<VAR>", MODEL.get(...)->"ID")
  - RelationalModel:
     - ID:
        - MODEL._id is client-side only, until real MODEL.id is set
        - getIdObj()->ID
  - new MODEL_CTOR(...) -> MODEL_CTOR.findOrCreate(...)
  - organisation:
     - handlers.js: view->model interaction beyond normal REST routes, using same as MDL_EVENT. Usually a PROMISE returned by doRequest()
 
MODEL|COLL:
  - createRestorePoint|restore(): MODEL.set()|COLL.reset() with MODEL|COLL.toJSON() (for cancel buttons)
  - BASE:
     - Entities.SimpleModel|RelationalModel
     - Entities.Collection
         
         

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         DO NOT FORGET         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


_FUNC                             #Private func

assetRoot()                       #Template helpers, link to /dist/

_t("STR"[, OBJ])                  
_tp("STR", "PLUR_STR", NUM[, OBJ])#Can contain {VAR}. Programatically, for several languages: use i18n.setLanguage() then restores

dataLabel|radio|input|select(): template helpers to do

ExceptionReporting.reportException
(ERROR)                           #Forwards to Rollbar and show UI error
tryFunc(FUNC(...))                #Calls ExceptionReporting.reportException(ERROR) if exception
Flow.delay|defer(...)             #Calls tryFunc()
console.debug|etc.                #console.debug() + Rollbar
console._debug|etc.               #console.debug() only

Flow.isPrintMode()                #Should not use popup|popover|modal in print mode

Flow.$                            #Link to $
Flow.ajax.ajax                    #Link to $.ajax, but:
                                  #  - XHR.fail() calls module "error-handler", which shows flash notifications and redirects
                                  #     - except 404 when not logged in: shows full page error. 
                                  #       IS module "public:info" 404|410 (according to RESPONSE.revoked)
                                  #     - unless OBJ.ignoredStatusCodes NUM_ARR
                                  #     - OBJ.messageContainer JQ: where notification appears
                                  #  - extra HTTP headers flow-client-version: BUILD_NO
Flow.ajax.get|post|put[JSON]      #Same with OBJ.method|contentType set


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            LOADING            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


main.js: all libs (except need i18n)
flow.js: tools (error handling, browser, data_tools) + config + Flow
startup.js: libs (need i18n) + tools (others) + everything else (load only public modules if in public path)
module "index":
  - route "" -> "index:show"
  - MDL_EVENT:
     - "index:show"(OBJ) -> "agreements:dashboard:show"(Flow.settings.direction(), OBJ) 

LIBS: do validation, then stickit, then module "auth", then module "dashboard"


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            LAYOUT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Flow: MAPPLICATION but acting as a MLAYOUTVIEW too (on "document"):
  - main "#main" (public): Flow.Layouts.Public, big box (e.g. login page), module "public"
     R- content "#content-area"
  - main "#main" (app): Flow.Layouts.ApplicationBase, main page:
     - flash "#flash-notification": module "flash_nofication"
     U- header "#header": use Flow MDL_EVENT "flow:header:show|hide"
       - top "#top-navigation": module "top" (top bar)
          - navigation "#main-navigation"
          - messages "#top-messages"
          - notifications "#top-notifications"
          - userMenu "#top-user-menu": top-right menu
     - loader "#app-loader": module "loaders"
     - app "#app-body": Flow.Layouts.Application:
        - body "#content-body"
        - sidebar "#sidebar" (using CONTROLLER._sidebarLayout()): Flow.Layouts.Sidebar
           - boxNUM
  - footer "#footer": bottom bar on agreement, for guests


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TOOLS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


  - browser.*: check browser type, disable zoom (when focusing on input, for mobile), disable scroll (on popover|modals, for mobile)
  - dateTools.timeago|dateTime|customDate(): creates|update <abbr> with time info
  - Flow.storage: link to localStorage


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          VALIDATION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Setting up:
  - MODEL:
     - validation.VARR RULE, with extra validators:
        - beLessThan|beGreaterThan "VARR2"
        - acceptance: can also use 1|"1"
        - pattern "recoveryHash|dateConfig|fullname"
        - email|fullname: true (same as pattern "email|fullname")
        - agreementDuration|agreementNoticePeriod "VARR2": MODEL.type === 2, MODEL.VARR <= MODEL.VARR2
     - labels.VARR STR (def: VLD.labels): for {0} in MODEL.validation.VARR
     - serverValidation.VARR { url URL[(VAL, "VARR", MVIEW)], msg STR }
        - validates with URL with payload { VARR: VAL }
        - used for validating email so far
  - this.model.addValidation(Flow.Entities.Validation.Mixins.VARR RULE, this):
     - predefined validation { VARR RULE } and labels (added to MODEL.validation|labels)
     - called in MVIEW.initialize(), before bindValidation()
  - this.bindValidation([false]), in MITEMVIEW.initialize()). Like VLD.bind(this) but:
     - setup "destroy" handler (MITEMVIEW.unbindValidation())
     - on "render", unless false, for each VARR.required true: adds .required | * to .control-group > label.js-VARR-label

Calling:
  - when view updates model through Stickit (using MITEMVIEW.preValidate())
  - MITEMVIEW.validateAndSave([MODEL[, OBJ[, ATTR_OBJ]]]), calling in order:
     - preValidateModel([MODEL])->PROMISE (def: MITEMVIEW.model)
        - does MODEL.preValidate() (providing there are Stickit bindings) + pending serverValidation
     - MODEL.save(ATTR_OBJ, OBJ)
     - handleXHRResponse(XHR)->PROMISE: 
        - if success, resolve with MODEL, XHR_RESP
        - otherwise, rejected with XHR_RESP and calls MODEL.displayFieldsErrors(XHR_RESP)
     - displayFieldsErrors(XHR_RESP): calls VLD.invalid|valid() according to XHR_RESP:
        - fields_errors.VARR "|missing"
        - conflict "VARR[|...]", using MODEL.serverValidation.VARR.msg

Effect:
  - Backbone.validation invalid|valid():
     .control-group -> .error
       .controls
         any(name="VARR", data-error-style="tooltip", data-tooltip-position="left|...|right(def)") // Shows as tooltip
         any(name="VARR", data-error-style="inline") // Create|find sibling .help-inline.error-message | ERROR
         any(name="VARR")                            //Same with .help-block.error-message.hide, and fades in


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          AGREEMENTS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

Module "dashboard":
  - MDL_EVENT:
     - "dashboard:performance:show"(REGION, DIRECTION)
     - "dashboard:agreements:show"(REGION, DIRECTION)
        - REGION: 
           - widget1|2|3|41|2: the 8 charts (shows first four), each being a REGION:
              - content ".js-widget-content-container"
                 - CompositeView
              - footer ".js-widget-footer-container"

Search:
  - routes: "contracts/[seller|buyer/]QUERY"
  - MDL_EVENT

Dashboard:
  - routes + MDL_EVENT:
     - "contracts[/seller|buyer]", "agreements:dashboard:show"(DIRECTION, OBJ), which does:
        - "agreements:list-view:current:set"("Highlights")
        - "dashboard:agreements:show"(main.app.body, DIRECTION)
        - "agreements:navigation:show"(sidebar.box1, DIRECTION)
        - "navigation:active:set"("dashboard")
     - "contracts/performance": to do??? (forwards to module "dashboard")


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MODULES            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

Auth:
  - MDL_EVENT:
     - "auth:login"(OBJ): 
        - on login screen
        - sends REST API /api/users/login with:
           - data.email|password|persistent (form)
           - messageContainer|error() + ignoredStatusCodes 401: to show error in UI
       Cookie flow-user-hash STR, and redirects to "/app" (triggering "auth:autologin" then)
     - "auth:autologin"(OBJ): 
        - at startup.
        - uses Flow.startupData, filled from a <script> served by server based on flow-user-hash cookie. OBJ:
           - auth_user_id STR, users OBJ_ARR, positions OBJ_ARR
        - sets Flow.user|account|position|settings
        - pings to /api/ping every minute, which returns 401 if not logged in, and redirects to login page
        - if isGhost(), i.e. when USER.ghost true (setup by backend according to HTTP headers Ghost*):
           - append "GHOSTING" view to <body>
           - no pings
           - cannot subscribe to Pusher private-*|presence-* channels
     - "auth:logout"(OBJ): 
        - when clicking logout button
        - calls /api/users/logout, which unsets cookie flow-user-hash, then redirects to "/"
     - "auth:token-user:init"(VAL)
        - on /contracts/ID/at/VAL or MDL_EVENT "agreements:agreement:show:token"(ID, VAL)
        - sets Flow-Access-Token: VAL [C], and put in guest mode
     - "auth:token-user:set"(USER, POSITION, BOOL)

Public:
  - login:
     - route "login": MDL_EVENT "login:show"
     - MDL_EVENT: "login:show"
  - recover-account:
     - routes:
        - "recover-account"
        - "recover-account/HASH"
     - MDL_EVENT: "recovery:enter-email:show"
  - signup:
      - routes:
         - "signup/HASH"
      - MDL_EVENT: 
         - "signup:success"
         - "signup:invalid-hash"

Learn (videos):
  - route "learn/videos" or MDL_EVENT "learn:videos:show"()

Loaders:
  - no MDL_EVENT
  - loading spinner (covers whole screen) at Flow.main.currentView.loader:
     - fades at app:started
     - appears at requests:start|finished (i.e. on AJAX requests), with DELAY 1sec, MIN_SHOW 0.8sec, MAX_SHOW 20s

Help (popovers):
  - MDL_EVENT:
     - "help:popover|inline:show"("NAME", "HTML_TPL", PARENT_VIEW, JQ, OBJ)
         - OBJ:
            - dismissForever: if true, will not show anymore (localStorage)
            - buttonText STR
            (inline)
            - append BOOL (def: false): append|prepend
            - viewOptions OBJ
            (popover)
            - placement (def: "top")
            - container
            - show BOOL: show now
     - "help:popover|inline:dismiss"("NAME", JQ)

flash_nofication (notification on top, small):
  - MDL_EVENT:
     - "flash:show[:next]"(OBJ) with OBJ: messageContainer JQ, header|text STR, type "error|warning|info|success", timeout NUM
     - "flash:hide"(OBJ)

app-alert (notification on top, large):
  - MDL_EVENT "app-alert:show"(STR[, BOOL])
     - If true, close button
  - shown with:
     - browser check
     - on Pusher system:app-alert

Pusher (server push):
  - MDL_EVENT 
     - "push:[un]subscribe"("CHANNEL")
     - "push:[un]bind"("EVENT")

Zopim:
  - MDL_EVENT: 
     - "zopim:offset:set"(NUM): vertical offset
     - "zopim:hide"()

Upsales:
  - route "integrations/upsales/ID"
  - MDL_EVENT "integrations:upsales:show"(ID)

modal:
  - MDL_EVENT:
     - "modal:show"(MVIEW)
        - triggers MVIEW.on("modal:show[n]|hide", FUNC())
        - MVIEW extends from:
           - ModalView, with OBJ..size "small|large" (adds CSS classes)
           - ModalLayout, with region container "#modal-layout-container"
     - "modal:confirm:show"(OBJ):
        - same but create a default MVIEW, with OBJ: header|content STR, cancel|confirm.color|text STR, theme STR (CSS class STR-theme)
        - triggers MVIEW.on("confirm:true|false",FUNC())
     - "modal:close"(BOOL)

app_reload (modal asking to reload):
  - MDL_EVENT "app-reload:show"()
     - called by Pusher system:app-reload

media_query:
  - MDL_EVENT:
     - "media-query:check"("mobile|tablet[-small]|desktop")
         - can add new with "media-query:add"({ name "...", query "(CSS_MEDIA_QUERY)" })
     - "media-query:check:touch"()->BOOL

editable:
  - MDL_EVENT "editable:mixin"(MVIEW), which adds MVIEW:
     - popoverText|Number|Date(JQ, OBJ)->OBJ2: 
        - creates a popover on JQ, which asks for input
        - OBJ:
           - model MODEL
           - autoSave BOOL: when submits, MODEL.patch()
           - autoSet BOOL: when submits, MODEL.set({ OBJ.attr: VAL }) then closes
           - title STR (def exists according to OBJ.attrDisplayName)
           (Text)
           - inputClass STR: CSS
           (Datapicker)
           - datepicker OBJ
        - OBJ2:
           - show|hide(): show() is called on click
           - disable()
           - getView()->MVIEW2, depending on type
        - triggers MEVENT "editable:close"(), "editable:OTHERS"()
        - does JQ.popover(OBJ) (def: animation true, html true, content $el, trigger "manual", no delay) then shows
     - popoverView(JQ, MVIEW2, OBJ3, OBJ): same with a custom new MVIEW2(OBJ3), where OBJ3:
        - OBJ.getTempModel()->MODEL
        - OBJ.targetModel MODEL
     - inlineSimple|RTF(JQ, OBJ): similar but with inline editing:
        - OBJ:
           - autoSave|autoSet|attr: like above
           - placeholder STR
           (Simple: contenteditable)
           - size STR (Bootstrap size)
           (RTF)
           - imageUploadURL URL
        - triggers MEVENT:
           - "editable:close"(JQ, OBJ)
           - "editable:cancel|error|open|save"(JQ, "simple|rtf", OBJ)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            LODASH             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Lodash (different)
_.each
_.extend
_.mixin

Lodash (same):
_.acronymize
_.any
_.bind
_.clone
_.debounce
_.defaults
_.defer
_.every
_.filter
_.find
_.has
_.indexOf
_.isArray
_.isBoolean
_.isEmpty
_.isFunction
_.isNull
_.isNumber
_.isObject
_.isRegExp
_.isString
_.isUndefined
_.keys
_.map
_.object
_.omit
_.pick
_.reduce
_.size
_.template
_.throttle
_.times
_.values
_.without

Underscore.string:
 _.capitalize
 _.dasherize
_.humanize
 _.prune
_.stripTags
_.trim
 _.truncate


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          AGREEMENTS           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/




PermissionSet:
  - OBJ:
     - parent: current MODEL
     - resetEvents "EVENT ...": reinit on MODEL EVENT
     - resetTriggerMap { events: "EVENT ....", attr "VAR" }
  - === MODEL.getPermissions()->OBJ
  - allow("ACTION")->OBJ.allow-ACTION
  - onlyVisible("ACTION")->OBJ.visible-ACTION
  - visible("ACTION")->OBJ.visible|allow-ACTION

Agreement:
  - MODEL:
     - state: draft|pending|signinprogress|signed|declined|expired|template
  - layoutmode:
     - get: inLayout|ViewMode()
     - set: setViewMode(Agreement.LAYOUT|VIEW_MODE)
     - when changes, rerenders

BoxMenu:
  - MBEHAVIOR added to boxes, as a REGION to ".js-box-menu-container", with OBJ:
     - renderTrigger(FUNC()): re-render menu when FUNC() called. Should this.listenTo(..., FUNC)
  - Must use MVIEW:
     - _buildBoxMenu()->OBJ[()]:
        - actions OBJ_ARR: <button> list
           - title "HTML", className STR
           - event "EVENT", eventData VAL: when clicking on button, MDL_EVENT "box:menu:EVENT"(VAL)
           - confirm OBJ: passed to "modal:confirm:show", filtering event trigger
           - doConfirm()->BOOL: false if must not do confirm OBJ
        - dropdown OBJ_ARR: same but as dropdown. Can also OBJ:
           - url URL, bypass BOOL
  - adds:
     - OBJ.dropdown OBJ for removing box ("box-disable")
     - boxActions, i.e. publish|disable buttons with MDL_EVENT "box:publish|disable"(BOX)

Language:
  - Use MBEHAVIOR "TemplateLanguage": 
      - during rendering (between before:render and render), changes i18n.setLanguage()
      - according to new MVIEW() OBJ2.lang "LANG" (set by all boxes)

BaseBox:
  - MDL_EVENT:
     - "base-box:view"(BOX)
     - "base-box:layout:view"(BOX)
     - "base-box:build:box"(BOX)

BOX:
  - overriden by each child class, with OBJ
  - getContent(KEY)->DATA
     - KEY is OBJ.key
     - DATA is either:
        - OBJ.contentRelation.relationCallback(OBJ.contentRelation)
        - OBJ.collectionType.model: use BOX.content.KEY COLL (not clear)
          Also calls OBJ.initCollection(COLL)
  - toJSON()->{ content.KEY VAL.toJSON() (or OBJ.toJSON(VAL)) }
  - moveUp|Down(): changes and saves BOX.agreement.box_order, which changes COLL order (orderComparator)
  - state: enabled|draf|disabled, for subcollection returned by BOX_COLL.enabled()
  - save() can use OBJ.enableIfApplication true, which sets state enabled (unless draft|template)
  - isEmpty()->BOOL, overriden by boxes, to show as draft, and not allow saving

Boxes:
  - all (by inheriting BoxController):
     - getView(BOX):
        - if LayoutMode: simple view with only content:
           - or boxTypeString()->"HTML" (layout mode description) 
           - or toString(BOX)->"HTML" (view mode content after edit)
             With MDL_EVENT "boxes:duration:tostring"(BOX)
           - or _getLayoutView(BOX)->VIEW, for less simple view
        - if ViewMode: _getView(BOX)
          With MDL_EVENT "boxes:duration:view"(BOX)
  - duration:
     - MDL_EVENT:
        - "boxes:duration:disable:text"()->"HTML": text when about to remove from layout mode
     - according to AGREEMENT:
        - type (5 duration types)
        - start_date|end_date|duration|notice_period
  - text:
     - according to BOX_CONTENT.data[0].value
  - comments:
     - according to:
        - BOX.agreement.messages
        - BOX.config.enable_in_receipt BOOL
  - document|attachments:
     - according to BOX_CONTENT.documents OBJ: name STR
  - forms:
     - BOX_CONTENT.data

CELL:
  - item
  - hidden BOOL
  - colspan NUM
  - row ROW
  - getAllowedColspacing()->BOOL_ARR: true, true, until one cell has "item", then false|false

ROW:
  - cells CELL_ARR
  - r NUM (order)
