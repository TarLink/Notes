
             
   ONEFLOW   
             


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


  - module                                        var MDL = Flow.module("MDL")
  - routing         modules/MDL/MDL.js            MDL.Router|router + comm (out, exp)
  - controller      modules/MDL/controller.js     MDL.Controller|controller, defining MDL_FUNC
                                                  MDL_FUNC often fires either
                                                    - REGION.show(new MDL.*View(...))
                                                    - this.ensureView(REGION, VIEW_CTOR)
                                                  Using new Flow.Entities.MODEL(OBJ)
  - models          entities/MODEL/MODEL.js       Flow.Entities.MODEL = RelationalModel|SimpleModel.extend(OBJ)
  - views           modules/MDL/views/VIEW.js     MDL.VIEWView = Flow.Views.BASEVIEW.extend(OBJ), with OBJ.template requireJS of "tpl!PATH_TO_TEMPLATE"
  - templates       modules/MDL/templates/*.html                            

  - comm (out, exp)                               Flow|Agreement.execute|request("EVENT", ...)[->VAL]
                                                  "EVENT" is "MDL
  - comm (in, exp)                                Flow|Agreement.commands|reqres.setHandler("EVENT", FUNC(...)[->VAL])
                                                  Usually calls MDL_FUNC(), and (if ACTION "show") Flow.RouteTo.location()
  - comm (out, imp)                               Flow.on("EVENT", FUNC(...))
  - comm (in, imp)                                Flow.trigger("EVENT", ...)


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/

SUMMARY ==> 
  - appRoutes
  - MDL.router.execute()
  - Flow.RouteTo.location()
  - <a href="">

Flow.router                                           // Root MDL.router, with no appRoutes nor MDL_FUNC

MDL.Router = Flow.Routers.AppRouter.extend
({ appRoutes

routes = Flow.RouteTo.compileRoutables(MDL.Router);   // routes is { MDL_FUNC
MDL.RouteTo = { "ROUTE"
Flow.RouteTo.addRouteDefinitions(MDL.RouteTo);        // Adds Flow.RouteTo.ROUTE(...)->PATH, used by Flow.RouteTo.location|navigate()

MDL.Controller = Flow.Controllers.Controller.extend({ "MDL_FUNC"(...) });
                                                      // Can add access
Flow.addInitializer(function () {
  MDL.controller = new MDL.Controller();
  MDL.router = new MDL.Router({ controller
});

MDL.router.execute("MDL_FUNC"[, ...])
Flow.RouteTo.location|navigate("ROUTE"[, ...])
  - changes URL path to Flow.RouteTo.ROUTE(...)->PATH (navigates also fires URL user-change)
  - camelcase -> dasherized

<a href="URL">
  - URL should use routeTo.ROUTE([...])->PATH (template helper)
  - if external website
  - otherwise, will not do anything by itself, but should set up VIEW.triggers["click a.SELECTOR"] "MDL
    with then VIEW.on("MDL

Flow.redirect([PATH[, BOOL]])
Flow.reload()


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


MVIEW OBJ
  - template requireJS("tpl!PATH")
  - className STR
  - ui OBJ
  - events|triggers."EVENT SELECTOR" "MDL_FUNC|MDL
     - events usually handled as view functions, doing DOM manipulation
     - triggers usually handled in controller, as VIEW.on("MDL
     - VIEW->CONTROLLER
  - modelEvents|collectionEvents
  - bindings.SELECTOR "VARR"
     - must use this.stickit() at end of onRender()
     - if populated MODEL with bindings, must use MODELbindings instead of bindings then this.stickit(MODEL, MODELbindings)
  - behaviors.BEHAVIOR OBJ

new MVIEW() OBJ.model|collection (unless simple one)

MBEHAVIOR
  - "DisableInputZoom"
  - "FeedbackButton"
  - "ActionButton"

BASEVIEW
  - Flow.Views.ItemView|CollectionView|CompositeView
  - Flow.Views.EmptyView
     - can use <%=text%> (from ..emptyViewText)
     - template is ..emptyViewTemplate (def
     - adds ..emptyViewTagName|ClassName

MCOLLVIEW
  - MCOLLVIEW..displayLimit NUM
  - ..childViewOptions -> ..extraChildViewOptions (gets OBJ.index NUM)
  - respect COLL order

																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


_FUNC                             #Private func

assetRoot()                       #Template helpers, link to /dist/

_t("STR"[, OBJ])                  
_tp("STR", "PLUR_STR", NUM[, OBJ])#Can contain {VAR}. Programatically, for several languages

dataLabel|radio|input|select()

Flow.isPrintMode()                #Should not use popup|popover|modal in print mode

Flow.$                            #Link to $
Flow.ajax.ajax                    #Link to $.ajax, but
                                  #  - XHR.fail() calls module "error-handler", which shows flash notifications and redirects
                                  #     - except 404 when not logged in
                                  #       IS module "public
                                  #     - unless OBJ.ignoredStatusCodes NUM_ARR
                                  #     - OBJ.messageContainer JQ
                                  #  - extra HTTP headers flow-client-version
Flow.ajax.get|post|put[JSON]      #Same with OBJ.method|contentType set

REQUIREJS ==>                     #  - libs
                                  #  - base_classes.js, main objects
                                  #  - modules
                                  #     - PARENT_MDL.js <- MDL.js <- controller.js <- views  <- templates
                                  #                                                <- models
                                  #  - otherwise just what is being used


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


ExceptionReporting.reportException
(ERROR)                           #Forwards to Rollbar and show UI error
tryFunc(FUNC(...))                #Calls ExceptionReporting.reportException(ERROR) if exception
Flow.delay|defer(...)             #Calls tryFunc()
console.debug|etc.                #console.debug() + Rollbar
console._debug|etc.               #console.debug() only


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


main.js
flow.js
startup.js
module "index"

LIBS


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


Flow
  - main "#main" (public)
     R- content "#content-area"
  - main "#main" (app)
     - flash "#flash-notification"
     U- header "#header"
       - top "#top-navigation"
          - navigation "#main-navigation"
          - messages "#top-messages"
          - notifications "#top-notifications"
          - userMenu "#top-user-menu"
     - loader "#app-loader"
     - app "#app-body"
        - body "#content-body"
        - sidebar "#sidebar" (using CONTROLLER._sidebarLayout())
           - boxNUM
  - footer "#footer"


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


  - browser.*
  - dateTools.timeago|dateTime|customDate()
  - Flow.storage


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


dataLabel("VARR", STR[, VAL[, OBJ]])
  .control-group.js-VARR-group
    span.input-data-label | STR [i.js-explanatation.icon-question-mark.right(title="STR2")]
    .input-data.VARR | VAL
  OBJ
    - groupClass
    - explanatation STR2
input(TYPE, "VARR", STR, OBJ)
  .control-group.js-VARR-group  // Not if TYPE radio|submit-nogrp.
    .clearfix // Whole group gone if TYPE submit
      label.VARR-label(for="input_id_COUNTER") | STR  // TYPE checkbox wraps input instead. TYPE radio
      [i.js-explanatation.icon-question-mark.right(title="EXPL_STR")]
    .controls
      [div]
        input.js-VARR(
          autocomplete="off"
          name="VARR"
          type="TYPE" // Can be checkbox|radio|datepicker|submit[-nogrp]|textarea|file
          id="input_id_COUNTER"
          [value="VAL"]
          [tabindex="TABINDEX"]
          [placeholder="PLACEHOLDER"]
        )
        [div.input-suffix | SUFFIX]
        .js-description.description-inline | DESCRIPTION // Not if TYPE radio
  OBJ
    - inputClass
    - groupClass
    - labelClass
    - select2 STR
    - value VAL
       - checkbox
    - tabindex TABINDEX
    - placeholder PLACEHOLDER
    (only for TYPE textarea)
    - noResize BOOL
    (only for TYPE submit*)
    - buttonColor VARR (def
    (not for TYPE file|checkbox|radio)
    - description DESCRIPTION
    (only non-default TYPE)
    - explanatation EXPL_STR
    - suffix SUFFIX
select("VARR", STR, OBJ)
  - similar for <select>

buildOptions(OBJ_ARR[, OBJ])
  <option(value="OBJ.value"[,disabled][,selected])> | OBJ.text
  ...
  OBJ
    - disabled BOOL
    - selected BOOL
    - placeholder STR
    - includeEmpty BOOL

																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


Setting up
  - MODEL
     - validation.VARR RULE, with extra validators
        - beLessThan|beGreaterThan "VARR2"
        - acceptance
        - pattern "recoveryHash|dateConfig|fullname"
        - email|fullname
     - labels.VARR STR (def
     - serverValidation.VARR { url URL[(VAL, "VARR", MVIEW)], msg STR }
        - validates with URL with payload { VARR
        - used for validating email so far
  - this.model.addValidation(Flow.Entities.Validation.Mixins.VARR RULE, this)
     - predefined validation { VARR RULE } and labels (added to MODEL.validation|labels)
     - called in MVIEW.initialize(), before bindValidation()
  - this.bindValidation([false]), in MITEMVIEW.initialize()). Like VLD.bind(this) but
     - setup "destroy" handler (MITEMVIEW.unbindValidation())
     - on "render", unless false, for each VARR.required true

Calling
  - when view updates model through Stickit (using MITEMVIEW.preValidate())
  - MITEMVIEW.validateAndSave([MODEL[, OBJ[, ATTR_OBJ]]]), calling in order
     - preValidateModel([MODEL])->PROMISE (def
        - does MODEL.preValidate() (providing there are Stickit bindings) + pending serverValidation
     - MODEL.save(ATTR_OBJ, OBJ)
     - handleXHRResponse(XHR)->PROMISE
        - if success, resolve with MODEL, XHR_RESP
        - otherwise, rejected with XHR_RESP and calls MODEL.displayFieldsErrors(XHR_RESP)
     - displayFieldsErrors(XHR_RESP)
        - fields_errors.VARR "|missing"
        - conflict "VARR[|...]", using MODEL.serverValidation.VARR.msg

Effect
  - Backbone.validation invalid|valid()
     .control-group -> .error
       .controls
         any(name="VARR", data-error-style="tooltip", data-tooltip-position="left|...|right(def)") // Shows as tooltip
         any(name="VARR", data-error-style="inline") // Create|find sibling .help-inline.error-message | ERROR
         any(name="VARR")                            //Same with .help-block.error-message.hide, and fades in



																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/



Setting up MODELs
  - MDL "Entities"
  - events -> [attributes]events[Once]."[ATTR] EVENT ..." "FUNC" (for COLL too)
  - handlers.js
     - view->model interaction beyond normal REST routes, using same as MDL_EVENT (Flow.reqres). 
     - Usually a PROMISE returned by doRequest(XHR, FUNC(RESP, STATUS, XHR_RESP)->VAL, FUNC2(RESP, STATUS, ERROR)->VAL2)->PROMISE, wrap PROMISE so it resolves
       with VAL, XHR_RESP, and rejected with XHR_RESP, VAL2
  - extends from
     - Entities.SimpleModel or Entities.RelationalModel (if needs relations)
     - Entities.Collection
  - Entities.SUBMDL.CONSTANT

Backbone.relational
  - ID
     - MODEL._id is client-side only, until real MODEL.id is set
     - getIdObj()->ID
  - new MODEL_CTOR(...) -> MODEL_CTOR.findOrCreate(...)
  - relations.includeInJSON false|"id" for back references to parent (otherwise too big)
  - clientRelations OBJ_ARR
     - key "VARR"
     - relatedModel MODEL_CTOR

Server interaction
  - URL
     - MODEL.urlRoot + COLL.url Flow.config.api.* (COLL URL)
     - All can use "<VAR>" then must use STR.replace("<VAR>", MODEL.get(...)->"ID")
  - mostly fetch() at init the root model (server returns populated), then only use save()
  - fetch|patch|save()
  - patch(LFUNC[, OBJ])

Timestamps
  - MODEL.lastChanged()
  - MODEL.updated|created|removed[_ts]

Helpers
  - MODEL.empty("VAR")
  - createRestorePoint|restore()
  - debounceFetch(NUM[, OBJ])
  - EntityHandlers.getModel(MODEL, OBJ)

Stickit
  - bindings selectors
     - any(data-editable="true")
     - redactor-editor
     - input(type="number")
     - input(type="checkbox|radio", [data-off-]value="YES|NO")
     - abbr(data-type="timeago-date|textdays-date|moment-date")
     - a(data-type="href")
     - special handling for Select2, Typeahead
  - CONF.getFormat[(VAL, CONF)] (MODEL->VIEW)
     - "ssn|orgnr"
     - "days|months"
     - "country"
  - CONF.setFormat "float|int|string"


																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


  - attribute
  | method
 || collection method
  x handler
  + comment
  _ set by server

NAV_ITEM (COLL
  - label STR
  - path STR
  - event OBJ
  - visible BOOL
  - disabled BOOL

SETTINGS
  - Flow.settings
  + must initiate with Settings.create(PARENT[, ATTR_OBJ]) (ATTR_OBJ.type automatically set)
  - type account|position|guest
  | isAccount|Position()
  - parent ACCOUNT|POSITION

PERMISSIONSET (only local)
  + in initialize(), this.permissions = new PERMISSIONSET({}, OBJ), with OBJ
     - parent
     - resetEvents "EVENT ..."
     - resetTriggerMap { events
  | allow("ACTION")->PERMISSIONSET.allow-ACTION
  | onlyVisible("ACTION")->PERMISSIONSET.visible-ACTION
  | visible("ACTION")->PERMISSIONSET.visible|allow-ACTION

CHART (/graph/POSITION/CHART_TYPE, but only local)
  + fetch() gets stub data
  - position_id
  - chart "won_account|won_compare|published_compare|hit_ratio|hit_ratio_compare|sales_cycle|sales_cycle_compare|sales_pipe|top_sellers|churn"
  - series NUM_ARR_ARR
  | getSeries(NUM)
  - categories STR_ARR
  | getCategories[Months]()
  - labels STR_ARR
  | getLabels(NUM)

USER
  + Flow.user
  | isGhost()
  - positions POSITION_ARR
  | hasPosition(POSITION)
  - current_position POSITION_ID
  | getCurrentPosition()->POSITION
  | getCurrentAccount()->ACCOUNT
  | isMe(POSITION|PARTICIPANT)
  - isGuest|User(), isGuest(VAL)
  - getAccessToken(), setAccessToken(VAL)
  - settings SETTINGS_POSITION /positions/POSITION/settings
     + Flow.settings
     + If type guest
        + must initialize with OBJ.participant if type guest
        + /agreements/AGREEMENT/participants/PARTICIPANT/settings
     - user USER
     - position-agreement-direction "outbound|inbound|both"
     | direction()->STR
     | directionOutbound|InBound(BOOL)
     | directionBoth()
     + when changed, fires "settings-change
  - fullname STR [V]
  + sets Flow.position.fullname on save|patch()
  - email STR [V]
  - state new|invited|guest|registered
  | isStateNew|Invited|Guest|Registered()
  x "user

COMPANY
  - name [V]
  - orgnr [V]
  - country [V]

ACCOUNT
  - Flow.account
  - structure ACCOUNT_STRUCTURE_ARR
     - parent ACCOUNT_STRUCTURE
     - name STR
     | isRoot()
     - positions POSITION_ARR
     x "account
  | getManager|EmployeeGroup()->ACCOUNT_STRUCTURE_ARR
  - owner POSITION
  - positions POSITION_ARR /positions/
     + Flow.position
     | isMe()
     - account ACCOUNT
     - group ACCOUNT_STRUCTURE
     - shareAccountWith(POSITION)->BOOL
     - fullname STR [V]
     + When save|fetch(), updates Flow.user.fullname
     - email STR [V]
     - phone_number STR
     - title STR
     - is_manager BOOL
     | isAccountManager()
     | canViewColleagueContracts()
     | canEditTemplates()
     - claimed BOOL
     | isClaimed()
     - active BOOL
     | isActive()
     - promote|demote()->POSITION (as PROMISE)
  - template_id ID
  - agreement_templates TEMPLATE_ARR
     + COLL constructor must use OBJ.account_id
     - account ACCOUNT
     - agreement AGREEMENT
    || getByAgreement(AGREEMENT)
     - owner POSITION
     - name STR [V]
     - visible 1|0
     | isVisible()
    || visible()
     - default 1|0
     | isDefault()
     | makeDefault()
     - is_new BOOL
     | isNewTemplate()
     + when save|patch() fails, fetch() the whole COLL
  - company_name [V]
  - company_orgnr [V]
  - company_country [V]
  - brand_log[_dimensions] STR
  | getLogoURL([true])->/ID/logo.png (if true, adds cache busting query variable)
  x "account
  x "account
     - creates and returns a POSITION after inviting a USER
     - adds to ACCOUNT_STRUCTURE.positions
     - /accounts/ACCOUNT/invites/ with USER as data
  x "account
  x "account

SETTINGS_ACCOUNT (SETTINGS child)
  + does fetch() when Flow.settings.fetch()
  - account-agreement-expire_date NUM
  - account-brand-logo[-dimensions] STR
  + sets ACCOUNT.brand-logo[-dimensions] when changed, and inverse
  + others shown below

AGREEMENT
  - state
  | isDraft|Pending|SigninInProgress(true)|Signed|Declined|Expired|Template()
  | isPublished()
  | isSigninInProgress()
  | isClosed|Open()
  _ state_timestamp[_ts] "ISO"|TIMESTAMP
  - lifecycle awaiting|active|ended
  | isAwaiting|Active|Ended()
  _ lifecycle_timestamp
  - agreement_type b2b(def)|b2c|b2a
  | isB2B|B2C()
  - type one_time|one_time_w_duration|recurring|recurring_w_initial|not_set
     + one_time
     + one_time_w_duration
     + recurring[_w_initial]
     + all
     + all but one_time
  | isOneOff[Duration]|Recurring[WithInitial]|NotSet()
  | setType(VAL)
  - duration NUM [V]
  - notice_period NUM [V]
  - start_date|end_date "ISO"
  - start_timestamp "ISO"
  | toggleStartDate()
  | toggleEndDate()
  - expire_date "YYYY-MM-DD"
  | getExpireTime()
  | hasExpireDatePassed()
  - period_start|end_timestamp "ISO"
  _ period_count NUM
  | inNoticePeriod()
  - _is_international BOOL
  | isInternational() 
  - cancel_timestamp "ISO"
  | isCanceled()
  _ terminate_timestamp "ISO"
  | isTerminated()
  _ publish_timestamp[_ts] "ISO"|TIMESTAMP
  | publish(STR, STR2)
    Triggers "publish"
  | cancel()
    Triggers "cancel"
  - parent AGREEMENT
  | isCopy()
  - checksum STR
  - language "LANG"
  + triggers "counterparts
  x "agreements
  x "agreements
    Returns matching POSITION_COLL
  - companies AGREEMENT_COMPANY_ARR /agreements/AGREEMENT/companies/
     - agreement AGREEMENT
     | getEnabledDecisionMakers|Influencers()
     - owner POSITION
     | isOwner(POSITION[, BOOL])
     | isUs()
     - state enabled|disabled
     | isEnabled|Disabled()
     | enable|disable()
     - company_name [V]
     - company_orgnr [V]
     - company_country [V]
     + updates Flow.company.company_* on save|patch()
     - consumer 0|1
     | isConsumer()
     | hasInfoMatching(COMPANY|ACCOUNT)
  - owner POSITION
  | isOwner([POSITION[, BOOL]])
  - requester POSITION
  | isRequester(POSITION)
  - participants PARTICIPANT_ARR /agreements/AGREEMENT/participants/
     - id
     - agreement AGREEMENT
    || enabledNoneOwners()
     - state enabled|signed|declined|disabled[_by_company]
     | isPending|Signed|Declined|hasDecided|Disabled|Enabled()
     | enable|disable([OBJ])
     | sign|decline([OBJ])
     | Then updates prev_visit[_ts]
    || enabled|getEnabled|disabled()
    || enabledArray()
     + When state becomes enabled, triggers "sign
       and there has been an EVENT with reset true and created_ts < PARTICIPANT.last_visit_ts
     - visibility hidden[_with_notifications]|visible
     | hasVisibility(VAL)
     | setVisibility(VAL)
     + "change
     - type influencer|decisionmaker(def) [V]
     | isDecisionMaker|Influencer()
     | delegate BOOL
     + triggers "participant
    || [get]enabledDecisionMakers|Influencers(AGREEMENT_COMPANY)
     - email_status failure|bounce|suppressed|success|ooto|complaint(spam)
     _ email_timestamp "ISO"
     | hasEmailFail|Bounce|Success()
     - position POSITION
     | isMe()
     | sharesAccountWith(POSITION)
    || [get]enabledOthers()
    || getPublishEmailRecipients()
     - owner POSITION
     | isOwner([POSITION[, BOOL]])
     - agreement_company AGREEMENT_COMPANY
     | sharesCompanyWith(POSITION)
    || getByCompany(AGREEMENT_COMPANY)
    || enabledByCompanyArray(AGREEMENT_COMPANY)
     | isConsumer()
    || disabledConsumers()
     - visits NUM
     - first|prev|last_visit[_ts] "ISO"|TIMESTAMP
     - fullname [V]
     + Updates Flow.user.fullname when save|patch(), unless isGuest() or !.isMe()
     - email [V]
     - phone_number STR
     - title STR
     - consumer_country STR
     | hasInfoMatching(USER|POSITION)
     + Sets POSITION.phone_number|title when save|patch(), unless isGuest() or !.isMe()
     - prev_visit[_ts] "ISO"|TIMESTAMP
     - last_visit_ts TIMESTAMP
     | getInviteDate()
     | contactMeOneflow()
     | getSignupToken()
     + permissions
        + reset on change
        + only for AGREEMENT|AGREEMENT_COMPANY|POSITION.owner and for AGREEMENT PARTICIPANT (or same COMPANY)
        + allow-edit true
        (not AGREEMENT.owner, or same AGREEMENT_COMPANY)
        + allow-remove|restore
  | get[My]Participant([POSITION[, BOOL]])->PARTICIPANT
    If false (def), must be state enabled.
  | isParticipant([POSITION])
  | hasSigned|Declined|isConcluded()
  | hasVisibility(VAL)
  | isVisible|Hidden()
  | hide|unhide()
  - discard()
  | hideOrDiscard()
     - template|draft|pending|expired
     - signinprogress|signed|expired
  | hasCounterparts()
  | hasEnabledDecisionMakers([POSITION])
  | hasEveryoneSigned()
  | getCounterpartAccounts()->{ ACCOUNT_ID
  - box_order BOX_ID_ARR
  | enable|disableComments()
  + trigger "boxes
  - boxes BOX_ARR
     - agreement AGREEMENT
     - state
     | isEnabled|Draft|Disabled()
     | enable|draft|disable()
     + on change, fires "comments
     + save() can use OBJ.enableIfApplicable true, which sets state enabled (unless draft|template or isEmpty())
    || enabled(BOOL)
    || disabled|removedBoxes(BOOL)
    || hasAny(BOX_STATE)
    || hasDraft()
     - type comments|duration|document|attachments|history|text|form|products
     | isComments|Duration|Document|Attachments|History|Text|Form|Products()
    || has[Enabled](BOX_TYPE)
     - isManagerLocked(), toggleManagerLock()
     - getContent(KEY)->VALUE
        - according to contentRelations OBJ3_ARR
           - key KEY
           - VALUE is either
              - OBJ3.relationCallback(OBJ3)->VALUE
              - OBJ3.collectionType "COLL"
                  - if new
                     - OBJ3.comparator used as comparator
                     - OBJ3.initCollection(COLL) called when done
                  - otherwise retrieve current value (BOX.content)
        - stored locally in BOX._content VALUE, on the server as BOX.content.KEY VALUE.toJSON() (or OBJ3.toJSON)
     + permissions
        (if
          1) is PARTICIPANT and not AGREEMENT type declined|signed|signinprogress
          2) not AGREEMENT type template (except allow-disable)
          3) if AGREEMENT type pending|expired, AGREEMENT_COMPANY enabled and with a company_orgnr
          4) not isManagerLocked() (unless PARTICIPANT.is_manager))
          5) is AGREEMENT.owner
        + allow-update[-shared]
        + allow-set-read-only
        + allow-disable
        (if type draft and not AGREEMENT type draft|template)
        + visible-publish
        + allow-publish
     (overriden by boxes)
     - isEmpty()->BOOL
     - viewHandler "MDL_EVENT"
     - contentRelations OBJ3_ARR
     - config OBJ (clientRelations)
     (duration box)
     + KEY is "agreement", VALUE is AGREEMENT, VALUE.toJSON() only keep AGREEMENT.type|duration|notice_period|start_date|end_date
     - isEmpty()
     (comment box)
     (document box)
     + KEY is "documents", VALUE is AGREEMENT_DOCUMENT_CONTENT_COLL
     - isEmpty()
     + on save(), changes state draft -> enabled, or enabled -> disabled
     (attachments box)
     + KEY is "documents", VALUE is AGREEMENT_DOCUMENT_CONTENT_COLL
     - config
        - order AGREEMENT_DOCUMENT_ID_ARR
        - counterpart_edit true
     | moveFile(AGREEMENT_DOCUMENT, AGREEMENT_DOCUMENT2)
     | toggleCounterpartEdit()
     - isEmpty()
     + save()
     + permission allow-add-attachment
     (text box)
     + KEY is "data", VALUE is DATA_COLL, but use only DATA_COLL[0] (with subtype "text"), initially setup with value ""
     - isEmpty()
     (products box)
     + KEY is "data", VALUE is DATA_CONTENT_COLL (with subtype "product"), DATA is { price_1|2 NUM, count NUM}
     - config
        - order BOX_ID_ARR
        - hide_sum BOOL (def
        - columns OBJ_ARR
     | isSumHidden()
     | hideSum|showSum()
     | moveProduct(...)
     | isColHidden(STR)->BOOL
     - isEmpty()
     - addEmptyProduct()
     - getTotalPrice1|2()->NUM
     (form box)
     + KEY is "data", VALUE DATA_CONTENT_COLL (with subtype "form_input")
        - referenced by MATRIX CELL.item DATA.value
           - value STR
           - description STR
           - label STR
           - placeholder STR
           - required 0|1
           - colspan NUM
           - size 0-5
           - type "field|text"
        - instantiated from FORM_BOX.config.order
     - config
        - colCount NUM (def
        - order DATA_ID|null_ARR_ARR (def
     + MATRIX.toJSON() returns config OBJ
     - isEmpty()
     + validateAndSave() also validates individual DATA
     - getFieldMatrix()->MATRIX
        - form FORM_BOX
        | getFormId()
        - colCount NUM
        | setColCount(NUM)
        - rows ROW_ARR
           - matrix MATRIX
           - r NUM
           - cells CELL_ARR
              - row ROW
              - item DATA
              - pos [ HORZ_NUM, VERT_NUM ] (def
              | isSpace()
              - hidden BOOL
              | isHidden()
              - colspan NUM
              | setColSpan(NUM)
              | getAllowedColspacing()->BOOL_ARR
        | getCell(DATA)->CELL_ARR
        | addEmptyRow()
        | removeRow(ROW)
        | moveRow(ROW, VERT_NUM)
        | addField([ HORZ_NUM, VERT_NUM ])
        | removeField(CELL)
        | moveField(2 [ HORZ_NUM, VERT_NUM ])
        | moveAllowed(2 [ HORZ_NUM, VERT_NUM ])->BOOL
        + "change
  - documents AGREEMENT_DOCUMENT_ARR
     - agreement AGREEMENT
     - owner POSITION
     | isOwner(POSITION[, BOOL])
     - state disabled|draft|enabled|receipt
     _ state_timestamp[_ts] "ISO"|TIMESTAMP
     _ success BOOL
     | isDisabled|Draft|Enabled|Receipt()
    || receipt()
    || [get]enabled()
     | enable|disable()
     - name STR [V]
     - pages NUM
     - page_dimensions "ARR_ARR"
     _ mimetype STR
     - file_extension STR
     | isPDF()
     - has_file BOOL
     | generateDownloadURL()->"/agreements/AGREEMENT/documents/DOCUMENT/download[?at=TOKEN]"
     - setPages()->AGREEMENT_DOCUMENT_PAGE_COLL (according to pages|page_dimensions, redone when changed)
        - agreement AGREEMENT
        - document AGREEMENTDOCUMENT
        - page NUM
        - width|height NUM
        - failed BOOL
        - generatePageURL()
     + There are two COLL AgreementDocumentCollection and AgreementDocumentContentCollection like DATA with _removed, remove(), active()
     + AgreementDocument.createFromJSON(AGREEMENT_DOCUMENT)
     + permissions
        (state template|declined|signed|signinprogress and (unless state template) AGREEMENT_DOCUMENT.owner === AGREEMENT.owner === current POSITION)
        + allow-replace
        (state enabled|draft)
        + allow-update
        + allow-disable
        (state disabled)
        + allow-enable
  - data DATA_ARR (no URL)
     - agreement AGREEMENT
     - key "form_input|product|text" (subtypes) [V]
     - value DATA_VALUE_FORM_INPUT|PRODUCT|STR
        - _id
        - _data DATA
        (form_input)
        - type "field|text" or "" (same as "field")
        | isField|isText()
        - size 0-5
        | getSize()->OBJ
        - label STR [V]
        - value STR [V]
        - required 0|1
        - placeholder STR [V]
        - description STR [V]
        (product)
        - count NUM
        - count_type single|multiple (def
        - name STR
        - description STR
        - price_1|2 NUM
     + validateAndSave() also validates value
     (product)
     + all EVENT from value are forwarded as "related
     - count_type single|multiple
     | isTypeSingle|Multiple()
     + There are two COLL AgreementDataCollection and AgreementDataContentCollection with the following
     - _removed 0|1
    || remove() overwritten so it doesn't really remove but sets _removed, unless OBJ.modelRemove true or MODEL._id not set
    || active()
  - messages MESSAGE_ARR (email messages, comments)
     - id
     - agreement AGREEMENT
     - owner POSITION
     | isOwner([POSITION]) (def
     - type message|invite|reminder|contactme|request
     | isMessage|Invite|Reminder|ContactMe()
     - body STR [V]
     - justPosted BOOL
     | wasAddedSincePrevVisit([PARTICIPANT])
       If no PARTICIPANT, gets prev_visit from localStorage
    || visible|hidden([PARTICIPANT])
       COLL2 is in sync with parent COLL add|remove|reset events
  + reset on AGREEMENT.fetch()
  - texts TEXT_ARR (only local, not used anymore)
  - events EVENT_ARR
     - agreement AGREEMENT
     - type "many_possibilities"
     - state invisible|public|private
     | isPublic|Private()
     - publisher POSITION
     - parent EVENT
     | isParent|Child()
     | getParents()
     | getChildEvents(EVENT)
     - reset BOOL
     | isParticipantReset()
     - created_ts TIMESTAMP
     - isNewUpdate()->BOOL
     | updates()
     _ refs OBJ
  - setFilter(FILTER)
    FILTER[_DRAFT|OPEN|CLOSED] (only local) are search criteria
      - name|_name "all|draft|open|closed"
      | asRoutePart()->"/f/_NAME"
      + Single instances at AgreementFilter.PRESET_FILTERS.all|draft|open|closed
      - direction Flow.OUTBOUND(def)|INBOUND|BOTH
      - page NUM (def
      - offset NUM (def
      - limit NUM (def
      - sort "VAR asc|desc"
      - state VAL[_ARR]
      - _cols STR_ARR
         - state
         - created
         - magicDate
         - stateDate
         - ourSide
         - counterparts
         - documents
         - insight
         - lc
         - ending
      + AgreementsFilter.COLUMNS.STR
  + permissions
     (all must be AGREEMENT PARTICIPANT, except state template)
       + visible-post-message
     (draft)
       + visible-publish
     (draft|pending|expired)
       + visible-delegate
     (template|draft|pending|expired)
       + visible-sign
       + allow-edit-layout, allow-update[-shared]
       + allow-discard
     (pending|expired)
       + allow-publish
         not guest (unless no company_name or PARTICIPANT fullname)
     (pending|expired|signinprogress|signed|expired)
       + allow-post-message
       + allow-add-participants
     (signinprogress|signed|expired)
       + allow-sign
         min 2 PARTICIPANT with state enabled and type decisionmaker, if isOwner() no box with type draft, POSITION not already signed|declined
       + allow-decline
       + allow-delegate
       + allow-cancel
       + allow-hide
 

																						 /=+===============================+=\ 
																						/  
							 														  )==
																						\  
																						 \=+===============================+=/


Pusher (server push)
  - MDL_EVENT 
     - "push
     - "push

Zopim
  - MDL_EVENT
     - "zopim
     - "zopim

Upsales
  - route "integrations/upsales/ID"
  - MDL_EVENT "integrations

media_query
  - MDL_EVENT
     - "media-query
         - can add new with "media-query
     - "media-query

Help (popovers)
  - MDL_EVENT
     - "help
         - OBJ
            - dismissForever
            - buttonText STR
            (inline)
            - append BOOL (def
            - viewOptions OBJ
            (popover)
            - placement (def
            - container
            - show BOOL
     - "help

Loaders
  - no MDL_EVENT
  - loading spinner (covers whole screen) at Flow.main.currentView.loader
     - fades at app
     - appears at requests

app_reload (modal asking to reload)
  - MDL_EVENT "app-reload
     - called by Pusher system

flash_nofication (notification on top, small)
  - MDL_EVENT
     - "flash
     - "flash

app-alert (notification on top, large)
  - MDL_EVENT "app-alert
     - If true, close button
  - shown with
     - browser check
     - on Pusher system

modal
  - MDL_EVENT
     - "modal
        - triggers MVIEW.on("modal
        - MVIEW extends from
           - ModalView, with OBJ..size "small|large" (adds CSS classes)
           - ModalLayout, with region container "#modal-layout-container"
     - "modal
        - same but create a default MVIEW, with OBJ
        - triggers MVIEW.on("confirm
     - "modal

editable
  - MDL_EVENT "editable
     - popoverText|Number|Date(JQ, OBJ)->OBJ2
        - creates a popover on JQ, which asks for input
        - OBJ
           - model MODEL
           - autoSave BOOL
           - autoSet BOOL
           - title STR (def exists according to OBJ.attrDisplayName)
           (Text)
           - inputClass STR
           (Datapicker)
           - datepicker OBJ
        - OBJ2
           - show|hide()
           - disable()
           - getView()->MVIEW2, depending on type
        - triggers MEVENT "editable
        - does JQ.popover(OBJ) (def
        - MVIEW
           - namedInputFields true
     - popoverView(JQ, MVIEW2, OBJ3, OBJ)
        - OBJ.getTempModel()->MODEL
        - OBJ.targetModel MODEL
     - inlineSimple|RTF(JQ, OBJ)
        - OBJ
           - autoSave|autoSet|attr
           - placeholder STR
           (Simple
           - size STR (Bootstrap size)
           (RTF)
           - imageUploadURL URL
        - triggers MEVENT
           - "editable
           - "editable

Language
  - Use MBEHAVIOR "TemplateLanguage"
      - during rendering (between before
      - according to new MVIEW() OBJ2.lang "LANG" (set by all boxes)

Auth
  - MDL_EVENT
     - "auth
        - on login screen
        - sends /api/users/login with
           - data.email|password|persistent (form)
           - messageContainer|error() + ignoredStatusCodes 401
       Cookie flow-user-hash STR, and redirects to "/app" (triggering "auth
     - "auth
        - at startup.
        - uses Flow.startupData, filled from a <script> served by server based on flow-user-hash cookie. OBJ
           - auth_user_id STR, users OBJ_ARR, positions OBJ_ARR
        - sets Flow.user|account|position|settings
        - pings to /api/ping every minute, which returns 401 if not logged in, and redirects to login page
        - Ghosting
           - How
              - X-Ghost
              - X-Ghost-Target-UserId
              - Sets USER.ghost true -> USER.isGhost() true
           - Effect
              - append "GHOSTING" view to <body>
              - no pings
              - cannot subscribe to Pusher private-*|presence-* channels
     - "auth
        - when clicking logout button
        - calls /api/users/logout, which unsets cookie flow-user-hash, then redirects to "/"
     - "auth
        - on /contracts/ID/at/VAL or MDL_EVENT "agreements
        - sets Flow-Access-Token
     - "auth

Analytics
  - Analytics.mixpanel|ga("FUNC", ...) -> calls window.mixpanel|ga.FUNC(...)
  - "analytics
     - URL "/PATH" and title DOCUMENT.title
        - PATH
     - mixpanel.track("Page view (app)", { URL
  - "analytics
     - same but no TITLE and adds #STR to URL
  - "analytics
     - After a signup (only once)
     - Loads Google Adwords HTML page

Public
  - login
     - route "login", MDL_EVENT "login
  - recover-account
     - routes
        - "recover-account"
        - "recover-account/HASH"
     - MDL_EVENT
  - signup
      - routes
         - "signup/HASH"
      - MDL_EVENT
         - "signup
         - "signup

Index
  - route "" and MDL_EVENT "index

Module "dashboard" and "Agreements dashboard"
  - Normal dashboard
     - routes "/contracts[/seller|buyer]" and MDL_EVENT "agreements
       "dashboard
     - MDL_EVENT "dashboard
        - REGION
           - widget1|2|3|41|2
              - content ".js-widget-content-container"
                 - CompositeView
              - footer ".js-widget-footer-container"
  - Performance dashboard
     - route "/contracts/performance" and MDL_EVENT "agreements
     - MDL_EVENT "dashboard

Main page
  - "Create contract" -> "agreements
     - new AGREEMENT(OBJ) (e.g. OBJ.template_id), with justCreated true, then save()
     - "agreements
  - "Request contract" (hidden for the moment) (buyer request agreement) -> "agreement
     - RequestView
        - MODEL (only client-side)
           - subject|message STR
           - email STR
        - on "Submit", use handler "agreements

Top
  - MDL_EVENT "top
  - TopLayout
     - MODEL Flow.user
     - region "userMenu"
        - MODEL Flow.user
        - Shows USER.fullname|company_name
        - "Profile|Preferences" -> "settings
        - "Profile|Preferences|Integrations|Users" -> "settings
        - "Manage users"
        - "Integrations"
        - "Logout" -> "auth
     - region "navigation"
     - click on Logo -> "index

List-view (last route)
  - MDL_EVENT
     - "agreements
        - saves "last route" named "STR" as FUNC(ARGS...)
     - "agreements
     - "agreements
  - default "last route" is "Highlights", defaultListView true, i.e.  "agreements
  - Take back to "last route"
     - Base toolbar of Agreement page
     - Discarding current Agreement|PARTICIPANT|AGREEMENT_COMPANY
     - Loading an Agreement failed
  - Set when
     - "Highlights", "Templates", any Search
       Not Messages, Performance, Videos

Navigation
  - MDL_EVENT
     - "navigation
        - COLL NAVIGATION
        - links "Home|Seller|Buyer" -> "agreements
     - "navigation

Navigation (left)
  - MDL_EVENT "agreements
     - REGION is LAYOUT.box1, from Layouts.Sidebar, returned by CONTROLLER._sidebarLayout(), shown at app.main.sidebar
     - REGION.show(NavigationSbView)
        - DIRECTION hide Analytics|performance for buyers, and change title Draft|Requests
        - sets top bar with "navigation
        - Templates/Contracts not shown unless canEditTemplates()
        - "Highlights" -> "agreements
        - "Draft|Open|Closed|All contracts" -> "agreements
        - "Contracts|Messages" -> "agreements
        - "Performance" -> "agreements
        - "Videos" -> "learn
     - CreateView (composite) (create button)
        - COLL TEMPLATE_COLL (visible ones)
           - dropdown TemplateView
           - also MODEL TEMPLATE with default 0, name "Create new template", is_new true
        - click on dropdown or main button -> "agreements
  - AGREEMENT.on("navigation

FormatParties|insight
  - helper module used by Search and Dashboard
  - MDL_EVENT
     - "agreement
     - "agreement

Search
  - routes
  - SearchView (composite)
     - collection AGREEMENT_COLL with setFilter(FILTER), so fetch() with FILTER_OBJ at init and when FILTER changes
       Uses SearchAgreementView
        - <tr><td> with content depending on FILTER._name|_cols. Columns
           - state
           - created (not draft)
           - magicDate (open|closed)
           - ourSide|counterparts
           - lc
           - insight (open, seller)
           - documents (seller)
           - ending (closed)
        - on click -> "agreements
        ! re-render on AGREEMENT[.visibility] change
        - hidden according to AGREEMENT.visibility (changed with UI)
     - model FILTER
        - Programatically
        - user-changed URL
        - 6 inputs on top are bound to FILTER.state|from_date|to_date|company_name|participant_name|limit|include_account
        - FILTER.page|offset|limit according to pagination (using jQuery Bootstrap pagination)

ManageTemplates
  - templates
     - route /contracts/templates and MDL_EVENT "agreements
     - only if canEditTemplates()
     - ListView (composite)
        - MODEL SETTINGS_ACCOUNT (on Flow.account) (does fetch())
        - links SETTINGS_ACCOUNT.account-agreement-expire_date with box on top
        - "Create new template" -> "agreements
        - TemplateView
           - MODEL AGREEMENT.templates (does fetch())
           - click on row
           - "Active" checkbox
           - "Default" radio
           - "Name" column
           - "Created by" column
           - "Created" column
  - messages
     - route /contracts/templates/messages and MDL_EVENT "agreements
     - MessagesView
        - MessageFormView
           - MODEL
              - SETTINGS_ACCOUNT|POSITION according to Flow.account|position (does fetch())
              - decided by "Templates for"
              - only if canEditTemplates() (i.e. accountManager or accountManager let them do so)
           - link SETTINGS.position-agreement-invite|request|reminder-header|content
              - with "Subject|Message" box
              - invite|request|reminder

Learn (videos)
  - route "learn/videos" or MDL_EVENT "learn

Agreement
  - layoutmode
     - get
     - set
     - when changes, rerenders

Agreement Toolbar
  - MDL_EVENT "toolbar-view"(AGREEMENT)->MVIEW
  - according to isGuest()

Agreement LayoutSidebar
  - MDL_EVENT "layout-sidebar
     - according to AGREEMENT.boxes.type

BoxMenu
  - MBEHAVIOR added to boxes, as a REGION to ".js-box-menu-container", with OBJ
     - renderTrigger(FUNC())
  - Must use MVIEW
     - _buildBoxMenu()->OBJ[()]
        - actions OBJ_ARR
           - title "HTML", className STR
           - event "EVENT", eventData VAL
           - confirm OBJ
           - doConfirm()->BOOL
        - dropdown OBJ_ARR
           - url URL, bypass BOOL
  - adds
     - OBJ.dropdown OBJ for removing box ("box-disable")
     - boxActions, i.e. publish|disable buttons with MDL_EVENT "box
     - if allow-set-read-only (i.e. is_manager), button to change BOX.isManagerLocked()

BoxManager (BaseBoxes container)
  - MDL_EVENT "box-manager
     - according to
     - Views (according to AGREEMENT.inLayoutMode())
        - ViewContainerView
        - LayoutContainerView
           - AGREEMENT.box_order changes with drag&drop or up|down buttons, then patch()
           - drag/dropping into view -> create and save() a BOX, then update box_order
        - all
           - MCOLLVIEW of "base-box
              - with state enabled
              - draft included if (ViewContainerView) AGREEMENT.isOwner() or (LayoutContainerView) AGREEMENT draft|template
           - 

BaseBox (Box container)
  - MDL_EVENT
     - "base-box
        - according to AGREEMENT.inLayoutMode()
           - ViewBoxLayout
              - on BOX change, re-render|init
           - LayoutBoxLayout
              - according to BOX.agreement.state, BOX.type
              - MoveUp|Down buttons
              - "Create content" which changes to ViewMode
        - all
           - sets HTML attribute data-id="BOX.id"
           - MLAYOUTVIEW.inner contains BOX view, through BOX.viewHandler
           - click .js-remove
              - for LayoutBoxLayout, is the "Remove" button, which changes BOX state, (unless BOX draft or AGREEMENT draft|template) after confirmation modal

Boxes
  - all (by inheriting BoxController)
     - getView(BOX)
        - if LayoutMode
           - or boxTypeString()->"HTML" (layout mode description), using MDL_EVENT "boxes
           - or toString(BOX)->"HTML" (view mode content after edit)
             With MDL_EVENT "boxes
           - or _getLayoutView(BOX)->VIEW, for less simple view
        - if ViewMode
          With MDL_EVENT "boxes
  - mixinShowHide(MVIEW, SELECTOR)
     - ui.showHide ".js-show-hide", which should be a <button> with children <span> (empty) and <i> (icon). When clicked
        - toggle between show|hide using $(SELECTOR).slideDown|Up()
        - toggle icon CSS class "fa-chevron-down|up"
        - toggle span content MVIEW.HIDE_TEXT|SHOW_TEXT or MVIEW._hideText|showText()->STR
        - at the first show, calls MVIEW._showHideBeforeFirst()
     - showHideDisable()
     - showHideToggle([BOOL])
       Does show|hide() instead of slideDown|Up()
  - duration
     - MDL_EVENT
        - "boxes
     - according to AGREEMENT
        - type (5 duration types)
        - start_date|end_date|duration|notice_period
  - text
     - according to BOX_CONTENT.data[0].value
  - comments
     - not allowed on draft|template
     - ViewMode
        - MODEL AGREEMENT
        - regions
           - form (comment box)
              - MODEL MESSAGE
                 - agreement AGREEMENT, position POSITION, justPosted true
                 - body STR
              - "Post comment"
           - visibleList|hiddenList
              - MESSAGE_COLL AGREEMENT.messages.visible|hidden()
              - renders according to PARTICIPANT.fullname, MESSAGE.created|subject|body
              - button to toggle truncate
              - CSS according to MESSAGE.wasAddedSincePrevVisit()
     - LayoutMode
        - MODEL BOX
        - checkboxes toggle BOX.state and BOX.config.enable_in_receipt BOOL (does save())
     - mixinShowHide()
     - according to
        - BOX.agreement.messages
        - BOX.config.enable_in_receipt BOOL
  - history
     - ViewMode
        - model AGREEMENT
        - if state draft|template, only shows simple sentence saying nothing is tracked until agreement sent
        - mixinShowHide() to show more|less
        - region eventList
           - EVENT_COLL AGREEMENT.events.getParents()
              - reset
              - created
              - rest goes through format(EVENT), forwarding to different functions according to EVENT.type, and returning
                 - text STR
                 - icon CSS_CLASS
                 - byLine BOOL
           - POSITION.fullname also displayed
           - mixinShowHide() to show child EVENTs (which are EventListView)
     - LayoutMode
  - document|attachments
     - according to BOX_CONTENT.documents OBJ
  - forms
     - MDL_EVENT "boxes
     - according to
        - BOX.getContent("data") DATA_CONTENT_COLL, through BOX.getFieldMatrix()->MATRIX CELL.item DATA
     - views
        - FormView (composite)
           - MODEL MATRIX
           - "Add row" -> MATRIX.addEmptyRow()
           - "Rearrange rows" -> Fields are sortable (jQuery UI) -> MATRIX.moveRow(ROW)
           - Dropdown -> MATRIX.setColCount(NUM)
           - "Save" -> validate BOX, then BOX.save() (saves only BOX.config
           - BoxMenu
           - COLL RowView (composite)
              - MODEL ROW
              - "Remove row" -> MATRIX.removeRow(ROW)
              - COLL CellView (layout)
                 - MODEL CELL
                 - draggable
                 - hidden if CELL.isHidden()
                 - CELL.value.colspan -> CSS class
                 - region "container"
                    - SpaceView
                       - MODEL CELL
                       - drop target
                          - check allowed with MATRIX.moveAllowed()
                          - MATRIX.moveField()
                       - add button
                    - InputView
                       - MODEL VALUE
                       - InputPopoverview
                          - MODEL VALUE
                          - according to VALUE.label|type|value|placeholder|description|required|size|colspan
                          - "Remove field" -> MATRIX.removeField(CELL)
                          - "Save" -> CELL.set(CELL2.toJSON())
                          - validated at save and init
                       - click on it
                       - create <input>, with autosize() if type "text"
     - permissions
        - !isMobile and allow-update
        - allow-update-shared

TYPE_AGREEMENT_PUBLISH: 
TYPE_AGREEMENT_REQUEST: 
TYPE_AGREEMENT_SIGN: 
TYPE_AGREEMENT_DECLINE: 
TYPE_AGREEMENT_UPDATE: 
TYPE_LIFECYCLE_END: 
TYPE_LIFECYCLE_NEW: 
TYPE_LIFECYCLE_START: 
TYPE_AGREEMENT_EXPIRE: 
TYPE_AGREEMENT_CANCEL: 
TYPE_LIFECYCLE_TERMINATE: 
TYPE_PARTICIPANT_EMAIL_FEEDBACK: 
TYPE_PARTICIPANT_SIGN: 
TYPE_PARTICIPANT_DECLINE: 
TYPE_PARTICIPANT_ADD: 
TYPE_PARTICIPANT_DELEGATE: 
TYPE_PARTICIPANT_DISABLE: 
TYPE_PARTICIPANT_ENABLE: 
TYPE_PARTICIPANT_RESET: 
TYPE_PARTICIPANT_FIRST_VISIT: 
TYPE_PARTICIPANT_UPDATE: 
TYPE_PARTICIPANT_UPDATE_ITEM: 
TYPE_COMPANY_ADD: 
TYPE_COMPANY_UPDATE: 
TYPE_COMPANY_UPDATE_ITEM: 
TYPE_COMPANY_DISABLE: 
TYPE_COMPANY_ENABLE: 
TYPE_DATA_CREATE: 
TYPE_DATA_UPDATE: 
TYPE_DATA_REMOVE: 
TYPE_DOCUMENT_ADD: 
TYPE_DOCUMENT_ENABLE: 
TYPE_DOCUMENT_UPDATE: 
TYPE_DOCUMENT_DISABLE: 
TYPE_DOCUMENT_MAKE_PRIMARY: 
TYPE_MESSAGE_ADD: 
TYPE_BOX_UPDATE: 
TYPE_BOX_ENABLE: 
TYPE_BOX_DISABLE: 
TYPE_BOX_UPDATE_LAYOUT: 
TYPE_BOX_UPDATE_AUTH: 

Hidden:
TYPE_AGREEMENT_REMINDER_EXPIRE: 
TYPE_LIFECYCLE_REMINDER_END: 
TYPE_LIFECYCLE_REMINDER_NEW: 
