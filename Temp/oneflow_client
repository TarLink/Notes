																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            ROUTING            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

SUMMARY ==> 
  - appRoutes: user-change, URL+MDL_FUNC
  - MDL.router.execute(): programatic, MDL_FUNC
  - Flow.RouteTo.location(): programatic, URL
  - <a href="">: do nothing, but should setup VIEW.triggers eventually calling programatic change

Flow.router                                           // Root MDL.router, with no appRoutes nor MDL_FUNC

MDL.Router = Flow.Routers.AppRouter.extend
({ appRoutes: { "PATH[:VAR|*VAR]": "MDL_FUNC" } });   // When URL user-change: fires MDL_FUNC([VAR...])

routes = Flow.RouteTo.compileRoutables(MDL.Router);   // routes is { MDL_FUNC: PATH }
MDL.RouteTo = { "ROUTE": FUNC(...)->PATH };           // using routes.MDL_FUNC
Flow.RouteTo.addRouteDefinitions(MDL.RouteTo);        // Adds Flow.RouteTo.ROUTE(...)->PATH, used by Flow.RouteTo.location|navigate()

MDL.Controller = Flow.Controllers.Controller.extend({ "MDL_FUNC"(...) });
                                                      // Can add access: MDL_FUNC"_ARR, to allow public access
Flow.addInitializer(function () {
  MDL.controller = new MDL.Controller();
  MDL.router = new MDL.Router({ controller: MDL.controller });
});

MDL.router.execute("MDL_FUNC"[, ...]): calls MDL_FUNC(...)
Flow.RouteTo.location|navigate("ROUTE"[, ...]): changes URL path to Flow.RouteTo.ROUTE(...)->PATH (navigates also fires URL user-change)

<a href="URL">:
  - URL should use routeTo.ROUTE([...])->PATH (template helper)
  - if external website: use data-bypass
  - otherwise, will not do anything by itself, but should set up VIEW.triggers["click a.SELECTOR"] "MDL:SUBMDL:ACTION"
    with then VIEW.on("MDL:SUBMDL:ACTION", Flow.execute("MDL:SUBMDL:ACTION"))

Flow.redirect([PATH[, BOOL]]): user change URL to "[/app]PATH" (/app if true)
Flow.reload(): user reload URL


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            BASICS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


  - module                                        var MDL = Flow.module("MDL")
  - routing         modules/MDL/MDL.js            MDL.Router|router + comm (out, exp)
  - controller      modules/MDL/controller.js     MDL.Controller|controller, defining MDL_FUNC
                                                  MDL_FUNC often fires either:
                                                    - REGION.show(new MDL.*View(...))
                                                    - this.ensureView(REGION, VIEW_CTOR)
                                                  Using new Flow.Entities.MODEL(OBJ)
  - models          entities/MODEL/MODEL.js       Flow.Entities.MODEL = RelationalModel|SimpleModel.extend(OBJ)
  - views           modules/MDL/views/VIEW.js     MDL.VIEWView = Flow.Views.BASEVIEW.extend(OBJ), with OBJ.template requireJS of "tpl!PATH_TO_TEMPLATE"
  - templates       modules/MDL/templates/*.html                            

  - comm (out, exp)                               Flow|Agreement.execute|request("EVENT", ...)[->VAL]
                                                  "EVENT" is "MDL:SUBMDL:ACTION"
  - comm (in, exp)                                Flow|Agreement.commands|reqres.setHandler("EVENT", FUNC(...)[->VAL]):
                                                  Usually calls MDL_FUNC(), and (if ACTION "show") Flow.RouteTo.location()
  - comm (out, imp)                               Flow.on("EVENT", FUNC(...))
  - comm (in, imp)                                Flow.trigger("EVENT", ...)


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             VIEWS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


MVIEW OBJ:
  - template requireJS("tpl!PATH")
  - className STR
  - ui OBJ
  - events|triggers."EVENT SELECTOR" "MDL_FUNC|MDL:SUBMDL:ACTION": actions, e.g. routing ("show" ACTION)
     - triggers fires controller functions
     - events fires view functions
  - modelEvents|collectionEvents
  - bindings.SELECTOR "VARR": Stickit maintaining MODEL.VARR <-> SELECTOR
     - must use this.stickit() at end of onRender()
     - if populated MODEL with bindings, must use MODELbindings instead of bindings then this.stickit(MODEL, MODELbindings)
  - behaviors.BEHAVIOR OBJ: merge with Flow.addBehavior("BEHAVIOR", MBEHAVIOR)

MBEHAVIOR:
  - "DisableInputZoom": all inputs on focus, disable zoom
  - "TemplateLanguage": during rendering (between before:render and render), changes i18n.setLanguage() according to new MVIEW() OBJ2.lang "LANG"
  - "FeedbackButton": button that shows feedback while loading, after calling VIEW.triggerMethod("feedback:button:request", XHR)
  - "ActionButton": similar but legacy

BASEVIEW:
  - Flow.Views.ItemView|CollectionView|CompositeView: same as Marionette, with template helpers
  - Flow.Views.EmptyView: 
     - can use <%=text%> (from ..emptyViewText)
     - template is ..emptyViewTemplate (def: "<%=text%>")
     - adds ..emptyViewTagName|ClassName

MCOLLVIEW:
  - MCOLLVIEW..displayLimit NUM: max children rendered
  - ..childViewOptions -> ..extraChildViewOptions (gets OBJ.index NUM)
  - respect COLL order

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MODELS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


MODEL:
  - Stickit:
     - any(data-editable="true"): updates with html() on change|input|cut|paste
     - redactor-editor: updates with html()
     - input(type="number"): NUM in model
     - input(type="checkbox|radio", [data-off-]value="YES|NO")
     - abbr(data-type="timeago-date|textdays-date|moment-date"): with a DATE in model
     - a(data-type="href"): updates href
     - special handling for Select2, Typeahead
     - CONF.getFormat[(VAL, CONF)] (MODEL->VIEW): 
        - "ssn|orgnr": "-"
        - "days|months": "NUM days|months"
        - "country": country code -> name
     - CONF.setFormat "float|int|string"
  - empty("VAR"): like has("VAR") but also trims
  - lastChanged(): MODEL.get("updated|created")
  - events:
     - triggerAggregated("EVENT"): like trigger("EVENT"), but only can one at a time
     - [attributes]events[Once]."[ATTR] EVENT ..." "FUNC" (for COLL too)
  - server:
     - doRequest(XHR, FUNC(RESP, STATUS, XHR_RESP)->VAL, FUNC2(RESP, STATUS, ERROR)->VAL2)->PROMISE, wrap PROMISe so it resolves
       with VAL, XHR_RESP, and rejected with XHR_RESP, VAL2
        - handlers.js???
     - EntityHandlers.getModel(MODEL, OBJ): like fetch(OBJ), but returns as PROMISE resolved with MODEL, RESP or rejected with RESP
     - debounceFetch(NUM[, OBJ])->PROMISe: like fetch(OBJ) but with debounce
     - patch(LFUNC[, OBJ]): like save(OBJ) with OBJ.patch true, but sends with HTTP header X-Method-Overrides instead of HTTP method
     - URL:
        - MODEL.urlRoot + COLL.url Flow.config.api.* (COLL URL)
        - All can use "<VAR>" then must use STR.replace("<VAR>", MODEL.get(...)->"ID")
  - RelationalModel:
     - ID:
        - MODEL._id is client-side only, until real MODEL.id is set
        - getIdObj()->ID
 
MODEL|COLL:
  - createRestorePoint|restore(): MODEL.set()|COLL.reset() with MODEL|COLL.toJSON() (for cancel buttons)
  - BASE:
     - Entities.SimpleModel|RelationalModel
     - Entities.Collection
         
         

																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:         DO NOT FORGET         :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


_FUNC                             #Private func

assetRoot()                       #Template helpers, link to /dist/

_t("STR"[, OBJ])                  
_tp("STR", "PLUR_STR", NUM[, OBJ])#Can contain {VAR}. Programatically, for several languages: use i18n.setLanguage() then restores

dataLabel|radio|input|select(): template helpers to do

ExceptionReporting.reportException
(ERROR)                           #Forwards to Rollbar and show UI error
tryFunc(FUNC(...))                #Calls ExceptionReporting.reportException(ERROR) if exception
Flow.delay|defer(...)             #Calls tryFunc()
console.debug|etc.                #console.debug() + Rollbar
console._debug|etc.               #console.debug() only

Flow.isPrintMode()                #Should not use popup|popover|modal in print mode

Flow.$                            #Link to $
Flow.ajax.ajax                    #Link to $.ajax, but:
                                  #  - XHR.fail() calls module "error-handler", which shows flash notifications and redirects
                                  #     - except 404 when not logged in: shows full page error. 
                                  #       IS module "public:info" 404|410 (according to RESPONSE.revoked)
                                  #     - unless OBJ.ignoredStatusCodes NUM_ARR
                                  #     - OBJ.messageContainer JQ: where notification appears
                                  #  - extra HTTP headers flow-client-version: BUILD_NO
Flow.ajax.get|post|put[JSON]      #Same with OBJ.method|contentType set


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            LOADING            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


main.js: all libs (except need i18n)
flow.js: tools (error handling, browser, data_tools) + config + Flow
startup.js: libs (need i18n) + tools (others) + everything else (load only public modules if in public path)
module "index":
  - route "" -> "index:show"
  - MDL_EVENT:
     - "index:show"(OBJ) -> "agreements:dashboard:show"(Flow.settings.direction(), OBJ) 

LIBS: do validation, then stickit, then module "auth", then module "dashboard"


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            LAYOUT             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Flow: MAPPLICATION but acting as a MLAYOUTVIEW too (on "document"):
  - main "#main" (public): Flow.Layouts.Public, big box (e.g. login page)
     R- content "#content-area"
  - main "#main" (app): Flow.Layouts.ApplicationBase, main page:
     - flash "#flash-notification"
     U- header "#header": use Flow MDL_EVENT "flow:header:show|hide"
       - top "#top-navigation": module "top" (top bar)
          - navigation "#main-navigation"
          - messages "#top-messages"
          - notifications "#top-notifications"
          - userMenu "#top-user-menu": top-right menu
     - loader "#app-loader": module "loaders"
     - app "#app-body"
  - footer "#footer": bottom bar on agreement, for guests


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:             TOOLS             :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


  - browser.*: check browser type, disable zoom (when focusing on input, for mobile), disable scroll (on popover|modals, for mobile)
  - dateTools.timeago|dateTime|customDate(): creates|update <abbr> with time info
  - Flow.storage: link to localStorage


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:          VALIDATION           :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/


Setting up:
  - MODEL:
     - validation.VARR RULE, with extra validators:
        - beLessThan|beGreaterThan "VARR2"
        - acceptance: can also use 1|"1"
        - pattern "recoveryHash|dateConfig|fullname"
        - email|fullname: true (same as pattern "email|fullname")
        - agreementDuration|agreementNoticePeriod "VARR2": MODEL.type === 2, MODEL.VARR <= MODEL.VARR2
     - labels.VARR STR (def: VLD.labels): for {0} in MODEL.validation.VARR
     - serverValidation.VARR { url URL[(VAL, "VARR", MVIEW)], msg STR }
        - validates with URL with payload { VARR: VAL }
        - used for validating email so far
  - this.model.addValidation(Flow.Entities.Validation.Mixins.VARR RULE, this):
     - predefined validation { VARR RULE } and labels (added to MODEL.validation|labels)
     - called in MVIEW.initialize(), before bindValidation()
  - this.bindValidation([false]), in MITEMVIEW.initialize()). Like VLD.bind(this) but:
     - setup "destroy" handler (MITEMVIEW.unbindValidation())
     - on "render", unless false, for each VARR.required true: adds .required | * to .control-group > label.js-VARR-label

Calling:
  - when view updates model through Stickit (using MITEMVIEW.preValidate())
  - MITEMVIEW.validateAndSave([MODEL[, OBJ[, ATTR_OBJ]]]), calling in order:
     - preValidateModel([MODEL])->PROMISE (def: MITEMVIEW.model)
        - does MODEL.preValidate() (providing there are Stickit bindings) + pending serverValidation
     - MODEL.save(ATTR_OBJ, OBJ)
     - handleXHRResponse(XHR)->PROMISE: 
        - if success, resolve with MODEL, XHR_RESP
        - otherwise, rejected with XHR_RESP and calls MODEL.displayFieldsErrors(XHR_RESP)
     - displayFieldsErrors(XHR_RESP): calls VLD.invalid|valid() according to XHR_RESP:
        - fields_errors.VARR "|missing"
        - conflict "VARR[|...]", using MODEL.serverValidation.VARR.msg

Effect:
  - Backbone.validation invalid|valid():
     .control-group -> .error
       .controls
         any(name="VARR", data-error-style="tooltip", data-tooltip-position="left|...|right(def)") // Shows as tooltip
         any(name="VARR", data-error-style="inline") // Create|find sibling .help-inline.error-message | ERROR
         any(name="VARR")                            //Same with .help-block.error-message.hide, and fades in


																						 /=+===============================+=\ 
																						/  :                               :  \  
							 														  )==:            MODULES            :==(   
																						\  :_______________________________:  /    
																						 \=+===============================+=/

Auth:
  - no routes
  - MDL_EVENT:
     - "auth:login"(OBJ): 
        - on login screen
        - sends REST API /api/users/login with:
           - data.email|password|persistent (form)
           - messageContainer|error() + ignoredStatusCodes 401: to show error in UI
       Cookie flow-user-hash STR, and redirects to "/app" (triggering "auth:autologin" then)
     - "auth:autologin"(OBJ): 
        - at startup.
        - uses Flow.startupData, filled from a <script> served by server based on flow-user-hash cookie. OBJ:
           - auth_user_id STR, users OBJ_ARR, positions OBJ_ARR
        - sets Flow.user|account|position|settings
        - pings to /api/ping every minute, which returns 401 if not logged in, and redirects to login page
        - if isGhost(), i.e. when USER.ghost true (setup by backend according to HTTP headers Ghost*):
           - append "GHOSTING" view to <body>
           - no pings
           - cannot subscribe to Pusher private-*|presence-* channels
     - "auth:logout"(OBJ): 
        - when clicking logout button
        - calls /api/users/logout, which unsets cookie flow-user-hash, then redirects to "/"
     - "auth:token-user:init"(VAL)
     - "auth:token-user:set"(USER, POSITION, BOOL)
Loaders:
  - no routes
  - no MDL_EVENT
  - loading spinner (covers whole screen) at Flow.main.currentView.loader:
     - fades at app:started
     - appears at requests:start|finished (i.e. on AJAX requests), with DELAY 1sec, MIN_SHOW 0.8sec, MAX_SHOW 20s
