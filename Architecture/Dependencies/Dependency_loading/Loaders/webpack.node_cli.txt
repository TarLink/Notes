
         
  WEBPACK  
         



VERSION ==>                       #2.2.1

webpack [FILE... DIR]             #
                                  #FILE... DIR: like --entry FILE... --output-path DIR
--verbose                         #Show more details
-j
--json                            #Prints the result as JSON

--env VAL                         #ENVVAR ENV??? or value passed to conf when it is function??? Or both???

CONF                              #Can be:
                                  #  - webpack --config CONF
                                  #  - ./webpack.config.js
                                  #  - ./webpackfile.js

--context DIR                     #The root directory for resolving entry point and stats
                                  #Def: $PWD
--entry FILE                      #The entry point
--output-path DIR                 #The output path for compilation assets
                                  #Def: $PWD
--output-filename FILE            #The output filename of the bundle
                                  #Def: "[name].js"
--output-chunk-filename FILE      #The output filename for additional chunks
                                  #Def: filename with [id] instead of [name] or [id] prefixed
--output-source-map-filename FILE #The output filename for the SourceMap
--output-public-path DIR          #The public path for the assets
--output-jsonp-function "FUNC"    #The name of the jsonp function used for chunk loading
--output-pathinfo                 #Include a comment with the request for every dependency (require, import, etc.)
--output-library STR              #Expose the exports of the entry point as library
--output-library-target STR       #The type for exposing the exports of the entry point as library

-w
--watch                           #Watch the filesystem for changes
--debug                           #Switch loaders to debug mode
--devtool STR                     #Enable devtool for better debugging experience (Example: --devtool eval-cheap-module-source-map)
--progress                        #Print compilation progress in percentage

--module-bind[-post|pre] STR      #Bind an extension to a loader

--records-input|output-path FILE  #Path to the records file (reading|writing)
--records-path FILE               #Path to the records file
--define VAR=VAL                  #Define any free var in the bundle
--target STR                      #The targeted execution enviroment
--cache                           #Enable in memory caching
                                  #Def: enabled if --watch
--[watch-]stdin                   #Exit the process when stdin is closed
--watch-aggregate-timeout         #Timeout for gathering changes while watching
--watch-poll                      #The polling interval for watching (also enable polling)
--hot                             #Enables Hot Module Replacement
--prefetch FILE                   #Prefetch this request (Example: --prefetch ./file.js)
--provide VAR=VAL                 #Provide these modules as free vars in all modules (Example: --provide jQuery=jquery)
--labeled-modules                 #Enables labeled modules
--plugin STR                      #Load this plugin
--bail                            #Abort the compilation on first error
--profile                         #Profile the compilation and include information in stats

--resolve-alias VAR=VAL           #Setup a module alias for resolving (Example: jquery-plugin=jquery.plugin)
--resolve-extensions ".EXT ..."   #Setup extensions that should be used to resolve modules (Example: --resolve-extensions .es6 .js)
--resolve-loader-alias STR        #Setup a loader alias for resolving

--optimize-max-chunks             #Try to keep the chunk count below a limit
--optimize-min-chunk-size         #Try to keep the chunk size above a limit
--optimize-minimize               #Minimize javascript and switches loaders to minimizing

--color[s]                        #Enables/Disables colors on the console
--sort-modules-by STR             #Sorts the modules list by property in module
--sort-chunks-by STR              #Sorts the chunks list by property in chunk
--sort-assets-by STR              #Sorts the assets list by property in asset
--hide-modules                    #Hides info about modules
--display-exclude STR             #Exclude modules in the output
--display-modules                 #Display even excluded modules in the output
--display-max-modules NUM         #Sets the maximum number of visible modules in output
--display-chunks                  #Display chunks in the output
--display-entrypoints             #Display entry points in the output
--display-origins                 #Display origins of chunks in the output
--display-cached                  #Display also cached modules in the output
--display-cached-assets           #Display also cached assets in the output
--display-reasons                 #Display reasons about module inclusion in the output
--display-depth                   #Display distance from entry point for each module
--display-used-exports            #Display information about used exports in modules (Tree Shaking)
--display-provided-exports        #Display information about exports provided from modules
--display-error-details           #Display details about errors

-d                                #Shortcut for --debug --devtool eval-cheap-module-source-map --output-pathinfo
-p                                #Shortcut for --optimize-minimize --define process.env.NODE_ENV="production"

CONF.entry "FILE"[_ARR]|OBJ       #"./app/entry". Options related to how webpack emits results
CONF.context                      #__dirname, #String (absolute path!) #The home directory for webpack. the entry and module.rules.loader option is resolved relative to this directory
CONF.output.path                  #path.resolve(__dirname, "dist"), #String #The target directory for all output files must be an absolute path (use the Node.js path module)
CONF.output.filename              #"bundle.js", #String #The filename template for entry chunks
CONF.output.publicPath            #"/assets/", #String #The url to the output directory resolved relative to the HTML page
CONF.output.library               #"MyLibrary", #String, #The name of the exported library
CONF.output.libraryTarget         #"umd", #Universal module definition #The type of the exported library
CONF.output.pathinfo              #true, #Boolean #Include useful path info about modules, exports, requests, etc. into the generated code
CONF.output.chunkFilename         #"[id].js" or "[chunkhash].js", #For long term caching #The filename template for additional chunks
CONF.output.jsonpFunction         #"myWebpackJsonp", #String #Name of the JSONP function used to load chunks
CONF.output.sourceMapFilename     #"[file].map" or "sourcemaps/[file].map", #String #The filename template of the source map location
CONF.output.devtool[Fallback]
 ModuleFilenameTemplate           #"webpack:///[resource-path]", #String #The name template for modules in a devtool. "Module" is used for conflicts
CONF.output.umdNamedDefine        #true, #Boolean #Use a named AMD module in UMD library
CONF.output.crossOriginLoading    #"use-credentials" or "anonymous" or false, #Specifies how cross origin request are issued by the runtime
CONF.output.hotUpdateMainFilename #"[hash].hot-update.json", #String #Filename template for HMR manifest
CONF.output.hotUpdateChunkFilename#"[id].[hash].hot-update.js", #String #Filename template for HMR chunks
CONF.output.hotUpdateFunction     #FUNC
CONF.output.sourcePrefix          #"\t", #String #Configuration regarding modules
CONF.module.rules RULE_ARR        #Rules for modules (configure loaders, parser options, etc.)
RULE.test                         #/\.jsx?$/,
RULE.include                      #[ path.resolve(__dirname, "app") ],
RULE.exclude                      #[ path.resolve(__dirname, "app/demo-files") ] #These are matching conditions, each accepting a regular expression or string test and include have the same behavior, 
                                  #both must be matched exclude must not be matched (takes preferrence over test and include)
                                  #Best practices:
                                  #- Use RegExp only in test and for filename matching
                                  #- Use arrays of absolute paths in include and exclude
                                  #- Try to avoid exclude and prefer include
RULE.issuer                       #{ test, include, exclude }, #Conditions for the issuer (the origin of the import)
RULE.enforce                      #"pre" or "post", #Flags to apply these rules, even if they are overridden (advanced option)
RULE.parser                       #OBJ
RULE|LOADER.loader                #"babel-loader", #The loader which should be applied, it'll be resolved relative to the context. -loader suffix is no longer optional in webpack2 for clarity reasons
RULE|LOADER.options|query         #OBJ. Options for the loader
RULE.use|loaders                  #"LOADER"|LOADER_ARR #Apply multiple loaders and options
RULE.oneOf                        #RULE_ARR   #Only use one of these nested rules
RULE.rules                        #RULE_ARR   #Use all of these nested rules (combine with conditions to be useful)
RULE.resource                     #RESOURCE|COND_ARR  #COND_ARR: like { or COND_ARR }
RESOURCE.and                      #COND_ARR #Matches only if all conditions are matched
RESOURCE.or                       #COND_ARR  #Matches if any condition is matched
RESOURCE.not                      #COND_ARR   #Matches if the condition is not matched
CONF.module.noParse               #[ /special-library\.js$/ ], #Do not parse this module
CONF.resolve.modules              #[ "node_modules", path.resolve(__dirname, "app") ], #Directories where to look for modules
CONF.resolve.extensions           #[".js", ".json", ".jsx", ".css"], #Extensions that are used
CONF.resolve.alias                #ALIAS_OBJ_ARR|ALIAS_CONF: { #A list of module name aliases
ALIAS_CONF.MODULE: "ALIAS"        #Alias "MODULE" -> "ALIAS" and "MODULE/path/file" -> "ALIAS/path/file"
ALIAS_CONF.MODULE$: "ALIAS"       #Alias "MODULE" -> "ALIAS", but not "MODULE/path/file" -> "ALIAS/path/file"
ALIAS.CONF.MODULE: "FILE"         #Alias "MODULE" -> "ALIAS" and "MODULE/file" results in error. Modules aliases are imported relative to the current context
ALIAS_OBJ.name                    #"MODULE", #The old request
ALIAS_OBJ.alias                   #"ALIAS", #The new request
ALIAS_OBJ.onlyModule              #true #If true only "module" is aliased. If false "module/inner/path" is also aliased
CONF.resolve.symlinks             #true, #Follow symlinks to new location
CONF.resolve.descriptionFiles     #["package.json"], #Files that are read for package description
CONF.resolve.mainFields           #["main"], #Properties that are read from description file when a folder is requested
CONF.resolve.mainFiles            #ARR
CONF.resolve.aliasFields          #["browser"], #Properites that are read from description file to alias requests in this package
CONF.resolve.enforceExtension     #false, #If true request must not include an extensions. if false request may already include an extension
CONF.resolve.moduleExtensions     #["-module"],
CNF.resolve.enforceModuleExtension#false, #Like extensions/enforceExtension but for module names instead of files
CONF.resolve.unsafeCache          #true or OBJ #Enables caching for resolved requests. This is unsafe as folder structure may change but preformance improvement is really big
CONF.resolve.cachePredicate       #FUNC(path, request)->BOOL, #Predicate function which selects requests for caching
CONF.resolve.plugins              #[ ... ]
CONF.performance.hints            #"warning", #Enum
CONF.performance.maxAssetSize     #200000, #Int (in bytes),
CONF.performance.maxEntrypointSize#400000, #Int (in bytes)
CONF.performance.assetFilter      #FUNC("FILE")->BOOL #Function predicate that provides asset filenames
CONF.devtool                      #"source-map", #Enum #Enhance debugging by adding meta info for the browser devtools. source-map most detailed at the expense of build speed.
CONF.target                       #"web", #Enum #The environment in which the bundle should run. Changes chunk loading behavior and available modules
CONF.externals                    #["react", /^@angular\//], #Don't follow/bundle these modules, but request them at runtime from the environment
CONF.plugins                      #[ ... ], #List of additional plugins
CONF.resolveLoader                #{ /* same as resolve */ } #Separate resolve options for loaders
CONF.profile                      #true, #Boolean #Capture timing information
CONF.bail                         #true, //boolean #Fail out on the first error instead of tolerating it.
CONF.cache                        #false, #Boolean #Disable/enable caching
CONF.watch                        #true, #Boolean #Enables watching
CONF.watchOptions.aggregateTimeout#1000, #In ms #Aggregates multiple changes to a single rebuild
CONF.watchOptions.poll            #true or 500, #Intervall in ms #Enables polling mode for watching must be used on filesystems that doesn't notify on change i. e. nfs shares
CONF.watchOptions.ignored         #STR|REGEXP
CONF.records[Input|Output]Path    #path.resolve(__dirname, "build/records.json")
CONF.node                         #OBJ
CONF.stats                        #OBJ|STR
CONF.amd                          #
CONF.loader                       #
