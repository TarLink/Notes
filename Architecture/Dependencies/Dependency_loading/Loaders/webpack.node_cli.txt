
           
   WEBPACK  
           



VERSION ==>                       #2.2.1

webpack [FILE... DIR]             #
                                  #FILE... DIR: like --entry FILE... --output-path DIR
--verbose                         #Show more details
-j
--json                            #Prints the result as JSON

--env VAL                         #ENVVAR ENV??? or value passed to conf when it is function??? Or both???

CONF                              #Can be:
                                  #  - webpack --config CONF
                                  #  - ./webpack.config.js
                                  #  - ./webpackfile.js

--context DIR                     #The root directory for resolving entry point and stats
                                  #Def: $PWD
--entry FILE                      #The entry point
--output-path DIR                 #The output path for compilation assets
                                  #Def: $PWD
--output-filename FILE            #The output filename of the bundle
                                  #Def: "[name].js"
--output-chunk-filename FILE      #The output filename for additional chunks
                                  #Def: filename with [id] instead of [name] or [id] prefixed
--output-source-map-filename FILE #The output filename for the SourceMap
--output-public-path DIR          #The public path for the assets
--output-jsonp-function "FUNC"    #The name of the jsonp function used for chunk loading
--output-pathinfo                 #Include a comment with the request for every dependency (require, import, etc.)
--output-library STR              #Expose the exports of the entry point as library
--output-library-target STR       #The type for exposing the exports of the entry point as library

-w
--watch                           #Watch the filesystem for changes
--debug                           #Switch loaders to debug mode
--devtool STR                     #Enable devtool for better debugging experience (Example: --devtool eval-cheap-module-source-map)
--progress                        #Print compilation progress in percentage

--module-bind[-post|pre] STR      #Bind an extension to a loader

--records-input|output-path FILE  #Path to the records file (reading|writing)
--records-path FILE               #Path to the records file
--define VAR=VAL                  #Define any free var in the bundle
--target STR                      #The targeted execution enviroment
--cache                           #Enable in memory caching
                                  #Def: enabled if --watch
--[watch-]stdin                   #Exit the process when stdin is closed
--watch-aggregate-timeout         #Timeout for gathering changes while watching
--watch-poll                      #The polling interval for watching (also enable polling)
--hot                             #Enables Hot Module Replacement
--prefetch FILE                   #Prefetch this request (Example: --prefetch ./file.js)
--provide VAR=VAL                 #Provide these modules as free vars in all modules (Example: --provide jQuery=jquery)
--labeled-modules                 #Enables labeled modules
--plugin STR                      #Load this plugin
--bail                            #Abort the compilation on first error
--profile                         #Profile the compilation and include information in stats

--resolve-alias VAR=VAL           #Setup a module alias for resolving (Example: jquery-plugin=jquery.plugin)
--resolve-extensions ".EXT ..."   #Setup extensions that should be used to resolve modules (Example: --resolve-extensions .es6 .js)
--resolve-loader-alias STR        #Setup a loader alias for resolving

--optimize-max-chunks             #Try to keep the chunk count below a limit
--optimize-min-chunk-size         #Try to keep the chunk size above a limit
--optimize-minimize               #Minimize javascript and switches loaders to minimizing

--color[s]                        #Enables/Disables colors on the console
--sort-modules-by STR             #Sorts the modules list by property in module
--sort-chunks-by STR              #Sorts the chunks list by property in chunk
--sort-assets-by STR              #Sorts the assets list by property in asset
--hide-modules                    #Hides info about modules
--display-exclude STR             #Exclude modules in the output
--display-modules                 #Display even excluded modules in the output
--display-max-modules NUM         #Sets the maximum number of visible modules in output
--display-chunks                  #Display chunks in the output
--display-entrypoints             #Display entry points in the output
--display-origins                 #Display origins of chunks in the output
--display-cached                  #Display also cached modules in the output
--display-cached-assets           #Display also cached assets in the output
--display-reasons                 #Display reasons about module inclusion in the output
--display-depth                   #Display distance from entry point for each module
--display-used-exports            #Display information about used exports in modules (Tree Shaking)
--display-provided-exports        #Display information about exports provided from modules
--display-error-details           #Display details about errors

-d                                #Shortcut for --debug --devtool eval-cheap-module-source-map --output-pathinfo
-p                                #Shortcut for --optimize-minimize --define process.env.NODE_ENV="production"
