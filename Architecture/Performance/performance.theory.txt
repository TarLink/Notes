
               
   PERFORMANCE  
               



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          COMPLEXITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COMPLEXITY ==>                    #Function expressing amount of resource taken by another function.
                                  #Can be:
                                  #  - time complexity: amount of time
                                  #  - space complexity: amount of memory


CLASSES ==>                       #Noted O(...)
                                  #  - n is input size
                                  #     - poly(n): any possible polynome with n as sole variable
                                  #     - other variables can be used, e.g. if there are several inputs
                                  #  - k is constant
                                  #Describe asymptotic complexity:
                                  #  - i.e. when n is scaled up
                                  #  - constants (except as exponents) are not kept
                                  #  - however in real-life, those constants matter
                                  #     - e.g. with n = 5, O(1) 30 is slower than O(n) 2n
                                  #
                                  #  +--------------------+-----------------+---------------+
                                  #  | NAME               | O(...) NOTATION | EXAMPLE       |
                                  #  +--------------------+-----------------+---------------+
                                  #  | constant           | 1               | ARR[NUM]      |
                                  #  | log-logarithmic    | log(log(n))     |               |
                                  #  | logarithmic        | log(n)          | binary search |
                                  #  | polylogarithmic    | (log(n))^k      |               |
                                  #  | fractional power   | n^k (0<k<1)     |               |
                                  #  | square root        | n^0.5           |               |
                                  #  | linear             | n               | max(ARR)      |
                                  #  | linearithmic /     |                 |               |
                                  #  | loglinear          | n.log(n)        | heap sort     |
                                  #  | quadratric         | n²              | bubble sort   |
                                  #  | cubic              | n³              |               |
                                  #  | polynomial         | poly(n)         |               |
                                  #  | exponential        | 2^poly(n)       |               |
                                  #  | double-exponential | 2^(2^(poly(n))  |               |
                                  #  | factorial          | n!              |               |
                                  #  +--------------------+-----------------+---------------+

CASES ==>                         #Can be:
                                  #  - best case
                                  #  - average case: the one usually used
                                  #  - worst case

AMORTIZED COMPLEXITY ==>          #Way of calculating the average case.
                                  #Also called "aggregate analysis"
                                  #Take the average cost over n operations.
                                  #Variants:
                                  #  - "accounting method":
                                  #     - each operation gets a constant amount of credit
                                  #     - each operations uses that credit, depending on its complexity
                                  #     - must ensure current credit always above 0
                                  #  - "potential method":
                                  #     - each operation adds cost related to how much disorder it introduces
                                  #     - e.g. for array geometric expansions, getting closer to upper limit introduces
                                  #       disorder




LOCALITY OF REFERENCE ==>         #Information close to each other.
                                  #Can be:
                                  #  - "temporal": over time
                                  #  - "spatial": over space
                                  #     - "memory": over memory
                                  #     - "branch": over branches, i.e. source code
                                  #High locality of reference leads to information reuse, which helps:
                                  #  - reducing quantity of information / amount of work:
                                  #     - caching: temporal
                                  #     - spatial: compression|minification
                                  #  - predicting information use pattern, allowing to reduce idleness:
                                  #     - parallelism: increasing current work
                                  #     - precalculation: move work to future
                                  #     - lazy calculation: move work to past

SPACE-TIME TRADEOFF ==>           #Also called "time-memory tradeoff":
                                  #  - performance can often be reduced by using memory, e.g. precalculation
                                  #  - memory can often be reduced by decreasing performance, e.g. compression

COMPLEXITY TRADEOFF ==>           #Optimization usually decreases maintainability
                                  #Ex: loop unrolling


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CACHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CACHING ==>                       #Refactoring information used several times to a single time
                                  #Usually conceptually a hash table with function input as key
                                  #Cache hit|miss:
                                  #  - whether a specific function invocation can use cache
                                  #  - hit ratio: percentage of cache hits
                                  #  - "trashing":
                                  #     - very low hit ratio, i.e. time spent updating cache > time saved by caching
                                  #     - is when locality of reference (how much data is reused) < cache max size
                                  #If cache has max size, it requires a replacement policy ("cache algorithm")
                                  #  - tradeoff between hit ratio (fewer cache misses) and latency (how long to process cache hits)
                                  #  - can be:
                                  #     - LRU:
                                  #        - remove Least Recently Used item
                                  #        - i.e. queue
                                  #     - PLRU (Pseudo-LRU)
                                  #        - remove not recently used item (not necessarily least)
                                  #     - MRU:
                                  #        - remove Most Recently Used item
                                  #        - i.e. stack
                                  #        - useful when items are rarely used twice in a row
                                  #     - LFU: remove Least Frequently Used item
                                  #     - Bélády:
                                  #        - remove item that will be used in the furthest future
                                  #        - usually unknown, i.e. can only be approximated
                                  #     - RR (Random Replacement): remove random item
                                  #"Write-back": cache also acting as a buffer on write requests

MEMOIZATION ==>                   #Caching function calls:
                                  #  - by storing a hash table inside that function with input as key, return value as value
                                  #  - return value must be predictable, i.e. must be pure function


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONCURRING PROGRAMMING ==>        #Running several pieces of code at once
                                  #Good for performance but creates synchronization problems
                                  #Usually implies async
                                  #See concurrency doc

ARRAY PROGRAMMING ==>             #See parallelism doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PRECALCULATION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OBJECT POOL ==>                   #Efficient initialization (when it is costly):
                                  #  - pool creates objects in advance
                                  #  - new objects:
                                  #     - are taken from the pool
                                  #     - if not created yet, creates it
                                  #        - there can be a pool size limit ("high water mark")
                                  #  - destroyed objects are returned to the pool for reuse
                                  #     - pool must reset object
                                  #     - if destroyed objects are not returned, this will create starvation

MEMORY POOL ==>                   #Like object pool but for memory allocation

PRECALCULATION ==>                #Precalculating computation-intense, e.g. graphics (alpha, shadows)

PREFETCHING ==>                   #Precalculating IO/network request

LOOKUP TABLE ==>                  #Precalculating an operation and storing results in an associative array,
                                  #so accessing it is constant time
                                  #Also called "sparse table"

SPECULATIVE EXECUTION ==>         #Precalculating something that is not 100% sure to be needed
                                  #Example: predictive execution in CPU pipelining


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       SPATIAL LOCALITY        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FLYWEIGHT ==>                     #Also called "hash consing" or (for string constants|symbols) "string interning"
                                  #Refactoring information used in several places (i.e. duplicated, denormalized) to a single place (i.e. normalized):
                                  #  - i.e. using reference to single place ("flyweight"), instead of several copies
                                  #     - "reference" can be language-level (e.g. VAR& in C++) or application-level (e.g. hash table)
                                  #  - flyweight can be shared:
                                  #     - inside each object (i.e. as member)
                                  #     - outside each object (e.g. as function arguments)
                                  #Pros:
                                  #  - more memory efficient
                                  #  - fast to compare equal value, i.e. can compare reference instead of value
                                  #Cons:
                                  #  - less granularity

IMMUTABILITY ==>                  #Read-only instance
                                  #Pros:
                                  #  - easier to maintain, e.g. easier to be thread-safe
                                  #Cons:
                                  #  - less flexible
                                  #Can:
                                  #  - change by making copy
                                  #     - faster to test if "has changed" with immutability + copy, than with mutability
