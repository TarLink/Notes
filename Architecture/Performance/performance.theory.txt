
               
   PERFORMANCE  
               



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          COMPLEXITY           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


COMPLEXITY ==>                    #Function expressing amount of resource taken by another function.
                                  #Can be:
                                  #  - time complexity: amount of time
                                  #  - space complexity: amount of memory


CLASSES ==>                       #Noted O(...)
                                  #  - n is input size
                                  #     - poly(n): any possible polynome with n as sole variable
                                  #     - other variables can be used, e.g. if there are several inputs
                                  #  - k is constant
                                  #Describe asymptotic complexity:
                                  #  - i.e. when n is scaled up
                                  #  - constants (except as exponents) are not kept
                                  #  - however in real-life, those constants matter
                                  #     - e.g. with n = 5, O(1) 30 is slower than O(n) 2n
                                  #
                                  #  +--------------------+-----------------+---------------+
                                  #  | NAME               | O(...) NOTATION | EXAMPLE       |
                                  #  +--------------------+-----------------+---------------+
                                  #  | constant           | 1               | ARR[NUM]      |
                                  #  | log-logarithmic    | log(log(n))     |               |
                                  #  | logarithmic        | log(n)          | binary search |
                                  #  | polylogarithmic    | (log(n))^k      |               |
                                  #  | fractional power   | n^k (0<k<1)     |               |
                                  #  | square root        | n^0.5           |               |
                                  #  | linear             | n               | max(ARR)      |
                                  #  | linearithmic /     |                 |               |
                                  #  | loglinear          | n.log(n)        | heap sort     |
                                  #  | quadratric         | n²              | bubble sort   |
                                  #  | cubic              | n³              |               |
                                  #  | polynomial         | poly(n)         |               |
                                  #  | exponential        | 2^poly(n)       |               |
                                  #  | double-exponential | 2^(2^(poly(n))  |               |
                                  #  | factorial          | n!              |               |
                                  #  +--------------------+-----------------+---------------+

CASES ==>                         #Can be:
                                  #  - best case
                                  #  - average case: the one usually used
                                  #  - worst case

AMORTIZED COMPLEXITY ==>          #Way of calculating the average case.
                                  #Also called "aggregate analysis"
                                  #Take the average cost over n operations.
                                  #Variants:
                                  #  - "accounting method":
                                  #     - each operation gets a constant amount of credit
                                  #     - each operations uses that credit, depending on its complexity
                                  #     - must ensure current credit always above 0
                                  #  - "potential method":
                                  #     - each operation adds cost related to how much disorder it introduces
                                  #     - e.g. for array geometric expansions, getting closer to upper limit introduces
                                  #       disorder


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     LOCALITY OF REFERENCE     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOCALITY OF REFERENCE ==>         #Information close to each other.
                                  #Can be:
                                  #  - "temporal": over time
                                  #  - "spatial": over space
                                  #     - "memory": over memory
                                  #     - "branch": over branches, i.e. source code
                                  #High locality of reference leads to information reuse, which helps:
                                  #  - reducing quantity of information / amount of work:
                                  #     - caching (see its doc): temporal
                                  #     - compression (see its doc): spatial
                                  #  - predicting information use pattern, allowing to reduce idleness:
                                  #     - parallelism (see its doc): increasing current work
                                  #     - throttling: decreasing current work
                                  #     - precalculation (see its doc): move work to future
                                  #     - lazy calculation: move work to past

SPACE-TIME TRADEOFF ==>           #Also called "time-memory tradeoff":
                                  #  - performance can often be reduced by using memory, e.g. precalculation
                                  #  - memory can often be reduced by decreasing performance, e.g. compression

COMPLEXITY TRADEOFF ==>           #Optimization usually decreases maintainability
                                  #Ex: loop unrolling

FLYWEIGHT ==>                     #Also called "hash consing" or (for string constants|symbols) "string interning"
                                  #Refactoring information used in several places (i.e. duplicated, denormalized) to a single place (i.e. normalized):
                                  #  - i.e. using reference to single place ("flyweight"), instead of several copies
                                  #     - "reference" can be language-level (e.g. VAR& in C++) or application-level (e.g. hash table)
                                  #  - flyweight can be shared:
                                  #     - inside each object (i.e. as member)
                                  #     - outside each object (e.g. as function arguments)
                                  #Pros:
                                  #  - more memory efficient
                                  #  - fast to compare equal value, i.e. can compare reference instead of value
                                  #Cons:
                                  #  - less granularity
