
         
   PHP   
         


VERSION ==>                       #7.1


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          BASE SYNTAX          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<?php ... [?>]                    #Anything outside is left as is.
                                  #... is parsed by PHP, and replaced by its stdout
                                  #If ?> is end of file, do not use it, to avoid unwanted trailing whitespaces
<?= ... ?>                        #Same as <?php echo ... ?>

<?php STRUCTURE ?>                #Same as: 
...                               #  <?php
<?php ENDSTRUCTURE ?>             #  STRUCTURE
                                  #    echo '...';
                                  #  ENDSTRUCTURE
                                  #  ?>
                                  #Use : instead of { } ??? + end statement ???

STATEMENT;                        #Semi-colon terminated

// COMMENT
# COMMENT                         #Single-line. Stops at next ?>
/* COMMENT */                     #Multiple-line.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TYPES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE SYSTEM ==>                   #Nominative.
                                  #Weakly typed + type inferred: auto-typecasting, including at definition-time
                                  #Dynamic/runtime type checking
TYPE CASTING ==>                  #To BOOL:
                                  #  - NUM: 0 -> false, else true
                                  #  - STR: "" or "0" -> false, else true
                                  #  - ARR: length > 0
                                  #  - NULL: false
                                  #  - else: true
                                  #To INT|FLOAT:
                                  #  - BOOL: false -> 0, true -> 1
                                  #  - STR: ???
                                  #  - FLOAT -> INT:
                                  #     - round towards zero
                                  #     - overflow -> undefined
                                  #     - NaN|Infinity -> 0
                                  #  - else: undefined
(TYPE) VAL                        #Explicit type casting. TYPE: bool[ean], int[eger]

STR                               #Can be:
                                  #  - '...'
                                  #  - "..."
                                  #Escaping:
                                  #  - \ to escape:
                                  #     - \ 
                                  #     - ('...' only) '
                                  #     - ("..." only) " $
                                  #  - backslash-escaping sequences:
                                  #     - not in '...'
                                  #     - among: \n \r \t \v \f \0N[N[N]] \xN[N] \u[N[N[N[N]]]]
                                  #  - newlines are always escaped
                                  #Can contain any byte, incuding \0, so is used for binary data too.
BOOL                              #Can be: true, false (case-insensitive)
INT                               #Can be: [-|+]NUM
                                  #NUM can be prefixed by 0 (octal), 0x|0X (hex) or 0b (binary)
                                  #Signed integers
                                  #Limits:
                                  #  - PHP_INT_SIZE, PHP_INT_MIN|MAX
                                  #  - depends if OS is 32 or 64 bits
                                  #  - if overflow, parsed as FLOAT instead
FLOAT                             #Can be: 
                                  #  - [-|+]NUM[.NUM2][e|E[-|+]NUM3]
                                  #  - NaN:
                                  #     - NaN != NaN
                                  #Size: OS dependent, but usually double


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          STRUCTURES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


???
if (BOOL):
  ...
else:
  ...
endif;                            #
???

if (BOOL) {
  ...
}                                 #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            STRING             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


CHARSET/UNICODE ==>               #String operations are byte-wise, not character-wise, except:
                                  #  - if encoding can be specified as argument
                                  #  - if current locale is used
                                  #Unless specified, string operations are byte-wise, not character-wise



                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            OTHERS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


echo STR

