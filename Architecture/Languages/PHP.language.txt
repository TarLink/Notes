
         
   PHP   
         


VERSION ==>                       #7.1

INTERPRETER ==>                   #Can be:
                                  #  - Zend engine: main one


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          BASE SYNTAX          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<?php ... [?>]                    #Anything outside is left as is.
                                  #... is parsed by PHP, and replaced by its stdout
                                  #If ?> is end of file, do not use it, to avoid unwanted trailing whitespaces
<?= ... ?>                        #Same as <?php echo ... ?>

<?php STRUCTURE ?>                #Same as: 
...                               #  <?php
<?php ENDSTRUCTURE ?>             #  STRUCTURE
                                  #    echo '...';
                                  #  ENDSTRUCTURE
                                  #  ?>
                                  #Use : instead of { } ??? + end statement ???

STATEMENT;                        #Semi-colon terminated

EXPR                              #Expression, i.e. anything that returns a value
                                  #I.e. not only constants

// COMMENT
# COMMENT                         #Single-line. Stops at next ?>
/* COMMENT */                     #Multiple-line.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TYPES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE SYSTEM ==>                   #Nominative.
                                  #Weakly typed + type inferred: auto-typecasting, including at definition-time
                                  #Dynamic/runtime type checking
(TYPE) VAL                        #Explicit type casting. TYPE: string|b[inary], bool[ean], int[eger], float|double|real, array, object, unset (null)
"$VAR"                            #Same as (string) $VAR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           VARIABLES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


VAR                               #[[:alnum:]_-]+, can use Unicode chars

$VAR,...                          #Declaration
$VAR = VAL                        #Assignment, by value
                                  #Is an EXPR, i.e. returns VAL
$VAR = &$VAR                      #Assignment, by reference
                                  #Is an EXPR, i.e. returns its value
$VAR                              #Dereferencement
                                  #Undeclared values:
                                  #  - can be referenced
                                  #  - will have falsy default value, i.e.:
                                  #     - STR: ""
                                  #     - BOOL: false
                                  #     - NUM: 0
                                  #     - ARR: []

${EXPR}                           #Can be used like $VAR, but VAR name is EXPR result
$$VAR                             #Same as ${$VAR}
$$$VAR                            #Same as ${${$VAR}}. Can add any number of $ for extra indirections
$$VAR[NUM]                        #Operator priority (from high to low): {} $ []
${$VAR}[NUM]                      #I.e. first two conceptually mean ($$VAR)[NUM], last means $($VAR[NUM])
${$VAR[NUM]}                      #Same thing for $$VAR->KEY


define("VAR", VAL)                #"Constants". Same as global variables except:
                                  #  - read-only
                                  #  - referenced as VAR, not $VAR
                                  #     - i.e. ${EXPR} or $$VAR cannot be used
                                  #     - if undefined, defaults to "VAR" itself, with a warning message
                                  #  - uppercase by convention
                                  #  - VAL can only resolve to STR|BOOL|NUM|ARR|RES
const VAR = VAL,...               #Same but evaluated compile-time not runtime.
                                  #This implies following restrictions:
                                  #  - VAL cannot contain FUNC(), but can contain builtin-operators like + -
                                  #  - must be top-level scope, and not in any block


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             SCOPE             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SCOPE ==>                         #Function-level lexical scope, with no inheritance from parent function.
                                  #I.e. can only use arguments or global variables (apart from locally defined variables)

SUPERGLOBAL ==>                   #PHP-defined global variable
$GLOBALS                          #Global scope, as ARR
                                  #I.e. any global variable will available at both $GLOBALS["VAR"] and $VAR
$GLOBALS["GLOBALS"]               #Same as $GLOBALS (recursion)
global $VAR,...                   #Global variable declaration (no assigning)
                                  #This global declaration:
                                  #  - must be present in scopes that use $VAR
                                  #  - does not have to be present in parent|global scope
                                  #Assigning a value by reference to $VAR makes it local.

static $VAR [= VAL],...           #Declaration/assignment with a normal (i.e. function) scope, but:
                                  #  - only done the first current function call
                                  #  - $VAR value is persisted for the next current function calls
                                  #Assigning a value by reference to $VAR makes it non-static.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           FUNCTIONS           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


function FUNC() { ... }           #Declaration
                                  #Is an EXPR, i.e. can be assigned ("closure") or used as anonymous function

FUNC(VAL,...)                     #


FUNK                              #"Callable" or "callback", i.e. anything that can be fired with arguments.
                                  #Can be:
                                  #  - FUNC
                                  #  - OBJ with OBJ.__invoke()

call_user_func('FUNK')            #Normal FUNC
call_user_func
 ([OBJ, '[PARENT::]FUNK'])        #Class function
call_user_func('CLASS::FUNK')     
call_user_func
 (['CLASS'|OBJ, '[PARENT::]FUNK'])#Class static function


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          STRUCTURES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


???
if (BOOL):
  ...
else:
  ...
endif;                            #
???

if (BOOL) {
  ...
}                                 #

BOOL ? VAL : VAL2                 #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             NULL              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #Cast anything to null


null                              #Case-insensitive


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            STRING             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



TYPE CASTING ==>                  #To STR:
                                  #  - BOOL: false -> "", true -> "1"
                                  #  - INT
                                  #  - FLOAT: 
                                  #     - might use exponent notation
                                  #     - decimal point uses locale
                                  #  - ARR: "Array" (avoid)
                                  #  - OBJ: uses OBJ.__toString()
                                  #  - RES: "Resource id #NUM" (unique string)
                                  #  - NULL: ""


'...'                             #STR
                                  #Escaping:
                                  #  - \ to escape \ '
                                  #  - newlines always escaped
                                  #Can contain any byte, incuding \0, so is used for binary data too.
"..."                             #Like '...', with extra parsing: 
                                  #  - VARR (see below)
                                  #  - backslash-escaping sequences:
                                  #     - among: \n \r \t \v \f \0N[N[N]] \xN[N] \u[N[N[N[N]]]]
                                  #Must escape " $ instead of '
"...$VARR..."                     #Variable expansion. Can be:
                                  #  - $VAR[NUM]
                                  #  - $VAR->KEY
                                  #  - $VAR[KEY]: where KEY is constant
"...${VARR}..."                   #Same as $VARR, except it delimitate variable names from surrounding characters
"...{$VARR}"                      #As opposed to above:
                                  #  - $VAR[VAR2]: VAR2 is EXPR, evaluating to name
                                  #Also $VARR can be:
                                  #  - multidimensional indexing, e.g. VAR[...]->...->...
                                  #  - ${EXPR} or $VAR->{EXPR}
<<<["]DELIM["]
...                               
DELIM;                            
<<<'DELIM'                        #"Heredoc" (first), "Newdoc" (second)
...                               #Like "..." or '...' except no need to escape " or '
DELIM;                            #No leading|trailing whitespaces


CHARSET/UNICODE ==>               #String operations are byte-wise, not character-wise, except:
                                  #  - if encoding can be specified as argument
                                  #  - if current locale is used

STR[NUM_EXPR]                     #NUM can be: 
STR{NUM_EXPR}                     #  - negative: from end of string
                                  #  - overflow: padds with spaces


STR . STR2                        #Concatenation


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            BOOLEAN            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To BOOL:
                                  #  - STR: "" or "0" -> false, else true
                                  #  - NUM: 0 -> false, else true
                                  #  - ARR: length > 0
                                  #  - NULL: false
                                  #  - else: true


true
false                             #BOOL. Case-insensitive


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            NUMBERS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To NUM:
                                  #  - STR:
                                  #     - tries to parse as INT first, then as FLOAT
                                  #     - non-numerical characters at end are ignored
                                  #     - if error, 0
                                  #  - BOOL: false -> 0, true -> 1
                                  #  - FLOAT -> INT:
                                  #     - round towards zero
                                  #     - overflow -> undefined
                                  #     - NAN|INF -> 0
                                  #  - NULL: 0
                                  #  - else: undefined


[-|+]NUM                          #INT (signed integers)
                                  #NUM can be prefixed by 0 (octal), 0x|0X (hex) or 0b (binary)
                                  #Limits:
                                  #  - PHP_INT_SIZE, PHP_INT_MIN|MAX
                                  #  - depends if OS is 32 or 64 bits
                                  #  - if overflow, parsed as FLOAT instead

[-|+]NUM[.NUM2][e|E[-|+]NUM3]     #FLOAT
                                  #Size: OS dependent, but usually double
NAN                               #FLOAT
                                  #NAN != NAN
                                  #Case sensitive
[-|+]INF                          #FLOAT
                                  #Case sensitive


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             ARRAY             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To ARR:
                                  #  - STR|BOOL|NUM|RES: like [STR|...]
                                  #  - NULL: []
                                  #  - OBJ:
                                  #     - reuse keys|values
                                  #     - special members:
                                  #        - OBJ->KEY_NUM not converted
                                  #        - private OBJ->KEY becomes OBJ->\0CLASS\0KEY
                                  #        - protected OBJ->KEY becomes OBJ->\0*\0KEY


KEY                               #EXPR evaluating to INT|STR. INT prevails.
[[KEY => ]VAL,...]                #ARR
array([KEY => ]VAL,...)           #Is an associative array. As opposed to OBJ, is ordered.
                                  #Last comma optional
                                  #If KEY appears several times, last one prevails
                                  #Default KEY: 
                                  #  - 1 + max KEY_INT (including deleted keys)
                                  #  - or 0
                                  #  - i.e. increments
ARR[KEY]                          #Can be assigned
ARR{KEY}                          #If overflow, NULL + warning message
ARR[KEY][KEY2]...                 #

ARR[KEY] = VAL                    #If ARR does not exist, creates it (avoid)
ARR[] = VAL                       #Appends

unset(ARR[KEY])                   #Removes key + value


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            OBJECTS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To OBJ:
                                  #  - ARR: reuse key|values, except KEY_NUM
                                  #  - NULL: {}
                                  #  - other VAL: { scalar: VAL }
                                  #The typecasted object CLASS is "stdClass"


class CLASS [extends CLASS2]
{ 
  var $VAR = VAL;
  [public|private|protected] 
   [static] function FUNC() {...}
}                                 #Class definition

OBJ = new CLASS                   #OBJ declaration

OBJ->KEY                          #Using a member
OBJ->{EXPR}                       #EXPR evaluating to KEY
OBJ->$VAR                         #Same as OBJ->{$VAR}


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           RESOURCES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #Not allowed


RES                               #Resource, i.e. file or network connection


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             HTTP              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


All this chapter: ???

CGI??? Including RFC 3875

$argv                             
$_SERVER["argv"]                  #Global
$argc                             
$_SERVER["argc"]                  #Global
$_ENV                             #Global

$php_errormsg                     #Global

$_SERVER                          #Global ARR. Contains all ENVVAR, plus additional documented here
$_SERVER["DOCUMENT_ROOT "]        #STR
$_SERVER["PATH_TRANSLATED"]       #STR
$_SERVER["PHP_SELF"]              #STR
$_SERVER["REQUEST_TIME[_FLOAT]"]  #INT|FLOAT
$_SERVER["SCRIPT_FILENAME"]       #STR
$_SERVER["SCRIPT_NAME"]           #STR

$_POST                            #Global ARR with request body variables
$_GET                             #Global ARR with request query variables
$_COOKIE                          #Global
$_FILES                           #Global
$_REQUEST                         #Global ARR with request body|query variables
                                  #Variable names:
                                  #  - dots and spaces are converted to _
                                  #  - can be:
                                  #     - VAR[VAR2]: parsed as ARR
                                  #     - VAR[]: appended to ARR
$http_response_header             #Global

$_SESSION                         #Global


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           NAMESPACE           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


__NAMESPACE__                     #Current namespace


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            OTHERS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


unset(VAR)                        #Removes a variable

echo STR                          #Prints STR to stdout

__LINE__                          #Line number. 1 if CLI
__FUNCTION__                      #Current function name. "" if top-level
__METHOD__                        #Current method name. "" if none
__CLASS__                         #Current class, when inside a method. "" otherwise
                                  #Prepended by "NAMESPACE|" if there is one
__TRAIT__                         #Current trait. "" if none
                                  #Prepended by "NAMESPACE|" if there is one
__FILE__                          #Current file path. "php shell code" if CLI
__DIR__                           #Current file directory. $PWD if CLI
