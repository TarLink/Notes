
         
   PHP   
         


VERSION ==>                       #7.1


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          BASE SYNTAX          :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


<?php ... [?>]                    #Anything outside is left as is.
                                  #... is parsed by PHP, and replaced by its stdout
                                  #If ?> is end of file, do not use it, to avoid unwanted trailing whitespaces
<?= ... ?>                        #Same as <?php echo ... ?>

<?php STRUCTURE ?>                #Same as: 
...                               #  <?php
<?php ENDSTRUCTURE ?>             #  STRUCTURE
                                  #    echo '...';
                                  #  ENDSTRUCTURE
                                  #  ?>
                                  #Use : instead of { } ??? + end statement ???

STATEMENT;                        #Semi-colon terminated

// COMMENT
# COMMENT                         #Single-line. Stops at next ?>
/* COMMENT */                     #Multiple-line.


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             TYPES             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE SYSTEM ==>                   #Nominative.
                                  #Weakly typed + type inferred: auto-typecasting, including at definition-time
                                  #Dynamic/runtime type checking
(TYPE) VAL                        #Explicit type casting. TYPE: string|b[inary], bool[ean], int[eger], float|double|real, array, object, unset (null)
"$VAR"                            #Same as (string) $VAR


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           VARIABLES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


VAR                               #[[:alnum:]_-]+, can use Unicode chars

$VAR,...                          #Declaration
$VAR = VAL                        #Assignment, by value
$VAR = &$VAR                      #Assignment, by reference
$VAR                              #Dereferencement
                                  #Undeclared values:
                                  #  - can be referenced
                                  #  - will have falsy default value, i.e.:
                                  #     - STR: ""
                                  #     - BOOL: false
                                  #     - NUM: 0
                                  #     - ARR: []


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             SCOPE             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


SCOPE ==>                         #Function-level lexical scope, with no inheritance from parent function.
                                  #I.e. can only use arguments or global variables

SUPERGLOBAL ==>                   #PHP-defined global variable
global $VAR,...                   #Global variable declaration (no assigning)
                                  #This global declaration:
                                  #  - must be present in scopes that use $VAR
                                  #  - does not have to be present in parent|global scope


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           FUNCTIONS           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/




function FUNC() { ... }           #Declaration
                                  #Can be assigned ("closure") or used as anonymous function

FUNC(VAL,...)                     #


FUNK                              #"Callable" or "callback", i.e. anything that can be fired with arguments.
                                  #Can be:
                                  #  - FUNC
                                  #  - OBJ with OBJ.__invoke()

call_user_func('FUNK')            #Normal FUNC
call_user_func
 ([OBJ, '[PARENT::]FUNK'])        #Class function
call_user_func('CLASS::FUNK')     
call_user_func
 (['CLASS'|OBJ, '[PARENT::]FUNK'])#Class static function

                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:          STRUCTURES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


???
if (BOOL):
  ...
else:
  ...
endif;                            #
???

if (BOOL) {
  ...
}                                 #


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             NULL              :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #Cast anything to null


null                              #Case-insensitive


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            STRING             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/



TYPE CASTING ==>                  #To STR:
                                  #  - BOOL: false -> "", true -> "1"
                                  #  - INT
                                  #  - FLOAT: 
                                  #     - might use exponent notation
                                  #     - decimal point uses locale
                                  #  - ARR: "Array" (avoid)
                                  #  - OBJ: uses OBJ.__toString()
                                  #  - RES: "Resource id #NUM" (unique string)
                                  #  - NULL: ""


'...'                             #STR
                                  #Escaping:
                                  #  - \ to escape \ '
                                  #  - newlines always escaped
                                  #Can contain any byte, incuding \0, so is used for binary data too.
"..."                             #Like '...', with extra parsing: 
                                  #  - VARR (see below)
                                  #  - backslash-escaping sequences:
                                  #     - among: \n \r \t \v \f \0N[N[N]] \xN[N] \u[N[N[N[N]]]]
                                  #Must escape " $ instead of '
"...$VARR..."                     #Variable expansion. Can be:
                                  #  - $VAR[NUM]
                                  #  - $VAR->KEY
                                  #  - $VAR[KEY]: where KEY is constant
"...${VARR}..."                   #Same as $VARR, except it delimitate variable names from surrounding characters
"...{$VARR}"                      #As opposed to above:
                                  #  - $VAR[VAR2]: VAR2 is EXPR, evaluating to name
                                  #Also $VARR can be:
                                  #  - multidimensional indexing, e.g. VAR[...]->...->...
                                  #  - ${EXPR} or $VAR->{EXPR}, where EXPR evaluates to variable names
<<<["]DELIM["]
...                               
DELIM;                            
<<<'DELIM'                        #"Heredoc" (first), "Newdoc" (second)
...                               #Like "..." or '...' except no need to escape " or '
DELIM;                            #No leading|trailing whitespaces


CHARSET/UNICODE ==>               #String operations are byte-wise, not character-wise, except:
                                  #  - if encoding can be specified as argument
                                  #  - if current locale is used

STR[NUM]                          #NUM can be: 
STR{NUM}                          #  - negative: from end of string
                                  #  - overflow: padds with spaces


STR . STR2                        #Concatenation


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            BOOLEAN            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To BOOL:
                                  #  - STR: "" or "0" -> false, else true
                                  #  - NUM: 0 -> false, else true
                                  #  - ARR: length > 0
                                  #  - NULL: false
                                  #  - else: true


true
false                             #BOOL. Case-insensitive


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            NUMBERS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To NUM:
                                  #  - STR:
                                  #     - tries to parse as INT first, then as FLOAT
                                  #     - non-numerical characters at end are ignored
                                  #     - if error, 0
                                  #  - BOOL: false -> 0, true -> 1
                                  #  - FLOAT -> INT:
                                  #     - round towards zero
                                  #     - overflow -> undefined
                                  #     - NAN|INF -> 0
                                  #  - NULL: 0
                                  #  - else: undefined


[-|+]NUM                          #INT (signed integers)
                                  #NUM can be prefixed by 0 (octal), 0x|0X (hex) or 0b (binary)
                                  #Limits:
                                  #  - PHP_INT_SIZE, PHP_INT_MIN|MAX
                                  #  - depends if OS is 32 or 64 bits
                                  #  - if overflow, parsed as FLOAT instead

[-|+]NUM[.NUM2][e|E[-|+]NUM3]     #FLOAT
                                  #Size: OS dependent, but usually double
NAN                               #FLOAT
                                  #NAN != NAN
                                  #Case sensitive
[-|+]INF                          #FLOAT
                                  #Case sensitive


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:             ARRAY             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To ARR:
                                  #  - STR|BOOL|NUM|RES: like [STR|...]
                                  #  - NULL: []
                                  #  - OBJ:
                                  #     - reuse keys|values
                                  #     - special members:
                                  #        - OBJ->KEY_NUM not converted
                                  #        - private OBJ->KEY becomes OBJ->\0CLASS\0KEY
                                  #        - protected OBJ->KEY becomes OBJ->\0*\0KEY


[[KEY_INT|STR => ]VAL,...]        #ARR
array([KEY_INT|STR => ]VAL,...)   #Is an associative array. As opposed to OBJ, is ordered.
                                  #Last comma optional
                                  #If KEY_STR can be typecasted to INT, it will
                                  #If KEY appears several times, last one prevails
                                  #Default KEY: 
                                  #  - 1 + max KEY_INT (including deleted keys)
                                  #  - or 0
                                  #  - i.e. increments
ARR[KEY]                          #Can be assigned
ARR{KEY}                          #If overflow, NULL + warning message
ARR[KEY][KEY2]...                 #

ARR[KEY] = VAL                    #If ARR does not exist, creates it (avoid)
ARR[] = VAL                       #Appends

unset(ARR[KEY])                   #Removes key + value


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            OBJECTS            :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #To OBJ:
                                  #  - ARR: reuse key|values, except KEY_NUM
                                  #  - NULL: {}
                                  #  - other VAL: { scalar: VAL }
                                  #The typecasted object CLASS is "stdClass"


class CLASS [extends CLASS2]
{ 
  [public|private|protected] 
   [static] function FUNC() {...}
}                                 #Class definition

OBJ = new CLASS                   #OBJ declaration

OBJ->KEY                          #Using a member


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:           RESOURCES           :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


TYPE CASTING ==>                  #Not allowed


RES                               #Resource, i.e. file or network connection


                                             /=+===============================+=\ 
                                            /  :                               :  \  
                                            )==:            OTHERS             :==(   
                                            \  :_______________________________:  /    
                                             \=+===============================+=/


unset(VAR)                        #Removes a variable

echo STR                          #Prints STR to stdout
