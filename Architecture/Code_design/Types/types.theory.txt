
         
   TYPES  
         



BY LANGUAGE ==>                   #  +-----------------------------+------------+----------+----------+-------------+
                                  #  |           LANGAGE           |  CHECKING  | EXPLICIT |  SAFETY  | DEFINITION  |
                                  #  +-----------------------------+------------+----------+----------+-------------+
                                  #  |            ASM x86          |    none    |  strong  |  unsafe  |  structural |
                                  #  |             PHP             |  dynamic   |   weak   |   safe   |   none      |
                                  #  |           JavaScript        |  dynamic   |   weak   |   safe   |   duck      |
                                  #  |            Python           |  dynamic   |  strong  |   safe   |   duck      |
                                  #  |             Ruby            |  dynamic   |  strong  |   safe   |   duck      |
                                  #  |             Perl            |  dynamic   |   weak   |   safe   |  nominative |
                                  #  |              C              |   static   |   weak   |  unsafe  |  nominative |
                                  #  |             BASIC           |   static   |   weak   |   safe   |  nominative |
                                  #  |             C++             |   static   |  strong  |  unsafe  |  nominative |
                                  #  |              C#             |   static   |  strong  |  middle  |  nominative |
                                  #  |             Java            |   static   |  strong  |   safe   |  nominative |
                                  #  |            FORTRAN          |   static   |  strong  |   safe   |  nominative |
                                  #  |            Pascal           |   static   |  strong  |   safe   |  nominative |
                                  #  +-----------------------------+------------+----------+----------+-------------+


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DEFINITION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPE ==>                          #A type is a name associated with a data structure.
                                  #Type identity is linked to the:
                                  #  - structure:
                                  #     - e.g. two names pointing to same structure are same type
                                  #     - type checking can be:
                                  #        - static, i.e. compile-time ("structural")
                                  #        - dynamic, i.e. run-time ("duck typing"): similar to generic programming "concepts"
                                  #     - structure can be thought as:
                                  #        - the binary representation
                                  #        - the behavior, i.e. associated algorithms/operators/methods, which are often described either:
                                  #           - imperatively, i.e. describing each possible state
                                  #           - decleratively
                                  #        - the value space, i.e. set of possible values
                                  #  - name ("nominative"):
                                  #     - e.g. two names pointing to same structure are different types

TYPE INFERENCE VS MANIFEST TYPING
  ==>                             #Whether type must be explicit during variable definition

ABSTRACT DATA TYPE (ADT) ==>      #Data type without implementation specifics
                                  #E.g. integers vs 32-bit binary numbers

SIMPLE VS COMPOSITE ==>           #Composite|compound|aggregate types are composed of other types, as opposed to simple|primitive types.
                                  #Data structures are composite types associated with specific algorithms/operations.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SAFETY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TYPE SAFETY ==>                   #Robustness of a typing system. Includes type checking, strongly typed, memory safery, type punning, etc.

WEAKLY VS STRONGLY TYPED ==>      #Whether type must be explicit during typecasting

TYPE CHECKING ==>                 #Type checking (type conformity between argument and parameter) can be done:
                                  #  - compile-time ("static")
                                  #     - more robust
                                  #     - more performant: not done runtime, and more optimizations
                                  #     - usually compiled languages
                                  #  - runtime ("dynamic")
                                  #     - more flexible (can create types runtime, simpler metaprogramming)
                                  #     - no compile-time required
                                  #     - usually scripted languages

TYPE PUNNING ==>                  #Low-level typecasting.
                                  #E.g.:
                                  #  - retrieving sign bit of a float
                                  #  - C union typecasting, depending on machine-level byte-wise disposition

MEMORY SAFETY ==>                 #Checking for problems like array overflow or wrong pointer dereferencing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          RESOLUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAME RESOLUTION ==>               #Associating identifier with a value
                                  #Can be according to (in order):
                                  #  - namespaces
                                  #  - scope (name binding)
                                  #  - polymorphism (dispatch)
                                  #Tradeoff compile-time/runtime is between robust|performant and flexibility

NAME BINDING ==>                  #Scope resolution. Can be:
                                  #  - compile-time (static|early)
                                  #  - runtime (dynamic|late|virtual)
                                  #Scope: environment (set of variables) available in a given block
                                  #Depends on which context (current code position) is used:
                                  #  - static|lexical scoping:
                                  #     - uses lexical context (position in source code)
                                  #     - compile-time
                                  #     - e.g. in which block a function was defined
                                  #     - more modular (e.g. easier to isolate scopes)
                                  #  - dynamic scoping:
                                  #     - uses execution|runtime|calling context (position in call stack)
                                  #     - run-time
                                  #     - e.g. from which block a function was fired
                                  #     - more flexible
                                  #Level (what "blocks" means):
                                  #  - expression, block, function, file, module, global
                                  #Parent environment can be inherited:
                                  #  - by value or by reference
                                  #Masking|shadowing:
                                  #  - when current scope override some variables from parent

DISPATCH ==>                      #Polymorphism resolution. Can be:
                                  #  - compile-time (static)
                                  #     - usually using name mangling (type information concatenated to function name)
                                  #  - runtime (dynamic)
                                  #     - usually using virtual table (hash of function pointers, resolved at runtime)
