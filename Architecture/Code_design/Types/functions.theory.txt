
             
   FUNCTIONS  
             


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          INVOCATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ARITY ==>                         #Number of arguments.
                                  #nullary, unary, binary, ternary, etc.

OPERATORS ==>                     #Less verbose function name:
                                  #  - more convenient (syntactic sugar)
                                  #  - but harder to communicate precise purpose|contract
                                  #     - e.g. consumers might introduce different purpose|contract by overloading
                                  #If allow no parenthesis, harder to parse, e.g. need to establish implicit operator priority order


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     FIRST-CLASS FUNCTIONS     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FIRST-CLASS FUNCTION ==>          #Function that can be assigned to a variable
                                  #Usually can also:
                                  #  - be passed as function parameter
                                  #  - be return value

LAMBDA CALCULUS ==>               #Mathematical|programming model where functions:
                                  #  - are anonymous, i.e. not assigned to variables
                                  #  - take single argument
                                  #     - can workaround limitations by:
                                  #        - using complex types, e.g. OBJ
                                  #        - using compositions
                                  #Usually written:
                                  #  - (VAR[ x ...]) -> VAL
                                  #Goal:
                                  #  - easy to reason with first-class functions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:     HIGH-ORDER FUNCTIONS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


HIGH-ORDER FUNCTION ==>           #Also called "functor". Opposite is "first-order function"
                                  #Function that takes another function as argument, e.g. FUNC(FUNC2)->VAL
FUNCTION COMPOSITION ==>          #High-order function that returns another function, e.g. FUNC(FUNC2)->FUNC3

CURRYING ==>                      #When:
                                  #  - (VAR, VAR2)->VAL becomes (VAR)->(VAR2)->VAL
                                  #  - FUNC(VAR, VAR2) becomes FUNC(VAR)(VAR2)
                                  #Uncurrying is inverse

BINDING / PARTIAL APPLICATION ==> #When:
                                  #  - (VAR, VAR2)->VAL becomes (VAR)->VAL, with VAR2 changed to a constant
                                  #  - FUNC(VAR, VAR2) becomes FUNC(VAR)

REDUCE ==>                        #Also called "fold", "aggregate", "accumulate"
                                  #Iterating over a list, with FUNC(MEMO, VAL)->NEW_MEMO
                                  #Can be done from left to right, or inverse

MAP ==>                           #Also called "apply to all"
                                  #Applying|returning FUNC(VAL) to each element in a list

FILTER ==>                        #Excluding elements in a list if FUNC(VAL)->false

LIST COMPREHENSION ==>            #Syntactic sugar over map + filter
                                  #E.g. MAP_FUNC for VAL in LIST if FILTER_FUNC

ZIP ==>                           #Also called "convolution"
                                  #Map function that takes each second-order element of a two-dimensional list, effectively inverting dimensions
                                  #E.g. [[1,2],[3,4]]->[[1,3],[2,4]]
