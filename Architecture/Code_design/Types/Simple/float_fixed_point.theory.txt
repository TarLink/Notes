
                     
   FLOAT_FIXED_POINT  
                     


DIFFERENCE ==>          #Floating point numbers:
                        #  - more precise
                        #  - simpler to use
                        #  - more common
                        #  - usually implemented hardware
                        #Fixed point numbers:
                        #  - are more efficient
                        #  - do not need FPU
                        #  - handle rounding better
                        #  - usually implemented software


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        FLOATING POINT         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


IMPLEMENTATION ==>      #Usually done by a FPU (floating-point unit, ou "math coprocesser"),
                        #often found in CPUs.

FLOATING-POINT NUMBERS  #As opposed to fixed-point numbers, it's the comma position that is stored,
  ==>                   #not the number of digits.

STANDARD IEEE 754 ==>   #Usually used.
                        #Can be any radix, but usually 2 (binary).
                        #Three fields, usually contiguous in memory:
                        #  - 1 sign bit (0 +, 1 -)
                        #  - significand (improperly named mantissa)
                        #     - 2 > number >= 1
                        #     - e.g. 1.1101
                        #  - exponent
                        #     - signed
                        #     - either 2's complement or offset binary
                        #Number = significand + radix ** exponent

PRECISION ==>           #Where:
                        #  - INTGAP is RADIX**SIGNIFICAND
                        #  - FRACGAP is RADIX**-SIGNFICAND
                        #  - SIGNIFICAND is the number of bits of the significand.
                        #    Part of it distributed to INTGAP, to represent the integer part, and part to FRACGAP,
                        #    to represent the fractional part
                        #Precision for integer part:
                        #  - exact precision as long as -INTGAP < NUM < INTGAP
                        #  - maximum INTGAP gap otherwise
                        #Precision for fractional part:
                        #  - maximum FRACGAP gap

DENORMALIZED NUMBERS ==>#Denormalized numbers are numbers with:
                        #  - minimal exponent, i.e. == 0, i.e. it is actually -MIN (e.g. -127 for single-precision)
                        #  - significand != 0
                        #In that case:
                        #  - significand can start with 0.* instead of 1.*
                        #  - this allows adding one bit of precision for very small numbers

ZERO ==>                #Has an exponent and significand == 0
                        #Sign bit allow +0 or -0

INFINI AND NAN ==>      #If exponent is max value, it is:
                        #  - +∞ or -∞ if significand == 0
                        #     - + ∞ == -∞
                        #     - used as limits, i.e. -∞ < all numbers < +∞
                        #  - NaN (NotaNumber) otherwise
                        #     - all numbers != NaN, including itself
                        #     - since several significand are possible, can be used as error code

FORMATS ==>             #  NAME                                   RADIX  EXPONENT  SIGNIFICAND   TOTAL  INTGAP  FRACGAP MAX INT
                        #                                                                               SIZE    OFFSET  SIZE
                        #  Half precision / half / binary16       2      5         10            16     3       4       4
                        #  Single precision / float / binary32    2      8         23            32     6       7       38
                        #  Double precision / double / binary64   2      11        52            64     15      16      307
                        #  Extended precision / long double       2      15        64            80     19      20      4931
                        #  Quadruple precision / quad / binary128 2      15        112           128    33      34      4931
                        #  Octuple precision / binary256          2      19        236           256    71      72      78912


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          FIXED POINT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FIXED-POINT NUMBERS ==> #Fixed point numbers are integers with a scaling factor, which
                        #is type-determinated.
                        #E.g. with scaling factor 1/1000, 0.012 -> 12
                        #Notation:
                        #  - Q[DIGIT1.]DIGIT2:
                        #     - for a given unit (binary, decimal, etc.)
                        #     - DIGIT1 is number of digits before comma
                        #       Can be guessed from number size - DIGIT2
                        #     - DIGIT2 is number of digits after comma
                        #  - fxDIGIT1.DIGIT2:
                        #     - DIGIT1 is number of digits before comma
                        #     - DIGIT2 is total number of digits
                        #Usually use 2's-complement signedness


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BOTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ARBITRARY-PRECISION ==> #When there is no size limit
                        #Also called "bignum"
                        #Also for integers

DECIMAL ==>             #When using a base 10, i.e.:
                        #  - fixed-point: using a scaling factor of 10
                        #  - floating-point:
                        #     - using a radix of 10
                        #     - there are IEEE 754 representations: decimal32, decimal64, decimal128

RATIONAL ==>            #Another way to represent decimal numbers besides float|fixed point.
                        #Represented as two integers, the nominator and the denominator, e.g. 1/7
