
                   
   DATA_STRUCTURES  
                   



DEFINITION ==>                    #Composite type organized towards performing specific operations/algorithms

SUMMARY ==>                       #Relationship between data items:
                                  #  - serial:
                                  #     - order maintained by container:
                                  #        - generic access: list
                                  #        - FIFO access: stack
                                  #        - FILO access: queue
                                  #     - order maintained by items: linked list
                                  #  - parent/child: tree
                                  #     - 1 parent, 2 children: binary tree
                                  #        - optimized for search, can be compared: binary search tree
                                  #  - unrestricted: graph
                                  #  - none: associative

OPERATIONS ==>                    #Most common operations on items:
                                  #  - creating/inserting
                                  #  - reading:
                                  #     - by key: accessing
                                  #     - by value: searching
                                  #  - updating
                                  #  - deleting


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          HIGH-LEVEL           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UNION ==>                         #See types doc

ARRAY ==>                         #Aggregates items of the same|similar type
                                  #Keys can be:
                                  #  - numbers/indices ("single-value")
                                  #     - 0-based, 1-based or n-based
                                  #  - strings ("associative")
                                  #Items type can be composite ("container") or not
                                  #Array size can be:
                                  #  - fixed: "table"
                                  #  - dynamic: "collection"/"dynamic"
                                  #Items size ("width|stride|increment|step") can be:
                                  #  - always the same: faster access
                                  #  - or not: more compact
                                  #Position of an item since beginning of array is "offset"
                                  #Can have:
                                  #  - multiple dimensions|ranks ("matrix")
                                  #     - arranged:
                                  #        - row-major: row > column. better for sequential access
                                  #        - column-major: column > row. Better for array programming
                                  #        - iliffe vector: array of pointers towards other array
                                  #  - or not ("vector")
                                  #Metadata such as origin address, items type, length, dimension, stride
                                  #can be stored alongside in a "dope vector".
                                  #Is more a data type than a data structure:
                                  #  - does not prescribe operations or constraints, but representation
                                  #  - e.g. lists, sets and graphs can all be represented as arrays
                                  #  - some use the word "array" to also describe a data structure where items
                                  #    are fetched random-access, as opposed to "list" which is fetched serially

RECORD ==>                        #Aggregates items ("fields"/"members"/"elements"/"column") of different types
                                  #Also called "tuple", "struct[ure]" or "row"
                                  #Items size can be fixed or dynamic.
                                  #Keys:
                                  #  - fields that serve as identifier
                                  #  - "primary key" are unique keys
                                  #According to size, called:
                                  #  - "singleton", "pair", "triplet", "quad", "quint", etc.
                                  #  - "monuple", "couple", "triple", "quadruple", "quintuple", etc.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SERIAL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIST ==>                          #Array where items are ordered.
                                  #Also called "sequence"
                                  #Operations:
                                  #  - length NUM
                                  #  - get(INDEX)->VAL: O(1)
                                  #  - peek()->VAL: same as get(LIST.length)
                                  #  - head()->VAL: same as get(0)
                                  #  - set(INDEX, VAL): O(1)
                                  #  - push(VAL): O(1)
                                  #  - pop()->VAL: O(1)
                                  #  - unshift(VAL): O(1)
                                  #  - shift(): O(1)

BIT STRING ==>                    #List of bits
                                  #Also called bit array|map|vector
                                  #Goal is often to:
                                  #  - be compact space-wise
                                  #  - be efficient, using CPU bitwise opcodes
                                  #Often use bitwise operations: or, and, xor, not, shifts

STACK/FIFO ==>                    #List with access to most-recent item
                                  #Operations:
                                  #  - length, push, pop[, peek]

QUEUE/FILO ==>                    #List with access to last-recent item
                                  #Operations:
                                  #  - length, push, shift[, head]

LINKED LIST ==>                   #Graph where nodes (except tail) always point to 1 other node
                                  #Operations:
                                  #  - get(INDEX)->VAL: O(n)
                                  #  - add(VAL, INDEX): O(n)
                                  #  - remove(INDEX): O(n)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TREE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TREE ==>                          #Graph with transitive (parent-children) relationships
                                  #No circular reference, i.e. cannot point to an ancestor or to itself
                                  #Operations:
                                  #  - add(VAL, PARENT_VAL)
                                  #  - traverse(FUNC(VAL))

BINARY TREE ==>                   #Tree where each node has two children or none

BINARY SEARCH TREE ==>            #Binary tree where first child < parent < second child
                                  #Operations:
                                  #  - has(VAL)->BOOL: O(log())
                                  #  - add(VAL): O(log(n))


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GRAPH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GRAPH ==>                         #Each node points to 0-n other nodes
                                  #Operations:
                                  #  - add(VAL)
                                  #  - remove(VAL)
                                  #  - find(VAL)
                                  #  - connect(VAL, VAL2)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSOCIATIVE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSOCIATIVE ARRAY ==>             #Unordered array of (KEY, VAL) pairs, with unique keys.
                                  #Also called "map" or "dictionary"
                                  #Operations:
                                  #  - get(KEY)->VAL
                                  #  - set(KEY, VAL)
                                  #  - remove(KEY)
                                  #Complexity depends on implementation, which is often
                                  #either as hash table or as search tree.

BIDIRECTIONAL MAP ==>             #Associative array where values are unique.
                                  #I.e. values can be used as keys as well.
                                  #Also called "hash bag"

MULTIMAP ==>                      #Associate array where values are arrays.
                                  #Can also be thought as associate array where keys are not unique
                                  #Also called "multihash" or "multidict"
