
                   
   DATA_STRUCTURES  
                   



DEFINITION ==>                    #Composite type organized towards performing specific operations/algorithms

SUMMARY ==>                       #Relationship between data items:
                                  #  - serial:
                                  #     - order maintained by container:
                                  #        - generic access: list
                                  #        - FIFO access: stack
                                  #        - FILO access: queue
                                  #     - order maintained by items: linked list
                                  #  - parent/child: tree
                                  #     - 1 parent, 2 children: binary tree
                                  #        - optimized for search, can be compared: binary search tree
                                  #  - unrestricted: graph
                                  #  - none: hash table

OPERATIONS ==>                    #Most common operations on items:
                                  #  - creating/inserting
                                  #  - reading:
                                  #     - by key: accessing
                                  #     - by value: searching
                                  #  - updating
                                  #  - deleting


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SERIAL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LIST ==>                          #Ordered items, allow duplicates
                                  #Members:
                                  #  - length NUM
                                  #  - get(INDEX)->VAL: O(1)
                                  #  - peek()->VAL: same as get(LIST.length)
                                  #  - set(INDEX, VAL): O(1)
                                  #  - push(VAL): O(1)
                                  #  - pop()->VAL: O(1)
                                  #  - unshift(VAL): O(1), O(n) in bad implementations
                                  #  - shift(): O(1), O(n) in bad implementations

STACK/FIFO ==>                    #List with access to most-recent item
                                  #Members:
                                  #  - length, push, pop[, peek]

QUEUE/FILO ==>                    #List with access to last-recent item
                                  #Members:
                                  #  - length, push, shift[, peek]

LINKED LIST ==>                   #Graph where nodes (except tail) always point to 1 other node
                                  #Members:
                                  #  - get(INDEX)->VAL: O(n)
                                  #  - add(VAL, INDEX): O(n)
                                  #  - remove(INDEX): O(n)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TREE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TREE ==>                          #Graph with transitive (parent-children) relationships
                                  #No circular reference, i.e. cannot point to an ancestor or to itself
                                  #Members:
                                  #  - add(VAL, PARENT_VAL)
                                  #  - traverse(FUNC(VAL))

BINARY TREE ==>                   #Tree where each node has two children or none

BINARY SEARCH TREE ==>            #Binary tree where first child < parent < second child
                                  #Members:
                                  #  - has(VAL)->BOOL: O(log())
                                  #  - add(VAL): O(log(n))


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             GRAPH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GRAPH ==>                         #Each node points to 0-n other nodes
                                  #Members:
                                  #  - add(VAL)
                                  #  - remove(VAL)
                                  #  - find(VAL)
                                  #  - connect(VAL, VAL2)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TABLE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


HASH TABLE ==>                    #Unordered items
                                  #Members:
                                  #  - get(KEY)->VAL: O(1)
                                  #  - set(KEY, VAL): O(1)
                                  #  - remove(KEY): O(1)
