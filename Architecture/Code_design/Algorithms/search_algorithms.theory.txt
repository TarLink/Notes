
                     
   SEARCH_ALGORITHMS  
                     



SEARCH TREE ==>                   #Values can be stored either on each node or only on leaves
                                  #Bulk inserts:
                                  #  - if inserting many sorted nodes (without balancing), they will create a graph list
                                  #    as a subtree, increasing depth linearly
                                  #  - "random search tree":
                                  #     - shuffling nodes before insertion instead
                                  #     - can also do a random pick among all possible trees after insertion of each
                                  #       permutation of the nodes
                                  #     - for a binary search tree, in average, depth will be:
                                  #        - mean: 2*log(n)+1
                                  #        - max: 4.3*log(n)

B-TREE ==>                        #
                                  #  - <= U children, >= L children
                                  #     - L = ⌈U/2⌉
                                  #     - U = 2L or 2L-1
                                  #  - no lower limit of children for root
                                  #  - U can be picked to try to make nodes the same size as an I/O block
                                  #  - if U is very high, can:
                                  #     - implement keys as a search tree themselves instead of a simple array
                                  #     - use delta encoding compression on keys (better space, worst time)
                                  #Self-balancing:
                                  #  - if node full|empty, can:
                                  #     - transfer ("rotation") or "merge|split" between siblings
                                  #        - must change parent keys as well
                                  #     - merge|split child to|from parent
                                  #  - must be done recursively from node to root
                                  #  - can be done either:
                                  #     - between operations
                                  #     - during operation, as nodes are being visited

B+-TREE ==>                       #B-tree where:
                                  #  - values are stored only on leaves
                                  #  - each leaf contains a pointer to next leaf (i.e. linked list)
                                  #I.e. like B-tree but with better sequential access accross several leaves.

HEAP ==>                          #Tree satisfying the "heap property":
                                  #  - "max heap": parent node's key >= child's key
                                  #  - "min heap": parent node's key <= child's key
                                  #Useful to search min|max value, e.g. to implement a priority queue.
                                  #As opposed to search tree, is always balanced.
                                  #Operations:
                                  #  - peek_max|min(): O(1)
                                  #  - pull_max|min(): O(log n)
                                  #  - insert(NODE): O(log n)
                                  #  - delete(): arbitrary node
                                  #  - set_key(NODE, KEY): O(log n)
                                  #  - merge(HEAP, HEAP2)->HEAP3: O(n)
                                  #  - size()->NUM
                                  #Complexity depends on implementation (those are the most common).


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         GRAPH THEORY          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


WALK ==>                          #"in-order"/"symmetric"

SPANNING TREE ==>                 #  - "uniform spanning tree":
                                  #     - spanning tree chosen randomly among all the possible spanning trees
                                  #  - "random minimum spanning tree":
                                  #     - minimum spanning tree of a graph with random weights


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ALGORITHMS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PARALLELISM ==>                   #Capacity of an algorithm to be performed in parallel.
                                  #"Parallel random-access machine" (PRAM):
                                  #  - abstraction of CPUs accessing shared memory
                                  #  - capacities:
                                  #     - read can be allowed concurrently or be exclusive
                                  #     - write can be allowed concurrently or be exclusive
                                  #        - if concurrent, write can be:
                                  #           - "common": conflicts are invalid
                                  #           - "arbitrary": random CPU gets priority
                                  #           - "priority": CPU have a specific priority number
                                  #     - called "Exclusive|concurrent read exclusive|concurrent write"
                                  #       ("EREW"/"CREW"/"ERCW"/"CRCW")
                                  #         - "CRCW" also called "concurrent RAM"
                                  #  - simplification:
                                  #     - infinite CPUs and RAM
                                  #  - time complexity:
                                  #     - difference between:
                                  #       - operations that can be run in parallel
                                  #       - operations that cannot
                                  #          - the longest is the "critical path"
                                  #     - p: number of processors
                                  #     - T₁:
                                  #       - "work": amount of time of 1 CPU
                                  #     - Tₚ:
                                  #       - amount of time of p CPUs
                                  #       - "cost" is p*Tₚ
                                  #          - "work law": it is >= T₁ because of cost of critical path
                                  #          - "span law": it is <= T∞
                                  #     - T∞:
                                  #       - amount of time of an infinite number CPUs
                                  #       - i.e. reduced to critical path
                                  #     - Sₚ:
                                  #       - "speedup":
                                  #          - T₁/Tₚ
                                  #          - i.e. number of CPUs actually used, time-wise
                                  #          - expressed in O() notation
                                  #          - "linear"/"scalable": O(n)
                                  #          - "perfect linear": when same as p
                                  #          - can be divided between speedup in latency and in throughput
                                  #       - "efficiency":
                                  #          - speedup/p
                                  #          - i.e. like speedup but as percentage
                                  #       - "parallelism":
                                  #          - T₁/T∞
                                  #          - i.e. inverse of percentage critical path
                                  #       - "slackness":
                                  #          - parallelism/p
                                  #          - i.e. like parallelism but as percentage
                                  #In practice:
                                  #  - only specific hardware allow concurrent memory read|write, e.g. SRAM
                                  #  - must do at very low-level, e.g. using FPGA
