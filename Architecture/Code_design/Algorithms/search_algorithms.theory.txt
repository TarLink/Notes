
                     
   SEARCH_ALGORITHMS  
                     



SEARCH ALGORITHMS ==>             #"Search key":
                                  #  - arbitrary starting vertex of search
                                  #"Completeness":
                                  #  - whether algorithm visits all possible vertices

BRUTE FORCE ==>                   #Trying all combinations|permutations
                                  #Also called "exhaustion".
                                  #Time complexity: O(2ⁿ)

BACKTRACKING ==>                  #General search algorithm where:
                                  #  - if solution unknown, add combination of possible candidate
                                  #  - if solution false, remove combination of possible candidate
                                  #Equivalent to brute force, unless algorithm can guess solution is false without a full combination
                                  #Example:
                                  #  - DFS, when one path is wrong, backtracks to parent

                                  #"Breadth-first search" (BFS):
                                  #  - search one level at a time, i.e.:
                                  #     - start at search key
                                  #     - visit each vertex with distance 1, then 2, etc.
                                  #  - time complexity: O(order + size)
                                  #  - space complexity: O(order)
                                  #  - good when:
                                  #     - depth is big
                                  #     - searched value's height is probably high
                                  #  - bad when:
                                  #     - space complexity is important
                                  #     - branching factor is big
                                  #"Depth-first search" (DFS):
                                  #  - search one path at a time (until cycle or dead-end), i.e.:
                                  #     - start at search key
                                  #     - visit vertex
                                  #     - if:
                                  #        - it has a leftmost non-visited child, repeat with that child
                                  #        - it is not the search key, repeat with parent ("backtrack")
                                  #        - it is the search key, stop
                                  #  - time complexity: O(order + size)
                                  #  - space complexity: O(order)
                                  #  - good when:
                                  #     - branching factor is big
                                  #     - searched value's height is probably low
                                  #  - bad when:
                                  #     - depth is big
                                  #"Iterative deepening search" (IDS) / "iterative deepening DFS" (IDDFS)/"depth-limited search":
                                  #  - combination of BFS and DFS
                                  #  - like DFS but run iteratively, where each iteration has limited/increasing depth

SEARCH TREE ==>                   #Ordered arborescence where left children < parent < right children.
                                  #Optimized for search algorithms
                                  #Most efficient when tree is balanced
                                  #"Binary search tree":
                                  #  - when outdegree = 2
                                  #  - optimized for search ("binary search"):
                                  #     - in-order search starting from root
                                  #  - time complexity:
                                  #     - search:
                                  #        - average:
                                  #           - if balanced: O(log n)
                                  #           - without proper balancing, height will average sqrt(order), and complexity O(sqrt n)
                                  #        - max: O(n)
                                  #           - i.e. search tree degenerated into a line graph
                                  #     - insert|delete:
                                  #        - like search
                                  #        - first search of it, then perform constant-time insert|delete
