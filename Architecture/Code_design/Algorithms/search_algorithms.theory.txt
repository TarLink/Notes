
                     
   SEARCH ALGORITHMS  
                     



SEARCH KEY ==>                    #Arbitrary starting vertex of search

FINGER SEARCH ==>                 #Search where the search key ("finger") is provided.
                                  #Only efficient if search key is likely to be close to searched node.
                                  #Often implemented on linked lists, treaps, etc.

BRUTE FORCE ==>                   #Trying all combinations|permutations
                                  #Also called "exhaustion".
                                  #Time complexity:
                                  #  - average|worst: O(nᵐ)
                                  #  - best: O(1)
                                  #Space complexity: O(1)
                                  #Can sort input:
                                  #  - so than can stop when > the searched value
                                  #  - to put more likely items first

LINEAR|SEQUENTIAL SEARCH ==>      #Brute force when trying to find an item in an array
                                  #Time complexity: O(n)

PRUNING ==>                       #During a search algorithm, skipping a node's descendants when they
                                  #can be guessed (from the parent's value) to be invalid.
                                  #Unless pruning can be done, search algorithms like BFS/DFS are conceptually a linear search.

BREADTH-FIRST SEARCH (BFS) ==>    #Search one level at a time, i.e.:
                                  #  - start at search key
                                  #  - visit each vertex with distance 1, then 2, etc.
                                  #Time complexity: O(order + size)
                                  #Space complexity: O(order)
                                  #Good when:
                                  #  - depth is big
                                  #  - searched value's height is probably high
                                  #Bad when:
                                  #  - space complexity is important
                                  #  - branching factor is big

DEPTH-FIRST SEARCH (DFS) ==>      #Search one path at a time (until cycle or dead-end), i.e.:
                                  #  - start at search key
                                  #  - visit vertex
                                  #  - if:
                                  #     - it has non-visited children, repeat with the leftmost one
                                  #     - it is the search key, stop
                                  #     - otherwise, repeat with parent ("backtrack")
                                  #Also called "backtracking" when applying to more general algorithms
                                  #"Backjumping":
                                  #  - when it can known that a node and its descendants will be invalid because
                                  #    a siblings|cousin is invalid
                                  #Time complexity: O(order + size)
                                  #Space complexity: O(order)
                                  #Good when:
                                  #  - branching factor is big
                                  #  - searched value's height is probably low
                                  #Bad when:
                                  #  - depth is big

DEPTH-LIMITED SEARCH (DLS) ==>    #DFS where we stop when reaching a given depth.
                                  #Compensate some DFS problems but is an incomplete algorithm

ITERATIVE DEEPENING DFS (IDDFS)   #Running DLS iteratively with increasing depth.
 ==>                              #Also called "Iterative deepening search" (IDS)
                                  #Each iteration repeats DLS on nodes already visited:
                                  #  - cons: time complexity
                                  #  - pro: space complexity, i.e. does not need to store nodes to know if already visited
                                  #I.e. has pros of BFS but without space complexity problem.

LEFT-CHILD RIGHT-SIBLING (LCRS)   #Tree obtained from applying the "Knuth transform" on any rooted directed tree.
 TREE ==>                         #Knuth transform:
                                  #  - make each sibling point to next sibling
                                  #  - only keep edge from parent to first child
                                  #Also called "child-sibling representation", "doubly-chained tree", "filial-heir chain"
                                  #Consequences:
                                  #  - pro: result is a binary tree, which is more space efficient than a k-ary tree
                                  #     - i.e. not knowing each vertex's outdegree requires dynamic arrays, which require
                                  #       extra pointers and dope vectors
                                  #  - con: siblings must be accessed in serial access not random access

SEARCH TREE ==>                   #Ordered arborescence where left children < parent < right children.
                                  #Optimized for:
                                  #  - search
                                  #  - serial access in sorted order
                                  #Time complexity:
                                  #  - search: O(m/2*logₘ n) where m is outdegree
                                  #  - insert|delete:
                                  #     - like search
                                  #     - first search of it, then perform constant-time insert|delete
                                  #  - tree must be balanced, otherwise:
                                  #     - height will average ᵐ√order, and complexity O(ᵐ√n)
                                  #     - can even be O(n) if search tree degenerates into a line graph
                                  #Values can be stored either on each node or only on leaves

SELF-BALANCING TREE ==>           #Tree that remains balanced after any set of operations
                                  #Also called "height-balancing tree"
                                  #Often on search trees

BINARY SEARCH TREE ==>            #Search tree where outdegree = 2
                                  #Search is "binary search".
                                  #Time complexity (if balanced): O(log n)

B-TREE ==>                        #Search tree where:
                                  #  - ⌈U/2⌉ <= outdegree <= U ("order")
                                  #  - no lower limit of outdegree for root
                                  #  - node's value is an array or numbers:
                                  #     - acting as separators between each two children
                                  #  - U can be picked to try to make nodes the same size as an I/O block
                                  #Similar to binary search tree:
                                  #  - which can be considered a b-tree of order 2
                                  #The higher the order:
                                  #  - better when nodes are read|write sequentially
                                  #     - i.e. when siblings nodes are usually read|write together
                                  #     - e.g. a file's blocks
                                  #  - instead of O(log₂ n), performs in O(m/2*logₘ n) to find node
                                  #    (which is worst), but then iterating|inserting|deleting siblings is faster
                                  #  - worst time complexity: some space is empty
                                  #  - less frequent balancing needed
                                  #If U is very high, can:
                                  #  - implement keys as a search tree themselves instead of a simple array
                                  #  - use delta encoding compression on keys (better space, worst time)
                                  #Self-balancing:
                                  #  - if node full|empty, can:
                                  #     - transfer ("rotation") or "merge|split" between siblings
                                  #        - must change parent keys as well
                                  #     - merge|split child to|from parent
                                  #  - must be done recursively from node to root
                                  #  - can be done either:
                                  #     - between operations
                                  #     - during operation, as nodes are being visited

B+ TREE ==>                       #B-tree where:
                                  #  - values are stored only on leaves
                                  #  - each leaf contains a pointer to next leaf (i.e. linked list)
                                  #I.e. like B-tree but with better sequential access accross several leaves.

RANDOM SEARCH TREE ==>            #When shuffling nodes before inserting many of them in a search tree.
                                  #Reason:
                                  #  - lower depth in average
                                  #  - e.g. inserting many sorted nodes (without balancing) would otherwise
                                  #    create a graph list as a subtree, increasing depth linearly
                                  #Variants:
                                  #  - do a random pick among all possible trees after insertion of each
                                  #    permutation of the nodes.
                                  #For a binary search tree, in average, depth will be:
                                  #  - mean: 2*log(n)+1
                                  #  - max: 4.3*log(n)

TREAP ==>                         #Tree of [VAL, KEY] pairs:
                                  #  - VALs behave like a search tree, usually binary
                                  #  - KEYs behave like a heap
                                  #  - self-balanced by making it a random search tree (using random KEYs)
                                  #Goal is self-balancing a search tree
                                  #Self-balance:
                                  #  - insertion:
                                  #     - perform binary search tree insertion using VAL
                                  #     - assign a random KEY
                                  #     - perform tree rotations on that node and its parent until KEY satisfies heap property
                                  #  - deletion:
                                  #     - perform tree rotations on that node and its right child until that node has no children
                                  #     - delete that node
                                  #  - split:
                                  #     - insert a node with VAL where split occurs and KEY being highest so that node becomes
                                  #       root
                                  #     - then remove that node, splitting tree
                                  #  - merge:
                                  #     - if max VAL of first tree if less than min VAL of second tree
                                  #     - then insert a node with VAL2 in-between, and KEY being lowest so that rotations
                                  #       performs the merge
                                  #     - then remove that node

TRIE ==>                          #Search tree where:
                                  #  - keys are arrays
                                  #  - nodes store individual keys' items
                                  #     - i.e. root-to-terminal-node path contains full key
                                  #     - root node has no key item
                                  #Also called "prefix tree"
                                  #Goal: similar as other search trees but optimized for operations of arrays, including:
                                  #  - finding nodes by key prefix|suffix
                                  #Keys are arrays, including:
                                  #  - strings
                                  #  - bits ("bitwise trie")
                                  #Terminal node:
                                  #  - every leaf is a terminal node but internal nodes can be too
                                  #  - can be represented either:
                                  #     - with a flag on the node
                                  #        - sometimes called "white" (terminal) / "black" (non-terminal)
                                  #     - with an empty terminal node child
                                  #Edges from parent to children can be represented in several ways:
                                  #  - dynamic array:
                                  #     - O(n) lookup time
                                  #  - LCRS tree:
                                  #     - O(n) lookup time but more space efficient
                                  #  - static array:
                                  #     - with every possible combination, filled with null pointers when no child
                                  #     - O(1) lookup time but O(m) space requirement, where m is number of combinations
                                  #     - "alphabet reduction":
                                  #        - reducing number of combinations, e.g. nibble-wise (16) instead of byte-wise (256)
                                  #        - con: increases tree height
                                  #  - binary search tree:
                                  #     - called (although confusingly) "ternary search tree"

HEAP ==>                          #Tree satisfying the "heap property":
                                  #  - "max heap": parent node's key >= child's key
                                  #  - "min heap": parent node's key <= child's key
                                  #Goal:
                                  #  - performing min|max
                                  #  - e.g. implementing a priority queue
                                  #Operations:
                                  #  - peek_max|min(): O(1)
                                  #  - pull_max|min(): O(log n)
                                  #  - insert(NODE): O(log n)
                                  #  - delete(): arbitrary node
                                  #  - set_key(NODE, KEY): O(log n)
                                  #  - merge(HEAP, HEAP2)->HEAP3: O(n)
                                  #  - size()->NUM
                                  #Complexity depends on implementation (those are the most common).

RANGE QUERY ==>                   #Performing an operation over a subset of an array
                                  #Operation can be:
                                  #  - minimum|maximum ("range minimum|maximum query" (RMQ))
                                  #  - mode ("range mode query")
                                  #  - median

CARTESIAN TREE ==>                #Heap built from a sequence of keys, that can be reversed to that sequence of keys with
                                  #an in-order traversal.
                                  #Construction:
                                  #  - time complexity: O(n)
                                  #  - from "all nearest smaller values" algorithm:
                                  #     - going in both directions, i.e. building left|right neighbors
                                  #     - if has no left|right neighbors, is root
                                  #     - if higher neighbor is left|right, put as right|left child of it
                                  #Goal is efficient range minimum|maximum query:
                                  #  - minimum|maximum of any subset of the original sequence of keys
                                  #    is the lowest common ancestor to the first and last keys of the subset
                                  #  - time complexity: O(1)
                                  #  - space complexity: O(n) (storing the tree itself)

ALL NEAREST SMALLER VALUES ==>    #Algorithm:
                                  #  - in a sequence of values
                                  #  - for each value:
                                  #     - lookup all the previous values
                                  #        - sometimes done in both directions
                                  #     - find the indices of the closest lower|higher value
                                  #Example: [0, 8, 4, 9] -> [null, 0, 0, 2]
                                  #Can be efficiently implemented as a parallel algorithm.
