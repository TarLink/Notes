
                     
   SEARCH_ALGORITHMS  
                     



SEARCH ALGORITHMS ==>             #"Search key":
                                  #  - arbitrary starting vertex of search
                                  #"Completeness":
                                  #  - whether algorithm visits all possible vertices

BRUTE FORCE ==>                   #Trying all combinations|permutations
                                  #Also called "exhaustion".
                                  #Time complexity:
                                  #  - average|worst: O(mⁿ)
                                  #  - best: O(1)
                                  #Space complexity: O(1)
                                  #"Linear|sequential search":
                                  #  - when trying to find an item in an array
                                  #  - time complexity: O(n)

BACKTRACKING ==>                  #General search algorithm where:
                                  #  - if solution unknown, add combination of possible candidate
                                  #  - if solution false, remove combination of possible candidate
                                  #Equivalent to brute force, unless algorithm can guess solution is false without a full combination
                                  #Example:
                                  #  - DFS, when one path is wrong, backtracks to parent

BREADTH-FIRST SEARCH (BFS) ==>    #Search one level at a time, i.e.:
                                  #  - start at search key
                                  #  - visit each vertex with distance 1, then 2, etc.
                                  #Time complexity: O(order + size)
                                  #Space complexity: O(order)
                                  #Good when:
                                  #  - depth is big
                                  #  - searched value's height is probably high
                                  #Bad when:
                                  #  - space complexity is important
                                  #  - branching factor is big

DEPTH-FIRST SEARCH (DFS) ==>      #Search one path at a time (until cycle or dead-end), i.e.:
                                  #  - start at search key
                                  #  - visit vertex
                                  #  - if:
                                  #     - it has a leftmost non-visited child, repeat with that child
                                  #     - it is not the search key, repeat with parent ("backtrack")
                                  #     - it is the search key, stop
                                  #Time complexity: O(order + size)
                                  #Space complexity: O(order)
                                  #Good when:
                                  #  - branching factor is big
                                  #  - searched value's height is probably low
                                  #Bad when:
                                  #  - depth is big

DEPTH-LIMITED SEARCH ==>          #Combination of BFS and DFS
                                  #Also called "Iterative deepening search" (IDS) / "iterative deepening DFS" (IDDFS)
                                  #Like DFS but:
                                  #  - run iteratively
                                  #  - where each iteration has limited/increasing depth

SEARCH TREE ==>                   #Ordered arborescence where left children < parent < right children.
                                  #Optimized for search algorithms
                                  #Most efficient when tree is balanced

BINARY SEARCH TREE ==>            #Search tree where outdegree = 2
                                  #Optimized for search ("binary search"):
                                  #  - in-order search starting from root
                                  #Time complexity:
                                  #  - search:
                                  #     - average:
                                  #        - if balanced: O(log n)
                                  #        - without proper balancing, height will average sqrt(order), and complexity O(sqrt n)
                                  #     - max: O(n)
                                  #        - i.e. search tree degenerated into a line graph
                                  #  - insert|delete:
                                  #     - like search
                                  #     - first search of it, then perform constant-time insert|delete
