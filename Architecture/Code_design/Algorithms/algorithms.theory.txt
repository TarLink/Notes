
              
   ALGORITHMS  
              



Sorting:
 - distribution sorts:
    - bucket|bin sort:
       - how:
          - "scatter": assign each element|value to a bucket|bin|category
             - e.g. first bucket for values < 100, second bucket for values 100 < x < 200, etc.
          - sort buckets with each other
          - sort each bucket's values using any sort algorithm
          - "gather": concatenate all bucket's elements
       - more efficient if buckets ranges are evenly distributed
       - generalization of:
          - pigeonhole sort:
             - like bucket sort except values inside each bucket are sort-equivalent,
               i.e. no need to sort inside each bucket
                - e.g. first bucket has {type: 1, name: 'd'}, {type: 1, name: 'b'},
                  second bucket {type: 2, name: 'a'}, and we sort by 'type'
             - good when number of possible buckets and number of elements are almost the same
          - counting sort / histogram sort:
             - like pigeonhole sort, except element's value is used as bucket key
             - often used for integer sorting, i.e. each bucket represents an integer
                - e.g. if elements are [1, 2, 1], then first bucket has [1, 1], second bucket [2]
          - radix sort:
             - like counting sort, except it is done in several passes:
                - each pass:
                   - uses as input the output of previous pass
                   - uses a single symbol of a specific position
                - symbols are usually numbers or letters
             - variants:
                - LSD (least significant digit) / bottom-up:
                   - process symbols from right-to-left
                   - for any particular position, "has no symbol" comes before "has symbol"
                   - i.e. would sort 52, 5, 1, 7 to 1, 52, 5, 7 then 1, 5, 7, 52
                - MSD (most significant digit) / top-down / postman's sort:
                   - process symbols from left-to-right
                   - for any particular position, "has no symbol" comes before "has symbol"
                   - i.e. would sort 52, 5, 1, 7 to 1, 52, 5, 7 then 1, 5, 52, 7
                   - can be recursive, i.e. create sub-passes for each pass instead of reusing
                     full input|output for each pass
                   - only good for numbers if fixed-length. Usually used with strings.
                - american flag sort:
                   - like recursive MSD, except:
                      - calculate size of each bucket before moving elements to their buckets
                      - i.e. can be done in-place
                   - more efficient when bucket size is power of 2, because can implement with bitwise logic
             - i.e. it is a generalization of counting sort for abitrary length numbers
  - comparison-based:
     - insertion sorts:
        - insertion sort:
           - for over each elementA:
              - find first elementB of current output bigger than elementA
              - insert elementA into current output at that position
           - efficient when list to sort is small
           - simple to implement
        - shell sort:
           - use GAPs:
              - GAP number from 1 to n/2
              - divide input into n/GAP subarrays, each containing elements with same position % GAP
                 - e.g. if GAP is 3, [d, y, q, a, z] -> [d, a], [y, z], [q]
              - which series of GAP is chosen is implementation-specific, but must be decreasing and end with 1
                 - often used: n/2, n/4, ..., 1
           - for each GAP:
              - for each subarray:
                 - apply insertion sort
     - selection sorts:
        - selection sort:
           - how:
              - find min item of the list
              - put min item to beginning, in-place
              - start again, but without min item
           - efficient when list to sort is small, but usually insertion sorts are better
     - exchange sorts:
        - bubble sort / sinking sort:
           - how:
              - for each element, swap with next element if next element is smaller
              - repeat whole iteration until sorted
           - efficient only for lists that are already mostly sorted, in which case insertion sort is often better.
             I.e. should be avoided
        - bogosort / permutation sort / stupid sort / slowsort / shotgun sort / monkey sort:
           - randomly shuffles whole array until shuffle output happens to be also sorted
              - or alternatively, try every permutation
           - only meant as a joke, or example of a bad sorting algorithm
     - merge sorts:
        - merge sort:
           - conceptually the inverse of a bucket sort
           - how:
              - divide array into groups of 2 elements
              - sort each group's elements using any sorting algorithm
              - merge each group with next group, by comparing their elements in order, to produce a sorted group
                 - if last group is partial, still merge it
                 - if there is an odd number of groups, last group is left as is
              - reiterate the merge with the newly formed groups
          - can be implemented either top-down or bottom-up, with similar efficiency
          - is easy to be run in parallel

Shuffling:
  - sort shuffle:
     - assign a random number to each element
     - sort list using that random number as key
  - knuth shuffle:
     - for each element, insert into current output using random position 0-n, where n is current output length
