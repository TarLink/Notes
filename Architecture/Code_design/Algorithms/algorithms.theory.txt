
              
   ALGORITHMS  
              


Classification:
  - comparison-based:
     - comparison-based sort algorithm use a FUNC(VAL, VAL2)-> <= or >=
     - distribution sorts are not comparison-based. All others are.

Sorting:
 - distribution sorts:
    - bucket|bin sort:
       - steps:
          - "scatter": assign each element|value to a bucket|bin|category
             - e.g. first bucket for values < 100, second bucket for values 100 < x < 200, etc.
          - sort buckets with each other
          - sort each bucket's values using any sort algorithm
          - "gather": concatenate all bucket's elements
       - more efficient if buckets ranges are evenly distributed
       - variants:
          - pigeonhole sort:
             - like bucket sort except values inside each bucket are sort-equivalent,
               i.e. no need to sort inside each bucket
                - e.g. first bucket has {type: 1, name: 'd'}, {type: 1, name: 'b'},
                  second bucket {type: 2, name: 'a'}, and we sort by 'type'
             - good when number of possible buckets and number of elements are almost the same
    - counting sort / histogram sort:
       - element's keys must be integers
          - elements themselves might be integers and used as keys as well
       - steps:
          - sums how many times each integer is present
          - calculate offsets in output array using those sums
          - move elements using those offsets
       - example:
          - [50, 50, 70, 20, 10]
             -> {'10': 1, '20': 1, '50': 2, '70': 1} (sums)
             -> {'10': 0, '20': 1, '50': 2, '70': 4} (offsets)
             -> [50:2, 50:3, 70:4, 20:1, 10:0]
             -> [10, 20, 50, 50, 70]
    - radix sort:
       - similar to counting sort, except it is done in several passes:
          - each pass:
             - uses as input the output of previous pass
             - uses a single symbol of a specific position
          - symbols are usually numbers or letters
       - variants:
          - LSD (least significant digit) / bottom-up:
             - process symbols from right-to-left
             - for any particular position, "has no symbol" comes before "has symbol"
             - i.e. would sort 56, 5, 1, 7 to 1, 5, 56, 7 then 1, 5, 7, 56
          - MSD (most significant digit) / top-down / postman's sort:
             - process symbols from left-to-right
             - for any particular position, "has no symbol" comes before "has symbol"
             - i.e. would sort 56, 5, 1, 7 to 1, 56, 5, 7 then 1, 5, 56, 7
             - can be recursive, i.e. create sub-passes for each pass instead of reusing
               full input|output for each pass
             - only good for numbers if fixed-length. Usually used with strings.
          - american flag sort:
             - like recursive MSD, except:
                - calculate size of each bucket before moving elements to their buckets
                - i.e. can be done in-place
             - more efficient when bucket size is power of 2, because can implement with bitwise logic
       - i.e. it is a generalization of counting sort for abitrary length numbers
     - bead sort / gravity sort:
       - element's keys must be integers
          - elements themselves might be integers and used as keys as well
       - similar to using an abacus and mapping beads fall
       - steps:
          - put numbers in a matrix: each number n is a row, filled with n 1s
          - remove all vertical gaps (i.e. make 1s "fall")
          - each row will represent a sorted number
       - example:
          - [2, 4, 1, 3, 3]
             -> [1, 1, 0, 0] (2)
                [1, 1, 1, 1] (4)
                [1, 0, 0, 0] (1)
                [1, 1, 1, 0] (3)
                [1, 1, 1, 0] (3)
             -> [1, 0, 0, 0] (1)
                [1, 1, 0, 0] (2)
                [1, 1, 1, 0] (3)
                [1, 1, 1, 0] (3)
                [1, 1, 1, 1] (4)
       - another way to look at it:
          - create array with length === max number
          - for each number n, increment n first items of array
          - for each array item, replace by difference with next item
          - for each array item m, replace by m times its 1-based index
       - example:
          - [2, 4, 1, 3, 3]
            -> [0, 0, 0, 0]
            -> [1, 1, 0, 0] (2)
            -> [2, 2, 1, 1] (4)
            -> [3, 2, 1, 1] (1)
            -> [4, 3, 2, 1] (3)
            -> [5, 4, 3, 1] (3)
            -> [1, 1, 2, 1] (difference)
            -> [1, 2, 3, 3, 4] (indexes)
  - insertion sorts:
     - insertion sort:
        - for over each elementA:
           - find first elementB of current output bigger than elementA
           - insert elementA into current output at that position
        - efficient when list to sort is small
        - simple to implement
     - shell sort:
        - use GAPs:
           - GAP number from 1 to n/2
           - divide input into GAP subarrays, each containing elements with same position % GAP
              - e.g. if GAP is 3, [d, y, q, a, z] -> [d, a], [y, z], [q]
           - which series of GAP is chosen is implementation-specific, but must be decreasing and end with 1
              - often used: n/2, n/4, ..., 1
        - for each GAP:
           - for each subarray:
              - apply insertion sort
  - selection sorts:
     - selection sort:
        - how:
           - find min item of the list
           - put min item to beginning, swapping in-place
           - start again, but without min item
        - efficient when list to sort is small, but usually insertion sorts are better
  - exchange sorts:
     - bubble sort / sinking sort:
        - how:
           - for each element, swap with next element if next element is smaller
           - repeat whole iteration until sorted
        - efficient only for lists that are already mostly sorted, in which case insertion sort is often better.
          I.e. should be avoided
     - bogosort / permutation sort / stupid sort / slowsort / shotgun sort / monkey sort:
        - randomly shuffles whole array until shuffle output happens to be also sorted
           - or alternatively, try every permutation
        - only meant as a joke, or example of a bad sorting algorithm
  - merge sorts:
     - merge sort:
        - conceptually the inverse of a bucket sort
        - how:
           - divide array into groups of 2 elements
           - sort each group's elements using any sorting algorithm
           - merge each group with next group, by comparing their elements in order, to produce a sorted group
              - if last group is partial, still merge it
              - if there is an odd number of groups, last group is left as is
           - reiterate the merge with the newly formed groups
       - can be implemented either top-down or bottom-up, with similar efficiency
       - is easy to be run in parallel

Shuffling:
  - sort shuffle:
     - assign a random number to each element
     - sort list using that random number as key
  - knuth shuffle / fisher-yates shuffle:
     - variations:
        - (Fisher-Yates) extract random input element, append to output, then repeat
        - (Durstenfeld) extract random input element, append to output, then put last input element in its place, then repeat
        - ("inside-out") extract random input element, insert to output at random position, then repeat
        - swap random input element with another random input element among the following ones or itself, then repeat
        - (Sattolo cycle) swap random input element with another random input element among the following ones excluding itself, then repeat
           - as opposed to others, will never shuffle to same result

Programming language building blocks:
  - operations:
     - can be: operators (e.g. +), function, compiler directives, etc.
  - operands:
     - values used by operations
     - can be: literal values, variables, constants, etc.
     - called "parameters" in operation definition, "arguments" during operation evaluation
  - expression:
     - operation + its operands
     - evaluation/call: producing a result
        - result can be void|null
        - can produce side effects
     - complex expression: when some operands are expressions themselves
        - order: in which order sub-expressions are evaluated
           - often shown with () [] {}, with upper bars "vinculums" (e.g. in square roots) or middle bars (e.g. in fractions)
        - associativity:
           - when an operation uses itself in a sub-expression, and it does not matter whether operands
             are in the upper or lower operation
           - e.g. FUNC(x, FUNC(y, z)) == FUNC(y, FUNC(x, z))
        - distributivity:
           - when FUNC(..., FUNC2(y, z)) === FUNC2(FUNC(..., y), FUNC(..., z)) (left-distributivity)
             or FUNC(FUNC2(y, z), ...) === FUNC2(FUNC(y, ...), FUNC(z, ...)) (right-distributivity)
           - if FUNC is commutative, left-distributivity and right-distributity are same
     - arity:
        - how many operands
        - can be nullary, unary, binary, ternary, etc.
     - positional vs named: whether operands key is integer (position) or string (name)
        - commutativity: when operand position does not matter
        - notations:
           - infix: OPERANDS OPERATOR OPERANDS
              - more natural
              - harder to parse
              - even if fixed number of arguments, requires parenthesis, etc. to determine order
           - prefix / polish: OPERATOR OPERANDS
           - postfix / reverse polish: OPERANDS OPERATOR
     - statements:
        - expressions resulting in side-effects
           - are "executed" instead of evaluated
        - usually supported by programming languages, using keywords
        - side effects can relate to:
           - control flow: function calls, if|while|etc., goto, exceptions
           - memory: assignments
        - can be simple or compound (e.g. with braces or identations)

Data types:
  - abstract data type (ADT):
     - data type without implementation specifics
     - e.g. integers vs 32-bit binary numbers
