
               
   SEARCH_TREE  
               



SEARCH TREE ==>                   #Ordered arborescence where left children < parent < right children.
                                  #Optimized for:
                                  #  - search
                                  #  - serial access in sorted order
                                  #Time complexity:
                                  #  - search: O(m/2*logₘ n) where m is outdegree
                                  #  - insert|delete:
                                  #     - like search
                                  #     - first search of it, then perform constant-time insert|delete
                                  #  - tree must be balanced, otherwise:
                                  #     - height will average ᵐ√order, and complexity O(ᵐ√n)
                                  #     - can even be O(n) if search tree degenerates into a line graph
                                  #Values can be stored either on each node or only on leaves
                                  #Pros:
                                  #  - O(log n) operations (search|insert|delete)
                                  #  - automatically ordered, good for iteration
                                  #  - persistent data structure
                                  #Cons:
                                  #  - fairly "average" data structure: space|time complexity is neither best nor wosrt
                                  #  - less time efficient if small number of items

BINARY SEARCH TREE (BST) ==>      #Search tree where outdegree = 2
                                  #Search is "binary search".
                                  #Time complexity (if balanced): O(log n)

LEFT-CHILD RIGHT-SIBLING (LCRS)   #Tree obtained from applying the "Knuth transform" on any rooted directed tree.
 TREE ==>                         #Knuth transform:
                                  #  - make each sibling point to next sibling
                                  #  - only keep edge from parent to first child
                                  #Also called "child-sibling representation", "doubly-chained tree", "filial-heir chain"
                                  #Consequences:
                                  #  - pro: result is a binary tree, which is more space efficient than a k-ary tree
                                  #     - i.e. not knowing each vertex's outdegree requires dynamic arrays, which require
                                  #       extra pointers and dope vectors
                                  #  - con: siblings must be accessed in serial access not random access


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        SELF-BALANCING         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SELF-BALANCING TREE ==>           #Tree that remains balanced after any set of operations
                                  #Also called "height-balancing tree"
                                  #Often on search trees

B-TREE ==>                        #Search tree where:
                                  #  - ⌈U/2⌉ <= outdegree <= U ("order")
                                  #  - no lower limit of outdegree for root
                                  #  - node's value is an array or numbers:
                                  #     - acting as separators between each two children
                                  #  - U can be picked to try to make nodes the same size as an I/O block
                                  #Similar to binary search tree:
                                  #  - which can be considered a b-tree of order 2
                                  #The higher the order:
                                  #  - better when nodes are read|write sequentially
                                  #     - i.e. when siblings nodes are usually read|write together
                                  #     - e.g. a file's blocks
                                  #  - instead of O(log₂ n), performs in O(m/2*logₘ n) to find node
                                  #    (which is worst), but then iterating|inserting|deleting siblings is faster
                                  #  - worst time complexity: some space is empty
                                  #  - less frequent balancing needed
                                  #If U is very high, can:
                                  #  - implement keys as a search tree themselves instead of a simple array
                                  #  - use delta encoding compression on keys (better space, worst time)
                                  #Self-balancing:
                                  #  - if node full|empty, can:
                                  #     - transfer ("rotation") or "merge|split" between siblings
                                  #        - must change parent keys as well
                                  #     - merge|split child to|from parent
                                  #  - must be done recursively from node to root
                                  #  - can be done either:
                                  #     - between operations
                                  #     - during operation, as nodes are being visited

B+ TREE ==>                       #B-tree where:
                                  #  - values are stored only on leaves
                                  #  - each leaf contains a pointer to next leaf (i.e. linked list)
                                  #I.e. like B-tree but with better sequential access accross several leaves.

RANDOM SEARCH TREE ==>            #When shuffling nodes before inserting many of them in a search tree.
                                  #Reason:
                                  #  - lower depth in average
                                  #  - e.g. inserting many sorted nodes (without balancing) would otherwise
                                  #    create a graph list as a subtree, increasing depth linearly
                                  #Variants:
                                  #  - do a random pick among all possible trees after insertion of each
                                  #    permutation of the nodes.
                                  #For a binary search tree, in average, depth will be:
                                  #  - mean: 2*log(n)+1
                                  #  - max: 4.3*log(n)

TREAP ==>                         #Tree of [VAL, KEY] pairs:
                                  #  - VALs behave like a search tree, usually binary
                                  #  - KEYs behave like a heap
                                  #  - self-balanced by making it a random search tree (using random KEYs)
                                  #Goal is self-balancing a search tree
                                  #Self-balance:
                                  #  - insertion:
                                  #     - perform binary search tree insertion using VAL
                                  #     - assign a random KEY
                                  #     - perform tree rotations on that node and its parent until KEY satisfies heap property
                                  #  - deletion:
                                  #     - perform tree rotations on that node and its right child until that node has no children
                                  #     - delete that node
                                  #  - split:
                                  #     - insert a node with VAL where split occurs and KEY being highest so that node becomes
                                  #       root
                                  #     - then remove that node, splitting tree
                                  #  - merge:
                                  #     - if max VAL of first tree if less than min VAL of second tree
                                  #     - then insert a node with VAL2 in-between, and KEY being lowest so that rotations
                                  #       performs the merge
                                  #     - then remove that node


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TRIE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRIE ==>                          #Search tree where:
                                  #  - keys are arrays
                                  #  - nodes store individual keys' items
                                  #     - i.e. root-to-terminal-node path contains full key
                                  #     - root node has no key item
                                  #Also called "prefix tree"
                                  #Goal:
                                  #  - similar as other search trees but optimized for operations of arrays
                                  #  - only efficient when keys share common prefixes
                                  #Time complexity:
                                  #  - min|average|max O(m) where m is min|average|max array length
                                  #  - but each node step should be fast as it involves a single key item
                                  #     - as opposed e.g. to binary search tree which compares whole array at
                                  #       each step, i.e. complexity is actually O(n*log(n)) on arrays
                                  #Keys are arrays, including:
                                  #  - strings
                                  #  - bits ("bitwise trie")
                                  #Terminal node:
                                  #  - every leaf is a terminal node but internal nodes can be too
                                  #  - can be represented either:
                                  #     - with a flag on the node
                                  #        - sometimes called "white" (terminal) / "black" (non-terminal)
                                  #     - with an empty terminal node child
                                  #Edges from parent to children can be represented in several ways:
                                  #  - dynamic array ("adaptive"):
                                  #     - O(n) lookup time
                                  #  - LCRS tree:
                                  #     - O(n) lookup time but more space efficient
                                  #  - binary search tree:
                                  #     - called (although confusingly) "ternary search tree"
                                  #     - O(log n) lookup time
                                  #     - often represented as a tree with outdegree 3 where:
                                  #        - left and right children are siblings (i.e. the binary search subtree)
                                  #        - middle child is actual child (i.e. the trie supertree)
                                  #  - static array:
                                  #     - with every possible combination, filled with null pointers when no child
                                  #     - O(1) lookup time but O(m) space requirement, where m is number of combinations
                                  #     - "alphabet reduction":
                                  #        - reducing number of combinations, e.g. nibble-wise (16) instead of byte-wise (256)
                                  #        - con: increases tree height
                                  #     - "array mapped trie": when using "array bit mapping" (see its doc)
                                  #        - "concurrent trie"/"ctrie":
                                  #           - using a 32 bits map and a compare-and-swap atomic CPU instruction, so that
                                  #             trie can be thread-safe and lock-free
                                  #Operations:
                                  #  - finding nodes by key prefix

RADIX TREE ==>                    #Trie where nodes can store several key items, as opposed to just one.
                                  #Goal:
                                  #  - more space efficient
                                  #  - more time efficient on reads
                                  #Cons:
                                  #  - less space efficient if high density
                                  #  - less time efficient on writes
                                  #Operations:
                                  #  - insertion: during initial traversal, if there is a partially matching child, split it
                                  #  - deletion: after deletion, merge single-child nodes to their child

DAFSA ==>                         #DAFSA (see state doc) can used to represent tries in a more space efficient way.
                                  #As opposed to normal representation:
                                  #  - simple cycles (but not directed ones) are allowed
                                  #  - i.e. nodes can share multiple parents as long as it does not introduce directed cycles
                                  #  - i.e. space efficient when many common suffixes

BURST TRIE ==>                    #Trie ("access trie") where leaves ("burst") are another data structure ("burst containers").
                                  #Goal:
                                  #  - using time|space efficiency of trie where prefixes are shared
                                  #  - while using time|space efficiency of other data structures where suffixes are unique
                                  #Common burst containers: list, search tree.
                                  #Different strategies on when burst should start:
                                  #  - max size of burst containers
                                  #  - max average number of operations on burst container
