
                  
   TURING_MACHINE  
                  



TURING MACHINE ==>                #Theorical simplistic machine representing anything a computer (or any automated computation) can do.
                                  #Input:
                                  #  - possible values ("symbols") are a finite set
                                  #  - input is array of symbols:
                                  #     - can be of infinite size, but only null ("blank" symbol) can appear infinitely
                                  #State:
                                  #  - possible states are a finite set, which includes:
                                  #     - start state
                                  #     - end states (halt), which can include any not enumerated ones
                                  #  - current STATE is among possible ones
                                  #  - must include current position HEAD:
                                  #     - inside array of values, i.e. which one is current value
                                  #Instruction:
                                  #  - FUNC(STATE, INPUT)->(WRITE_SYMBOL, MOVE_OFFSET, NEW_STATE)
                                  #     - WRITE_SYMBOL: write some value back
                                  #     - MOVE_OFFSET: adds -1|0|1 to HEAD
                                  #     - in 4-tuple model can either do WRITE or MOVE, in 5-tuple can do both
                                  #     - often represented as table of tuples, e.g. (STATE, INPUT, WRITE_SYMBOL, MOVE_OFFSET, NEW_STATE)
                                  #Execution:
                                  #  - reads current value as current INPUT
                                  #  - using table of instructions:
                                  #     - performs INSTRUCTION
                                  #     - changes to NEW_STATE

UNIVERSAL TURING MACHINE ==>      #Turing machine which gets its table of instructions as input:
                                  #  - e.g. code is data ("stored program computer")
                                  #  - architecture where code can be treated as data, and data can be treated as code:
                                  #     - Von Neumann architecture: same memory for both
                                  #     - Harvard architecture: different memory

ALTERNATE TURING MACHINES ==>     #"Turing equivalent", i.e. not more powerful than normal Turing machine, i.e.:
                                  #  - cannot express more but can:
                                  #     - have more expressive instructions
                                  #     - use less memory
                                  #     - use less instructions
                                  #  - could be refactored as a normal Turing maching
