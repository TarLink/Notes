
                    
   TURING_MACHINE   
                    



TURING MACHINE ==>                #Theorical simplistic machine representing anything a computer (or any automated computation) can do.
                                  #Input:
                                  #  - array of values ("symbols"):
                                  #     - of infinite size, but from a finite set
                                  #     - null ("blank"): only symbol that can appear infinitely
                                  #Instructions:
                                  #  - FUNC(STATE, INPUT)->(INSTRUCTION, NEW_STATE)
                                  #     - for each STATE + INPUT pairs
                                  #     - INSTRUCTION is:
                                  #        - WRITE: write some value back
                                  #        - MOVE: HEAD += -1|0|1
                                  #     - 5-tuple model: WRITE + MOVE, 4-tuple model: either WRITE or MOVE
                                  #     - often represented as table of tuples, e.g. (STATE, INPUT, WRITE_VALUE, MOVE, NEW_STATE)
                                  #State:
                                  #  - current STATE, from a finite set, including:
                                  #     - start state 
                                  #     - end states (halt)
                                  #        - including any STATE not present in table of instructions
                                  #  - current position HEAD:
                                  #     - inside array of values, i.e. which one is current value
                                  #Execution:
                                  #  - reads current value as current INPUT
                                  #  - using table of instructions:
                                  #     - performs INSTRUCTION
                                  #     - changes to NEW_STATE

UNIVERSAL TURING MACHINE ==>      #Turing machine which gets its table of instructions as input:
                                  #  - e.g. code is data ("stored program computer")
                                  #  - architecture where code can be treated as data, and data can be treated as code:
                                  #     - Von Neumann architecture: same memory for both
                                  #     - Harvard architecture: different memory

ALTERNATE TURING MACHINES ==>     #"Turing equivalent", i.e. not more powerful than normal Turing machine, i.e.:
                                  #  - cannot express more but can:
                                  #     - have more expressive instructions
                                  #     - use less memory
                                  #     - use less instructions
                                  #  - could be refactored as a normal Turing maching
